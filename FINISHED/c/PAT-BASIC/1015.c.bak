#include <stdio.h>
#define MAX 60000
struct candidate
   {
   	long long number;
   	int D;
   	int C;
      int sum;
   };
void sp( struct candidate *can, int *lv, int count){
	int i, j, index;
	//sort
	int temp;
	for(i = 0; i < count; i++){
		index = i;
		for(j = i; j < count; j++)
		 if((can+lv[j])->sum > (can+lv[index])->sum || (can+lv[j])->sum == (can+lv[index])->sum && (can+lv[j])->D > (can+lv[index])->D || (can+lv[j])->sum == (can+lv[index])->sum && (can+lv[j])->D ==(can+lv[index])->D &&(can+lv[j])->number < (can+lv[index])->number)
		   	index = j;

		temp =   lv[index];
		lv[index] = lv[i];
		lv[i] = temp;
		}

	//output
		for(i = 0; i < count; i++)
		printf("%lld %d %d\n",can[lv[i]].number, can[lv[i]].D, can[lv[i]].C);
	}
int main(){
   struct candidate can[MAX] ,*c;
   int  lv1[MAX], lv2[MAX], lv3[MAX], lv4[MAX],*lv11, *lv22, *lv33, *lv44;
   lv11 = lv1; lv22 = lv2; lv33 = lv3; lv44 = lv4; c = can;
   int n, l, h, i, count = 0, count1, count2, count3, count4;
   count1 = count2 = count3 = count4 = 0;
   scanf("%d%d%d",&n, &l, &h);
   //input data
   for(i = 0; i < n; i++){
   scanf("%lld%d%d",&can[i].number, &can[i].D, &can[i].C);
  can[i].sum = can[i].C + can[i].D;
 }
   //classfied
   for(i = 0; i < n; i++)
     if(can[i].D >= l && can[i].C >= l){
     	  count ++;

       if(can[i].D >= h && can[i].C >= h)
       	    lv1[count1++] = i;
       else if(can[i].D >= h && can[i].C < h)
       	    lv2[count2++] = i;
       else if(can[i].D < h && can[i].D >= can[i].C )
       	    lv3[count3++] = i;
       else
       	    lv4[count4++] = i;
 }

   //sort and output
   printf("%d\n",count);

   sp(c, lv11, count1);
   sp(c, lv22, count2);
   sp(c, lv33, count3);
   sp(c, lv44, count4);
}
