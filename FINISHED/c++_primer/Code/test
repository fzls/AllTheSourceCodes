1243 hello this is a test 
 OK~
	• The exception header defines the most general kind of exception class named
	exception. It communicates only that an exception occurred but provides no
	additional information.
	• The stdexcept header defines several general-purpose exception classes,
	which are listed in Table 5.1.
	The new header defines the bad_alloc exception type, which we cover in §
	12.1.2 (p. 458).
	• The type_info header defines the bad_cast exception type, which we cover
	in § 19.2 (p. 825).
	12.  the form of a function that returns a pointer to an array is:Type (*function(parameter_list))[dimension]
	13. It is an error for two functions to differ only in terms of their return types. If the
	parameter lists of two functions match but the return types differ, then the second
	declaration is an error:
	 A parameter that has a top-level const is
	indistinguishable from one without a top-level const:
	
	14. The  only difference between using class and using struct to define a
	class is the default access level. If we use the struct keyword, the
	members defined before the first access specifier are public; if we use class, then
	the members are private.
	15. Friend declarations may appear only inside a class definition; they may appear
	anywhere in the class.
	16. A friend declaration only specifies access. It is not a general declaration of the
	function. 
	To make a friend visible to users of the class, we usually declare each friend
	(outside the class) in the same header as the class itself.
	17. Although we are not required to do so, it is legal to specify inline on both the
	declaration and the definition. However, specifying inline only on the definition
	outside the class can make the class easier to read.
	18. A mutable data member is never const, even when it is a member of a const
	object.
	19. Advice: Use Private Utility Functions for Common Code
	Screen &display(std::ostream &os)
	{ do_display(os); return *this; }
	const Screen &display(std::ostream &os) const
	{ do_display(os); return *this; }
	By doing this , we will only need to write the same code once, and it would be easier to debug and make some changes in the future.
	20. Just as we can declare a function apart from its definition (§ 6.1.2, p. 206), we can
	also declare a class without defining it:  class Screen; // declaration of the Screen class
	A class must be defined—not just declared—before we can write code that creates
	objects of that type.
	A class must be defined—not just declared—before we can write code that creates
	objects of that type.
	However, a class is considered declared (but not
	yet defined) as soon as its class name has been seen. Therefore, a class can have
	data members that are pointers or references to its own type:
	
	21. Making a member function a friend requires careful structuring of our programs to
	accommodate interdependencies among the declarations and definitions.
	22. it is generally a bad idea to use the same name for a parameter and a member//we can give the member a meaningful name and the parameter an abbreviation of that namecursor = width * ::height;// which height? the global one
	23. Assignment vs initialization
	Assignment  version
	// legal but sloppier way to write the Sales_data constructor: no constructor initializers
	Sales_data::Sales_data(const string &s,
	unsigned cnt, double price)
	{
	bookNo = s;
	units_sold = cnt;
	revenue = cnt * price;
	}
	Initialization version   it is better to use this one 
	Sales_data(const std::string &s, unsigned n, double p):bookNo(s), units_sold(n), revenue(p*n) 
	{ }
	
	Advice:By routinely using constructor initializers, you
	can avoid being surprised by compile-time errors when you have a class with
	a member that requires a constructor initializer.
	
	Members that are const or references must be initialized.
	Similarly, members that are of a class type that does not define a default constructor
	also must be initialized. 
	By the time the body of the constructor begins executing, initialization is complete.
	Our only chance to initialize const or reference data members is in the constructor
	initializer.
	WRONG VERSION
	// error: ci and ri must be initialized
	ConstRef::ConstRef(int ii)
	{ // assignments:
	i = ii; // ok
	ci = ii; // error: cannot assign to a const
	ri = i; // error: ri was never initialized
	}
	RIGHR VERSION
	// ok: explicitly initialize reference and const members
	ConstRef::ConstRef(int ii): i(ii), ci(ii), ri(i) { }
	24. the constructor initializer list specifies only the
	values used to initialize the members, not the order in which those initializations are
	performed.Members are initialized in the order in which they appear in the class definition
	The order of initialization often doesn’t matter. However, if one member is initialized
	in terms of another, then the order in which members are initialized is crucially
	important.
	If possible, it is a good idea write member initializers to use the constructor’s
	parameters rather than another data member from the same object. 
	
	25. delegating constructors.
	class Sales_data {
	public:
	// nondelegating constructor initializes members from corresponding arguments
	Sales_data(std::string s, unsigned cnt, double price):
	bookNo(s), units_sold(cnt), revenue(cnt*price) {
	}
	// remaining constructors all delegate to another constructor
	Sales_data(): Sales_data("", 0, 0) {}
	Sales_data(std::string s): Sales_data(s, 0,0) {}
	Sales_data(std::istream &is): Sales_data()
	{ read(is, *this); }
	// other members as before
	};
	26. Sales_data obj(); // ok: but defines a function, not an object
	if (obj.isbn() == Primer_5th_ed.isbn()) // error: obj is a function
	The correct way
	// ok: obj is a default-initialized object
	Sales_data obj;
	27. The explicit keyword is meaningful only on constructors that can be called with
	a single argument.
	The explicit keyword is used only on the constructor declaration inside
	the class. 
	Sales_data item1 (null_book); // ok: direct initialization
	// error: cannot use the copy form of initialization with an explicit constructor
	Sales_data item2 = null_book;
	28.   static Class Members
	Classes sometimes need members that are associated with the class, rather than with
	individual objects of the class type. 
	Like any other member, static members can be public or private.
	The type of a static data member can be const, reference, array, class type, and
	so forth.
	Similarly, static member functions are not bound to any object; they do not have
	a this pointer.
	 As a result, static member functions may not be declared as
	const, and we may not refer to this in the body of a static member. This
	restriction applies both to explicit uses of this and to implicit uses of this by calling
	a nonstatic member.
	We can access a static member directly through the scope operator:
	Even though static members are not part of the objects of its class, we can use an
	object, reference, or pointer of the class type to access a static member:
	Member functions can use static members directly, without the scope operator:
	Defining static Members
	As with any other member function, we can define a static member function inside
	or outside of the class body. When we define a static member function  outside the class, we
	do not repeat the static keyword. The keyword appears only with the declaration
	inside the class body:
	 Instead, we must define and initialize each staticdata member outside the class body.
	// define and initialize a static class member
	double Account::interestRate = initRate();
	The best way to ensure that the object is defined exactly once is to put the
	definition of static data members in the same file that contains the
	definitions of the class noninline member functions.
	//////
	In fact, static members have the same properties as non-member variables but they enjoy class scope. For that reason, and to avoid them to be declared several times, they cannot be initialized directly in the class, but need to be initialized somewhere outside it. 
	As in the previous example:
	int Dummy::n=0;
	Classes can also have static member functions. These represent the same: members of a class that are common to all object of that class, acting exactly as non-member functions but being accessed like members of the class. Because they are like non-member functions, they cannot access non-static members of the class (neither member variables nor member functions). They neither can use the keyword this.
