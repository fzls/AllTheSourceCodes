X0	Assembly\test.asm	/^X0 = 80-current_time_str_len$/;"	d
Y0	Assembly\test.asm	/^Y0 = 0$/;"	d
assume	Assembly\test.asm	/^assume cs:code,ds:code$/;"	l
code	Assembly\test.asm	/^code segment$/;"	l
convert	Assembly\test.asm	/^convert proc near$/;"	l
count	Assembly\test.asm	/^count db 0   ; increment it on every interrupt$/;"	d
current_time	Assembly\test.asm	/^current_time db '00:00:00'$/;"	d
current_time_str_len	Assembly\test.asm	/^current_time_str_len = $-offset current_time ; 8 bytes$/;"	d
disp_next_char	Assembly\test.asm	/^disp_next_char:$/;"	l
disp_time	Assembly\test.asm	/^disp_time proc near$/;"	l
goto_old_8h	Assembly\test.asm	/^goto_old_8h:$/;"	l
initialize	Assembly\test.asm	/^initialize:$/;"	l
install	Assembly\test.asm	/^install:$/;"	l
install_msg	Assembly\test.asm	/^install_msg db 'AUTOTIME version 1.0',0Dh,0Ah$/;"	d
int_8h	Assembly\test.asm	/^int_8h:$/;"	l
old_8h	Assembly\test.asm	/^old_8h dw 0,0; old vector of int_8h$/;"	d
pop	Assembly\test.asm	/^    pop  ds$/;"	d
pop	Assembly\test.asm	/^    pop di$/;"	d
pop	Assembly\test.asm	/^    pop ds ; DS=CS$/;"	d
pop	Assembly\test.asm	/^    pop ds$/;"	d
pop	Assembly\test.asm	/^    pop dx$/;"	d
push	Assembly\test.asm	/^    push di$/;"	d
push	Assembly\test.asm	/^    push ds$/;"	d
push	Assembly\test.asm	/^    push dx$/;"	d
main	C++\Unit01\printStar.cpp	/^int main() {$/;"	f
main	C++\Unit02\TestAnimation1\TestAnimation1.cpp	/^int main(void) {$/;"	f
mainloop	C++\Unit02\TestAnimation1\TestAnimation1.cpp	/^void mainloop() {$/;"	f
main	C++\Unit02\TestAnimation2\TestAnimation2.cpp	/^int main() {$/;"	f
mainloop	C++\Unit02\TestAnimation2\TestAnimation2.cpp	/^void mainloop() {$/;"	f
COMPANY_NAME	C++\Unit02\TestAnimation2\TestAnimation2_private.h	13;"	d
FILE_DESCRIPTION	C++\Unit02\TestAnimation2\TestAnimation2_private.h	15;"	d
FILE_VERSION	C++\Unit02\TestAnimation2\TestAnimation2_private.h	14;"	d
INTERNAL_NAME	C++\Unit02\TestAnimation2\TestAnimation2_private.h	16;"	d
LEGAL_COPYRIGHT	C++\Unit02\TestAnimation2\TestAnimation2_private.h	17;"	d
LEGAL_TRADEMARKS	C++\Unit02\TestAnimation2\TestAnimation2_private.h	18;"	d
ORIGINAL_FILENAME	C++\Unit02\TestAnimation2\TestAnimation2_private.h	19;"	d
PRODUCT_NAME	C++\Unit02\TestAnimation2\TestAnimation2_private.h	20;"	d
PRODUCT_VERSION	C++\Unit02\TestAnimation2\TestAnimation2_private.h	21;"	d
TESTANIMATION2_PRIVATE_H	C++\Unit02\TestAnimation2\TestAnimation2_private.h	5;"	d
VER_BUILD	C++\Unit02\TestAnimation2\TestAnimation2_private.h	12;"	d
VER_MAJOR	C++\Unit02\TestAnimation2\TestAnimation2_private.h	9;"	d
VER_MINOR	C++\Unit02\TestAnimation2\TestAnimation2_private.h	10;"	d
VER_RELEASE	C++\Unit02\TestAnimation2\TestAnimation2_private.h	11;"	d
VER_STRING	C++\Unit02\TestAnimation2\TestAnimation2_private.h	8;"	d
main	C++\Unit02\TestInput\TestInput.cpp	/^int main(){$/;"	f
main	C++\Unit02\egeTest\egeTest.cpp	/^int main(){$/;"	f
main	C++\Unit03\3_1.cpp	/^int main() {$/;"	f
swap	C++\Unit03\3_1.cpp	/^int swap ( int& x, int& y, int& z) { \/\/三个参数均为引用类型$/;"	f
swap	C++\Unit03\3_1.cpp	/^int swap ( int* x, int* y, int* z) { \/\/三个参数均为指针类型$/;"	f
main	C++\Unit03\AmbiguousOverloading\AmbiguousOverloading.cpp	/^int main()$/;"	f
maxNumber	C++\Unit03\AmbiguousOverloading\AmbiguousOverloading.cpp	/^double maxNumber(double num1, int num2)$/;"	f
maxNumber	C++\Unit03\AmbiguousOverloading\AmbiguousOverloading.cpp	/^int maxNumber(int num1, double num2)$/;"	f
add	C++\Unit03\DefaultArgument-Overloading\DefaultArgument-Overloading.cpp	/^int add (int x) {$/;"	f
add	C++\Unit03\DefaultArgument-Overloading\DefaultArgument-Overloading.cpp	/^int add (int x, int y = 10) {$/;"	f
main	C++\Unit03\DefaultArgument-Overloading\DefaultArgument-Overloading.cpp	/^int main() {$/;"	f
main	C++\Unit03\DefaultArgumentDemo\DefaultArgumentDemo.cpp	/^int main(){$/;"	f
printArea	C++\Unit03\DefaultArgumentDemo\DefaultArgumentDemo.cpp	/^void printArea (double radius=1) $/;"	f
f	C++\Unit03\InlineDemo1\InlineDemo1.cpp	/^inline void f(int month, int year) {$/;"	f
main	C++\Unit03\InlineDemo1\InlineDemo1.cpp	/^int main()$/;"	f
main	C++\Unit03\InlineDemo2\InlineDemo2.cpp	/^int main()$/;"	f
f	C++\Unit03\InlineDemo\InlineDemo.cpp	/^inline void f (int month, int year) {$/;"	f
g	C++\Unit03\InlineDemo\InlineDemo.cpp	/^void g (int month, int year) {$/;"	f
main	C++\Unit03\InlineDemo\InlineDemo.cpp	/^int main()$/;"	f
main	C++\Unit03\TestFunctionOverloading\TestFunctionOverloading.cpp	/^int main()$/;"	f
max	C++\Unit03\TestFunctionOverloading\TestFunctionOverloading.cpp	/^double max(double num1, double num2)$/;"	f
max	C++\Unit03\TestFunctionOverloading\TestFunctionOverloading.cpp	/^double max(double num1, double num2, double num3)$/;"	f
max	C++\Unit03\TestFunctionOverloading\TestFunctionOverloading.cpp	/^int max(int num1, int num2)$/;"	f
main	C++\Unit03\TestPassByReference\TestPassByReference.cpp	/^int main()$/;"	f
swap	C++\Unit03\TestPassByReference\TestPassByReference.cpp	/^void swap(int &n1, int &n2)$/;"	f
main	C++\Unit03\TestReferenceVariable\TestReferenceVariable.cpp	/^int main()$/;"	f
function1	C++\Unit03\VarInNestingBlock\VarInNestingBlock.cpp	/^void function1(){$/;"	f
function2	C++\Unit03\VarInNestingBlock\VarInNestingBlock.cpp	/^void function2() {$/;"	f
main	C++\Unit03\VarInNestingBlock\VarInNestingBlock.cpp	/^int main(){$/;"	f
main	C++\Unit03\boolType\main.cpp	/^int main() {$/;"	f
main	C++\Unit03\ooVarInit\main.cpp	/^int main() {$/;"	f
main	C++\Unit03\test.cpp	/^int main() {$/;"	f
printArea	C++\Unit03\test.cpp	/^void printArea(int radius ) {$/;"	f
ALOHAWORLD_PRIVATE_H	C++\Unit04\4_1 - ���� (2)\AlohaWorld_private.h	5;"	d
COMPANY_NAME	C++\Unit04\4_1 - ���� (2)\AlohaWorld_private.h	13;"	d
FILE_DESCRIPTION	C++\Unit04\4_1 - ���� (2)\AlohaWorld_private.h	15;"	d
FILE_VERSION	C++\Unit04\4_1 - ���� (2)\AlohaWorld_private.h	14;"	d
INTERNAL_NAME	C++\Unit04\4_1 - ���� (2)\AlohaWorld_private.h	16;"	d
LEGAL_COPYRIGHT	C++\Unit04\4_1 - ���� (2)\AlohaWorld_private.h	17;"	d
LEGAL_TRADEMARKS	C++\Unit04\4_1 - ���� (2)\AlohaWorld_private.h	18;"	d
ORIGINAL_FILENAME	C++\Unit04\4_1 - ���� (2)\AlohaWorld_private.h	19;"	d
PRODUCT_NAME	C++\Unit04\4_1 - ���� (2)\AlohaWorld_private.h	20;"	d
PRODUCT_VERSION	C++\Unit04\4_1 - ���� (2)\AlohaWorld_private.h	21;"	d
VER_BUILD	C++\Unit04\4_1 - ���� (2)\AlohaWorld_private.h	12;"	d
VER_MAJOR	C++\Unit04\4_1 - ���� (2)\AlohaWorld_private.h	9;"	d
VER_MINOR	C++\Unit04\4_1 - ���� (2)\AlohaWorld_private.h	10;"	d
VER_RELEASE	C++\Unit04\4_1 - ���� (2)\AlohaWorld_private.h	11;"	d
VER_STRING	C++\Unit04\4_1 - ���� (2)\AlohaWorld_private.h	8;"	d
Draw	C++\Unit04\4_1 - ���� (2)\MyCircle.cpp	/^void MyCircle::Draw(){$/;"	f	class:MyCircle
MyCircle	C++\Unit04\4_1 - ���� (2)\MyCircle.cpp	/^MyCircle::MyCircle(){$/;"	f	class:MyCircle
MyCircle	C++\Unit04\4_1 - ���� (2)\MyCircle.cpp	/^MyCircle::MyCircle(const MyCircle& mycircle){$/;"	f	class:MyCircle
MyCircle	C++\Unit04\4_1 - ���� (2)\MyCircle.cpp	/^MyCircle::MyCircle(int x,int y,int r){$/;"	f	class:MyCircle
setCenter	C++\Unit04\4_1 - ���� (2)\MyCircle.cpp	/^void MyCircle::setCenter(int x, int y){$/;"	f	class:MyCircle
setColor	C++\Unit04\4_1 - ���� (2)\MyCircle.cpp	/^void MyCircle::setColor(int R,int G,int B){$/;"	f	class:MyCircle
setRadius	C++\Unit04\4_1 - ���� (2)\MyCircle.cpp	/^void MyCircle::setRadius(int r){$/;"	f	class:MyCircle
B	C++\Unit04\4_1 - ���� (2)\MyCircle.h	/^		int R,G,B;$/;"	m	class:MyCircle
G	C++\Unit04\4_1 - ���� (2)\MyCircle.h	/^		int R,G,B;$/;"	m	class:MyCircle
MyCircle	C++\Unit04\4_1 - ���� (2)\MyCircle.h	/^class MyCircle{$/;"	c
R	C++\Unit04\4_1 - ���� (2)\MyCircle.h	/^		int R,G,B;$/;"	m	class:MyCircle
r	C++\Unit04\4_1 - ���� (2)\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
x	C++\Unit04\4_1 - ���� (2)\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
y	C++\Unit04\4_1 - ���� (2)\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
Draw	C++\Unit04\4_1 - ���� (2)\MyRectangle.cpp	/^void MyRectangle::Draw() {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\4_1 - ���� (2)\MyRectangle.cpp	/^MyRectangle::MyRectangle() {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\4_1 - ���� (2)\MyRectangle.cpp	/^MyRectangle::MyRectangle(int leftX, int leftY, int rightX, int rightY){$/;"	f	class:MyRectangle
setColor	C++\Unit04\4_1 - ���� (2)\MyRectangle.cpp	/^void MyRectangle::setColor(int R, int G, int B){$/;"	f	class:MyRectangle
setCoordinations	C++\Unit04\4_1 - ���� (2)\MyRectangle.cpp	/^void MyRectangle::setCoordinations(int leftX, int leftY, int rightX, int rightY) {$/;"	f	class:MyRectangle
B	C++\Unit04\4_1 - ���� (2)\MyRectangle.h	/^	int R,G,B;$/;"	m	class:MyRectangle
G	C++\Unit04\4_1 - ���� (2)\MyRectangle.h	/^	int R,G,B;$/;"	m	class:MyRectangle
MyRectangle	C++\Unit04\4_1 - ���� (2)\MyRectangle.h	/^class MyRectangle {$/;"	c
R	C++\Unit04\4_1 - ���� (2)\MyRectangle.h	/^	int R,G,B;$/;"	m	class:MyRectangle
leftX	C++\Unit04\4_1 - ���� (2)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
leftY	C++\Unit04\4_1 - ���� (2)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
rightX	C++\Unit04\4_1 - ���� (2)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
rightY	C++\Unit04\4_1 - ���� (2)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
Screen	C++\Unit04\4_1 - ���� (2)\Screen.cpp	/^Screen::Screen() {$/;"	f	class:Screen
Screen	C++\Unit04\4_1 - ���� (2)\Screen.cpp	/^Screen::Screen(int width, int height) {$/;"	f	class:Screen
deleteInstance	C++\Unit04\4_1 - ���� (2)\Screen.cpp	/^void Screen::deleteInstance(){$/;"	f	class:Screen
getHeight	C++\Unit04\4_1 - ���� (2)\Screen.cpp	/^int Screen::getHeight() const {$/;"	f	class:Screen
getInstance	C++\Unit04\4_1 - ���� (2)\Screen.cpp	/^ Screen* Screen::getInstance(int width,int height){$/;"	f	class:Screen
getWidth	C++\Unit04\4_1 - ���� (2)\Screen.cpp	/^int Screen::getWidth() const {$/;"	f	class:Screen
height	C++\Unit04\4_1 - ���� (2)\Screen.cpp	/^int Screen::height = 480;$/;"	m	class:Screen	file:
setScreen	C++\Unit04\4_1 - ���� (2)\Screen.cpp	/^void Screen::setScreen(int width, int height) {$/;"	f	class:Screen
width	C++\Unit04\4_1 - ���� (2)\Screen.cpp	/^int Screen::width = 640;$/;"	m	class:Screen	file:
~Screen	C++\Unit04\4_1 - ���� (2)\Screen.cpp	/^Screen::~Screen(){$/;"	f	class:Screen
Screen	C++\Unit04\4_1 - ���� (2)\Screen.h	/^class Screen {$/;"	c
enter	C++\Unit04\4_1 - ���� (2)\Screen.h	/^	string enter;$/;"	m	class:Screen
height	C++\Unit04\4_1 - ���� (2)\Screen.h	/^	static int height;$/;"	m	class:Screen
instance	C++\Unit04\4_1 - ���� (2)\Screen.h	/^	static Screen* instance;$/;"	m	class:Screen
leave	C++\Unit04\4_1 - ���� (2)\Screen.h	/^	string leave;$/;"	m	class:Screen
width	C++\Unit04\4_1 - ���� (2)\Screen.h	/^	static int width;$/;"	m	class:Screen
main	C++\Unit04\4_1 - ���� (2)\main.cpp	/^int main() {$/;"	f
count	C++\Unit04\4_1 - ���� (2)\password.cpp	/^void count(const string& s) {$/;"	f
initString	C++\Unit04\4_1 - ���� (2)\password.cpp	/^void initString(string& s) {$/;"	f
main	C++\Unit04\4_1 - ���� (2)\password.cpp	/^int main() {$/;"	f
ALOHAWORLD_PRIVATE_H	C++\Unit04\4_1 - ���� (3)\AlohaWorld_private.h	5;"	d
COMPANY_NAME	C++\Unit04\4_1 - ���� (3)\AlohaWorld_private.h	13;"	d
FILE_DESCRIPTION	C++\Unit04\4_1 - ���� (3)\AlohaWorld_private.h	15;"	d
FILE_VERSION	C++\Unit04\4_1 - ���� (3)\AlohaWorld_private.h	14;"	d
INTERNAL_NAME	C++\Unit04\4_1 - ���� (3)\AlohaWorld_private.h	16;"	d
LEGAL_COPYRIGHT	C++\Unit04\4_1 - ���� (3)\AlohaWorld_private.h	17;"	d
LEGAL_TRADEMARKS	C++\Unit04\4_1 - ���� (3)\AlohaWorld_private.h	18;"	d
ORIGINAL_FILENAME	C++\Unit04\4_1 - ���� (3)\AlohaWorld_private.h	19;"	d
PRODUCT_NAME	C++\Unit04\4_1 - ���� (3)\AlohaWorld_private.h	20;"	d
PRODUCT_VERSION	C++\Unit04\4_1 - ���� (3)\AlohaWorld_private.h	21;"	d
VER_BUILD	C++\Unit04\4_1 - ���� (3)\AlohaWorld_private.h	12;"	d
VER_MAJOR	C++\Unit04\4_1 - ���� (3)\AlohaWorld_private.h	9;"	d
VER_MINOR	C++\Unit04\4_1 - ���� (3)\AlohaWorld_private.h	10;"	d
VER_RELEASE	C++\Unit04\4_1 - ���� (3)\AlohaWorld_private.h	11;"	d
VER_STRING	C++\Unit04\4_1 - ���� (3)\AlohaWorld_private.h	8;"	d
Draw	C++\Unit04\4_1 - ���� (3)\MyCircle.cpp	/^void MyCircle::Draw(){$/;"	f	class:MyCircle
MyCircle	C++\Unit04\4_1 - ���� (3)\MyCircle.cpp	/^MyCircle::MyCircle(){$/;"	f	class:MyCircle
MyCircle	C++\Unit04\4_1 - ���� (3)\MyCircle.cpp	/^MyCircle::MyCircle(const MyCircle& mycircle){$/;"	f	class:MyCircle
MyCircle	C++\Unit04\4_1 - ���� (3)\MyCircle.cpp	/^MyCircle::MyCircle(int x,int y,int r){$/;"	f	class:MyCircle
setCenter	C++\Unit04\4_1 - ���� (3)\MyCircle.cpp	/^void MyCircle::setCenter(int x, int y){$/;"	f	class:MyCircle
setRadius	C++\Unit04\4_1 - ���� (3)\MyCircle.cpp	/^void MyCircle::setRadius(int r){$/;"	f	class:MyCircle
MyCircle	C++\Unit04\4_1 - ���� (3)\MyCircle.h	/^class MyCircle:public MyShape{$/;"	c
r	C++\Unit04\4_1 - ���� (3)\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
x	C++\Unit04\4_1 - ���� (3)\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
y	C++\Unit04\4_1 - ���� (3)\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
Draw	C++\Unit04\4_1 - ���� (3)\MyRectangle.cpp	/^void MyRectangle::Draw() {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\4_1 - ���� (3)\MyRectangle.cpp	/^MyRectangle::MyRectangle() {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\4_1 - ���� (3)\MyRectangle.cpp	/^MyRectangle::MyRectangle(int leftX, int leftY, int rightX, int rightY){$/;"	f	class:MyRectangle
setCoordinations	C++\Unit04\4_1 - ���� (3)\MyRectangle.cpp	/^void MyRectangle::setCoordinations(int leftX, int leftY, int rightX, int rightY) {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\4_1 - ���� (3)\MyRectangle.h	/^class MyRectangle :public MyShape {$/;"	c
leftX	C++\Unit04\4_1 - ���� (3)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
leftY	C++\Unit04\4_1 - ���� (3)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
rightX	C++\Unit04\4_1 - ���� (3)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
rightY	C++\Unit04\4_1 - ���� (3)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
MyShape	C++\Unit04\4_1 - ���� (3)\MyShape.cpp	/^MyShape::MyShape(){$/;"	f	class:MyShape
getB	C++\Unit04\4_1 - ���� (3)\MyShape.cpp	/^int MyShape::getB() const{$/;"	f	class:MyShape
getG	C++\Unit04\4_1 - ���� (3)\MyShape.cpp	/^int MyShape::getG() const{$/;"	f	class:MyShape
getR	C++\Unit04\4_1 - ���� (3)\MyShape.cpp	/^int MyShape::getR() const{$/;"	f	class:MyShape
setColor	C++\Unit04\4_1 - ���� (3)\MyShape.cpp	/^void MyShape::setColor(int R,int G,int B){$/;"	f	class:MyShape
B	C++\Unit04\4_1 - ���� (3)\MyShape.h	/^		int R,G,B;$/;"	m	class:MyShape
G	C++\Unit04\4_1 - ���� (3)\MyShape.h	/^		int R,G,B;$/;"	m	class:MyShape
MyShape	C++\Unit04\4_1 - ���� (3)\MyShape.h	/^class MyShape{$/;"	c
R	C++\Unit04\4_1 - ���� (3)\MyShape.h	/^		int R,G,B;$/;"	m	class:MyShape
enter	C++\Unit04\4_1 - ���� (3)\MyShape.h	/^		string enter;$/;"	m	class:MyShape
leave	C++\Unit04\4_1 - ���� (3)\MyShape.h	/^		string leave;$/;"	m	class:MyShape
Screen	C++\Unit04\4_1 - ���� (3)\Screen.cpp	/^Screen::Screen() {$/;"	f	class:Screen
Screen	C++\Unit04\4_1 - ���� (3)\Screen.cpp	/^Screen::Screen(int width, int height) {$/;"	f	class:Screen
deleteInstance	C++\Unit04\4_1 - ���� (3)\Screen.cpp	/^void Screen::deleteInstance(){$/;"	f	class:Screen
getHeight	C++\Unit04\4_1 - ���� (3)\Screen.cpp	/^int Screen::getHeight() const {$/;"	f	class:Screen
getInstance	C++\Unit04\4_1 - ���� (3)\Screen.cpp	/^ Screen* Screen::getInstance(int width,int height){$/;"	f	class:Screen
getWidth	C++\Unit04\4_1 - ���� (3)\Screen.cpp	/^int Screen::getWidth() const {$/;"	f	class:Screen
height	C++\Unit04\4_1 - ���� (3)\Screen.cpp	/^int Screen::height = 480;$/;"	m	class:Screen	file:
setScreen	C++\Unit04\4_1 - ���� (3)\Screen.cpp	/^void Screen::setScreen(int width, int height) {$/;"	f	class:Screen
width	C++\Unit04\4_1 - ���� (3)\Screen.cpp	/^int Screen::width = 640;$/;"	m	class:Screen	file:
~Screen	C++\Unit04\4_1 - ���� (3)\Screen.cpp	/^Screen::~Screen(){$/;"	f	class:Screen
Screen	C++\Unit04\4_1 - ���� (3)\Screen.h	/^class Screen {$/;"	c
enter	C++\Unit04\4_1 - ���� (3)\Screen.h	/^	string enter;$/;"	m	class:Screen
height	C++\Unit04\4_1 - ���� (3)\Screen.h	/^	static int height;$/;"	m	class:Screen
instance	C++\Unit04\4_1 - ���� (3)\Screen.h	/^	static Screen* instance;$/;"	m	class:Screen
leave	C++\Unit04\4_1 - ���� (3)\Screen.h	/^	string leave;$/;"	m	class:Screen
width	C++\Unit04\4_1 - ���� (3)\Screen.h	/^	static int width;$/;"	m	class:Screen
createShape	C++\Unit04\4_1 - ���� (3)\main.cpp	/^MyShape* createShape(char shapeType){$/;"	f
main	C++\Unit04\4_1 - ���� (3)\main.cpp	/^int main() {$/;"	f
count	C++\Unit04\4_1 - ���� (3)\password.cpp	/^void count(const string& s) {$/;"	f
initString	C++\Unit04\4_1 - ���� (3)\password.cpp	/^void initString(string& s) {$/;"	f
main	C++\Unit04\4_1 - ���� (3)\password.cpp	/^int main() {$/;"	f
ALOHAWORLD_PRIVATE_H	C++\Unit04\4_1 - ����\AlohaWorld_private.h	5;"	d
COMPANY_NAME	C++\Unit04\4_1 - ����\AlohaWorld_private.h	13;"	d
FILE_DESCRIPTION	C++\Unit04\4_1 - ����\AlohaWorld_private.h	15;"	d
FILE_VERSION	C++\Unit04\4_1 - ����\AlohaWorld_private.h	14;"	d
INTERNAL_NAME	C++\Unit04\4_1 - ����\AlohaWorld_private.h	16;"	d
LEGAL_COPYRIGHT	C++\Unit04\4_1 - ����\AlohaWorld_private.h	17;"	d
LEGAL_TRADEMARKS	C++\Unit04\4_1 - ����\AlohaWorld_private.h	18;"	d
ORIGINAL_FILENAME	C++\Unit04\4_1 - ����\AlohaWorld_private.h	19;"	d
PRODUCT_NAME	C++\Unit04\4_1 - ����\AlohaWorld_private.h	20;"	d
PRODUCT_VERSION	C++\Unit04\4_1 - ����\AlohaWorld_private.h	21;"	d
VER_BUILD	C++\Unit04\4_1 - ����\AlohaWorld_private.h	12;"	d
VER_MAJOR	C++\Unit04\4_1 - ����\AlohaWorld_private.h	9;"	d
VER_MINOR	C++\Unit04\4_1 - ����\AlohaWorld_private.h	10;"	d
VER_RELEASE	C++\Unit04\4_1 - ����\AlohaWorld_private.h	11;"	d
VER_STRING	C++\Unit04\4_1 - ����\AlohaWorld_private.h	8;"	d
Draw	C++\Unit04\4_1 - ����\MyRectangle.cpp	/^void MyRectangle::Draw() {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\4_1 - ����\MyRectangle.cpp	/^MyRectangle::MyRectangle() {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\4_1 - ����\MyRectangle.cpp	/^MyRectangle::MyRectangle(int leftX, int leftY, int rightX, int rightY, Screen* pScreen){$/;"	f	class:MyRectangle
setCoordinations	C++\Unit04\4_1 - ����\MyRectangle.cpp	/^void MyRectangle::setCoordinations(int leftX, int leftY, int rightX, int rightY) {$/;"	f	class:MyRectangle
setScreen	C++\Unit04\4_1 - ����\MyRectangle.cpp	/^void MyRectangle::setScreen(const Screen& screen) {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\4_1 - ����\MyRectangle.h	/^class MyRectangle {$/;"	c
leftX	C++\Unit04\4_1 - ����\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
leftY	C++\Unit04\4_1 - ����\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
pScreen	C++\Unit04\4_1 - ����\MyRectangle.h	/^	Screen* pScreen;$/;"	m	class:MyRectangle
rightX	C++\Unit04\4_1 - ����\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
rightY	C++\Unit04\4_1 - ����\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
Screen	C++\Unit04\4_1 - ����\Screen.cpp	/^Screen::Screen() {$/;"	f	class:Screen
Screen	C++\Unit04\4_1 - ����\Screen.cpp	/^Screen::Screen(int width, int height) {$/;"	f	class:Screen
getHeight	C++\Unit04\4_1 - ����\Screen.cpp	/^int Screen::getHeight() const {$/;"	f	class:Screen
getWidth	C++\Unit04\4_1 - ����\Screen.cpp	/^int Screen::getWidth() const {$/;"	f	class:Screen
setScreen	C++\Unit04\4_1 - ����\Screen.cpp	/^void Screen::setScreen(int width, int height) {$/;"	f	class:Screen
~Screen	C++\Unit04\4_1 - ����\Screen.cpp	/^Screen::~Screen(){$/;"	f	class:Screen
Screen	C++\Unit04\4_1 - ����\Screen.h	/^class Screen {$/;"	c
height	C++\Unit04\4_1 - ����\Screen.h	/^	 int height;$/;"	m	class:Screen
width	C++\Unit04\4_1 - ����\Screen.h	/^	 int width;$/;"	m	class:Screen
main	C++\Unit04\4_1 - ����\main.cpp	/^int main() {$/;"	f
count	C++\Unit04\4_1 - ����\password.cpp	/^void count(const string& s) {$/;"	f
initString	C++\Unit04\4_1 - ����\password.cpp	/^void initString(string& s) {$/;"	f
main	C++\Unit04\4_1 - ����\password.cpp	/^int main() {$/;"	f
Draw	C++\Unit04\4_1.cpp	/^void MyRectangle::Draw() {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\4_1.cpp	/^MyRectangle::MyRectangle() {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\4_1.cpp	/^MyRectangle::MyRectangle(int leftX, int leftY, int rightX, int rightY, Screen* pScreen) {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\4_1.cpp	/^class MyRectangle {$/;"	c	file:
Screen	C++\Unit04\4_1.cpp	/^Screen::Screen() {$/;"	f	class:Screen
Screen	C++\Unit04\4_1.cpp	/^Screen::Screen(int width, int height) {$/;"	f	class:Screen
Screen	C++\Unit04\4_1.cpp	/^class Screen {$/;"	c	file:
getHeight	C++\Unit04\4_1.cpp	/^int Screen::getHeight() const {$/;"	f	class:Screen
getWidth	C++\Unit04\4_1.cpp	/^int Screen::getWidth() const {$/;"	f	class:Screen
height	C++\Unit04\4_1.cpp	/^	int height;$/;"	m	class:Screen	file:
leftX	C++\Unit04\4_1.cpp	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle	file:
leftY	C++\Unit04\4_1.cpp	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle	file:
main	C++\Unit04\4_1.cpp	/^int main() {$/;"	f
pScreen	C++\Unit04\4_1.cpp	/^	Screen* pScreen;$/;"	m	class:MyRectangle	file:
rightX	C++\Unit04\4_1.cpp	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle	file:
rightY	C++\Unit04\4_1.cpp	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle	file:
setCoordinations	C++\Unit04\4_1.cpp	/^void MyRectangle::setCoordinations(int leftX, int leftY, int rightX, int rightY) {$/;"	f	class:MyRectangle
setScreen	C++\Unit04\4_1.cpp	/^void MyRectangle::setScreen(const Screen& screen) {$/;"	f	class:MyRectangle
setScreen	C++\Unit04\4_1.cpp	/^void Screen::setScreen(int width, int height) {$/;"	f	class:Screen
width	C++\Unit04\4_1.cpp	/^	int width;$/;"	m	class:Screen	file:
ALOHAWORLD_PRIVATE_H	C++\Unit04\4_1\AlohaWorld_private.h	5;"	d
COMPANY_NAME	C++\Unit04\4_1\AlohaWorld_private.h	13;"	d
FILE_DESCRIPTION	C++\Unit04\4_1\AlohaWorld_private.h	15;"	d
FILE_VERSION	C++\Unit04\4_1\AlohaWorld_private.h	14;"	d
INTERNAL_NAME	C++\Unit04\4_1\AlohaWorld_private.h	16;"	d
LEGAL_COPYRIGHT	C++\Unit04\4_1\AlohaWorld_private.h	17;"	d
LEGAL_TRADEMARKS	C++\Unit04\4_1\AlohaWorld_private.h	18;"	d
ORIGINAL_FILENAME	C++\Unit04\4_1\AlohaWorld_private.h	19;"	d
PRODUCT_NAME	C++\Unit04\4_1\AlohaWorld_private.h	20;"	d
PRODUCT_VERSION	C++\Unit04\4_1\AlohaWorld_private.h	21;"	d
VER_BUILD	C++\Unit04\4_1\AlohaWorld_private.h	12;"	d
VER_MAJOR	C++\Unit04\4_1\AlohaWorld_private.h	9;"	d
VER_MINOR	C++\Unit04\4_1\AlohaWorld_private.h	10;"	d
VER_RELEASE	C++\Unit04\4_1\AlohaWorld_private.h	11;"	d
VER_STRING	C++\Unit04\4_1\AlohaWorld_private.h	8;"	d
Draw	C++\Unit04\4_1\MyCircle.cpp	/^void MyCircle::Draw(){$/;"	f	class:MyCircle
MyCircle	C++\Unit04\4_1\MyCircle.cpp	/^MyCircle::MyCircle(){$/;"	f	class:MyCircle
MyCircle	C++\Unit04\4_1\MyCircle.cpp	/^MyCircle::MyCircle(const MyCircle& mycircle){$/;"	f	class:MyCircle
MyCircle	C++\Unit04\4_1\MyCircle.cpp	/^MyCircle::MyCircle(int x,int y,int r){$/;"	f	class:MyCircle
setCenter	C++\Unit04\4_1\MyCircle.cpp	/^void MyCircle::setCenter(int x, int y){$/;"	f	class:MyCircle
setRadius	C++\Unit04\4_1\MyCircle.cpp	/^void MyCircle::setRadius(int r){$/;"	f	class:MyCircle
MyCircle	C++\Unit04\4_1\MyCircle.h	/^class MyCircle:public MyShape{$/;"	c
r	C++\Unit04\4_1\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
x	C++\Unit04\4_1\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
y	C++\Unit04\4_1\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
Draw	C++\Unit04\4_1\MyRectangle.cpp	/^void MyRectangle::Draw() {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\4_1\MyRectangle.cpp	/^MyRectangle::MyRectangle() {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\4_1\MyRectangle.cpp	/^MyRectangle::MyRectangle(int leftX, int leftY, int rightX, int rightY){$/;"	f	class:MyRectangle
setCoordinations	C++\Unit04\4_1\MyRectangle.cpp	/^void MyRectangle::setCoordinations(int leftX, int leftY, int rightX, int rightY) {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\4_1\MyRectangle.h	/^class MyRectangle :public MyShape {$/;"	c
leftX	C++\Unit04\4_1\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
leftY	C++\Unit04\4_1\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
rightX	C++\Unit04\4_1\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
rightY	C++\Unit04\4_1\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
MyShape	C++\Unit04\4_1\MyShape.cpp	/^MyShape::MyShape(){$/;"	f	class:MyShape
getB	C++\Unit04\4_1\MyShape.cpp	/^int MyShape::getB() const{$/;"	f	class:MyShape
getG	C++\Unit04\4_1\MyShape.cpp	/^int MyShape::getG() const{$/;"	f	class:MyShape
getR	C++\Unit04\4_1\MyShape.cpp	/^int MyShape::getR() const{$/;"	f	class:MyShape
setColor	C++\Unit04\4_1\MyShape.cpp	/^void MyShape::setColor(int R,int G,int B){$/;"	f	class:MyShape
B	C++\Unit04\4_1\MyShape.h	/^		int R,G,B;$/;"	m	class:MyShape
G	C++\Unit04\4_1\MyShape.h	/^		int R,G,B;$/;"	m	class:MyShape
MyShape	C++\Unit04\4_1\MyShape.h	/^class MyShape{$/;"	c
R	C++\Unit04\4_1\MyShape.h	/^		int R,G,B;$/;"	m	class:MyShape
enter	C++\Unit04\4_1\MyShape.h	/^		string enter;$/;"	m	class:MyShape
leave	C++\Unit04\4_1\MyShape.h	/^		string leave;$/;"	m	class:MyShape
Screen	C++\Unit04\4_1\Screen.cpp	/^Screen::Screen() {$/;"	f	class:Screen
Screen	C++\Unit04\4_1\Screen.cpp	/^Screen::Screen(int width, int height) {$/;"	f	class:Screen
deleteInstance	C++\Unit04\4_1\Screen.cpp	/^void Screen::deleteInstance(){$/;"	f	class:Screen
getHeight	C++\Unit04\4_1\Screen.cpp	/^int Screen::getHeight() const {$/;"	f	class:Screen
getInstance	C++\Unit04\4_1\Screen.cpp	/^ Screen* Screen::getInstance(int width,int height){$/;"	f	class:Screen
getWidth	C++\Unit04\4_1\Screen.cpp	/^int Screen::getWidth() const {$/;"	f	class:Screen
height	C++\Unit04\4_1\Screen.cpp	/^int Screen::height = 480;$/;"	m	class:Screen	file:
setScreen	C++\Unit04\4_1\Screen.cpp	/^void Screen::setScreen(int width, int height) {$/;"	f	class:Screen
width	C++\Unit04\4_1\Screen.cpp	/^int Screen::width = 640;$/;"	m	class:Screen	file:
~Screen	C++\Unit04\4_1\Screen.cpp	/^Screen::~Screen(){$/;"	f	class:Screen
Screen	C++\Unit04\4_1\Screen.h	/^class Screen {$/;"	c
enter	C++\Unit04\4_1\Screen.h	/^	string enter;$/;"	m	class:Screen
height	C++\Unit04\4_1\Screen.h	/^	static int height;$/;"	m	class:Screen
instance	C++\Unit04\4_1\Screen.h	/^	static Screen* instance;$/;"	m	class:Screen
leave	C++\Unit04\4_1\Screen.h	/^	string leave;$/;"	m	class:Screen
width	C++\Unit04\4_1\Screen.h	/^	static int width;$/;"	m	class:Screen
createShape	C++\Unit04\4_1\main.cpp	/^MyShape* createShape(char shapeType){$/;"	f
main	C++\Unit04\4_1\main.cpp	/^int main() {$/;"	f
count	C++\Unit04\4_1\password.cpp	/^void count(const string& s) {$/;"	f
initString	C++\Unit04\4_1\password.cpp	/^void initString(string& s) {$/;"	f
main	C++\Unit04\4_1\password.cpp	/^int main() {$/;"	f
Circle	C++\Unit04\AnonymousObject\AnonymousObject.cpp	/^  Circle() {$/;"	f	class:Circle
Circle	C++\Unit04\AnonymousObject\AnonymousObject.cpp	/^  Circle(double newRadius) {$/;"	f	class:Circle
Circle	C++\Unit04\AnonymousObject\AnonymousObject.cpp	/^class Circle {$/;"	c	file:
getArea	C++\Unit04\AnonymousObject\AnonymousObject.cpp	/^  double getArea() {$/;"	f	class:Circle
main	C++\Unit04\AnonymousObject\AnonymousObject.cpp	/^int main() {$/;"	f
radius	C++\Unit04\AnonymousObject\AnonymousObject.cpp	/^  double radius;$/;"	m	class:Circle	file:
Circle	C++\Unit04\Circle3\Circle3.cpp	/^Circle::Circle()$/;"	f	class:Circle
Circle	C++\Unit04\Circle3\Circle3.cpp	/^Circle::Circle(double radius)$/;"	f	class:Circle
getArea	C++\Unit04\Circle3\Circle3.cpp	/^double Circle::getArea()$/;"	f	class:Circle
getRadius	C++\Unit04\Circle3\Circle3.cpp	/^double Circle::getRadius()$/;"	f	class:Circle
setRadius	C++\Unit04\Circle3\Circle3.cpp	/^void Circle::setRadius(double radius)$/;"	f	class:Circle
Circle	C++\Unit04\Circle3\Circle3.h	/^class Circle$/;"	c
radius	C++\Unit04\Circle3\Circle3.h	/^  double radius;$/;"	m	class:Circle
Action	C++\Unit04\DefaultConstructor1\NoDefaultConstructor1.cpp	/^  Action(int hour, int minute, int second)$/;"	f	class:Action
Action	C++\Unit04\DefaultConstructor1\NoDefaultConstructor1.cpp	/^class Action$/;"	c	file:
Time	C++\Unit04\DefaultConstructor1\NoDefaultConstructor1.cpp	/^  Time(int hour, int minute, int second)$/;"	f	class:Time
Time	C++\Unit04\DefaultConstructor1\NoDefaultConstructor1.cpp	/^class Time$/;"	c	file:
hour	C++\Unit04\DefaultConstructor1\NoDefaultConstructor1.cpp	/^  int hour;$/;"	m	class:Time	file:
main	C++\Unit04\DefaultConstructor1\NoDefaultConstructor1.cpp	/^int main() {$/;"	f
minute	C++\Unit04\DefaultConstructor1\NoDefaultConstructor1.cpp	/^  int minute;$/;"	m	class:Time	file:
second	C++\Unit04\DefaultConstructor1\NoDefaultConstructor1.cpp	/^  int second;$/;"	m	class:Time	file:
time	C++\Unit04\DefaultConstructor1\NoDefaultConstructor1.cpp	/^  Time time;$/;"	m	class:Action	file:
Action	C++\Unit04\DefaultConstructor2\NoDefaultConstructor2.cpp	/^  Action(int hour, int minute, int second)$/;"	f	class:Action
Action	C++\Unit04\DefaultConstructor2\NoDefaultConstructor2.cpp	/^class Action$/;"	c	file:
Time	C++\Unit04\DefaultConstructor2\NoDefaultConstructor2.cpp	/^  Time(int hour, int minute, int second)$/;"	f	class:Time
Time	C++\Unit04\DefaultConstructor2\NoDefaultConstructor2.cpp	/^class Time$/;"	c	file:
hour	C++\Unit04\DefaultConstructor2\NoDefaultConstructor2.cpp	/^  int hour;$/;"	m	class:Time	file:
main	C++\Unit04\DefaultConstructor2\NoDefaultConstructor2.cpp	/^int main() {$/;"	f
minute	C++\Unit04\DefaultConstructor2\NoDefaultConstructor2.cpp	/^  int minute;$/;"	m	class:Time	file:
second	C++\Unit04\DefaultConstructor2\NoDefaultConstructor2.cpp	/^  int second;$/;"	m	class:Time	file:
time	C++\Unit04\DefaultConstructor2\NoDefaultConstructor2.cpp	/^  Time time;$/;"	m	class:Action	file:
Foo	C++\Unit04\HideDataField\HideDataField.cpp	/^  Foo()$/;"	f	class:Foo
Foo	C++\Unit04\HideDataField\HideDataField.cpp	/^class Foo$/;"	c	file:
main	C++\Unit04\HideDataField\HideDataField.cpp	/^int main()$/;"	f
p	C++\Unit04\HideDataField\HideDataField.cpp	/^  void p()$/;"	f	class:Foo
x	C++\Unit04\HideDataField\HideDataField.cpp	/^  int x; \/\/ data field$/;"	m	class:Foo	file:
y	C++\Unit04\HideDataField\HideDataField.cpp	/^  int y; \/\/ data field$/;"	m	class:Foo	file:
Draw	C++\Unit04\MyRectangle.h	/^	void Draw() {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\MyRectangle.h	/^	MyRectangle() {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\MyRectangle.h	/^	MyRectangle(int leftX, int leftY, int rightX, int rightY, Screen* pScreen) {$/;"	f	class:MyRectangle
MyRectangle	C++\Unit04\MyRectangle.h	/^class MyRectangle {$/;"	c
leftX	C++\Unit04\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
leftY	C++\Unit04\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
pScreen	C++\Unit04\MyRectangle.h	/^	Screen* pScreen;$/;"	m	class:MyRectangle
rightX	C++\Unit04\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
rightY	C++\Unit04\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
setCoordinations	C++\Unit04\MyRectangle.h	/^	void setCoordinations(int leftX, int leftY, int rightX, int rightY) {$/;"	f	class:MyRectangle
setScreen	C++\Unit04\MyRectangle.h	/^	void setScreen(const Screen& pScreen) {$/;"	f	class:MyRectangle
Circle	C++\Unit04\PassObjectByReference\Circle2.cpp	/^Circle::Circle()$/;"	f	class:Circle
Circle	C++\Unit04\PassObjectByReference\Circle2.cpp	/^Circle::Circle(double newRadius)$/;"	f	class:Circle
getArea	C++\Unit04\PassObjectByReference\Circle2.cpp	/^double Circle::getArea()$/;"	f	class:Circle
getRadius	C++\Unit04\PassObjectByReference\Circle2.cpp	/^double Circle::getRadius()$/;"	f	class:Circle
setRadius	C++\Unit04\PassObjectByReference\Circle2.cpp	/^void Circle::setRadius(double newRadius)$/;"	f	class:Circle
Circle	C++\Unit04\PassObjectByReference\Circle2.h	/^class Circle$/;"	c
radius_	C++\Unit04\PassObjectByReference\Circle2.h	/^  double radius_;$/;"	m	class:Circle
main	C++\Unit04\PassObjectByReference\PassObjectByReference.cpp	/^int main() {$/;"	f
printCircle	C++\Unit04\PassObjectByReference\PassObjectByReference.cpp	/^void printCircle(Circle &c) {$/;"	f
Circle	C++\Unit04\PassObjectByValue\Circle2.cpp	/^Circle::Circle()$/;"	f	class:Circle
Circle	C++\Unit04\PassObjectByValue\Circle2.cpp	/^Circle::Circle(double newRadius)$/;"	f	class:Circle
getArea	C++\Unit04\PassObjectByValue\Circle2.cpp	/^double Circle::getArea()$/;"	f	class:Circle
getRadius	C++\Unit04\PassObjectByValue\Circle2.cpp	/^double Circle::getRadius()$/;"	f	class:Circle
setRadius	C++\Unit04\PassObjectByValue\Circle2.cpp	/^void Circle::setRadius(double newRadius)$/;"	f	class:Circle
Circle	C++\Unit04\PassObjectByValue\Circle2.h	/^class Circle$/;"	c
radius_	C++\Unit04\PassObjectByValue\Circle2.h	/^  double radius_;$/;"	m	class:Circle
main	C++\Unit04\PassObjectByValue\PassObjectByValue.cpp	/^int main() {$/;"	f
printCircle	C++\Unit04\PassObjectByValue\PassObjectByValue.cpp	/^void printCircle(Circle c) {$/;"	f
Circle	C++\Unit04\PassObjectToPointer\Circle2.cpp	/^Circle::Circle()$/;"	f	class:Circle
Circle	C++\Unit04\PassObjectToPointer\Circle2.cpp	/^Circle::Circle(double newRadius)$/;"	f	class:Circle
getArea	C++\Unit04\PassObjectToPointer\Circle2.cpp	/^double Circle::getArea()$/;"	f	class:Circle
getRadius	C++\Unit04\PassObjectToPointer\Circle2.cpp	/^double Circle::getRadius()$/;"	f	class:Circle
setRadius	C++\Unit04\PassObjectToPointer\Circle2.cpp	/^void Circle::setRadius(double newRadius)$/;"	f	class:Circle
Circle	C++\Unit04\PassObjectToPointer\Circle2.h	/^class Circle$/;"	c
radius_	C++\Unit04\PassObjectToPointer\Circle2.h	/^  double radius_;$/;"	m	class:Circle
main	C++\Unit04\PassObjectToPointer\PassObjectToPointer.cpp	/^int main() {$/;"	f
printCircle	C++\Unit04\PassObjectToPointer\PassObjectToPointer.cpp	/^void printCircle(Circle *c) {$/;"	f
Screen	C++\Unit04\Screen.h	/^	Screen() {$/;"	f	class:Screen
Screen	C++\Unit04\Screen.h	/^	Screen(int width, int height) {$/;"	f	class:Screen
Screen	C++\Unit04\Screen.h	/^class Screen {$/;"	c
getHeight	C++\Unit04\Screen.h	/^	int getHeight() {$/;"	f	class:Screen
getWidth	C++\Unit04\Screen.h	/^	int getWidth() {$/;"	f	class:Screen
height	C++\Unit04\Screen.h	/^	int height;$/;"	m	class:Screen
setScreen	C++\Unit04\Screen.h	/^	void setScreen(int width, int height) {$/;"	f	class:Screen
width	C++\Unit04\Screen.h	/^	int width;$/;"	m	class:Screen
Circle	C++\Unit04\TestCircle2\Circle2.cpp	/^Circle::Circle()$/;"	f	class:Circle
Circle	C++\Unit04\TestCircle2\Circle2.cpp	/^Circle::Circle(double newRadius)$/;"	f	class:Circle
getArea	C++\Unit04\TestCircle2\Circle2.cpp	/^double Circle::getArea()$/;"	f	class:Circle
getRadius	C++\Unit04\TestCircle2\Circle2.cpp	/^double Circle::getRadius()$/;"	f	class:Circle
setRadius	C++\Unit04\TestCircle2\Circle2.cpp	/^void Circle::setRadius(double newRadius)$/;"	f	class:Circle
Circle	C++\Unit04\TestCircle2\Circle2.h	/^class Circle$/;"	c
radius_	C++\Unit04\TestCircle2\Circle2.h	/^  double radius_;$/;"	m	class:Circle
main	C++\Unit04\TestCircle2\TestCircle2.cpp	/^int main() {$/;"	f
Circle	C++\Unit04\TestCircleWithDeclaration\Circle.cpp	/^Circle::Circle() {$/;"	f	class:Circle
Circle	C++\Unit04\TestCircleWithDeclaration\Circle.cpp	/^Circle::Circle(double newRadius) {$/;"	f	class:Circle
getArea	C++\Unit04\TestCircleWithDeclaration\Circle.cpp	/^double Circle::getArea() {$/;"	f	class:Circle
Circle	C++\Unit04\TestCircleWithDeclaration\Circle.h	/^class Circle {$/;"	c
radius	C++\Unit04\TestCircleWithDeclaration\Circle.h	/^  double radius;$/;"	m	class:Circle
main	C++\Unit04\TestCircleWithDeclaration\TestCircleWithDeclaration.cpp	/^int main() {$/;"	f
circle1	C++\Unit04\TestCircleWithDeclaration\temp.cpp	/^Circle circle1;$/;"	v
pCircle	C++\Unit04\TestCircleWithDeclaration\temp.cpp	/^Circle *pCircle = &circle1; $/;"	v
Circle	C++\Unit04\TestCircle\TestCircle.cpp	/^  Circle() {$/;"	f	class:Circle
Circle	C++\Unit04\TestCircle\TestCircle.cpp	/^  Circle(double newRadius) {$/;"	f	class:Circle
Circle	C++\Unit04\TestCircle\TestCircle.cpp	/^class Circle {$/;"	c	file:
getArea	C++\Unit04\TestCircle\TestCircle.cpp	/^  double getArea() {$/;"	f	class:Circle
main	C++\Unit04\TestCircle\TestCircle.cpp	/^int main() {$/;"	f
radius	C++\Unit04\TestCircle\TestCircle.cpp	/^  double radius;$/;"	m	class:Circle	file:
Circle	C++\Unit04\TotalArea\Circle2.cpp	/^Circle::Circle()$/;"	f	class:Circle
Circle	C++\Unit04\TotalArea\Circle2.cpp	/^Circle::Circle(double newRadius)$/;"	f	class:Circle
getArea	C++\Unit04\TotalArea\Circle2.cpp	/^double Circle::getArea()$/;"	f	class:Circle
getRadius	C++\Unit04\TotalArea\Circle2.cpp	/^double Circle::getRadius()$/;"	f	class:Circle
setRadius	C++\Unit04\TotalArea\Circle2.cpp	/^void Circle::setRadius(double newRadius)$/;"	f	class:Circle
Circle	C++\Unit04\TotalArea\Circle2.h	/^class Circle$/;"	c
radius_	C++\Unit04\TotalArea\Circle2.h	/^  double radius_;$/;"	m	class:Circle
main	C++\Unit04\TotalArea\TotalArea.cpp	/^int main()$/;"	f
printCircleArray	C++\Unit04\TotalArea\TotalArea.cpp	/^void printCircleArray(Circle circleArray[], int size)$/;"	f
sum	C++\Unit04\TotalArea\TotalArea.cpp	/^double sum(Circle circleArray[], int size) $/;"	f
count	C++\Unit04\password\password.cpp	/^void count(const string& s) {$/;"	f
initString	C++\Unit04\password\password.cpp	/^void initString(string& s) {$/;"	f
main	C++\Unit04\password\password.cpp	/^int main() {$/;"	f
day	C++\Unit04\password\����ͳ�ƴ��롪��by��������ykt1\gerneral_interface.cpp	/^const std::string day="01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 "\\$/;"	v
hasSpecialCharacter	C++\Unit04\password\����ͳ�ƴ��롪��by��������ykt1\gerneral_interface.cpp	/^bool hasSpecialCharacter(const std::string& paswrd)$/;"	f
isBirthday	C++\Unit04\password\����ͳ�ƴ��롪��by��������ykt1\gerneral_interface.cpp	/^bool isBirthday(const std::string& paswrd)$/;"	f
isNum	C++\Unit04\password\����ͳ�ƴ��롪��by��������ykt1\gerneral_interface.cpp	/^bool isNum(const std::string& paswrd)$/;"	f
isPureAlpha	C++\Unit04\password\����ͳ�ƴ��롪��by��������ykt1\gerneral_interface.cpp	/^bool isPureAlpha(const std::string paswrd)$/;"	f
month	C++\Unit04\password\����ͳ�ƴ��롪��by��������ykt1\gerneral_interface.cpp	/^const std::string month="01 02 03 04 05 06 07 08 09 10 11 12";$/;"	v
GERNERAL_INTERFACE_H	C++\Unit04\password\����ͳ�ƴ��롪��by��������ykt1\gerneral_interface.h	2;"	d
passwordLoad	C++\Unit04\password\����ͳ�ƴ��롪��by��������ykt1\load.cpp	/^void passwordLoad(string& s)$/;"	f
LOAD_H	C++\Unit04\password\����ͳ�ƴ��롪��by��������ykt1\load.h	2;"	d
main	C++\Unit04\password\����ͳ�ƴ��롪��by��������ykt1\main.cpp	/^int main(int argc, char** argv) {$/;"	f
Circle	C++\Unit05\CopyConstructorDemo\Circle6.cpp	/^Circle::Circle()$/;"	f	class:Circle
Circle	C++\Unit05\CopyConstructorDemo\Circle6.cpp	/^Circle::Circle(double radius)$/;"	f	class:Circle
getArea	C++\Unit05\CopyConstructorDemo\Circle6.cpp	/^double Circle::getArea()$/;"	f	class:Circle
getNumberOfObjects	C++\Unit05\CopyConstructorDemo\Circle6.cpp	/^int Circle::getNumberOfObjects()$/;"	f	class:Circle
getRadius	C++\Unit05\CopyConstructorDemo\Circle6.cpp	/^double Circle::getRadius()$/;"	f	class:Circle
numberOfObjects	C++\Unit05\CopyConstructorDemo\Circle6.cpp	/^int Circle::numberOfObjects = 0;$/;"	m	class:Circle	file:
setRadius	C++\Unit05\CopyConstructorDemo\Circle6.cpp	/^void Circle::setRadius(double radius)$/;"	f	class:Circle
~Circle	C++\Unit05\CopyConstructorDemo\Circle6.cpp	/^Circle::~Circle()$/;"	f	class:Circle
CIRCLE6_H	C++\Unit05\CopyConstructorDemo\Circle6.h	2;"	d
Circle	C++\Unit05\CopyConstructorDemo\Circle6.h	/^class Circle$/;"	c
numberOfObjects	C++\Unit05\CopyConstructorDemo\Circle6.h	/^  static int numberOfObjects;$/;"	m	class:Circle
radius	C++\Unit05\CopyConstructorDemo\Circle6.h	/^  double radius;$/;"	m	class:Circle
main	C++\Unit05\CopyConstructorDemo\CopyConstructorDemo.cpp	/^int main()$/;"	f
displayPerson	C++\Unit05\CustomCopyConstructor\CustomCopyConstructor.cpp	/^void displayPerson(Person &person1, Person &person2)$/;"	f
main	C++\Unit05\CustomCopyConstructor\CustomCopyConstructor.cpp	/^int main()$/;"	f
Date	C++\Unit05\CustomCopyConstructor\Date1.cpp	/^Date::Date(int newYear, int newMonth, int newDay)$/;"	f	class:Date
getYear	C++\Unit05\CustomCopyConstructor\Date1.cpp	/^int Date::getYear()$/;"	f	class:Date
setYear	C++\Unit05\CustomCopyConstructor\Date1.cpp	/^void Date::setYear(int newYear)$/;"	f	class:Date
DATE_H	C++\Unit05\CustomCopyConstructor\Date1.h	2;"	d
Date	C++\Unit05\CustomCopyConstructor\Date1.h	/^class Date$/;"	c
day	C++\Unit05\CustomCopyConstructor\Date1.h	/^  int day;$/;"	m	class:Date
month	C++\Unit05\CustomCopyConstructor\Date1.h	/^  int month;$/;"	m	class:Date
year	C++\Unit05\CustomCopyConstructor\Date1.h	/^  int year;$/;"	m	class:Date
Person	C++\Unit05\CustomCopyConstructor\Person1.cpp	/^Person::Person(Person &person)$/;"	f	class:Person
Person	C++\Unit05\CustomCopyConstructor\Person1.cpp	/^Person::Person(int id, int year, int month, int day)$/;"	f	class:Person
getBirthDate	C++\Unit05\CustomCopyConstructor\Person1.cpp	/^Date * Person::getBirthDate()$/;"	f	class:Person
getId	C++\Unit05\CustomCopyConstructor\Person1.cpp	/^int Person::getId()$/;"	f	class:Person
Person	C++\Unit05\CustomCopyConstructor\Person1.h	/^class Person$/;"	c
birthDate	C++\Unit05\CustomCopyConstructor\Person1.h	/^  Date *birthDate; \/\/ The pointer of the object$/;"	m	class:Person
id	C++\Unit05\CustomCopyConstructor\Person1.h	/^  int id;$/;"	m	class:Person
Date	C++\Unit05\ShallowCopyDemo\Date.cpp	/^Date::Date(int newYear, int newMonth, int newDay)$/;"	f	class:Date
getYear	C++\Unit05\ShallowCopyDemo\Date.cpp	/^int Date::getYear()$/;"	f	class:Date
setYear	C++\Unit05\ShallowCopyDemo\Date.cpp	/^void Date::setYear(int newYear)$/;"	f	class:Date
DATE_H	C++\Unit05\ShallowCopyDemo\Date.h	2;"	d
Date	C++\Unit05\ShallowCopyDemo\Date.h	/^class Date$/;"	c
day	C++\Unit05\ShallowCopyDemo\Date.h	/^  int day;$/;"	m	class:Date
month	C++\Unit05\ShallowCopyDemo\Date.h	/^  int month;$/;"	m	class:Date
year	C++\Unit05\ShallowCopyDemo\Date.h	/^  int year;$/;"	m	class:Date
Person	C++\Unit05\ShallowCopyDemo\Person.cpp	/^Person::Person(int id, int year, int month, int day)$/;"	f	class:Person
getBirthDate	C++\Unit05\ShallowCopyDemo\Person.cpp	/^Date * Person::getBirthDate()$/;"	f	class:Person
getId	C++\Unit05\ShallowCopyDemo\Person.cpp	/^int Person::getId()$/;"	f	class:Person
Person	C++\Unit05\ShallowCopyDemo\Person.h	/^class Person$/;"	c
birthDate	C++\Unit05\ShallowCopyDemo\Person.h	/^  Date* birthDate; \/\/ The pointer of the object$/;"	m	class:Person
id_	C++\Unit05\ShallowCopyDemo\Person.h	/^  int id_;$/;"	m	class:Person
displayPerson	C++\Unit05\ShallowCopyDemo\ShallowCopyDemo.cpp	/^void displayPerson(Person &person1, Person &person2)$/;"	f
main	C++\Unit05\ShallowCopyDemo\ShallowCopyDemo.cpp	/^int main()$/;"	f
Circle	C++\Unit05\TestCircle5\Circle5.cpp	/^Circle::Circle()$/;"	f	class:Circle
Circle	C++\Unit05\TestCircle5\Circle5.cpp	/^Circle::Circle(double radius)$/;"	f	class:Circle
getArea	C++\Unit05\TestCircle5\Circle5.cpp	/^double Circle::getArea()$/;"	f	class:Circle
getNumberOfObjects	C++\Unit05\TestCircle5\Circle5.cpp	/^int Circle::getNumberOfObjects()$/;"	f	class:Circle
getRadius	C++\Unit05\TestCircle5\Circle5.cpp	/^double Circle::getRadius()$/;"	f	class:Circle
numberOfObjects	C++\Unit05\TestCircle5\Circle5.cpp	/^int Circle::numberOfObjects = 0;$/;"	m	class:Circle	file:
setRadius	C++\Unit05\TestCircle5\Circle5.cpp	/^void Circle::setRadius(double radius)$/;"	f	class:Circle
CIRCLE_H	C++\Unit05\TestCircle5\Circle5.h	2;"	d
Circle	C++\Unit05\TestCircle5\Circle5.h	/^class Circle$/;"	c
numberOfObjects	C++\Unit05\TestCircle5\Circle5.h	/^  static int numberOfObjects;      \/\/static variable $/;"	m	class:Circle
radius	C++\Unit05\TestCircle5\Circle5.h	/^  double radius;$/;"	m	class:Circle
main	C++\Unit05\TestCircle5\TestCircle5.cpp	/^int main()$/;"	f
Circle	C++\Unit05\TestCircle6\Circle6.cpp	/^Circle::Circle()$/;"	f	class:Circle
Circle	C++\Unit05\TestCircle6\Circle6.cpp	/^Circle::Circle(double radius)$/;"	f	class:Circle
getArea	C++\Unit05\TestCircle6\Circle6.cpp	/^double Circle::getArea()$/;"	f	class:Circle
getNumberOfObjects	C++\Unit05\TestCircle6\Circle6.cpp	/^int Circle::getNumberOfObjects()$/;"	f	class:Circle
getRadius	C++\Unit05\TestCircle6\Circle6.cpp	/^double Circle::getRadius()$/;"	f	class:Circle
numberOfObjects	C++\Unit05\TestCircle6\Circle6.cpp	/^int Circle::numberOfObjects = 0;$/;"	m	class:Circle	file:
setRadius	C++\Unit05\TestCircle6\Circle6.cpp	/^void Circle::setRadius(double radius)$/;"	f	class:Circle
~Circle	C++\Unit05\TestCircle6\Circle6.cpp	/^Circle::~Circle()$/;"	f	class:Circle
CIRCLE6_H	C++\Unit05\TestCircle6\Circle6.h	2;"	d
Circle	C++\Unit05\TestCircle6\Circle6.h	/^class Circle$/;"	c
numberOfObjects	C++\Unit05\TestCircle6\Circle6.h	/^  static int numberOfObjects;$/;"	m	class:Circle
radius	C++\Unit05\TestCircle6\Circle6.h	/^  double radius;$/;"	m	class:Circle
main	C++\Unit05\TestCircle6\TestCircle6.cpp	/^int main()$/;"	f
Course	C++\Unit05\TestCourse\Course.cpp	/^Course::Course(const string &name)$/;"	f	class:Course
addStudent	C++\Unit05\TestCourse\Course.cpp	/^void Course::addStudent(const string &student)$/;"	f	class:Course
getName	C++\Unit05\TestCourse\Course.cpp	/^string Course::getName()$/;"	f	class:Course
getNumberOfStudents	C++\Unit05\TestCourse\Course.cpp	/^int Course::getNumberOfStudents()$/;"	f	class:Course
getStudents	C++\Unit05\TestCourse\Course.cpp	/^string * Course::getStudents()$/;"	f	class:Course
COURSE_H	C++\Unit05\TestCourse\Course.h	2;"	d
Course	C++\Unit05\TestCourse\Course.h	/^class Course$/;"	c
name	C++\Unit05\TestCourse\Course.h	/^  string name;$/;"	m	class:Course
numberOfStudents	C++\Unit05\TestCourse\Course.h	/^  int numberOfStudents;$/;"	m	class:Course
students	C++\Unit05\TestCourse\Course.h	/^  string students[100];$/;"	m	class:Course
main	C++\Unit05\TestCourse\TestCourse.cpp	/^int main()$/;"	f
Date	C++\Unit05\TestFriendClass\Date2.h	/^class Date$/;"	c
day	C++\Unit05\TestFriendClass\Date2.h	/^  int day;$/;"	m	class:Date
month	C++\Unit05\TestFriendClass\Date2.h	/^  int month;$/;"	m	class:Date
year	C++\Unit05\TestFriendClass\Date2.h	/^  int year;$/;"	m	class:Date
AccessDate	C++\Unit05\TestFriendClass\TestFriendClass.cpp	/^class AccessDate$/;"	c	file:
main	C++\Unit05\TestFriendClass\TestFriendClass.cpp	/^int main()$/;"	f
p	C++\Unit05\TestFriendClass\TestFriendClass.cpp	/^  static void p()$/;"	f	class:AccessDate
Date	C++\Unit05\TestFriendFunction\TestFriendFunction.cpp	/^class Date $/;"	c	file:
day	C++\Unit05\TestFriendFunction\TestFriendFunction.cpp	/^  int day;$/;"	m	class:Date	file:
main	C++\Unit05\TestFriendFunction\TestFriendFunction.cpp	/^int main()$/;"	f
month	C++\Unit05\TestFriendFunction\TestFriendFunction.cpp	/^  int month;$/;"	m	class:Date	file:
p	C++\Unit05\TestFriendFunction\TestFriendFunction.cpp	/^void p()$/;"	f
year	C++\Unit05\TestFriendFunction\TestFriendFunction.cpp	/^  int year;$/;"	m	class:Date	file:
DATE_H	C++\Unit05\TestPerson1\Date.h	2;"	d
Date	C++\Unit05\TestPerson1\Date.h	/^class Date$/;"	c
day	C++\Unit05\TestPerson1\Date.h	/^  int day;$/;"	m	class:Date
month	C++\Unit05\TestPerson1\Date.h	/^  int month;$/;"	m	class:Date
year	C++\Unit05\TestPerson1\Date.h	/^  int year;$/;"	m	class:Date
Date	C++\Unit05\TestPerson1\Date1.cpp	/^Date::Date(int newYear, int newMonth, int newDay)$/;"	f	class:Date
getYear	C++\Unit05\TestPerson1\Date1.cpp	/^int Date::getYear()$/;"	f	class:Date
setYear	C++\Unit05\TestPerson1\Date1.cpp	/^void Date::setYear(int newYear)$/;"	f	class:Date
DATE1_H	C++\Unit05\TestPerson1\Date1.h	2;"	d
Date	C++\Unit05\TestPerson1\Date1.h	/^class Date$/;"	c
day	C++\Unit05\TestPerson1\Date1.h	/^  int day;$/;"	m	class:Date
month	C++\Unit05\TestPerson1\Date1.h	/^  int month;$/;"	m	class:Date
year	C++\Unit05\TestPerson1\Date1.h	/^  int year;$/;"	m	class:Date
Person	C++\Unit05\TestPerson1\Person1.cpp	/^Person::Person(Person &person)$/;"	f	class:Person
Person	C++\Unit05\TestPerson1\Person1.cpp	/^Person::Person(int id, int year, int month, int day)$/;"	f	class:Person
getBirthDate	C++\Unit05\TestPerson1\Person1.cpp	/^Date * Person::getBirthDate()$/;"	f	class:Person
getId	C++\Unit05\TestPerson1\Person1.cpp	/^int Person::getId()$/;"	f	class:Person
Person	C++\Unit05\TestPerson1\Person1.h	/^class Person$/;"	c
birthDate	C++\Unit05\TestPerson1\Person1.h	/^  Date *birthDate; \/\/ The pointer of the object$/;"	m	class:Person
id	C++\Unit05\TestPerson1\Person1.h	/^  int id;$/;"	m	class:Person
main	C++\Unit05\TestPerson1\TestPerson1.cpp	/^int main()$/;"	f
Date	C++\Unit05\TestPerson\Date.cpp	/^Date::Date(int newYear, int newMonth, int newDay)$/;"	f	class:Date
getYear	C++\Unit05\TestPerson\Date.cpp	/^int Date::getYear()$/;"	f	class:Date
setYear	C++\Unit05\TestPerson\Date.cpp	/^void Date::setYear(int newYear)$/;"	f	class:Date
DATE_H	C++\Unit05\TestPerson\Date.h	2;"	d
Date	C++\Unit05\TestPerson\Date.h	/^class Date$/;"	c
day	C++\Unit05\TestPerson\Date.h	/^  int day;$/;"	m	class:Date
month	C++\Unit05\TestPerson\Date.h	/^  int month;$/;"	m	class:Date
year	C++\Unit05\TestPerson\Date.h	/^  int year;$/;"	m	class:Date
Person	C++\Unit05\TestPerson\Person.cpp	/^Person::Person(int id, int year, int month, int day)$/;"	f	class:Person
getBirthDate	C++\Unit05\TestPerson\Person.cpp	/^Date * Person::getBirthDate()$/;"	f	class:Person
getId	C++\Unit05\TestPerson\Person.cpp	/^int Person::getId()$/;"	f	class:Person
Person	C++\Unit05\TestPerson\Person.h	/^class Person$/;"	c
birthDate	C++\Unit05\TestPerson\Person.h	/^  Date* birthDate; \/\/ The pointer of the object$/;"	m	class:Person
id	C++\Unit05\TestPerson\Person.h	/^  int id;$/;"	m	class:Person
main	C++\Unit05\TestPerson\TestPerson.cpp	/^int main()$/;"	f
StackOfIntegers	C++\Unit05\TestStackOfIntegers\StackOfIntegers.cpp	/^StackOfIntegers::StackOfIntegers()$/;"	f	class:StackOfIntegers
empty	C++\Unit05\TestStackOfIntegers\StackOfIntegers.cpp	/^bool StackOfIntegers::empty()$/;"	f	class:StackOfIntegers
getSize	C++\Unit05\TestStackOfIntegers\StackOfIntegers.cpp	/^int StackOfIntegers::getSize()$/;"	f	class:StackOfIntegers
peek	C++\Unit05\TestStackOfIntegers\StackOfIntegers.cpp	/^int StackOfIntegers::peek()$/;"	f	class:StackOfIntegers
pop	C++\Unit05\TestStackOfIntegers\StackOfIntegers.cpp	/^int StackOfIntegers::pop()$/;"	f	class:StackOfIntegers
push	C++\Unit05\TestStackOfIntegers\StackOfIntegers.cpp	/^int StackOfIntegers::push(int value)$/;"	f	class:StackOfIntegers
STACK_H	C++\Unit05\TestStackOfIntegers\StackOfIntegers.h	2;"	d
StackOfIntegers	C++\Unit05\TestStackOfIntegers\StackOfIntegers.h	/^class StackOfIntegers$/;"	c
elements	C++\Unit05\TestStackOfIntegers\StackOfIntegers.h	/^  int elements[100];$/;"	m	class:StackOfIntegers
size	C++\Unit05\TestStackOfIntegers\StackOfIntegers.h	/^  int size;$/;"	m	class:StackOfIntegers
main	C++\Unit05\TestStackOfIntegers\TestStackOfIntegers.cpp	/^int main()$/;"	f
main	C++\Unit05\TestVector\TestVector.cpp	/^int main()$/;"	f
Stack	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^Stack::Stack()$/;"	f	class:Stack
fuckit	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^bool Map::fuckit(Stack& stk)$/;"	f	class:Map
g_cblocks	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^const char g_cblocks[][3]= { "��", "��","��", "��","��", "��", "��",$/;"	v
g_mask	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^const char g_mask[][10] = {  \/\/�Ҫ�ǰ�����ĳɶ�����16λ��short�����߿��������,��֪����᲻�ᵰ��$/;"	v
g_wblocks	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^const wchar_t g_wblocks[]= { L'��', L'��',L'��', L'��',L'��', L'��',L'��',$/;"	v
genMask	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^void Map::genMask()$/;"	f	class:Map
getFileNameDlg	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^bool getFileNameDlg(HWND hwnd, LPSTR pfilename)$/;"	f
initMap	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^bool Map::initMap(const char* filename)$/;"	f	class:Map
pop	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^int Stack::pop(Elem &elem)$/;"	f	class:Stack
printMap	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^void Map::printMap()$/;"	f	class:Map
push	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^void Stack::push(const Elem &elem)$/;"	f	class:Stack
reflect	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^char reflect(const char* block)$/;"	f
reflect	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^char reflect(wchar_t block)  \/\/�⺯�����ǵ���$/;"	f
showMask	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^void Map::showMask()$/;"	f	class:Map
showResult	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^bool Map::showResult()     \/\/������ҳɹ����map����ʹ�ñ�����!$/;"	f	class:Map
~Stack	C++\Unit06\ChainingDemo\ChainingDemo.cpp	/^Stack::~Stack()$/;"	f	class:Stack
GeometricObject	C++\Unit06\DynamicCastingDemo\AbstractGeometricObject.cpp	/^GeometricObject::GeometricObject()$/;"	f	class:GeometricObject
GeometricObject	C++\Unit06\DynamicCastingDemo\AbstractGeometricObject.cpp	/^GeometricObject::GeometricObject(string color, bool filled)$/;"	f	class:GeometricObject
getColor	C++\Unit06\DynamicCastingDemo\AbstractGeometricObject.cpp	/^string GeometricObject::getColor()$/;"	f	class:GeometricObject
isFilled	C++\Unit06\DynamicCastingDemo\AbstractGeometricObject.cpp	/^bool GeometricObject::isFilled()$/;"	f	class:GeometricObject
setColor	C++\Unit06\DynamicCastingDemo\AbstractGeometricObject.cpp	/^void GeometricObject::setColor(string color)$/;"	f	class:GeometricObject
setFilled	C++\Unit06\DynamicCastingDemo\AbstractGeometricObject.cpp	/^void GeometricObject::setFilled(bool filled)$/;"	f	class:GeometricObject
toString	C++\Unit06\DynamicCastingDemo\AbstractGeometricObject.cpp	/^string GeometricObject::toString()$/;"	f	class:GeometricObject
ABSTRACTGEOMETRICOBJECT_H	C++\Unit06\DynamicCastingDemo\AbstractGeometricObject.h	2;"	d
GeometricObject	C++\Unit06\DynamicCastingDemo\AbstractGeometricObject.h	/^class GeometricObject$/;"	c
color_	C++\Unit06\DynamicCastingDemo\AbstractGeometricObject.h	/^  string color_;$/;"	m	class:GeometricObject
filled_	C++\Unit06\DynamicCastingDemo\AbstractGeometricObject.h	/^  bool filled_;$/;"	m	class:GeometricObject
Circle	C++\Unit06\DynamicCastingDemo\DerivedCircle2.cpp	/^Circle::Circle()$/;"	f	class:Circle
Circle	C++\Unit06\DynamicCastingDemo\DerivedCircle2.cpp	/^Circle::Circle(double radius)$/;"	f	class:Circle
getArea	C++\Unit06\DynamicCastingDemo\DerivedCircle2.cpp	/^double Circle::getArea()$/;"	f	class:Circle
getDiameter	C++\Unit06\DynamicCastingDemo\DerivedCircle2.cpp	/^double Circle::getDiameter()$/;"	f	class:Circle
getPerimeter	C++\Unit06\DynamicCastingDemo\DerivedCircle2.cpp	/^double Circle::getPerimeter()$/;"	f	class:Circle
getRadius	C++\Unit06\DynamicCastingDemo\DerivedCircle2.cpp	/^double Circle::getRadius()$/;"	f	class:Circle
setRadius	C++\Unit06\DynamicCastingDemo\DerivedCircle2.cpp	/^void Circle::setRadius(double radius)$/;"	f	class:Circle
Circle	C++\Unit06\DynamicCastingDemo\DerivedCircle2.h	/^class Circle: public GeometricObject$/;"	c
DERIVEDCIRCLE2_H	C++\Unit06\DynamicCastingDemo\DerivedCircle2.h	2;"	d
radius_	C++\Unit06\DynamicCastingDemo\DerivedCircle2.h	/^  double radius_;$/;"	m	class:Circle
displayGeometricObject	C++\Unit06\DynamicCastingDemo\DynamicCastingDemo.cpp	/^void displayGeometricObject(GeometricObject &object)$/;"	f
main	C++\Unit06\DynamicCastingDemo\DynamicCastingDemo.cpp	/^int main()$/;"	f
Rectangle	C++\Unit06\DynamicCastingDemo\Rectangle2.cpp	/^Rectangle::Rectangle()$/;"	f	class:Rectangle
Rectangle	C++\Unit06\DynamicCastingDemo\Rectangle2.cpp	/^Rectangle::Rectangle(double width, double height)$/;"	f	class:Rectangle
getArea	C++\Unit06\DynamicCastingDemo\Rectangle2.cpp	/^double Rectangle::getArea()$/;"	f	class:Rectangle
getHeight	C++\Unit06\DynamicCastingDemo\Rectangle2.cpp	/^double Rectangle::getHeight()$/;"	f	class:Rectangle
getPerimeter	C++\Unit06\DynamicCastingDemo\Rectangle2.cpp	/^double Rectangle::getPerimeter()$/;"	f	class:Rectangle
getWidth	C++\Unit06\DynamicCastingDemo\Rectangle2.cpp	/^double Rectangle::getWidth()$/;"	f	class:Rectangle
setHeight	C++\Unit06\DynamicCastingDemo\Rectangle2.cpp	/^void Rectangle::setHeight(double height)$/;"	f	class:Rectangle
setWidth	C++\Unit06\DynamicCastingDemo\Rectangle2.cpp	/^void Rectangle::setWidth(double width)$/;"	f	class:Rectangle
RECTANGLE2_H	C++\Unit06\DynamicCastingDemo\Rectangle2.h	2;"	d
Rectangle	C++\Unit06\DynamicCastingDemo\Rectangle2.h	/^class Rectangle: public GeometricObject$/;"	c
height_	C++\Unit06\DynamicCastingDemo\Rectangle2.h	/^  double height_;$/;"	m	class:Rectangle
width_	C++\Unit06\DynamicCastingDemo\Rectangle2.h	/^  double width_;$/;"	m	class:Rectangle
A	C++\Unit06\PolymorphismDemo\PolymorphismDemo.cpp	/^class A: public B$/;"	c	file:
B	C++\Unit06\PolymorphismDemo\PolymorphismDemo.cpp	/^class B: public C$/;"	c	file:
C	C++\Unit06\PolymorphismDemo\PolymorphismDemo.cpp	/^class C$/;"	c	file:
displayObject	C++\Unit06\PolymorphismDemo\PolymorphismDemo.cpp	/^void displayObject(C *p)$/;"	f
main	C++\Unit06\PolymorphismDemo\PolymorphismDemo.cpp	/^int main()$/;"	f
toString	C++\Unit06\PolymorphismDemo\PolymorphismDemo.cpp	/^  string toString()$/;"	f	class:A	file:
toString	C++\Unit06\PolymorphismDemo\PolymorphismDemo.cpp	/^  string toString()$/;"	f	class:B	file:
toString	C++\Unit06\PolymorphismDemo\PolymorphismDemo.cpp	/^  virtual string toString()$/;"	f	class:C
Apple	C++\Unit06\TestFruit\Apple.cpp	/^Apple::Apple()  {$/;"	f	class:Apple
Apple	C++\Unit06\TestFruit\Apple.h	/^class Apple: public Fruit {$/;"	c
Fruit	C++\Unit06\TestFruit\Fruit.cpp	/^Fruit::Fruit (int id) {$/;"	f	class:Fruit
Fruit	C++\Unit06\TestFruit\Fruit.cpp	/^Fruit::Fruit() {$/;"	f	class:Fruit
Fruit	C++\Unit06\TestFruit\Fruit.h	/^class Fruit {$/;"	c
s	C++\Unit06\TestFruit\Fruit.h	/^    std::string s;$/;"	m	class:Fruit
main	C++\Unit06\TestFruit\TestFruit.cpp	/^int main () {$/;"	f
GeometricObject	C++\Unit06\TestGeometricObject2\AbstractGeometricObject.cpp	/^GeometricObject::GeometricObject()$/;"	f	class:GeometricObject
GeometricObject	C++\Unit06\TestGeometricObject2\AbstractGeometricObject.cpp	/^GeometricObject::GeometricObject(string color, bool filled)$/;"	f	class:GeometricObject
getColor	C++\Unit06\TestGeometricObject2\AbstractGeometricObject.cpp	/^string GeometricObject::getColor()$/;"	f	class:GeometricObject
isFilled	C++\Unit06\TestGeometricObject2\AbstractGeometricObject.cpp	/^bool GeometricObject::isFilled()$/;"	f	class:GeometricObject
setColor	C++\Unit06\TestGeometricObject2\AbstractGeometricObject.cpp	/^void GeometricObject::setColor(string color)$/;"	f	class:GeometricObject
setFilled	C++\Unit06\TestGeometricObject2\AbstractGeometricObject.cpp	/^void GeometricObject::setFilled(bool filled)$/;"	f	class:GeometricObject
toString	C++\Unit06\TestGeometricObject2\AbstractGeometricObject.cpp	/^string GeometricObject::toString()$/;"	f	class:GeometricObject
ABSTRACTGEOMETRICOBJECT_H	C++\Unit06\TestGeometricObject2\AbstractGeometricObject.h	2;"	d
GeometricObject	C++\Unit06\TestGeometricObject2\AbstractGeometricObject.h	/^class GeometricObject$/;"	c
color_	C++\Unit06\TestGeometricObject2\AbstractGeometricObject.h	/^  string color_;$/;"	m	class:GeometricObject
filled_	C++\Unit06\TestGeometricObject2\AbstractGeometricObject.h	/^  bool filled_;$/;"	m	class:GeometricObject
getArea	C++\Unit06\TestGeometricObject2\AbstractGeometricObject.h	/^  virtual double getArea() {  };$/;"	f	class:GeometricObject
getPerimeter	C++\Unit06\TestGeometricObject2\AbstractGeometricObject.h	/^  virtual double getPerimeter() {  };$/;"	f	class:GeometricObject
Circle	C++\Unit06\TestGeometricObject2\DerivedCircle2.cpp	/^Circle::Circle()$/;"	f	class:Circle
Circle	C++\Unit06\TestGeometricObject2\DerivedCircle2.cpp	/^Circle::Circle(double radius)$/;"	f	class:Circle
getArea	C++\Unit06\TestGeometricObject2\DerivedCircle2.cpp	/^double Circle::getArea()$/;"	f	class:Circle
getDiameter	C++\Unit06\TestGeometricObject2\DerivedCircle2.cpp	/^double Circle::getDiameter()$/;"	f	class:Circle
getPerimeter	C++\Unit06\TestGeometricObject2\DerivedCircle2.cpp	/^double Circle::getPerimeter()$/;"	f	class:Circle
getRadius	C++\Unit06\TestGeometricObject2\DerivedCircle2.cpp	/^double Circle::getRadius()$/;"	f	class:Circle
setRadius	C++\Unit06\TestGeometricObject2\DerivedCircle2.cpp	/^void Circle::setRadius(double radius)$/;"	f	class:Circle
Circle	C++\Unit06\TestGeometricObject2\DerivedCircle2.h	/^class Circle: public GeometricObject$/;"	c
DERIVEDCIRCLE2_H	C++\Unit06\TestGeometricObject2\DerivedCircle2.h	2;"	d
radius_	C++\Unit06\TestGeometricObject2\DerivedCircle2.h	/^  double radius_;$/;"	m	class:Circle
Rectangle	C++\Unit06\TestGeometricObject2\Rectangle2.cpp	/^Rectangle::Rectangle()$/;"	f	class:Rectangle
Rectangle	C++\Unit06\TestGeometricObject2\Rectangle2.cpp	/^Rectangle::Rectangle(double width, double height)$/;"	f	class:Rectangle
getArea	C++\Unit06\TestGeometricObject2\Rectangle2.cpp	/^double Rectangle::getArea()$/;"	f	class:Rectangle
getHeight	C++\Unit06\TestGeometricObject2\Rectangle2.cpp	/^double Rectangle::getHeight()$/;"	f	class:Rectangle
getPerimeter	C++\Unit06\TestGeometricObject2\Rectangle2.cpp	/^double Rectangle::getPerimeter()$/;"	f	class:Rectangle
getWidth	C++\Unit06\TestGeometricObject2\Rectangle2.cpp	/^double Rectangle::getWidth()$/;"	f	class:Rectangle
setHeight	C++\Unit06\TestGeometricObject2\Rectangle2.cpp	/^void Rectangle::setHeight(double height)$/;"	f	class:Rectangle
setWidth	C++\Unit06\TestGeometricObject2\Rectangle2.cpp	/^void Rectangle::setWidth(double width)$/;"	f	class:Rectangle
RECTANGLE2_H	C++\Unit06\TestGeometricObject2\Rectangle2.h	2;"	d
Rectangle	C++\Unit06\TestGeometricObject2\Rectangle2.h	/^class Rectangle: public GeometricObject$/;"	c
height_	C++\Unit06\TestGeometricObject2\Rectangle2.h	/^  double height_;$/;"	m	class:Rectangle
width_	C++\Unit06\TestGeometricObject2\Rectangle2.h	/^  double width_;$/;"	m	class:Rectangle
displayGeometricObject	C++\Unit06\TestGeometricObject2\TestGeometricObject2.cpp	/^void displayGeometricObject(GeometricObject &object)$/;"	f
equalArea	C++\Unit06\TestGeometricObject2\TestGeometricObject2.cpp	/^bool equalArea(GeometricObject &object1,$/;"	f
main	C++\Unit06\TestGeometricObject2\TestGeometricObject2.cpp	/^int main()$/;"	f
Circle	C++\Unit06\TestGeometricObject\DerivedCircle.cpp	/^Circle::Circle()$/;"	f	class:Circle
Circle	C++\Unit06\TestGeometricObject\DerivedCircle.cpp	/^Circle::Circle(double radius)$/;"	f	class:Circle
getArea	C++\Unit06\TestGeometricObject\DerivedCircle.cpp	/^double Circle::getArea()$/;"	f	class:Circle
getDiameter	C++\Unit06\TestGeometricObject\DerivedCircle.cpp	/^double Circle::getDiameter()$/;"	f	class:Circle
getPerimeter	C++\Unit06\TestGeometricObject\DerivedCircle.cpp	/^double Circle::getPerimeter()$/;"	f	class:Circle
getRadius	C++\Unit06\TestGeometricObject\DerivedCircle.cpp	/^double Circle::getRadius()$/;"	f	class:Circle
setRadius	C++\Unit06\TestGeometricObject\DerivedCircle.cpp	/^void Circle::setRadius(double radius)$/;"	f	class:Circle
Circle	C++\Unit06\TestGeometricObject\DerivedCircle.h	/^class Circle: public GeometricObject$/;"	c
DERIVEDCIRCLE_H	C++\Unit06\TestGeometricObject\DerivedCircle.h	2;"	d
radius_	C++\Unit06\TestGeometricObject\DerivedCircle.h	/^  double radius_;$/;"	m	class:Circle
GeometricObject	C++\Unit06\TestGeometricObject\GeometricObject.cpp	/^GeometricObject::GeometricObject()$/;"	f	class:GeometricObject
GeometricObject	C++\Unit06\TestGeometricObject\GeometricObject.cpp	/^GeometricObject::GeometricObject(string color, bool filled)$/;"	f	class:GeometricObject
getColor	C++\Unit06\TestGeometricObject\GeometricObject.cpp	/^string GeometricObject::getColor()$/;"	f	class:GeometricObject
isFilled	C++\Unit06\TestGeometricObject\GeometricObject.cpp	/^bool GeometricObject::isFilled()$/;"	f	class:GeometricObject
setColor	C++\Unit06\TestGeometricObject\GeometricObject.cpp	/^void GeometricObject::setColor(string color)$/;"	f	class:GeometricObject
setFilled	C++\Unit06\TestGeometricObject\GeometricObject.cpp	/^void GeometricObject::setFilled(bool filled)$/;"	f	class:GeometricObject
toString	C++\Unit06\TestGeometricObject\GeometricObject.cpp	/^string GeometricObject::toString()$/;"	f	class:GeometricObject
GEOMETRICOBJECT_H	C++\Unit06\TestGeometricObject\GeometricObject.h	2;"	d
GeometricObject	C++\Unit06\TestGeometricObject\GeometricObject.h	/^class GeometricObject$/;"	c
color_	C++\Unit06\TestGeometricObject\GeometricObject.h	/^    string color_;$/;"	m	class:GeometricObject
filled_	C++\Unit06\TestGeometricObject\GeometricObject.h	/^    bool filled_;$/;"	m	class:GeometricObject
Rectangle	C++\Unit06\TestGeometricObject\Rectangle.cpp	/^Rectangle::Rectangle()$/;"	f	class:Rectangle
Rectangle	C++\Unit06\TestGeometricObject\Rectangle.cpp	/^Rectangle::Rectangle(double width, double height)$/;"	f	class:Rectangle
getArea	C++\Unit06\TestGeometricObject\Rectangle.cpp	/^double Rectangle::getArea()$/;"	f	class:Rectangle
getHeight	C++\Unit06\TestGeometricObject\Rectangle.cpp	/^double Rectangle::getHeight()$/;"	f	class:Rectangle
getPerimeter	C++\Unit06\TestGeometricObject\Rectangle.cpp	/^double Rectangle::getPerimeter()$/;"	f	class:Rectangle
getWidth	C++\Unit06\TestGeometricObject\Rectangle.cpp	/^double Rectangle::getWidth()$/;"	f	class:Rectangle
setHeight	C++\Unit06\TestGeometricObject\Rectangle.cpp	/^void Rectangle::setHeight(double height)$/;"	f	class:Rectangle
setWidth	C++\Unit06\TestGeometricObject\Rectangle.cpp	/^void Rectangle::setWidth(double width)$/;"	f	class:Rectangle
RECTANGLE_H	C++\Unit06\TestGeometricObject\Rectangle.h	2;"	d
Rectangle	C++\Unit06\TestGeometricObject\Rectangle.h	/^class Rectangle: public GeometricObject$/;"	c
height_	C++\Unit06\TestGeometricObject\Rectangle.h	/^  double height_;$/;"	m	class:Rectangle
width_	C++\Unit06\TestGeometricObject\Rectangle.h	/^  double width_;$/;"	m	class:Rectangle
main	C++\Unit06\TestGeometricObject\TestGeometricObject.cpp	/^int main()$/;"	f
A	C++\Unit06\VisibilityDemo\VisibilityDemo.cpp	/^class A: public B {$/;"	c	file:
B	C++\Unit06\VisibilityDemo\VisibilityDemo.cpp	/^class B {$/;"	c	file:
display	C++\Unit06\VisibilityDemo\VisibilityDemo.cpp	/^  void display()$/;"	f	class:A
i	C++\Unit06\VisibilityDemo\VisibilityDemo.cpp	/^  int i;$/;"	m	class:B	file:
j	C++\Unit06\VisibilityDemo\VisibilityDemo.cpp	/^  int j;$/;"	m	class:B	file:
k	C++\Unit06\VisibilityDemo\VisibilityDemo.cpp	/^  int k;$/;"	m	class:B	file:
main	C++\Unit06\VisibilityDemo\VisibilityDemo.cpp	/^int main() {$/;"	f
A	C++\Unit06\WhyPolymorphismDemo\WhyPolymorphismDemo.cpp	/^class A: public B$/;"	c	file:
B	C++\Unit06\WhyPolymorphismDemo\WhyPolymorphismDemo.cpp	/^class B: public C$/;"	c	file:
C	C++\Unit06\WhyPolymorphismDemo\WhyPolymorphismDemo.cpp	/^class C$/;"	c	file:
displayObject	C++\Unit06\WhyPolymorphismDemo\WhyPolymorphismDemo.cpp	/^void displayObject(C x)$/;"	f
main	C++\Unit06\WhyPolymorphismDemo\WhyPolymorphismDemo.cpp	/^int main()$/;"	f
toString	C++\Unit06\WhyPolymorphismDemo\WhyPolymorphismDemo.cpp	/^  string toString()$/;"	f	class:A	file:
toString	C++\Unit06\WhyPolymorphismDemo\WhyPolymorphismDemo.cpp	/^  string toString()$/;"	f	class:B	file:
toString	C++\Unit06\WhyPolymorphismDemo\WhyPolymorphismDemo.cpp	/^  string toString()$/;"	f	class:C
Screen	C++\Unit07\7_1.cpp	/^	Screen() {$/;"	f	class:Screen	file:
Screen	C++\Unit07\7_1.cpp	/^	Screen(int width, int height) {$/;"	f	class:Screen	file:
Screen	C++\Unit07\7_1.cpp	/^class Screen {$/;"	c	file:
getHeight	C++\Unit07\7_1.cpp	/^	int getHeight() {$/;"	f	class:Screen
getInstance	C++\Unit07\7_1.cpp	/^	static Screen* getInstance(unsigned int width = 640, unsigned int height = 480) {$/;"	f	class:Screen
getWidth	C++\Unit07\7_1.cpp	/^	int getWidth() {$/;"	f	class:Screen
height	C++\Unit07\7_1.cpp	/^	int width, height;$/;"	m	class:Screen	file:
instance	C++\Unit07\7_1.cpp	/^	static Screen* instance;$/;"	m	class:Screen	file:
instance	C++\Unit07\7_1.cpp	/^Screen* Screen::instance = 0;$/;"	m	class:Screen	file:
main	C++\Unit07\7_1.cpp	/^int main() {$/;"	f
width	C++\Unit07\7_1.cpp	/^	int width, height;$/;"	m	class:Screen	file:
~Screen	C++\Unit07\7_1.cpp	/^	~Screen () {$/;"	f	class:Screen	file:
Screen	C++\Unit07\7_2.cpp	/^	Screen() {$/;"	f	class:Screen	file:
Screen	C++\Unit07\7_2.cpp	/^	Screen(int width, int height) {$/;"	f	class:Screen	file:
Screen	C++\Unit07\7_2.cpp	/^class Screen {$/;"	c	file:
getHeight	C++\Unit07\7_2.cpp	/^	int getHeight() {$/;"	f	class:Screen
getInstance	C++\Unit07\7_2.cpp	/^	static Screen* getInstance(unsigned int width = 640, unsigned int height = 480) {$/;"	f	class:Screen
getWidth	C++\Unit07\7_2.cpp	/^	int getWidth() {$/;"	f	class:Screen
height	C++\Unit07\7_2.cpp	/^	int width, height;$/;"	m	class:Screen	file:
instance	C++\Unit07\7_2.cpp	/^	static Screen* instance;$/;"	m	class:Screen	file:
instance	C++\Unit07\7_2.cpp	/^Screen* Screen::instance = 0;$/;"	m	class:Screen	file:
main	C++\Unit07\7_2.cpp	/^int main() {$/;"	f
width	C++\Unit07\7_2.cpp	/^	int width, height;$/;"	m	class:Screen	file:
~Screen	C++\Unit07\7_2.cpp	/^	~Screen () {$/;"	f	class:Screen	file:
main	C++\Unit07\test.cpp	/^int main() {$/;"	f
B_	C++\Unit08\8_1.cpp	/^	int R_, G_, B_;$/;"	m	class:MyShape	file:
Draw	C++\Unit08\8_1.cpp	/^	void Draw() {$/;"	f	class:MyCircle
G_	C++\Unit08\8_1.cpp	/^	int R_, G_, B_;$/;"	m	class:MyShape	file:
MyCircle	C++\Unit08\8_1.cpp	/^	MyCircle() {$/;"	f	class:MyCircle
MyCircle	C++\Unit08\8_1.cpp	/^	MyCircle(MyCircle& aCircle) {$/;"	f	class:MyCircle
MyCircle	C++\Unit08\8_1.cpp	/^	MyCircle(int x, int y, int radius) {$/;"	f	class:MyCircle
MyCircle	C++\Unit08\8_1.cpp	/^class MyCircle : public MyShape {$/;"	c	file:
MyShape	C++\Unit08\8_1.cpp	/^	MyShape() {$/;"	f	class:MyShape
MyShape	C++\Unit08\8_1.cpp	/^class MyShape {$/;"	c	file:
R_	C++\Unit08\8_1.cpp	/^	int R_, G_, B_;$/;"	m	class:MyShape	file:
colorToString	C++\Unit08\8_1.cpp	/^	string colorToString() {$/;"	f	class:MyShape
getB	C++\Unit08\8_1.cpp	/^	int getB() {$/;"	f	class:MyShape
getG	C++\Unit08\8_1.cpp	/^	int getG() {$/;"	f	class:MyShape
getR	C++\Unit08\8_1.cpp	/^	int getR() {$/;"	f	class:MyShape
main	C++\Unit08\8_1.cpp	/^int main() {$/;"	f
operator !=	C++\Unit08\8_1.cpp	/^bool MyCircle::operator!=(MyCircle & secondMyCircle) {$/;"	f	class:MyCircle
operator <	C++\Unit08\8_1.cpp	/^bool MyCircle::operator<(MyCircle &secondMyCircle) {$/;"	f	class:MyCircle
operator <=	C++\Unit08\8_1.cpp	/^bool MyCircle::operator<=(MyCircle &secondMyCircle) {$/;"	f	class:MyCircle
operator ==	C++\Unit08\8_1.cpp	/^bool MyCircle::operator==(MyCircle &secondMyCircle) {$/;"	f	class:MyCircle
operator >	C++\Unit08\8_1.cpp	/^bool MyCircle::operator>(MyCircle &secondMyCircle) {$/;"	f	class:MyCircle
operator >=	C++\Unit08\8_1.cpp	/^bool MyCircle::operator>=(MyCircle &secondMyCircle) {$/;"	f	class:MyCircle
radius_	C++\Unit08\8_1.cpp	/^	int x_, y_, radius_;$/;"	m	class:MyCircle	file:
setCenter	C++\Unit08\8_1.cpp	/^	void setCenter(int x, int y) {$/;"	f	class:MyCircle
setColor	C++\Unit08\8_1.cpp	/^	void setColor(int R, int G, int B) {$/;"	f	class:MyShape
setRadius	C++\Unit08\8_1.cpp	/^	void setRadius(int radius) {$/;"	f	class:MyCircle
x_	C++\Unit08\8_1.cpp	/^	int x_, y_, radius_;$/;"	m	class:MyCircle	file:
y_	C++\Unit08\8_1.cpp	/^	int x_, y_, radius_;$/;"	m	class:MyCircle	file:
B_	C++\Unit08\8_2.cpp	/^	int R_, G_, B_;$/;"	m	class:MyShape	file:
Draw	C++\Unit08\8_2.cpp	/^	void Draw() {$/;"	f	class:MyCircle
G_	C++\Unit08\8_2.cpp	/^	int R_, G_, B_;$/;"	m	class:MyShape	file:
MIN_MINUS_INTEGER	C++\Unit08\8_2.cpp	/^static int MIN_MINUS_INTEGER;$/;"	v	file:
MyCircle	C++\Unit08\8_2.cpp	/^	MyCircle() {$/;"	f	class:MyCircle
MyCircle	C++\Unit08\8_2.cpp	/^	MyCircle(MyCircle& aCircle) {$/;"	f	class:MyCircle
MyCircle	C++\Unit08\8_2.cpp	/^	MyCircle(int x, int y, int radius) {$/;"	f	class:MyCircle
MyCircle	C++\Unit08\8_2.cpp	/^class MyCircle : public MyShape {$/;"	c	file:
MyShape	C++\Unit08\8_2.cpp	/^	MyShape() {$/;"	f	class:MyShape
MyShape	C++\Unit08\8_2.cpp	/^class MyShape {$/;"	c	file:
R_	C++\Unit08\8_2.cpp	/^	int R_, G_, B_;$/;"	m	class:MyShape	file:
colorToString	C++\Unit08\8_2.cpp	/^	string colorToString() {$/;"	f	class:MyShape
getB	C++\Unit08\8_2.cpp	/^	int getB() {$/;"	f	class:MyShape
getG	C++\Unit08\8_2.cpp	/^	int getG() {$/;"	f	class:MyShape
getR	C++\Unit08\8_2.cpp	/^	int getR() {$/;"	f	class:MyShape
main	C++\Unit08\8_2.cpp	/^int main() {$/;"	f
min_	C++\Unit08\8_2.cpp	/^	int min_;$/;"	m	class:MyCircle	file:
operator !=	C++\Unit08\8_2.cpp	/^bool MyCircle::operator!=(MyCircle & secondMyCircle) {$/;"	f	class:MyCircle
operator <	C++\Unit08\8_2.cpp	/^bool MyCircle::operator<(MyCircle &secondMyCircle) {$/;"	f	class:MyCircle
operator <=	C++\Unit08\8_2.cpp	/^bool MyCircle::operator<=(MyCircle &secondMyCircle) {$/;"	f	class:MyCircle
operator ==	C++\Unit08\8_2.cpp	/^bool MyCircle::operator==(MyCircle &secondMyCircle) {$/;"	f	class:MyCircle
operator >	C++\Unit08\8_2.cpp	/^bool MyCircle::operator>(MyCircle &secondMyCircle) {$/;"	f	class:MyCircle
operator >=	C++\Unit08\8_2.cpp	/^bool MyCircle::operator>=(MyCircle &secondMyCircle) {$/;"	f	class:MyCircle
operator []	C++\Unit08\8_2.cpp	/^int&  MyCircle::operator[](const int &index) {$/;"	f	class:MyCircle
radius_	C++\Unit08\8_2.cpp	/^	int x_, y_, radius_;$/;"	m	class:MyCircle	file:
setCenter	C++\Unit08\8_2.cpp	/^	void setCenter(int x, int y) {$/;"	f	class:MyCircle
setColor	C++\Unit08\8_2.cpp	/^	void setColor(int R, int G, int B) {$/;"	f	class:MyShape
setRadius	C++\Unit08\8_2.cpp	/^	void setRadius(int radius) {$/;"	f	class:MyCircle
x_	C++\Unit08\8_2.cpp	/^	int x_, y_, radius_;$/;"	m	class:MyCircle	file:
y_	C++\Unit08\8_2.cpp	/^	int x_, y_, radius_;$/;"	m	class:MyCircle	file:
MyComplex	C++\Unit09\9_1.cpp	/^MyComplex::MyComplex() {$/;"	f	class:MyComplex
MyComplex	C++\Unit09\9_1.cpp	/^MyComplex::MyComplex(double re, double im) {$/;"	f	class:MyComplex
main	C++\Unit09\9_1.cpp	/^int main() {$/;"	f
operator !=	C++\Unit09\9_1.cpp	/^bool MyComplex::operator!=(const MyComplex& SecondComplex) {$/;"	f	class:MyComplex
operator *	C++\Unit09\9_1.cpp	/^MyComplex& MyComplex::operator *(const MyComplex& SecondComplex) {$/;"	f	class:MyComplex
operator +	C++\Unit09\9_1.cpp	/^MyComplex& MyComplex::operator+(const MyComplex& SecondComplex) {$/;"	f	class:MyComplex
operator -	C++\Unit09\9_1.cpp	/^MyComplex& MyComplex::operator-(const MyComplex& SecondComplex) {$/;"	f	class:MyComplex
operator /	C++\Unit09\9_1.cpp	/^MyComplex& MyComplex::operator\/(const MyComplex& SecondComplex) {$/;"	f	class:MyComplex
operator <<	C++\Unit09\9_1.cpp	/^ostream& operator<<(ostream& stream, MyComplex& mycomplex) {$/;"	f
operator ==	C++\Unit09\9_1.cpp	/^bool MyComplex::operator==(const MyComplex& SecondComplex) {$/;"	f	class:MyComplex
operator >>	C++\Unit09\9_1.cpp	/^istream& operator>>(istream& stream, MyComplex& mycomplex) {$/;"	f
operator []	C++\Unit09\9_1.cpp	/^double& MyComplex::operator[](const int& index) {$/;"	f	class:MyComplex
MyComplex	C++\Unit09\MyComplex.cpp	/^MyComplex::MyComplex() {$/;"	f	class:MyComplex
MyComplex	C++\Unit09\MyComplex.cpp	/^MyComplex::MyComplex(double re, double im) {$/;"	f	class:MyComplex
operator !=	C++\Unit09\MyComplex.cpp	/^bool MyComplex::operator!=(const MyComplex& SecondComplex) {$/;"	f	class:MyComplex
operator *	C++\Unit09\MyComplex.cpp	/^MyComplex& MyComplex::operator*(const MyComplex& SecondComplex) {$/;"	f	class:MyComplex
operator +	C++\Unit09\MyComplex.cpp	/^MyComplex MyComplex::operator+(const MyComplex& SecondComplex) {$/;"	f	class:MyComplex
operator -	C++\Unit09\MyComplex.cpp	/^MyComplex& MyComplex::operator-(const MyComplex& SecondComplex) {$/;"	f	class:MyComplex
operator /	C++\Unit09\MyComplex.cpp	/^MyComplex& MyComplex::operator\/(const MyComplex& SecondComplex) {$/;"	f	class:MyComplex
operator <<	C++\Unit09\MyComplex.cpp	/^ostream& MyComplex::operator<<(ostream& stream, MyComplex& mycomplex) {$/;"	f	class:MyComplex
operator ==	C++\Unit09\MyComplex.cpp	/^bool MyComplex::operator==(const MyComplex& SecondComplex) {$/;"	f	class:MyComplex
operator >>	C++\Unit09\MyComplex.cpp	/^istream& MyComplex::operator>>(istream& stream, MyComplex& mycomplex) {$/;"	f	class:MyComplex
operator []	C++\Unit09\MyComplex.cpp	/^double& MyComplex::operator[](const int& index) {$/;"	f	class:MyComplex
MyComplex	C++\Unit09\MyComplex.h	/^class MyComplex {$/;"	c
im	C++\Unit09\MyComplex.h	/^	double re, im;$/;"	m	class:MyComplex
re	C++\Unit09\MyComplex.h	/^	double re, im;$/;"	m	class:MyComplex
COMPLEX	C++\ege-13.04.02-full\demo\src\MandelbrotSetBase.cpp	/^struct COMPLEX$/;"	s	file:
Color	C++\ege-13.04.02-full\demo\src\MandelbrotSetBase.cpp	/^int Color[MAXCOLOR];$/;"	v
Draw	C++\ege-13.04.02-full\demo\src\MandelbrotSetBase.cpp	/^void Draw(double fromx, double fromy, double tox, double toy)$/;"	f
ITERATIONS	C++\ege-13.04.02-full\demo\src\MandelbrotSetBase.cpp	4;"	d	file:
InitColor	C++\ege-13.04.02-full\demo\src\MandelbrotSetBase.cpp	/^void InitColor()$/;"	f
MAXCOLOR	C++\ege-13.04.02-full\demo\src\MandelbrotSetBase.cpp	5;"	d	file:
add	C++\ege-13.04.02-full\demo\src\MandelbrotSetBase.cpp	/^COMPLEX add(COMPLEX a, COMPLEX b)$/;"	f
f	C++\ege-13.04.02-full\demo\src\MandelbrotSetBase.cpp	/^int f(COMPLEX c)$/;"	f
im	C++\ege-13.04.02-full\demo\src\MandelbrotSetBase.cpp	/^    double im;$/;"	m	struct:COMPLEX	file:
main	C++\ege-13.04.02-full\demo\src\MandelbrotSetBase.cpp	/^int main()$/;"	f
mul	C++\ege-13.04.02-full\demo\src\MandelbrotSetBase.cpp	/^COMPLEX mul(COMPLEX a, COMPLEX b)$/;"	f
re	C++\ege-13.04.02-full\demo\src\MandelbrotSetBase.cpp	/^    double re;$/;"	m	struct:COMPLEX	file:
main	C++\ege-13.04.02-full\demo\src\ege5star.cpp	/^int main()$/;"	f
paintstar	C++\ege-13.04.02-full\demo\src\ege5star.cpp	/^void paintstar(double x, double y, double r, double a)$/;"	f
draw_arrow	C++\ege-13.04.02-full\demo\src\egearrow.cpp	/^void draw_arrow(float sx, float sy,$/;"	f
main	C++\ege-13.04.02-full\demo\src\egearrow.cpp	/^int main( void ) {$/;"	f
AniObj	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^    AniObj() {$/;"	f	class:AniObj
AniObj	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^class AniObj {$/;"	c	file:
Crash	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^    void Crash( Obj &a, Obj &b ) {$/;"	f	class:AniObj	file:
Distance	C++\ege-13.04.02-full\demo\src\egeball.cpp	10;"	d	file:
IsCrash	C++\ege-13.04.02-full\demo\src\egeball.cpp	6;"	d	file:
IsEdge	C++\ege-13.04.02-full\demo\src\egeball.cpp	9;"	d	file:
IsHEdge	C++\ege-13.04.02-full\demo\src\egeball.cpp	8;"	d	file:
IsWEdge	C++\ege-13.04.02-full\demo\src\egeball.cpp	7;"	d	file:
Obj	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^} Obj;$/;"	t	typeref:struct:__anon6	file:
color	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^    int color;$/;"	m	struct:__anon6	file:
dealMouse	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^    void dealMouse(Obj* ball)$/;"	f	class:AniObj
drawobj	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^    void drawobj() {$/;"	f	class:AniObj
main	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^int main() {$/;"	f
myrand	C++\ege-13.04.02-full\demo\src\egeball.cpp	5;"	d	file:
n	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^    int n;$/;"	m	class:AniObj	file:
obj	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^    Obj obj[20];$/;"	m	class:AniObj	file:
r	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^    int r;$/;"	m	struct:__anon6	file:
resmouse	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^    bool resmouse(mouse_msg mouse, double dx, double dy)$/;"	f	class:AniObj
updateobj	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^    void updateobj() {$/;"	f	class:AniObj
vx	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^    float vx, vy;$/;"	m	struct:__anon6	file:
vy	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^    float vx, vy;$/;"	m	struct:__anon6	file:
x	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^    float x, y;$/;"	m	struct:__anon6	file:
y	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^    float x, y;$/;"	m	struct:__anon6	file:
~AniObj	C++\ege-13.04.02-full\demo\src\egeball.cpp	/^    ~AniObj() {$/;"	f	class:AniObj
BALL_AMOUNT	C++\ege-13.04.02-full\demo\src\egeball2.cpp	12;"	d	file:
Ball	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	Ball() : m_x(SCREEN_WIDTH \/ 2), m_y(SCREEN_HEIGHT \/ 2)$/;"	f	class:Ball
Ball	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^class Ball$/;"	c	file:
FLOATCOMP0	C++\ege-13.04.02-full\demo\src\egeball2.cpp	20;"	d	file:
Line	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	Line() {}$/;"	f	class:Line
Line	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	Line(int x1, int y1, int x2, int y2)$/;"	f	class:Line
Line	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^class Line$/;"	c	file:
PI	C++\ege-13.04.02-full\demo\src\egeball2.cpp	15;"	d	file:
PI	C++\ege-13.04.02-full\demo\src\egeball2.cpp	18;"	d	file:
PI2	C++\ege-13.04.02-full\demo\src\egeball2.cpp	19;"	d	file:
SCREEN_HEIGHT	C++\ege-13.04.02-full\demo\src\egeball2.cpp	11;"	d	file:
SCREEN_WIDTH	C++\ege-13.04.02-full\demo\src\egeball2.cpp	10;"	d	file:
Scene	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	Scene() : m_activeBallNum(0), m_bUpdate(true), m_bBlurring(true) {}$/;"	f	class:Scene
Scene	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^class Scene$/;"	c	file:
addLine	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	void addLine()$/;"	f	class:Scene
collisionDetect	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	void collisionDetect(Ball& ball)$/;"	f	class:Line
getAngleByNormal	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^float getAngleByNormal(float x, float y)$/;"	f
getLineEquation	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	void getLineEquation()  \/\/ax + by + c = 0$/;"	f	class:Line
getPos	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	void getPos(float& x, float& y)$/;"	f	class:Ball
getRadius	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	float getRadius() { return m_radius; }$/;"	f	class:Ball
m_a	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	float m_a, m_b, m_c, m_d, m_d2;$/;"	m	class:Line	file:
m_activeBallNum	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	int m_activeBallNum;$/;"	m	class:Scene	file:
m_b	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	float m_a, m_b, m_c, m_d, m_d2;$/;"	m	class:Line	file:
m_bBlurring	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	bool m_bBlurring, m_bUpdate;$/;"	m	class:Scene	file:
m_bUpdate	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	bool m_bBlurring, m_bUpdate;$/;"	m	class:Scene	file:
m_ball	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	Ball m_ball[BALL_AMOUNT];$/;"	m	class:Scene	file:
m_c	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	float m_a, m_b, m_c, m_d, m_d2;$/;"	m	class:Line	file:
m_color	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	COLORREF m_color;$/;"	m	class:Ball	file:
m_d	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	float m_a, m_b, m_c, m_d, m_d2;$/;"	m	class:Line	file:
m_d2	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	float m_a, m_b, m_c, m_d, m_d2;$/;"	m	class:Line	file:
m_dx	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	float m_dx, m_dy;$/;"	m	class:Ball	file:
m_dy	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	float m_dx, m_dy;$/;"	m	class:Ball	file:
m_maxx	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	int m_maxx, m_maxy, m_minx, m_miny;$/;"	m	class:Line	file:
m_maxy	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	int m_maxx, m_maxy, m_minx, m_miny;$/;"	m	class:Line	file:
m_minx	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	int m_maxx, m_maxy, m_minx, m_miny;$/;"	m	class:Line	file:
m_miny	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	int m_maxx, m_maxy, m_minx, m_miny;$/;"	m	class:Line	file:
m_radius	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	float m_radius;$/;"	m	class:Ball	file:
m_speed	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	float m_speed;$/;"	m	class:Ball	file:
m_vec	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	vector<Line> m_vec;$/;"	m	class:Scene	file:
m_x	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	float m_x, m_y;$/;"	m	class:Ball	file:
m_x1	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	int m_x1, m_y1;$/;"	m	class:Line	file:
m_x2	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	int m_x2, m_y2;$/;"	m	class:Line	file:
m_y	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	float m_x, m_y;$/;"	m	class:Ball	file:
m_y1	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	int m_x1, m_y1;$/;"	m	class:Line	file:
m_y2	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	int m_x2, m_y2;$/;"	m	class:Line	file:
main	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^int main()$/;"	f
render	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	void render() { line(m_x1, m_y1, m_x2, m_y2); }$/;"	f	class:Line
render	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	void render()$/;"	f	class:Ball
s_direction	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	static float s_direction;$/;"	m	class:Ball	file:
s_direction	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^float Ball::s_direction;$/;"	m	class:Ball	file:
s_speed	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	static float s_speed;$/;"	m	class:Ball	file:
s_speed	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^float Ball::s_speed = 0.5f;$/;"	m	class:Ball	file:
show	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	void show()$/;"	f	class:Scene
turn	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	void turn(float x, float y)$/;"	f	class:Ball
update	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	void update()$/;"	f	class:Ball
update	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	void update()$/;"	f	class:Scene
~Ball	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	~Ball() {}$/;"	f	class:Ball
~Line	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	~Line() {}$/;"	f	class:Line
~Scene	C++\ege-13.04.02-full\demo\src\egeball2.cpp	/^	~Scene(){}$/;"	f	class:Scene
AniObj	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^    AniObj()$/;"	f	class:AniObj
AniObj	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^class AniObj$/;"	c	file:
Init	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^    void Init()$/;"	f	class:AniObj
MAXOBJ	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	77;"	d	file:
Point	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^} Point;$/;"	t	typeref:struct:__anon7	file:
cnt	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^    int cnt;$/;"	m	class:AniObj	file:
color	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^    int color;$/;"	m	class:AniObj	file:
color	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^    int color;$/;"	m	struct:__anon7	file:
drawobj	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^    void drawobj()$/;"	f	class:AniObj
main	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^int main()$/;"	f
myrand	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	5;"	d	file:
n	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^    int n;$/;"	m	class:AniObj	file:
p	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^    Point p[100];$/;"	m	class:AniObj	file:
start	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^    int start;$/;"	m	class:AniObj	file:
updateobj	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^    void updateobj()$/;"	f	class:AniObj
vx	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^    float vx, vy;$/;"	m	struct:__anon7	file:
vy	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^    float vx, vy;$/;"	m	struct:__anon7	file:
x	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^    float x, y;$/;"	m	struct:__anon7	file:
y	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^    float x, y;$/;"	m	struct:__anon7	file:
~AniObj	C++\ege-13.04.02-full\demo\src\egecatharine.cpp	/^    ~AniObj()$/;"	f	class:AniObj
draw	C++\ege-13.04.02-full\demo\src\egeclock.cpp	/^void draw()$/;"	f
for	C++\ege-13.04.02-full\demo\src\egeclock.cpp	6;"	d	file:
getpos	C++\ege-13.04.02-full\demo\src\egeclock.cpp	/^ege::ege_point getpos(ege::ege_point center, float rad, float r)$/;"	f
main	C++\ege-13.04.02-full\demo\src\egeclock.cpp	/^int main()$/;"	f
mainloop	C++\ege-13.04.02-full\demo\src\egeclock.cpp	/^void mainloop()$/;"	f
AniObj	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^    AniObj() {$/;"	f	class:AniObj
AniObj	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^class AniObj {$/;"	c	file:
Crash	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^    void Crash( Obj &a, Obj &b ) {$/;"	f	class:AniObj	file:
Distance	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	17;"	d	file:
IsCrash	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	13;"	d	file:
IsEdge	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	16;"	d	file:
IsHEdge	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	15;"	d	file:
IsWEdge	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	14;"	d	file:
Obj	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^} Obj;$/;"	t	typeref:struct:__anon8	file:
SC_H	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	10;"	d	file:
SC_W	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	9;"	d	file:
color	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^    int color;$/;"	m	struct:__anon8	file:
draw	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^void draw( color_t* d_pt, color_t* s_pt, int w, int h ) {$/;"	f
draw_colorscan	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^void draw_colorscan( color_t* d_pt, color_t* s_pt, int w, int h ) {$/;"	f
draw_colorscan2	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^void draw_colorscan2( color_t* d_pt, color_t* s_pt, int w, int h ) {$/;"	f
draw_colorscan3	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^void draw_colorscan3( color_t* d_pt, color_t* s_pt, int w, int h ) {$/;"	f
draw_scanline50	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^void draw_scanline50( color_t* d_pt, color_t* s_pt, int w, int h ) {$/;"	f
draw_smooth	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^void draw_smooth( color_t* d_pt, color_t* s_pt, int w, int h ) {$/;"	f
drawobj	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^    void drawobj() {$/;"	f	class:AniObj
main	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^int main() {$/;"	f
myrand	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	12;"	d	file:
n	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^    int n;$/;"	m	class:AniObj	file:
obj	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^    Obj obj[20];$/;"	m	class:AniObj	file:
r	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^    int r;$/;"	m	struct:__anon8	file:
updateobj	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^    void updateobj() {$/;"	f	class:AniObj
vx	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^    float vx, vy;$/;"	m	struct:__anon8	file:
vy	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^    float vx, vy;$/;"	m	struct:__anon8	file:
x	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^    float x, y;$/;"	m	struct:__anon8	file:
y	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^    float x, y;$/;"	m	struct:__anon8	file:
~AniObj	C++\ege-13.04.02-full\demo\src\egefilter_ball.cpp	/^    ~AniObj() {$/;"	f	class:AniObj
AniObj	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^    AniObj() {$/;"	f	class:AniObj
AniObj	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^class AniObj {$/;"	c	file:
Crash	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^    void Crash( Obj &a, Obj &b ) {$/;"	f	class:AniObj	file:
Distance	C++\ege-13.04.02-full\demo\src\egejulia.cpp	10;"	d	file:
IsCrash	C++\ege-13.04.02-full\demo\src\egejulia.cpp	6;"	d	file:
IsEdge	C++\ege-13.04.02-full\demo\src\egejulia.cpp	9;"	d	file:
IsHEdge	C++\ege-13.04.02-full\demo\src\egejulia.cpp	8;"	d	file:
IsWEdge	C++\ege-13.04.02-full\demo\src\egejulia.cpp	7;"	d	file:
Obj	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^} Obj;$/;"	t	typeref:struct:__anon9	file:
color	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^    int color;$/;"	m	struct:__anon9	file:
dealMouse	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^    void dealMouse(Obj* ball)$/;"	f	class:AniObj
drawobj	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^    void drawobj() {$/;"	f	class:AniObj
isCrash	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^bool isCrash(int _x, int _y)$/;"	f	class:AniObj
main	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^int main() {$/;"	f
myrand	C++\ege-13.04.02-full\demo\src\egejulia.cpp	5;"	d	file:
n	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^    int n;$/;"	m	class:AniObj	file:
obj	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^    Obj obj[20];$/;"	m	class:AniObj	file:
r	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^    int r;$/;"	m	struct:__anon9	file:
resmouse	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^    bool resmouse(mouse_msg mouse, double dx, double dy)$/;"	f	class:AniObj
updateobj	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^    void updateobj() {$/;"	f	class:AniObj
vx	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^    float vx, vy;$/;"	m	struct:__anon9	file:
vy	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^    float vx, vy;$/;"	m	struct:__anon9	file:
x	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^    float x, y;$/;"	m	struct:__anon9	file:
y	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^    float x, y;$/;"	m	struct:__anon9	file:
~AniObj	C++\ege-13.04.02-full\demo\src\egejulia.cpp	/^    ~AniObj() {$/;"	f	class:AniObj
chtime	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^    int chtime, nowtime;        \/\/���ɱ仯ʱ�䣬��ǰʱ��$/;"	m	struct:polys	file:
color	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^    int color;                  \/\/��ɫ$/;"	m	struct:polys	file:
draw_poly	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^void draw_poly(struct poly* p, int color) \/\/����һ�������$/;"	f
draw_polys	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^void draw_polys(struct polys* p) \/\/���ƶ���ζ��У�ֻ����һ�������һ�������һ�����ڲ�����$/;"	f
dx	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^    double dx;$/;"	m	struct:point	file:
dy	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^    double dy;$/;"	m	struct:point	file:
height	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^int width = 640, height = 480;$/;"	v
initpolys	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^void initpolys(struct polys* p, int npoly, int npoint) \/\/��ʼ������ζ�����$/;"	f
main	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^int main()$/;"	f
movepoint	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^void movepoint(struct point* b) \/\/���ݵ���ٶ������ƶ�����㣬����Ƴ���Ļ����з�������$/;"	f
movepoly	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^void movepoly(struct poly* p) \/\/�ƶ���������Σ��ڲ����õ���ƶ�$/;"	f
movepolys	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^void movepolys(struct polys* p) \/\/�ƶ�����ζ��У�����ʱ���⣬��ɫ����$/;"	f
n_point	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^    int n_point;$/;"	m	struct:poly	file:
n_poly	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^    int n_poly;                 \/\/����ζ��г���$/;"	m	struct:polys	file:
nextcolor	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^    int nextcolor, prevcolor;   \/\/��һ�ε���ɫ��Ŀ����ɫ$/;"	m	struct:polys	file:
nowtime	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^    int chtime, nowtime;        \/\/���ɱ仯ʱ�䣬��ǰʱ��$/;"	m	struct:polys	file:
p	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^    point p[20];$/;"	m	struct:poly	file:
p	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^    poly p[100];                \/\/���������$/;"	m	struct:polys	file:
point	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^struct point \/\/����㣬�������꣬�ٶ�$/;"	s	file:
poly	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^struct poly \/\/�������Σ�������ĸ������͵�����$/;"	s	file:
polys	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^struct polys \/\/�������ζ�����$/;"	s	file:
prevcolor	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^    int nextcolor, prevcolor;   \/\/��һ�ε���ɫ��Ŀ����ɫ$/;"	m	struct:polys	file:
rand_float	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^double rand_float(double dv, double db) \/\/����һ��db �� db+dv֮������������$/;"	f
time	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^    int time;                   \/\/����һ�´θı���ɫ��ʱ��$/;"	m	struct:polys	file:
width	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^int width = 640, height = 480;$/;"	v
x	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^    double x;$/;"	m	struct:point	file:
y	C++\ege-13.04.02-full\demo\src\egelines.cpp	/^    double y;$/;"	m	struct:point	file:
BALL	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^        BALL()$/;"	f	class:BALL
BALL	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^class BALL$/;"	c	file:
LEN	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	4;"	d	file:
MAXBALL	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	6;"	d	file:
WID	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	5;"	d	file:
ax	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^        float ax, ay;\/\/���ٶȷ���$/;"	m	class:BALL	file:
ay	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^        float ax, ay;\/\/���ٶȷ���$/;"	m	class:BALL	file:
color	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^        int color;$/;"	m	class:BALL	file:
dealMouse	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^void dealMouse(BALL* ball)$/;"	f
drawball	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^        void drawball()$/;"	f	class:BALL
fa	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^        float fa;\/\/Ħ��$/;"	m	class:BALL	file:
goon	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^        bool goon;\/\/��־$/;"	m	class:BALL	file:
isCrash	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^        bool isCrash(int _x, int _y)$/;"	f	class:BALL
main	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^int main(void)$/;"	f
r	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^        int r;$/;"	m	class:BALL	file:
resmouse	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^        bool resmouse(mouse_msg mouse, double dx, double dy)$/;"	f	class:BALL
update	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^        void update()$/;"	f	class:BALL
vx	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^        float vx, vy;\/\/�ٶȷ���$/;"	m	class:BALL	file:
vy	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^        float vx, vy;\/\/�ٶȷ���$/;"	m	class:BALL	file:
x	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^        float x, y;$/;"	m	class:BALL	file:
y	C++\ege-13.04.02-full\demo\src\egemouseball.cpp	/^        float x, y;$/;"	m	class:BALL	file:
NET_H	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	9;"	d	file:
NET_W	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	8;"	d	file:
ax	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    double ax;$/;"	m	struct:point_t	file:
ay	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    double ay;$/;"	m	struct:point_t	file:
cap_pt	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^void cap_pt(struct net* pnet, int px, int py, int op) {$/;"	f
dmh	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    double dmh;$/;"	m	struct:net	file:
dmw	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    double dmw;$/;"	m	struct:net	file:
draw_net	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^void draw_net(struct net* pnet) {$/;"	f
dth	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    double dth;$/;"	m	struct:net	file:
dtw	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    double dtw;$/;"	m	struct:net	file:
dx	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    double dx;$/;"	m	struct:vector_t	file:
dy	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    double dy;$/;"	m	struct:vector_t	file:
g_d_friction	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^double g_d_friction = 0.1;$/;"	v
g_d_min_a	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^double g_d_min_a = 0.001;$/;"	v
g_height	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^int g_height = 600;$/;"	v
g_k	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^double g_k = 0.45; \/* ����ϵ�������ܴ��ڵ���0.5 *\/$/;"	v
g_mod_show	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^int g_mod_show = 3;$/;"	v
g_net	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^struct net g_net;$/;"	v	typeref:struct:net
g_width	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^int g_width = 800;$/;"	v
get_power	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^struct vector_t get_power (struct point_t *p, double x, double y) { \/*, double minx=0, double miny=0*\/$/;"	f
getmouse	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^void getmouse(int *x, int *y, int *key) {$/;"	f
h	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    int h;$/;"	m	struct:net	file:
init	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^void init() {$/;"	f
init_net	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^void init_net(struct net* pnet, int w, int h, int sw, int sh) {$/;"	f
layer	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    int layer;$/;"	m	struct:net	file:
main	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^int main(int argc, char* argv[]) {$/;"	f
move_net	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^void move_net(struct net* pnet) {$/;"	f
move_point	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^void move_point(struct net* pnet, int x, int y) {$/;"	f
net	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^struct net {$/;"	s	file:
point_t	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^struct point_t {$/;"	s	file:
pt	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    struct point_t pt[2][NET_H][NET_W];$/;"	m	struct:net	typeref:struct:net::point_t	file:
s_minus	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^double s_minus(double a, double b) {$/;"	f
s_pow	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^double s_pow(double a, double p) {$/;"	f
s_sqrt	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^double s_sqrt(double d) {$/;"	f
vector_t	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^struct vector_t {$/;"	s	file:
vt	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    struct vector_t vt[2];$/;"	m	struct:point_t	typeref:struct:point_t::vector_t	file:
vx	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    double vx;$/;"	m	struct:point_t	file:
vy	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    double vy;$/;"	m	struct:point_t	file:
w	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    int w;$/;"	m	struct:net	file:
x	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    double x;$/;"	m	struct:point_t	file:
y	C++\ege-13.04.02-full\demo\src\egemousetest.cpp	/^    double y;$/;"	m	struct:point_t	file:
NET_H	C++\ege-13.04.02-full\demo\src\egenet.cpp	9;"	d	file:
NET_W	C++\ege-13.04.02-full\demo\src\egenet.cpp	8;"	d	file:
ax	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    double ax;$/;"	m	struct:point_t	file:
ay	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    double ay;$/;"	m	struct:point_t	file:
cap_pt	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^void cap_pt(struct net* pnet, int px, int py, int op) {$/;"	f
dmh	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    double dmh;$/;"	m	struct:net	file:
dmw	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    double dmw;$/;"	m	struct:net	file:
draw_net	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^void draw_net(struct net* pnet) {$/;"	f
dth	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    double dth;$/;"	m	struct:net	file:
dtw	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    double dtw;$/;"	m	struct:net	file:
dx	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    double dx;$/;"	m	struct:vector_t	file:
dy	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    double dy;$/;"	m	struct:vector_t	file:
g_d_friction	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^double g_d_friction = 0.001;$/;"	v
g_d_min_a	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^double g_d_min_a = 0.001;$/;"	v
g_height	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^int g_height = 600;$/;"	v
g_k	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^double g_k = 0.03; \/* ����ϵ�������ܴ��ڵ���0.5 *\/$/;"	v
g_mod_show	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^int g_mod_show = 3;$/;"	v
g_net	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^struct net g_net;$/;"	v	typeref:struct:net
g_width	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^int g_width = 800;$/;"	v
get_power	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^struct vector_t get_power (struct point_t *p, double x, double y) { \/*, double minx=0, double miny=0*\/$/;"	f
getmouse	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^void getmouse(int *x, int *y, int *key) {$/;"	f
h	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    int h;$/;"	m	struct:net	file:
init	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^void init() {$/;"	f
init_net	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^void init_net(struct net* pnet, int w, int h, int sw, int sh) {$/;"	f
layer	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    int layer;$/;"	m	struct:net	file:
main	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^int main(int argc, char* argv[]) {$/;"	f
move_net	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^void move_net(struct net* pnet) {$/;"	f
move_point	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^void move_point(struct net* pnet, int x, int y) {$/;"	f
net	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^struct net {$/;"	s	file:
point_t	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^struct point_t {$/;"	s	file:
pt	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    struct point_t pt[2][NET_H][NET_W];$/;"	m	struct:net	typeref:struct:net::point_t	file:
s_minus	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^double s_minus(double a, double b) {$/;"	f
s_pow	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^double s_pow(double a, double p) {$/;"	f
s_sqrt	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^double s_sqrt(double d) {$/;"	f
vector_t	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^struct vector_t {$/;"	s	file:
vt	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    struct vector_t vt[2];$/;"	m	struct:point_t	typeref:struct:point_t::vector_t	file:
vx	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    double vx;$/;"	m	struct:point_t	file:
vy	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    double vy;$/;"	m	struct:point_t	file:
w	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    int w;$/;"	m	struct:net	file:
x	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    double x;$/;"	m	struct:point_t	file:
y	C++\ege-13.04.02-full\demo\src\egenet.cpp	/^    double y;$/;"	m	struct:point_t	file:
main	C++\ege-13.04.02-full\demo\src\egerotateimage.cpp	/^int main()$/;"	f
GCOLOR	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^const int GCOLOR[] = {DARKGRAY, GREEN, RED};$/;"	v
MAP_H	C++\ege-13.04.02-full\demo\src\egesnake.cpp	5;"	d	file:
MAP_W	C++\ege-13.04.02-full\demo\src\egesnake.cpp	4;"	d	file:
SNAKE	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^struct SNAKE {$/;"	s	file:
dir	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^    int dir, head, inc, tail;$/;"	m	struct:SNAKE	file:
drawAt	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^inline void drawAt( const int &i ) {$/;"	f
game	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^} game;$/;"	v	typeref:struct:SNAKE
gameInit	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^void gameInit( void ) {$/;"	f
gameScene	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^void gameScene( void ) {$/;"	f
gh	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^int gw, gh;$/;"	v
gw	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^int gw, gh;$/;"	v
head	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^    int dir, head, inc, tail;$/;"	m	struct:SNAKE	file:
inc	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^    int dir, head, inc, tail;$/;"	m	struct:SNAKE	file:
main	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^int main( void ) {$/;"	f
moveSnake	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^int moveSnake( const int dx, const int dy, const bool u = false ) {$/;"	f
newFruit	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^void newFruit( void ) {$/;"	f
pool	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^    int pool[MAP_W * MAP_H];$/;"	m	struct:SNAKE	file:
tail	C++\ege-13.04.02-full\demo\src\egesnake.cpp	/^    int dir, head, inc, tail;$/;"	m	struct:SNAKE	file:
InitStar	C++\ege-13.04.02-full\demo\src\egestar.cpp	/^void InitStar( int i ) {$/;"	f
MAXSTAR	C++\ege-13.04.02-full\demo\src\egestar.cpp	6;"	d	file:
MoveStar	C++\ege-13.04.02-full\demo\src\egestar.cpp	/^void MoveStar( int i, double dt ) {$/;"	f
STAR	C++\ege-13.04.02-full\demo\src\egestar.cpp	/^struct STAR {$/;"	s	file:
color	C++\ege-13.04.02-full\demo\src\egestar.cpp	/^    int color;$/;"	m	struct:STAR	file:
g_max	C++\ege-13.04.02-full\demo\src\egestar.cpp	/^int g_max;$/;"	v
main	C++\ege-13.04.02-full\demo\src\egestar.cpp	/^int main( int argc, char* argv[] ) {$/;"	f
preinit	C++\ege-13.04.02-full\demo\src\egestar.cpp	/^int preinit( int argc, char* argv[] ) {$/;"	f
sc_heigh	C++\ege-13.04.02-full\demo\src\egestar.cpp	/^int sc_width, sc_heigh; \/\/ ��¼���ڿ���$/;"	v
sc_width	C++\ege-13.04.02-full\demo\src\egestar.cpp	/^int sc_width, sc_heigh; \/\/ ��¼���ڿ���$/;"	v
star	C++\ege-13.04.02-full\demo\src\egestar.cpp	/^} star[MAXSTAR];$/;"	v	typeref:struct:STAR
step	C++\ege-13.04.02-full\demo\src\egestar.cpp	/^    double step;$/;"	m	struct:STAR	file:
x	C++\ege-13.04.02-full\demo\src\egestar.cpp	/^    double x;$/;"	m	struct:STAR	file:
y	C++\ege-13.04.02-full\demo\src\egestar.cpp	/^    int y;$/;"	m	struct:STAR	file:
Game	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    Game(int w, int h, int bw, int bh) {$/;"	f	class:Game
Game	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^class Game {$/;"	c	file:
ST_NEXT	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^        ST_NEXT,  \/*׼����һ������*\/$/;"	e	enum:Game::__anon10	file:
ST_NORMAL	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^        ST_NORMAL,\/*��ҿ��ƽ׶�*\/$/;"	e	enum:Game::__anon10	file:
ST_OVER	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^        ST_OVER   \/*��Ϸ������F2���¿�ʼ*\/$/;"	e	enum:Game::__anon10	file:
ST_START	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^        ST_START, \/*��Ϸ���¿�ʼ*\/$/;"	e	enum:Game::__anon10	file:
deal	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int deal () {$/;"	f	class:Game
dealbit	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    static int dealbit(int a, float dt) {$/;"	f	class:Game
draw44	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    void draw44(int bx, int by, int mat[4][4],$/;"	f	class:Game
drawedge	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    void drawedge(int x, int y, int w, int h, int color, int bdark = 1) {$/;"	f	class:Game
drawframe	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    void drawframe(int x, int y, int w, int h, int d = 0) {$/;"	f	class:Game
drawtile	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    void drawtile(int x, int y, int w, int h, int d, int color) {$/;"	f	class:Game
g_height	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^const int g_height = 520;$/;"	v
g_map_mod	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^static int g_map_mod[] = {1, 4, 4, 4, 2, 2, 2, 1, 0};$/;"	v	file:
g_trs_map	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^static int g_trs_map[8][4][4][4];$/;"	v	file:
g_width	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^const int g_width = 400;$/;"	v
getchangcolor	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    static int getchangcolor(int Color, float t) {$/;"	f	class:Game
initgr	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^void initgr() {$/;"	f
isCrash	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    bool isCrash() {$/;"	f	class:Game
m_KeyFlag	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_KeyFlag[8];$/;"	m	class:Game	file:
m_KeyState	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_KeyState[8];$/;"	m	class:Game	file:
m_Keys	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_Keys[8];$/;"	m	class:Game	file:
m_base_h	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_base_x, m_base_y, m_base_w, m_base_h;$/;"	m	class:Game	file:
m_base_w	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_base_x, m_base_y, m_base_w, m_base_h;$/;"	m	class:Game	file:
m_base_x	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_base_x, m_base_y, m_base_w, m_base_h;$/;"	m	class:Game	file:
m_base_y	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_base_x, m_base_y, m_base_w, m_base_h;$/;"	m	class:Game	file:
m_colormap	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_colormap[10];$/;"	m	class:Game	file:
m_ctl_dx	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    float m_ctl_dx, m_ctl_dy;$/;"	m	class:Game	file:
m_ctl_dy	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    float m_ctl_dx, m_ctl_dy;$/;"	m	class:Game	file:
m_ctl_s	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_ctl_x, m_ctl_y, m_ctl_t, m_ctl_s; \/\/��ǰ���ƿ�����$/;"	m	class:Game	file:
m_ctl_t	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_ctl_x, m_ctl_y, m_ctl_t, m_ctl_s; \/\/��ǰ���ƿ�����$/;"	m	class:Game	file:
m_ctl_x	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_ctl_x, m_ctl_y, m_ctl_t, m_ctl_s; \/\/��ǰ���ƿ�����$/;"	m	class:Game	file:
m_ctl_y	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_ctl_x, m_ctl_y, m_ctl_t, m_ctl_s; \/\/��ǰ���ƿ�����$/;"	m	class:Game	file:
m_cursubtime	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_cursubtime;$/;"	m	class:Game	file:
m_curtime	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_curtime;$/;"	m	class:Game	file:
m_curxtime	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_curxtime;$/;"	m	class:Game	file:
m_droptime	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_droptime;$/;"	m	class:Game	file:
m_forbid_down	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_forbid_down;$/;"	m	class:Game	file:
m_gamepool	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_gamepool[30][30]; \/\/��1Ϊ��ʼ�±꣬0���ڱ߽���ײ���$/;"	m	class:Game	file:
m_gamepool_h	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_gamepool_w, m_gamepool_h;$/;"	m	class:Game	file:
m_gamepool_w	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_gamepool_w, m_gamepool_h;$/;"	m	class:Game	file:
m_gray_y	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_gray_y;$/;"	m	class:Game	file:
m_movxtime	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_movxtime;$/;"	m	class:Game	file:
m_next1_s	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_next1_s, m_next2_s;$/;"	m	class:Game	file:
m_next2_s	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_next1_s, m_next2_s;$/;"	m	class:Game	file:
m_over_st	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_over_st;$/;"	m	class:Game	file:
m_pause	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_pause;$/;"	m	class:Game	file:
m_pcb	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    PIMAGE m_pcb;$/;"	m	class:Game	file:
m_state	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    int m_state; \/\/��Ϸ��״̬$/;"	m	class:Game	file:
main	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^int main() {$/;"	f
merge	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    void merge() {$/;"	f	class:Game
render	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    void render() {$/;"	f	class:Game
update	C++\ege-13.04.02-full\demo\src\egetetris.cpp	/^    void update() {$/;"	f	class:Game
chtime	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^    int chtime, nowtime;            \/\/���ɱ仯ʱ�䣬��ǰʱ��$/;"	m	struct:point	file:
color	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^    color_t color;                  \/\/��ɫ$/;"	m	struct:point	file:
draw_poly	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^void draw_poly(struct poly* p) \/\/����һ�������$/;"	f
dx	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^    double dx;$/;"	m	struct:point	file:
dy	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^    double dy;$/;"	m	struct:point	file:
getcolor	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^color_t getcolor(color_t prevcolor, color_t nextcolor, double t)$/;"	f
height	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^int width = 640, height = 480;$/;"	v
initpolys	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^void initpolys(struct polys* p, int npoly, int npoint) \/\/��ʼ������ζ�����$/;"	f
main	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^int main()$/;"	f
movepoint	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^void movepoint(struct point* b) \/\/���ݵ���ٶ������ƶ�����㣬����Ƴ���Ļ����з�������$/;"	f
movepoly	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^void movepoly(struct poly* p) \/\/�ƶ���������Σ��ڲ����õ���ƶ�$/;"	f
n_point	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^    int n_point;$/;"	m	struct:poly	file:
n_poly	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^    int n_poly;                 \/\/����ζ��г���$/;"	m	struct:polys	file:
nextcolor	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^    color_t nextcolor, prevcolor;   \/\/��һ�ε���ɫ��Ŀ����ɫ$/;"	m	struct:point	file:
nextcolortime	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^    int nextcolortime;              \/\/����һ�´θı���ɫ��ʱ��$/;"	m	struct:point	file:
nowtime	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^    int chtime, nowtime;            \/\/���ɱ仯ʱ�䣬��ǰʱ��$/;"	m	struct:point	file:
p	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^    point p[20];$/;"	m	struct:poly	file:
p	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^    poly p[100];                \/\/���������$/;"	m	struct:polys	file:
point	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^struct point \/\/����㣬�������꣬�ٶ�$/;"	s	file:
poly	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^struct poly \/\/�������Σ�������ĸ������͵�����$/;"	s	file:
polys	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^struct polys \/\/�������ζ�����$/;"	s	file:
prevcolor	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^    color_t nextcolor, prevcolor;   \/\/��һ�ε���ɫ��Ŀ����ɫ$/;"	m	struct:point	file:
rand_float	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^double rand_float(double dv, double db) \/\/����һ��db �� db+dv֮������������$/;"	f
width	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^int width = 640, height = 480;$/;"	v
x	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^    double x;$/;"	m	struct:point	file:
y	C++\ege-13.04.02-full\demo\src\egetriangle.cpp	/^    double y;$/;"	m	struct:point	file:
c	C++\ege-13.04.02-full\demo\src\egetypegame.cpp	/^    char c;$/;"	m	struct:chartarget	file:
chartarget	C++\ege-13.04.02-full\demo\src\egetypegame.cpp	/^typedef struct chartarget$/;"	s	file:
chartarget	C++\ege-13.04.02-full\demo\src\egetypegame.cpp	/^} chartarget;$/;"	t	typeref:struct:chartarget	file:
drawchar	C++\ege-13.04.02-full\demo\src\egetypegame.cpp	/^void drawchar(chartarget* ct)$/;"	f
dy	C++\ege-13.04.02-full\demo\src\egetypegame.cpp	/^    float dy;$/;"	m	struct:chartarget	file:
main	C++\ege-13.04.02-full\demo\src\egetypegame.cpp	/^int main()$/;"	f
movechar	C++\ege-13.04.02-full\demo\src\egetypegame.cpp	/^int movechar(chartarget* ct)$/;"	f
movechars	C++\ege-13.04.02-full\demo\src\egetypegame.cpp	/^void movechars(int* nobj, chartarget* ct, int bnew)$/;"	f
vis	C++\ege-13.04.02-full\demo\src\egetypegame.cpp	/^    char vis;$/;"	m	struct:chartarget	file:
x	C++\ege-13.04.02-full\demo\src\egetypegame.cpp	/^    float x, y;$/;"	m	struct:chartarget	file:
y	C++\ege-13.04.02-full\demo\src\egetypegame.cpp	/^    float x, y;$/;"	m	struct:chartarget	file:
main	C++\ege-13.04.02-full\demo\src\test_setviewport.cpp	/^int main()$/;"	f
ALPHABLEND	C++\ege-13.04.02-full\include\ege.h	/^		ALPHABLEND = 1,$/;"	e	enum:ege::egeControlBase::blendmode_e
AND	C++\ege-13.04.02-full\include\ege.h	/^		AND     = SRCAND,$/;"	e	enum:ege::egeControlBase::ROP
ATT400	C++\ege-13.04.02-full\include\ege.h	/^	HERCMONO, ATT400, VGA, PC3270,          \/* 7 - 10 *\/$/;"	e	enum:ege::graphics_drivers
ATT400C0	C++\ege-13.04.02-full\include\ege.h	/^	ATT400C0    = 0,  \/* 320x200 palette 0; 1 page  *\/$/;"	e	enum:ege::graphics_modes
ATT400C1	C++\ege-13.04.02-full\include\ege.h	/^	ATT400C1    = 1,  \/* 320x200 palette 1; 1 page  *\/$/;"	e	enum:ege::graphics_modes
ATT400C2	C++\ege-13.04.02-full\include\ege.h	/^	ATT400C2    = 2,  \/* 320x200 palette 2; 1 page  *\/$/;"	e	enum:ege::graphics_modes
ATT400C3	C++\ege-13.04.02-full\include\ege.h	/^	ATT400C3    = 3,  \/* 320x200 palette 3; 1 page  *\/$/;"	e	enum:ege::graphics_modes
ATT400HI	C++\ege-13.04.02-full\include\ege.h	/^	ATT400HI    = 5,  \/* 640x400 1 page             *\/$/;"	e	enum:ege::graphics_modes
ATT400MED	C++\ege-13.04.02-full\include\ege.h	/^	ATT400MED   = 4,  \/* 640x200 1 page             *\/$/;"	e	enum:ege::graphics_modes
BKSLASH_FILL	C++\ege-13.04.02-full\include\ege.h	/^	BKSLASH_FILL,   \/* \\\\\\ fill with thick lines *\/$/;"	e	enum:ege::fill_patterns
BLACK	C++\ege-13.04.02-full\include\ege.h	/^	BLACK           = 0,$/;"	e	enum:ege::COLORS
BLUE	C++\ege-13.04.02-full\include\ege.h	/^	BLUE            = EGERGB(0, 0, 0xA8),$/;"	e	enum:ege::COLORS
BOTTOM_TEXT	C++\ege-13.04.02-full\include\ege.h	/^	BOTTOM_TEXT = 0,$/;"	e	enum:ege::text_just
BROWN	C++\ege-13.04.02-full\include\ege.h	/^	BROWN           = EGERGB(0xA8, 0xA8, 0),$/;"	e	enum:ege::COLORS
CALLBACK_PROC	C++\ege-13.04.02-full\include\ege.h	/^typedef void (CALLBACK_PROC)();$/;"	t	namespace:ege
CENTER_LINE	C++\ege-13.04.02-full\include\ege.h	/^	CENTER_LINE     = PS_DASH,$/;"	e	enum:ege::line_styles
CENTER_TEXT	C++\ege-13.04.02-full\include\ege.h	/^	CENTER_TEXT = 1,$/;"	e	enum:ege::text_just
CGA	C++\ege-13.04.02-full\include\ege.h	/^	CGA, MCGA, EGA, EGA64, EGAMONO, IBM8514,\/* 1 - 6 *\/$/;"	e	enum:ege::graphics_drivers
CGAC0	C++\ege-13.04.02-full\include\ege.h	/^	CGAC0       = 0,  \/* 320x200 palette 0; 1 page  *\/$/;"	e	enum:ege::graphics_modes
CGAC1	C++\ege-13.04.02-full\include\ege.h	/^	CGAC1       = 1,  \/* 320x200 palette 1; 1 page  *\/$/;"	e	enum:ege::graphics_modes
CGAC2	C++\ege-13.04.02-full\include\ege.h	/^	CGAC2       = 2,  \/* 320x200 palette 2: 1 page  *\/$/;"	e	enum:ege::graphics_modes
CGAC3	C++\ege-13.04.02-full\include\ege.h	/^	CGAC3       = 3,  \/* 320x200 palette 3; 1 page  *\/$/;"	e	enum:ege::graphics_modes
CGAHI	C++\ege-13.04.02-full\include\ege.h	/^	CGAHI       = 4,  \/* 640x200 1 page             *\/$/;"	e	enum:ege::graphics_modes
CLOSE_DOT_FILL	C++\ege-13.04.02-full\include\ege.h	/^	CLOSE_DOT_FILL, \/* Closely spaced dot fill *\/$/;"	e	enum:ege::fill_patterns
COLORS	C++\ege-13.04.02-full\include\ege.h	/^enum COLORS {$/;"	g	namespace:ege
COPY	C++\ege-13.04.02-full\include\ege.h	/^		COPY    = SRCCOPY,$/;"	e	enum:ege::egeControlBase::ROP
CTL_DEFPARAM	C++\ege-13.04.02-full\include\ege.h	1089;"	d
CTL_INIT	C++\ege-13.04.02-full\include\ege.h	1091;"	d
CTL_INITBASE	C++\ege-13.04.02-full\include\ege.h	1090;"	d
CTL_PREINIT	C++\ege-13.04.02-full\include\ege.h	1077;"	d
CTL_PREINITEND	C++\ege-13.04.02-full\include\ege.h	1088;"	d
CURRENT_DRIVER	C++\ege-13.04.02-full\include\ege.h	/^	CURRENT_DRIVER = -1$/;"	e	enum:ege::graphics_drivers
CYAN	C++\ege-13.04.02-full\include\ege.h	/^	CYAN            = EGERGB(0, 0xA8, 0xA8),$/;"	e	enum:ege::COLORS
DARKGRAY	C++\ege-13.04.02-full\include\ege.h	/^	DARKGRAY        = EGERGB(0x54, 0x54, 0x54),$/;"	e	enum:ege::COLORS
DASHED_LINE	C++\ege-13.04.02-full\include\ege.h	/^	DASHED_LINE     = PS_DASHDOT,$/;"	e	enum:ege::line_styles
DETECT	C++\ege-13.04.02-full\include\ege.h	/^	DETECT,         \/* requests auto detection *\/$/;"	e	enum:ege::graphics_drivers
DOTTED_LINE	C++\ege-13.04.02-full\include\ege.h	/^	DOTTED_LINE     = PS_DOT,$/;"	e	enum:ege::line_styles
EGA	C++\ege-13.04.02-full\include\ege.h	/^	CGA, MCGA, EGA, EGA64, EGAMONO, IBM8514,\/* 1 - 6 *\/$/;"	e	enum:ege::graphics_drivers
EGA64	C++\ege-13.04.02-full\include\ege.h	/^	CGA, MCGA, EGA, EGA64, EGAMONO, IBM8514,\/* 1 - 6 *\/$/;"	e	enum:ege::graphics_drivers
EGA64HI	C++\ege-13.04.02-full\include\ege.h	/^	EGA64HI     = 1,  \/* 640x350 4 color  1 page    *\/$/;"	e	enum:ege::graphics_modes
EGA64LO	C++\ege-13.04.02-full\include\ege.h	/^	EGA64LO     = 0,  \/* 640x200 16 color 1 page    *\/$/;"	e	enum:ege::graphics_modes
EGAHI	C++\ege-13.04.02-full\include\ege.h	/^	EGAHI       = 1,  \/* 640x350 16 color 2 pages   *\/$/;"	e	enum:ege::graphics_modes
EGALO	C++\ege-13.04.02-full\include\ege.h	/^	EGALO       = 0,  \/* 640x200 16 color 4 pages   *\/$/;"	e	enum:ege::graphics_modes
EGAMONO	C++\ege-13.04.02-full\include\ege.h	/^	CGA, MCGA, EGA, EGA64, EGAMONO, IBM8514,\/* 1 - 6 *\/$/;"	e	enum:ege::graphics_drivers
EGAMONOHI	C++\ege-13.04.02-full\include\ege.h	/^	EGAMONOHI   = 0,  \/* 640x350 64K on card, 1 page - 256K on card, 4 pages *\/$/;"	e	enum:ege::graphics_modes
EGEACOLOR	C++\ege-13.04.02-full\include\ege.h	236;"	d
EGEAGRAY	C++\ege-13.04.02-full\include\ege.h	244;"	d
EGEAPI	C++\ege-13.04.02-full\include\ege.h	201;"	d
EGEAPI	C++\ege-13.04.02-full\include\ege.h	203;"	d
EGEAPI	C++\ege-13.04.02-full\include\ege.h	208;"	d
EGEAPI	C++\ege-13.04.02-full\include\ege.h	210;"	d
EGEAPI	C++\ege-13.04.02-full\include\ege.h	213;"	d
EGEARGB	C++\ege-13.04.02-full\include\ege.h	235;"	d
EGECOLORA	C++\ege-13.04.02-full\include\ege.h	237;"	d
EGECTRL_INITEND	C++\ege-13.04.02-full\include\ege.h	1094;"	d
EGEGET_A	C++\ege-13.04.02-full\include\ege.h	241;"	d
EGEGET_B	C++\ege-13.04.02-full\include\ege.h	240;"	d
EGEGET_G	C++\ege-13.04.02-full\include\ege.h	239;"	d
EGEGET_R	C++\ege-13.04.02-full\include\ege.h	238;"	d
EGEGRAY	C++\ege-13.04.02-full\include\ege.h	242;"	d
EGEGRAYA	C++\ege-13.04.02-full\include\ege.h	243;"	d
EGERGB	C++\ege-13.04.02-full\include\ege.h	233;"	d
EGERGBA	C++\ege-13.04.02-full\include\ege.h	234;"	d
EGE_DEPRECATE	C++\ege-13.04.02-full\include\ege.h	218;"	d
EGE_DEPRECATE	C++\ege-13.04.02-full\include\ege.h	222;"	d
EGE_DEPRECATE	C++\ege-13.04.02-full\include\ege.h	224;"	d
EGE_DEPRECATE	C++\ege-13.04.02-full\include\ege.h	227;"	d
EMPTY_FILL	C++\ege-13.04.02-full\include\ege.h	/^	EMPTY_FILL,     \/* fills area in background color *\/$/;"	e	enum:ege::fill_patterns
GREEN	C++\ege-13.04.02-full\include\ege.h	/^	GREEN           = EGERGB(0, 0xA8, 0),$/;"	e	enum:ege::COLORS
GWLP_USERDATA	C++\ege-13.04.02-full\include\ege.h	172;"	d
GWLP_WNDPROC	C++\ege-13.04.02-full\include\ege.h	173;"	d
GetSqrModule	C++\ege-13.04.02-full\include\ege.h	/^	float GetSqrModule() const {$/;"	f	struct:ege::VECTOR3D
GetWindowLongPtrW	C++\ege-13.04.02-full\include\ege.h	171;"	d
HATCH_FILL	C++\ege-13.04.02-full\include\ege.h	/^	HATCH_FILL,     \/* light hatch fill *\/$/;"	e	enum:ege::fill_patterns
HERCMONO	C++\ege-13.04.02-full\include\ege.h	/^	HERCMONO, ATT400, VGA, PC3270,          \/* 7 - 10 *\/$/;"	e	enum:ege::graphics_drivers
HERCMONOHI	C++\ege-13.04.02-full\include\ege.h	/^	HERCMONOHI  = 0,  \/* 720x348 2 pages            *\/$/;"	e	enum:ege::graphics_modes
HSLtoRGB	C++\ege-13.04.02-full\include\ege.h	786;"	d
HSVtoRGB	C++\ege-13.04.02-full\include\ege.h	787;"	d
IBM8514	C++\ege-13.04.02-full\include\ege.h	/^	CGA, MCGA, EGA, EGA64, EGAMONO, IBM8514,\/* 1 - 6 *\/$/;"	e	enum:ege::graphics_drivers
IBM8514HI	C++\ege-13.04.02-full\include\ege.h	/^	IBM8514HI   = 1   \/*1024x768 256 colors         *\/$/;"	e	enum:ege::graphics_modes
IBM8514LO	C++\ege-13.04.02-full\include\ege.h	/^	IBM8514LO   = 0,  \/* 640x480 256 colors         *\/$/;"	e	enum:ege::graphics_modes
INITGRAPH	C++\ege-13.04.02-full\include\ege.h	651;"	d
INITGRAPH3	C++\ege-13.04.02-full\include\ege.h	653;"	d
INIT_ANIMATION	C++\ege-13.04.02-full\include\ege.h	/^	INIT_ANIMATION  = INIT_DEFAULT | INIT_RENDERMANUAL | INIT_NOFORCEEXIT,$/;"	e	enum:ege::initmode_flag
INIT_CHILD	C++\ege-13.04.02-full\include\ege.h	/^	INIT_CHILD          = 0x2,$/;"	e	enum:ege::initmode_flag
INIT_DEFAULT	C++\ege-13.04.02-full\include\ege.h	/^	INIT_DEFAULT    = 0x0,$/;"	e	enum:ege::initmode_flag
INIT_NOBORDER	C++\ege-13.04.02-full\include\ege.h	/^	INIT_NOBORDER       = 0x1,$/;"	e	enum:ege::initmode_flag
INIT_NOFORCEEXIT	C++\ege-13.04.02-full\include\ege.h	/^	INIT_NOFORCEEXIT    = 0x10,$/;"	e	enum:ege::initmode_flag
INIT_RENDERMANUAL	C++\ege-13.04.02-full\include\ege.h	/^	INIT_RENDERMANUAL   = 0x8,$/;"	e	enum:ege::initmode_flag
INIT_TOPMOST	C++\ege-13.04.02-full\include\ege.h	/^	INIT_TOPMOST        = 0x4,$/;"	e	enum:ege::initmode_flag
INIT_WITHLOGO	C++\ege-13.04.02-full\include\ege.h	/^	INIT_WITHLOGO       = 0x100,$/;"	e	enum:ege::initmode_flag
INTERLEAVE_FILL	C++\ege-13.04.02-full\include\ege.h	/^	INTERLEAVE_FILL,\/* interleaving line fill *\/$/;"	e	enum:ege::fill_patterns
InitObject	C++\ege-13.04.02-full\include\ege.h	/^	class InitObject {$/;"	c	class:ege::egeControlBase
IsOpen	C++\ege-13.04.02-full\include\ege.h	/^	int   IsOpen() {return (m_DID != MUSIC_ERROR) ? 1 : 0;}$/;"	f	class:ege::MUSIC
KEYMSG_CHAR	C++\ege-13.04.02-full\include\ege.h	/^	KEYMSG_CHAR         = 0x40000,$/;"	e	enum:ege::key_msg_flag
KEYMSG_CHAR_FLAG	C++\ege-13.04.02-full\include\ege.h	/^	KEYMSG_CHAR_FLAG    = 2,$/;"	e	enum:ege::key_msg_flag
KEYMSG_DOWN	C++\ege-13.04.02-full\include\ege.h	/^	KEYMSG_DOWN         = 0x10000,$/;"	e	enum:ege::key_msg_flag
KEYMSG_DOWN_FLAG	C++\ege-13.04.02-full\include\ege.h	/^	KEYMSG_DOWN_FLAG    = 1,$/;"	e	enum:ege::key_msg_flag
KEYMSG_FIRSTDOWN	C++\ege-13.04.02-full\include\ege.h	/^	KEYMSG_FIRSTDOWN    = 0x80000,$/;"	e	enum:ege::key_msg_flag
KEYMSG_UP	C++\ege-13.04.02-full\include\ege.h	/^	KEYMSG_UP           = 0x20000,$/;"	e	enum:ege::key_msg_flag
KEYMSG_UP_FLAG	C++\ege-13.04.02-full\include\ege.h	/^	KEYMSG_UP_FLAG      = 1,$/;"	e	enum:ege::key_msg_flag
LEFT_TEXT	C++\ege-13.04.02-full\include\ege.h	/^	LEFT_TEXT   = 0,$/;"	e	enum:ege::text_just
LIGHTBLUE	C++\ege-13.04.02-full\include\ege.h	/^	LIGHTBLUE       = EGERGB(0x54, 0x54, 0xFC),$/;"	e	enum:ege::COLORS
LIGHTCYAN	C++\ege-13.04.02-full\include\ege.h	/^	LIGHTCYAN       = EGERGB(0x54, 0xFC, 0xFC),$/;"	e	enum:ege::COLORS
LIGHTGRAY	C++\ege-13.04.02-full\include\ege.h	/^	LIGHTGRAY       = EGERGB(0xA8, 0xA8, 0xA8),$/;"	e	enum:ege::COLORS
LIGHTGREEN	C++\ege-13.04.02-full\include\ege.h	/^	LIGHTGREEN      = EGERGB(0x54, 0xFC, 0x54),$/;"	e	enum:ege::COLORS
LIGHTMAGENTA	C++\ege-13.04.02-full\include\ege.h	/^	LIGHTMAGENTA    = EGERGB(0xFC, 0x54, 0xFC),$/;"	e	enum:ege::COLORS
LIGHTRED	C++\ege-13.04.02-full\include\ege.h	/^	LIGHTRED        = EGERGB(0xFC, 0x54, 0x54),$/;"	e	enum:ege::COLORS
LINE_FILL	C++\ege-13.04.02-full\include\ege.h	/^	LINE_FILL,      \/* --- fill *\/$/;"	e	enum:ege::fill_patterns
LPCALLBACK_PROC	C++\ege-13.04.02-full\include\ege.h	/^typedef CALLBACK_PROC       * LPCALLBACK_PROC;$/;"	t	namespace:ege
LPMSG_KEY_PROC	C++\ege-13.04.02-full\include\ege.h	/^typedef MSG_KEY_PROC        * LPMSG_KEY_PROC;$/;"	t	namespace:ege
LPMSG_MOUSE_PROC	C++\ege-13.04.02-full\include\ege.h	/^typedef MSG_MOUSE_PROC      * LPMSG_MOUSE_PROC;$/;"	t	namespace:ege
LTBKSLASH_FILL	C++\ege-13.04.02-full\include\ege.h	/^	LTBKSLASH_FILL, \/* \\\\\\ fill *\/$/;"	e	enum:ege::fill_patterns
LTSLASH_FILL	C++\ege-13.04.02-full\include\ege.h	/^	LTSLASH_FILL,   \/* \/\/\/ fill *\/$/;"	e	enum:ege::fill_patterns
MAGENTA	C++\ege-13.04.02-full\include\ege.h	/^	MAGENTA         = EGERGB(0xA8, 0, 0xA8),$/;"	e	enum:ege::COLORS
MCGA	C++\ege-13.04.02-full\include\ege.h	/^	CGA, MCGA, EGA, EGA64, EGAMONO, IBM8514,\/* 1 - 6 *\/$/;"	e	enum:ege::graphics_drivers
MCGAC0	C++\ege-13.04.02-full\include\ege.h	/^	MCGAC0      = 0,  \/* 320x200 palette 0; 1 page  *\/$/;"	e	enum:ege::graphics_modes
MCGAC1	C++\ege-13.04.02-full\include\ege.h	/^	MCGAC1      = 1,  \/* 320x200 palette 1; 1 page  *\/$/;"	e	enum:ege::graphics_modes
MCGAC2	C++\ege-13.04.02-full\include\ege.h	/^	MCGAC2      = 2,  \/* 320x200 palette 2; 1 page  *\/$/;"	e	enum:ege::graphics_modes
MCGAC3	C++\ege-13.04.02-full\include\ege.h	/^	MCGAC3      = 3,  \/* 320x200 palette 3; 1 page  *\/$/;"	e	enum:ege::graphics_modes
MCGAHI	C++\ege-13.04.02-full\include\ege.h	/^	MCGAHI      = 5,  \/* 640x480 1 page             *\/$/;"	e	enum:ege::graphics_modes
MCGAMED	C++\ege-13.04.02-full\include\ege.h	/^	MCGAMED     = 4,  \/* 640x200 1 page             *\/$/;"	e	enum:ege::graphics_modes
MSG_EVENT_CLICK	C++\ege-13.04.02-full\include\ege.h	/^	MSG_EVENT_CLICK         = 0x01,$/;"	e	enum:ege::message_event
MSG_EVENT_DBCLICK	C++\ege-13.04.02-full\include\ege.h	/^	MSG_EVENT_DBCLICK       = 0x02,$/;"	e	enum:ege::message_event
MSG_EVENT_DOWN	C++\ege-13.04.02-full\include\ege.h	/^	MSG_EVENT_DOWN          = 0x01,$/;"	e	enum:ege::message_event
MSG_EVENT_MOVE	C++\ege-13.04.02-full\include\ege.h	/^	MSG_EVENT_MOVE          = 0x04,$/;"	e	enum:ege::message_event
MSG_EVENT_UP	C++\ege-13.04.02-full\include\ege.h	/^	MSG_EVENT_UP            = 0x00,$/;"	e	enum:ege::message_event
MSG_EVENT_WHEEL	C++\ege-13.04.02-full\include\ege.h	/^	MSG_EVENT_WHEEL         = 0x10,$/;"	e	enum:ege::message_event
MSG_KEY_PROC	C++\ege-13.04.02-full\include\ege.h	/^typedef int (__stdcall MSG_KEY_PROC  )(void*, unsigned, int);$/;"	t	namespace:ege
MSG_MOUSE_LEFT	C++\ege-13.04.02-full\include\ege.h	/^	MSG_MOUSE_LEFT      = 0x01,$/;"	e	enum:ege::message_mouse
MSG_MOUSE_MID	C++\ege-13.04.02-full\include\ege.h	/^	MSG_MOUSE_MID       = 0x04,$/;"	e	enum:ege::message_mouse
MSG_MOUSE_PROC	C++\ege-13.04.02-full\include\ege.h	/^typedef int (__stdcall MSG_MOUSE_PROC)(void*, unsigned, int, int, int);$/;"	t	namespace:ege
MSG_MOUSE_RIGHT	C++\ege-13.04.02-full\include\ege.h	/^	MSG_MOUSE_RIGHT     = 0x02,$/;"	e	enum:ege::message_mouse
MUSIC	C++\ege-13.04.02-full\include\ege.h	/^class MUSIC$/;"	c	namespace:ege
MUSIC_ERROR	C++\ege-13.04.02-full\include\ege.h	657;"	d
MUSIC_MODE_NOT_OPEN	C++\ege-13.04.02-full\include\ege.h	/^	MUSIC_MODE_NOT_OPEN = 0x0,$/;"	e	enum:ege::music_state_flag
MUSIC_MODE_NOT_READY	C++\ege-13.04.02-full\include\ege.h	/^	MUSIC_MODE_NOT_READY = 0x20C,$/;"	e	enum:ege::music_state_flag
MUSIC_MODE_OPEN	C++\ege-13.04.02-full\include\ege.h	/^	MUSIC_MODE_OPEN = 0x212,$/;"	e	enum:ege::music_state_flag
MUSIC_MODE_PAUSE	C++\ege-13.04.02-full\include\ege.h	/^	MUSIC_MODE_PAUSE = 0x211,$/;"	e	enum:ege::music_state_flag
MUSIC_MODE_PLAY	C++\ege-13.04.02-full\include\ege.h	/^	MUSIC_MODE_PLAY = 0x20E,$/;"	e	enum:ege::music_state_flag
MUSIC_MODE_SEEK	C++\ege-13.04.02-full\include\ege.h	/^	MUSIC_MODE_SEEK = 0x210,$/;"	e	enum:ege::music_state_flag
MUSIC_MODE_STOP	C++\ege-13.04.02-full\include\ege.h	/^	MUSIC_MODE_STOP = 0x20D,$/;"	e	enum:ege::music_state_flag
NULL_LINE	C++\ege-13.04.02-full\include\ege.h	/^	NULL_LINE       = PS_NULL,$/;"	e	enum:ege::line_styles
OR	C++\ege-13.04.02-full\include\ege.h	/^		OR      = SRCPAINT,$/;"	e	enum:ege::egeControlBase::ROP
PC3270	C++\ege-13.04.02-full\include\ege.h	/^	HERCMONO, ATT400, VGA, PC3270,          \/* 7 - 10 *\/$/;"	e	enum:ege::graphics_drivers
PC3270HI	C++\ege-13.04.02-full\include\ege.h	/^	PC3270HI    = 0,  \/* 720x350 1 page             *\/$/;"	e	enum:ege::graphics_modes
PI	C++\ege-13.04.02-full\include\ege.h	/^const double PI = 3.1415926535897932384626;$/;"	m	namespace:ege
PIMAGE	C++\ege-13.04.02-full\include\ege.h	/^typedef IMAGE *PIMAGE;$/;"	t	namespace:ege
PushTarget	C++\ege-13.04.02-full\include\ege.h	/^	PushTarget() { m_target = gettarget(); }$/;"	f	class:ege::PushTarget
PushTarget	C++\ege-13.04.02-full\include\ege.h	/^	PushTarget(PIMAGE target) { m_target = gettarget(); settarget(target); }$/;"	f	class:ege::PushTarget
PushTarget	C++\ege-13.04.02-full\include\ege.h	/^class PushTarget {$/;"	c	namespace:ege
RED	C++\ege-13.04.02-full\include\ege.h	/^	RED             = EGERGB(0xA8, 0, 0),$/;"	e	enum:ege::COLORS
RENDER_AUTO	C++\ege-13.04.02-full\include\ege.h	/^	RENDER_AUTO,$/;"	e	enum:ege::rendermode_e
RENDER_MANUAL	C++\ege-13.04.02-full\include\ege.h	/^	RENDER_MANUAL,$/;"	e	enum:ege::rendermode_e
RGBTOBGR	C++\ege-13.04.02-full\include\ege.h	232;"	d
RGBtoGRAY	C++\ege-13.04.02-full\include\ege.h	783;"	d
RGBtoHSL	C++\ege-13.04.02-full\include\ege.h	784;"	d
RGBtoHSV	C++\ege-13.04.02-full\include\ege.h	785;"	d
RIGHT_TEXT	C++\ege-13.04.02-full\include\ege.h	/^	RIGHT_TEXT  = 2,$/;"	e	enum:ege::text_just
ROP	C++\ege-13.04.02-full\include\ege.h	/^	enum ROP {$/;"	g	class:ege::egeControlBase
Rotate	C++\ege-13.04.02-full\include\ege.h	/^	VECTOR3D& Rotate(float rad, float x, float y, float z) {$/;"	f	struct:ege::VECTOR3D
SHOWCONSOLE	C++\ege-13.04.02-full\include\ege.h	231;"	d
SLASH_FILL	C++\ege-13.04.02-full\include\ege.h	/^	SLASH_FILL,     \/* \/\/\/ fill with thick lines *\/$/;"	e	enum:ege::fill_patterns
SOLIDCOPY	C++\ege-13.04.02-full\include\ege.h	/^		SOLIDCOPY = 0,$/;"	e	enum:ege::egeControlBase::blendmode_e
SOLID_FILL	C++\ege-13.04.02-full\include\ege.h	/^	SOLID_FILL,     \/* fills area in solid fill color *\/$/;"	e	enum:ege::fill_patterns
SOLID_LINE	C++\ege-13.04.02-full\include\ege.h	/^	SOLID_LINE      = PS_SOLID,$/;"	e	enum:ege::line_styles
SetModule	C++\ege-13.04.02-full\include\ege.h	/^	VECTOR3D& SetModule(float m) {$/;"	f	struct:ege::VECTOR3D
SetWindowLongPtrW	C++\ege-13.04.02-full\include\ege.h	170;"	d
Sleep	C++\ege-13.04.02-full\include\ege.h	1415;"	d
TOP_TEXT	C++\ege-13.04.02-full\include\ege.h	/^	TOP_TEXT    = 2$/;"	e	enum:ege::text_just
TRUECOLOR	C++\ege-13.04.02-full\include\ege.h	/^	TRUECOLOR, TRUECOLORSIZE,$/;"	e	enum:ege::graphics_drivers
TRUECOLORSIZE	C++\ege-13.04.02-full\include\ege.h	/^	TRUECOLOR, TRUECOLORSIZE,$/;"	e	enum:ege::graphics_drivers
USERBIT_LINE	C++\ege-13.04.02-full\include\ege.h	/^	USERBIT_LINE    = PS_USERSTYLE,   \/* User defined line style *\/$/;"	e	enum:ege::line_styles
USER_FILL	C++\ege-13.04.02-full\include\ege.h	/^	USER_FILL       \/* user defined fill *\/$/;"	e	enum:ege::fill_patterns
VECTOR3D	C++\ege-13.04.02-full\include\ege.h	/^	VECTOR3D() {$/;"	f	struct:ege::VECTOR3D
VECTOR3D	C++\ege-13.04.02-full\include\ege.h	/^	VECTOR3D(float _x, float _y) {$/;"	f	struct:ege::VECTOR3D
VECTOR3D	C++\ege-13.04.02-full\include\ege.h	/^	VECTOR3D(float _x, float _y, float _z) {$/;"	f	struct:ege::VECTOR3D
VECTOR3D	C++\ege-13.04.02-full\include\ege.h	/^struct VECTOR3D {$/;"	s	namespace:ege
VGA	C++\ege-13.04.02-full\include\ege.h	/^	HERCMONO, ATT400, VGA, PC3270,          \/* 7 - 10 *\/$/;"	e	enum:ege::graphics_drivers
VGAHI	C++\ege-13.04.02-full\include\ege.h	/^	VGAHI       = 2,  \/* 640x480 16 color 1 page    *\/$/;"	e	enum:ege::graphics_modes
VGALO	C++\ege-13.04.02-full\include\ege.h	/^	VGALO       = 0,  \/* 640x200 16 color 4 pages   *\/$/;"	e	enum:ege::graphics_modes
VGAMED	C++\ege-13.04.02-full\include\ege.h	/^	VGAMED      = 1,  \/* 640x350 16 color 2 pages   *\/$/;"	e	enum:ege::graphics_modes
WHITE	C++\ege-13.04.02-full\include\ege.h	/^	WHITE           = EGERGB(0xFC, 0xFC, 0xFC),$/;"	e	enum:ege::COLORS
WIDE_DOT_FILL	C++\ege-13.04.02-full\include\ege.h	/^	WIDE_DOT_FILL,  \/* Widely spaced dot fill *\/$/;"	e	enum:ege::fill_patterns
WINVER	C++\ege-13.04.02-full\include\ege.h	58;"	d
WM_MOUSEWHEEL	C++\ege-13.04.02-full\include\ege.h	184;"	d
WinMain	C++\ege-13.04.02-full\include\ege.h	1420;"	d
XHATCH_FILL	C++\ege-13.04.02-full\include\ege.h	/^	XHATCH_FILL,    \/* heavy cross hatch fill *\/$/;"	e	enum:ege::fill_patterns
XOR	C++\ege-13.04.02-full\include\ege.h	/^		XOR     = SRCINVERT,$/;"	e	enum:ege::egeControlBase::ROP
YELLOW	C++\ege-13.04.02-full\include\ege.h	/^	YELLOW          = EGERGB(0xFC, 0xFC, 0x54),$/;"	e	enum:ege::COLORS
_ALLOW_ITERATOR_DEBUG_LEVEL_MISMATCH	C++\ege-13.04.02-full\include\ege.h	81;"	d
_ALLOW_RUNTIME_LIBRARY_MISMATCH	C++\ege-13.04.02-full\include\ege.h	84;"	d
_CONIO_H_	C++\ege-13.04.02-full\include\ege.h	1327;"	d
_CRT_NON_CONFORMING_SWPRINTFS	C++\ege-13.04.02-full\include\ege.h	159;"	d
_CRT_NON_CONFORMING_SWPRINTFS	C++\ege-13.04.02-full\include\ege.h	163;"	d
_CRT_SECURE_NO_DEPRECATE	C++\ege-13.04.02-full\include\ege.h	155;"	d
_CRT_SECURE_NO_WARNINGS	C++\ege-13.04.02-full\include\ege.h	151;"	d
_Cdecl	C++\ege-13.04.02-full\include\ege.h	193;"	d
_Cdecl	C++\ege-13.04.02-full\include\ege.h	195;"	d
_EGE_H_	C++\ege-13.04.02-full\include\ege.h	50;"	d
_INC_CONIO	C++\ege-13.04.02-full\include\ege.h	1326;"	d
_WIN32_WINDOWS	C++\ege-13.04.02-full\include\ege.h	66;"	d
_WIN32_WINNT	C++\ege-13.04.02-full\include\ege.h	62;"	d
autoredraw	C++\ege-13.04.02-full\include\ege.h	/^	void autoredraw(bool bvisable)  { m_bAutoDraw = (m_bAutoDraw ? 1 : 0); }$/;"	f	class:ege::egeControlBase
blendmode	C++\ege-13.04.02-full\include\ege.h	/^	void blendmode(int mode) { m_AlphablendMode = mode; }$/;"	f	class:ege::egeControlBase
blendmode_e	C++\ege-13.04.02-full\include\ege.h	/^	enum blendmode_e {$/;"	g	class:ege::egeControlBase
bottom	C++\ege-13.04.02-full\include\ege.h	/^	int bottom;$/;"	m	struct:ege::viewporttype
buf	C++\ege-13.04.02-full\include\ege.h	/^	PIMAGE buf() const { return m_mainbuf; }$/;"	f	class:ege::egeControlBase
buf	C++\ege-13.04.02-full\include\ege.h	/^	PIMAGE buf() { return m_mainbuf; }$/;"	f	class:ege::egeControlBase
capmouse	C++\ege-13.04.02-full\include\ege.h	/^	void capmouse(bool bcapmouse)   { m_bCapMouse = (bcapmouse ? 1 : 0); }$/;"	f	class:ege::egeControlBase
capture	C++\ege-13.04.02-full\include\ege.h	/^	void capture(bool bcapture)     { m_bCapture = (bcapture ? 1 : 0); }$/;"	f	class:ege::egeControlBase
charsize	C++\ege-13.04.02-full\include\ege.h	/^	int charsize;$/;"	m	struct:ege::textsettingstype
classname	C++\ege-13.04.02-full\include\ege.h	/^	LPCWSTR classname;$/;"	m	struct:ege::msg_createwindow
clipflag	C++\ege-13.04.02-full\include\ege.h	/^	int clipflag;$/;"	m	struct:ege::viewporttype
color	C++\ege-13.04.02-full\include\ege.h	/^	color_t color;$/;"	m	struct:ege::ege_colpoint
color_t	C++\ege-13.04.02-full\include\ege.h	/^typedef unsigned int color_t;$/;"	t	namespace:ege
directdraw	C++\ege-13.04.02-full\include\ege.h	/^	void directdraw(bool bdraw) { m_bDirectDraw = (bdraw ? 1 : 0); }$/;"	f	class:ege::egeControlBase
direction	C++\ege-13.04.02-full\include\ege.h	/^	int direction;$/;"	m	struct:ege::textsettingstype
ege	C++\ege-13.04.02-full\include\ege.h	/^namespace ege {$/;"	n
egeControlBase	C++\ege-13.04.02-full\include\ege.h	/^class egeControlBase$/;"	c	namespace:ege
ege_colpoint	C++\ege-13.04.02-full\include\ege.h	/^typedef struct ege_colpoint {$/;"	s	namespace:ege
ege_colpoint	C++\ege-13.04.02-full\include\ege.h	/^}ege_colpoint;$/;"	t	namespace:ege	typeref:struct:ege::ege_colpoint
ege_point	C++\ege-13.04.02-full\include\ege.h	/^typedef struct ege_point {$/;"	s	namespace:ege
ege_point	C++\ege-13.04.02-full\include\ege.h	/^}ege_point;$/;"	t	namespace:ege	typeref:struct:ege::ege_point
ege_rect	C++\ege-13.04.02-full\include\ege.h	/^typedef struct ege_rect {$/;"	s	namespace:ege
ege_rect	C++\ege-13.04.02-full\include\ege.h	/^}ege_rect;$/;"	t	namespace:ege	typeref:struct:ege::ege_rect
enable	C++\ege-13.04.02-full\include\ege.h	/^	void enable(bool benable)       { m_bEnable = (benable ? 1 : 0); }$/;"	f	class:ege::egeControlBase
exstyle	C++\ege-13.04.02-full\include\ege.h	/^	DWORD exstyle;$/;"	m	struct:ege::msg_createwindow
fill_patterns	C++\ege-13.04.02-full\include\ege.h	/^enum fill_patterns {\/* Fill patterns for get\/setfillstyle *\/$/;"	g	namespace:ege
filter	C++\ege-13.04.02-full\include\ege.h	/^	PIMAGE filter() const { return m_mainFilter; }$/;"	f	class:ege::egeControlBase
filter	C++\ege-13.04.02-full\include\ege.h	/^	PIMAGE filter() { return m_mainFilter; }$/;"	f	class:ege::egeControlBase
flags	C++\ege-13.04.02-full\include\ege.h	/^	unsigned int    flags;$/;"	m	struct:ege::key_msg
flags	C++\ege-13.04.02-full\include\ege.h	/^	unsigned int    flags;$/;"	m	struct:ege::mouse_msg
font	C++\ege-13.04.02-full\include\ege.h	/^	int font;$/;"	m	struct:ege::textsettingstype
getch	C++\ege-13.04.02-full\include\ege.h	1331;"	d
geth	C++\ege-13.04.02-full\include\ege.h	/^	int geth()      const { return m_h; }$/;"	f	class:ege::egeControlBase
getmaxx	C++\ege-13.04.02-full\include\ege.h	955;"	d
getmaxy	C++\ege-13.04.02-full\include\ege.h	956;"	d
getw	C++\ege-13.04.02-full\include\ege.h	/^	int getw()      const { return m_w; }$/;"	f	class:ege::egeControlBase
getx	C++\ege-13.04.02-full\include\ege.h	/^	int getx()      const { return m_x; }$/;"	f	class:ege::egeControlBase
gety	C++\ege-13.04.02-full\include\ege.h	/^	int gety()      const { return m_y; }$/;"	f	class:ege::egeControlBase
grAllocError	C++\ege-13.04.02-full\include\ege.h	/^	grAllocError        = 0x15,$/;"	e	enum:ege::graphics_errors
grError	C++\ege-13.04.02-full\include\ege.h	/^	grError             = -11,   \/* generic error *\/$/;"	e	enum:ege::graphics_errors
grException	C++\ege-13.04.02-full\include\ege.h	/^	grException         = 0x10,  \/* ege error *\/$/;"	e	enum:ege::graphics_errors
grFileNotFound	C++\ege-13.04.02-full\include\ege.h	/^	grFileNotFound      =  -3,$/;"	e	enum:ege::graphics_errors
grFontNotFound	C++\ege-13.04.02-full\include\ege.h	/^	grFontNotFound      =  -8,$/;"	e	enum:ege::graphics_errors
grIOerror	C++\ege-13.04.02-full\include\ege.h	/^	grIOerror           = -12,$/;"	e	enum:ege::graphics_errors
grInvalidDriver	C++\ege-13.04.02-full\include\ege.h	/^	grInvalidDriver     =  -4,$/;"	e	enum:ege::graphics_errors
grInvalidFont	C++\ege-13.04.02-full\include\ege.h	/^	grInvalidFont       = -13,$/;"	e	enum:ege::graphics_errors
grInvalidFontNum	C++\ege-13.04.02-full\include\ege.h	/^	grInvalidFontNum    = -14,$/;"	e	enum:ege::graphics_errors
grInvalidMemory	C++\ege-13.04.02-full\include\ege.h	/^	grInvalidMemory     = 0xCDCDCDCD,$/;"	e	enum:ege::graphics_errors
grInvalidMode	C++\ege-13.04.02-full\include\ege.h	/^	grInvalidMode       = -10,$/;"	e	enum:ege::graphics_errors
grInvalidRegion	C++\ege-13.04.02-full\include\ege.h	/^	grInvalidRegion     = 0x12,$/;"	e	enum:ege::graphics_errors
grInvalidVersion	C++\ege-13.04.02-full\include\ege.h	/^	grInvalidVersion    = -18,$/;"	e	enum:ege::graphics_errors
grNoFloodMem	C++\ege-13.04.02-full\include\ege.h	/^	grNoFloodMem        =  -7,$/;"	e	enum:ege::graphics_errors
grNoFontMem	C++\ege-13.04.02-full\include\ege.h	/^	grNoFontMem         =  -9,$/;"	e	enum:ege::graphics_errors
grNoInitGraph	C++\ege-13.04.02-full\include\ege.h	/^	grNoInitGraph       =  -1,$/;"	e	enum:ege::graphics_errors
grNoLoadMem	C++\ege-13.04.02-full\include\ege.h	/^	grNoLoadMem         =  -5,$/;"	e	enum:ege::graphics_errors
grNoScanMem	C++\ege-13.04.02-full\include\ege.h	/^	grNoScanMem         =  -6,$/;"	e	enum:ege::graphics_errors
grNotDetected	C++\ege-13.04.02-full\include\ege.h	/^	grNotDetected       =  -2,$/;"	e	enum:ege::graphics_errors
grNullPointer	C++\ege-13.04.02-full\include\ege.h	/^	grNullPointer       = 0x14,$/;"	e	enum:ege::graphics_errors
grOk	C++\ege-13.04.02-full\include\ege.h	/^	grOk                =   0,$/;"	e	enum:ege::graphics_errors
grOutOfMemory	C++\ege-13.04.02-full\include\ege.h	/^	grOutOfMemory       = 0x13,$/;"	e	enum:ege::graphics_errors
grParamError	C++\ege-13.04.02-full\include\ege.h	/^	grParamError        = 0x11,$/;"	e	enum:ege::graphics_errors
graphics_drivers	C++\ege-13.04.02-full\include\ege.h	/^enum graphics_drivers {     \/* define graphics drivers *\/$/;"	g	namespace:ege
graphics_errors	C++\ege-13.04.02-full\include\ege.h	/^enum graphics_errors {      \/* graphresult error return codes *\/$/;"	g	namespace:ege
graphics_modes	C++\ege-13.04.02-full\include\ege.h	/^enum graphics_modes { \/* graphics modes for each driver *\/$/;"	g	namespace:ege
h	C++\ege-13.04.02-full\include\ege.h	/^	float h;$/;"	m	struct:ege::ege_rect
hEvent	C++\ege-13.04.02-full\include\ege.h	/^	HANDLE hEvent;$/;"	m	struct:ege::msg_createwindow
height	C++\ege-13.04.02-full\include\ege.h	/^	int height()    const { return m_h; }$/;"	f	class:ege::egeControlBase
horiz	C++\ege-13.04.02-full\include\ege.h	/^	int horiz;$/;"	m	struct:ege::textsettingstype
hwnd	C++\ege-13.04.02-full\include\ege.h	/^	HWND hwnd;$/;"	m	struct:ege::msg_createwindow
id	C++\ege-13.04.02-full\include\ege.h	/^	unsigned id;$/;"	m	struct:ege::msg_createwindow
inherit_e	C++\ege-13.04.02-full\include\ege.h	/^	enum inherit_e {$/;"	g	class:ege::egeControlBase
inherit_level_e	C++\ege-13.04.02-full\include\ege.h	/^		inherit_level_e = 0,$/;"	e	enum:ege::egeControlBase::inherit_e
initmode_flag	C++\ege-13.04.02-full\include\ege.h	/^enum initmode_flag {$/;"	g	namespace:ege
is_down	C++\ege-13.04.02-full\include\ege.h	/^	bool is_down() {return msg == mouse_msg_down;}$/;"	f	struct:ege::mouse_msg
is_left	C++\ege-13.04.02-full\include\ege.h	/^	bool is_left() {return (flags & mouse_flag_left) != 0;}$/;"	f	struct:ege::mouse_msg
is_mid	C++\ege-13.04.02-full\include\ege.h	/^	bool is_mid() {return (flags & mouse_flag_mid) != 0;}$/;"	f	struct:ege::mouse_msg
is_move	C++\ege-13.04.02-full\include\ege.h	/^	bool is_move() {return msg == mouse_msg_move;}$/;"	f	struct:ege::mouse_msg
is_right	C++\ege-13.04.02-full\include\ege.h	/^	bool is_right() {return (flags & mouse_flag_right) != 0;}$/;"	f	struct:ege::mouse_msg
is_up	C++\ege-13.04.02-full\include\ege.h	/^	bool is_up() {return msg == mouse_msg_up;}$/;"	f	struct:ege::mouse_msg
is_wheel	C++\ege-13.04.02-full\include\ege.h	/^	bool is_wheel() {return msg == mouse_msg_wheel;}$/;"	f	struct:ege::mouse_msg
isautoredraw	C++\ege-13.04.02-full\include\ege.h	/^	bool isautoredraw() const       { return (m_bAutoDraw != 0);}$/;"	f	class:ege::egeControlBase
iscapmouse	C++\ege-13.04.02-full\include\ege.h	/^	bool iscapmouse() const         { return (m_bCapMouse != 0); }$/;"	f	class:ege::egeControlBase
iscapture	C++\ege-13.04.02-full\include\ege.h	/^	bool iscapture() const          { return (m_bCapture != 0); }$/;"	f	class:ege::egeControlBase
isdirectdraw	C++\ege-13.04.02-full\include\ege.h	/^	bool isdirectdraw() const { return (m_bDirectDraw != 0); }$/;"	f	class:ege::egeControlBase
isenable	C++\ege-13.04.02-full\include\ege.h	/^	bool isenable() const           { return (m_bEnable != 0);}$/;"	f	class:ege::egeControlBase
isfocus	C++\ege-13.04.02-full\include\ege.h	/^	bool isfocus() const            { return (m_bInputFocus != 0); }$/;"	f	class:ege::egeControlBase
isvisable	C++\ege-13.04.02-full\include\ege.h	/^	bool isvisable() const          { return (m_bVisable != 0);}$/;"	f	class:ege::egeControlBase
kbhit	C++\ege-13.04.02-full\include\ege.h	1332;"	d
key	C++\ege-13.04.02-full\include\ege.h	/^	int             key;$/;"	m	struct:ege::key_msg
key_0	C++\ege-13.04.02-full\include\ege.h	/^	key_0           = 0x30,$/;"	e	enum:ege::key_code_e
key_1	C++\ege-13.04.02-full\include\ege.h	/^	key_1           = 0x31,$/;"	e	enum:ege::key_code_e
key_2	C++\ege-13.04.02-full\include\ege.h	/^	key_2           = 0x32,$/;"	e	enum:ege::key_code_e
key_3	C++\ege-13.04.02-full\include\ege.h	/^	key_3           = 0x33,$/;"	e	enum:ege::key_code_e
key_4	C++\ege-13.04.02-full\include\ege.h	/^	key_4           = 0x34,$/;"	e	enum:ege::key_code_e
key_5	C++\ege-13.04.02-full\include\ege.h	/^	key_5           = 0x35,$/;"	e	enum:ege::key_code_e
key_6	C++\ege-13.04.02-full\include\ege.h	/^	key_6           = 0x36,$/;"	e	enum:ege::key_code_e
key_7	C++\ege-13.04.02-full\include\ege.h	/^	key_7           = 0x37,$/;"	e	enum:ege::key_code_e
key_8	C++\ege-13.04.02-full\include\ege.h	/^	key_8           = 0x38,$/;"	e	enum:ege::key_code_e
key_9	C++\ege-13.04.02-full\include\ege.h	/^	key_9           = 0x39,$/;"	e	enum:ege::key_code_e
key_A	C++\ege-13.04.02-full\include\ege.h	/^	key_A           = 0x41,$/;"	e	enum:ege::key_code_e
key_Z	C++\ege-13.04.02-full\include\ege.h	/^	key_Z           = 0x5a,$/;"	e	enum:ege::key_code_e
key_back	C++\ege-13.04.02-full\include\ege.h	/^	key_back        = 0x08,$/;"	e	enum:ege::key_code_e
key_backslash	C++\ege-13.04.02-full\include\ege.h	/^	key_backslash   = 0xdc,$/;"	e	enum:ege::key_code_e
key_capslock	C++\ege-13.04.02-full\include\ege.h	/^	key_capslock    = 0x14,$/;"	e	enum:ege::key_code_e
key_code_e	C++\ege-13.04.02-full\include\ege.h	/^typedef enum key_code_e {$/;"	g	namespace:ege
key_code_e	C++\ege-13.04.02-full\include\ege.h	/^}key_code_e;$/;"	t	namespace:ege	typeref:enum:ege::key_code_e
key_comma	C++\ege-13.04.02-full\include\ege.h	/^	key_comma       = 0xbc,$/;"	e	enum:ege::key_code_e
key_control	C++\ege-13.04.02-full\include\ege.h	/^	key_control     = 0x11,$/;"	e	enum:ege::key_code_e
key_control_l	C++\ege-13.04.02-full\include\ege.h	/^	key_control_l   = 0xa2,$/;"	e	enum:ege::key_code_e
key_control_r	C++\ege-13.04.02-full\include\ege.h	/^	key_control_r   = 0xa3,$/;"	e	enum:ege::key_code_e
key_delete	C++\ege-13.04.02-full\include\ege.h	/^	key_delete      = 0x2e,$/;"	e	enum:ege::key_code_e
key_down	C++\ege-13.04.02-full\include\ege.h	/^	key_down        = 0x28,$/;"	e	enum:ege::key_code_e
key_end	C++\ege-13.04.02-full\include\ege.h	/^	key_end         = 0x24,$/;"	e	enum:ege::key_code_e
key_enter	C++\ege-13.04.02-full\include\ege.h	/^	key_enter       = 0x0d,$/;"	e	enum:ege::key_code_e
key_esc	C++\ege-13.04.02-full\include\ege.h	/^	key_esc         = 0x1b,$/;"	e	enum:ege::key_code_e
key_f1	C++\ege-13.04.02-full\include\ege.h	/^	key_f1          = 0x70,$/;"	e	enum:ege::key_code_e
key_f10	C++\ege-13.04.02-full\include\ege.h	/^	key_f10         = 0x79,$/;"	e	enum:ege::key_code_e
key_f11	C++\ege-13.04.02-full\include\ege.h	/^	key_f11         = 0x7a,$/;"	e	enum:ege::key_code_e
key_f12	C++\ege-13.04.02-full\include\ege.h	/^	key_f12         = 0x7b,$/;"	e	enum:ege::key_code_e
key_f2	C++\ege-13.04.02-full\include\ege.h	/^	key_f2          = 0x71,$/;"	e	enum:ege::key_code_e
key_f3	C++\ege-13.04.02-full\include\ege.h	/^	key_f3          = 0x72,$/;"	e	enum:ege::key_code_e
key_f4	C++\ege-13.04.02-full\include\ege.h	/^	key_f4          = 0x73,$/;"	e	enum:ege::key_code_e
key_f5	C++\ege-13.04.02-full\include\ege.h	/^	key_f5          = 0x74,$/;"	e	enum:ege::key_code_e
key_f6	C++\ege-13.04.02-full\include\ege.h	/^	key_f6          = 0x75,$/;"	e	enum:ege::key_code_e
key_f7	C++\ege-13.04.02-full\include\ege.h	/^	key_f7          = 0x76,$/;"	e	enum:ege::key_code_e
key_f8	C++\ege-13.04.02-full\include\ege.h	/^	key_f8          = 0x77,$/;"	e	enum:ege::key_code_e
key_f9	C++\ege-13.04.02-full\include\ege.h	/^	key_f9          = 0x78,$/;"	e	enum:ege::key_code_e
key_flag_ctrl	C++\ege-13.04.02-full\include\ege.h	/^	key_flag_ctrl   = 0x200,$/;"	e	enum:ege::key_flag_e
key_flag_e	C++\ege-13.04.02-full\include\ege.h	/^typedef enum key_flag_e {$/;"	g	namespace:ege
key_flag_e	C++\ege-13.04.02-full\include\ege.h	/^}key_flag_e;$/;"	t	namespace:ege	typeref:enum:ege::key_flag_e
key_flag_shift	C++\ege-13.04.02-full\include\ege.h	/^	key_flag_shift  = 0x100,$/;"	e	enum:ege::key_flag_e
key_home	C++\ege-13.04.02-full\include\ege.h	/^	key_home        = 0x23,$/;"	e	enum:ege::key_code_e
key_ime_process	C++\ege-13.04.02-full\include\ege.h	/^	key_ime_process = 0xe5,$/;"	e	enum:ege::key_code_e
key_insert	C++\ege-13.04.02-full\include\ege.h	/^	key_insert      = 0x2d,$/;"	e	enum:ege::key_code_e
key_lbrace	C++\ege-13.04.02-full\include\ege.h	/^	key_lbrace      = 0xdb,$/;"	e	enum:ege::key_code_e
key_left	C++\ege-13.04.02-full\include\ege.h	/^	key_left        = 0x25,$/;"	e	enum:ege::key_code_e
key_menu	C++\ege-13.04.02-full\include\ege.h	/^	key_menu        = 0x12,$/;"	e	enum:ege::key_code_e
key_menu_l	C++\ege-13.04.02-full\include\ege.h	/^	key_menu_l      = 0xa4,$/;"	e	enum:ege::key_code_e
key_menu_r	C++\ege-13.04.02-full\include\ege.h	/^	key_menu_r      = 0xa5,$/;"	e	enum:ege::key_code_e
key_minus	C++\ege-13.04.02-full\include\ege.h	/^	key_minus       = 0xbd,$/;"	e	enum:ege::key_code_e
key_mouse_l	C++\ege-13.04.02-full\include\ege.h	/^	key_mouse_l     = 0x01,$/;"	e	enum:ege::key_code_e
key_mouse_m	C++\ege-13.04.02-full\include\ege.h	/^	key_mouse_m     = 0x04,$/;"	e	enum:ege::key_code_e
key_mouse_r	C++\ege-13.04.02-full\include\ege.h	/^	key_mouse_r     = 0x02,$/;"	e	enum:ege::key_code_e
key_msg	C++\ege-13.04.02-full\include\ege.h	/^typedef struct key_msg {$/;"	s	namespace:ege
key_msg	C++\ege-13.04.02-full\include\ege.h	/^}key_msg;$/;"	t	namespace:ege	typeref:struct:ege::key_msg
key_msg_char	C++\ege-13.04.02-full\include\ege.h	/^	key_msg_char    = 4,$/;"	e	enum:ege::key_msg_e
key_msg_down	C++\ege-13.04.02-full\include\ege.h	/^	key_msg_down    = 1,$/;"	e	enum:ege::key_msg_e
key_msg_e	C++\ege-13.04.02-full\include\ege.h	/^typedef enum key_msg_e {$/;"	g	namespace:ege
key_msg_e	C++\ege-13.04.02-full\include\ege.h	/^}key_msg_e;$/;"	t	namespace:ege	typeref:enum:ege::key_msg_e
key_msg_flag	C++\ege-13.04.02-full\include\ege.h	/^enum key_msg_flag {$/;"	g	namespace:ege
key_msg_up	C++\ege-13.04.02-full\include\ege.h	/^	key_msg_up      = 2,$/;"	e	enum:ege::key_msg_e
key_num0	C++\ege-13.04.02-full\include\ege.h	/^	key_num0        = 0x60,$/;"	e	enum:ege::key_code_e
key_num1	C++\ege-13.04.02-full\include\ege.h	/^	key_num1        = 0x61,$/;"	e	enum:ege::key_code_e
key_num2	C++\ege-13.04.02-full\include\ege.h	/^	key_num2        = 0x62,$/;"	e	enum:ege::key_code_e
key_num3	C++\ege-13.04.02-full\include\ege.h	/^	key_num3        = 0x63,$/;"	e	enum:ege::key_code_e
key_num4	C++\ege-13.04.02-full\include\ege.h	/^	key_num4        = 0x64,$/;"	e	enum:ege::key_code_e
key_num5	C++\ege-13.04.02-full\include\ege.h	/^	key_num5        = 0x65,$/;"	e	enum:ege::key_code_e
key_num6	C++\ege-13.04.02-full\include\ege.h	/^	key_num6        = 0x66,$/;"	e	enum:ege::key_code_e
key_num7	C++\ege-13.04.02-full\include\ege.h	/^	key_num7        = 0x67,$/;"	e	enum:ege::key_code_e
key_num8	C++\ege-13.04.02-full\include\ege.h	/^	key_num8        = 0x68,$/;"	e	enum:ege::key_code_e
key_num9	C++\ege-13.04.02-full\include\ege.h	/^	key_num9        = 0x69,$/;"	e	enum:ege::key_code_e
key_numlock	C++\ege-13.04.02-full\include\ege.h	/^	key_numlock     = 0x90,$/;"	e	enum:ege::key_code_e
key_pagedown	C++\ege-13.04.02-full\include\ege.h	/^	key_pagedown    = 0x22,$/;"	e	enum:ege::key_code_e
key_pageup	C++\ege-13.04.02-full\include\ege.h	/^	key_pageup      = 0x21,$/;"	e	enum:ege::key_code_e
key_pause	C++\ege-13.04.02-full\include\ege.h	/^	key_pause       = 0x13,$/;"	e	enum:ege::key_code_e
key_period	C++\ege-13.04.02-full\include\ege.h	/^	key_period      = 0xbe,$/;"	e	enum:ege::key_code_e
key_plus	C++\ege-13.04.02-full\include\ege.h	/^	key_plus        = 0xbb,$/;"	e	enum:ege::key_code_e
key_print	C++\ege-13.04.02-full\include\ege.h	/^	key_print       = 0x2a,$/;"	e	enum:ege::key_code_e
key_quote	C++\ege-13.04.02-full\include\ege.h	/^	key_quote       = 0xde,$/;"	e	enum:ege::key_code_e
key_rbrace	C++\ege-13.04.02-full\include\ege.h	/^	key_rbrace      = 0xdd,$/;"	e	enum:ege::key_code_e
key_right	C++\ege-13.04.02-full\include\ege.h	/^	key_right       = 0x27,$/;"	e	enum:ege::key_code_e
key_scrolllock	C++\ege-13.04.02-full\include\ege.h	/^	key_scrolllock  = 0x91,$/;"	e	enum:ege::key_code_e
key_semicolon	C++\ege-13.04.02-full\include\ege.h	/^	key_semicolon   = 0xba,$/;"	e	enum:ege::key_code_e
key_shift	C++\ege-13.04.02-full\include\ege.h	/^	key_shift       = 0x10,$/;"	e	enum:ege::key_code_e
key_shift_l	C++\ege-13.04.02-full\include\ege.h	/^	key_shift_l     = 0xa0,$/;"	e	enum:ege::key_code_e
key_shift_r	C++\ege-13.04.02-full\include\ege.h	/^	key_shift_r     = 0xa1,$/;"	e	enum:ege::key_code_e
key_slash	C++\ege-13.04.02-full\include\ege.h	/^	key_slash       = 0xbf,$/;"	e	enum:ege::key_code_e
key_sleep	C++\ege-13.04.02-full\include\ege.h	/^	key_sleep       = 0x5f,$/;"	e	enum:ege::key_code_e
key_snapshot	C++\ege-13.04.02-full\include\ege.h	/^	key_snapshot    = 0x2c,$/;"	e	enum:ege::key_code_e
key_space	C++\ege-13.04.02-full\include\ege.h	/^	key_space       = 0x20,$/;"	e	enum:ege::key_code_e
key_tab	C++\ege-13.04.02-full\include\ege.h	/^	key_tab         = 0x09,$/;"	e	enum:ege::key_code_e
key_tilde	C++\ege-13.04.02-full\include\ege.h	/^	key_tilde       = 0xc0,$/;"	e	enum:ege::key_code_e
key_up	C++\ege-13.04.02-full\include\ege.h	/^	key_up          = 0x26,$/;"	e	enum:ege::key_code_e
key_win_l	C++\ege-13.04.02-full\include\ege.h	/^	key_win_l       = 0x5b,$/;"	e	enum:ege::key_code_e
key_win_r	C++\ege-13.04.02-full\include\ege.h	/^	key_win_r       = 0x5c,$/;"	e	enum:ege::key_code_e
left	C++\ege-13.04.02-full\include\ege.h	/^	int left;$/;"	m	struct:ege::viewporttype
line_styles	C++\ege-13.04.02-full\include\ege.h	/^enum line_styles {      \/* Line styles for get\/setlinestyle *\/$/;"	g	namespace:ege
linestyle	C++\ege-13.04.02-full\include\ege.h	/^	int linestyle;$/;"	m	struct:ege::linestyletype
linestyletype	C++\ege-13.04.02-full\include\ege.h	/^struct linestyletype {$/;"	s	namespace:ege
m_AlphablendMode	C++\ege-13.04.02-full\include\ege.h	/^	int     m_AlphablendMode;   \/\/ �滭��Ϲ��˷�ʽ$/;"	m	class:ege::egeControlBase
m_DID	C++\ege-13.04.02-full\include\ege.h	/^	DWORD       m_DID;$/;"	m	class:ege::MUSIC
m_allocId	C++\ege-13.04.02-full\include\ege.h	/^	int m_allocId;      \/\/ ����id$/;"	m	class:ege::egeControlBase
m_allocZorder	C++\ege-13.04.02-full\include\ege.h	/^	int m_allocZorder;  \/\/ ����Z����$/;"	m	class:ege::egeControlBase
m_bAutoDraw	C++\ege-13.04.02-full\include\ege.h	/^	int m_bAutoDraw;    \/\/ �Ƿ��Զ��滭��������$/;"	m	class:ege::egeControlBase
m_bCapMouse	C++\ege-13.04.02-full\include\ege.h	/^	int m_bCapMouse;    \/\/ �Ƿ�׽��꣨��ʹ�������������ڣ�$/;"	m	class:ege::egeControlBase
m_bCapture	C++\ege-13.04.02-full\include\ege.h	/^	int m_bCapture;     \/\/ �Ƿ�ɻ�ü������뽹��$/;"	m	class:ege::egeControlBase
m_bDirectDraw	C++\ege-13.04.02-full\include\ege.h	/^	int     m_bDirectDraw;      \/\/ ����ֱ�ӻ滭$/;"	m	class:ege::egeControlBase
m_bEnable	C++\ege-13.04.02-full\include\ege.h	/^	int m_bEnable;      \/\/ �Ƿ�ɻ�����루���̺���꣩$/;"	m	class:ege::egeControlBase
m_bInputFocus	C++\ege-13.04.02-full\include\ege.h	/^	int m_bInputFocus;  \/\/ �Ƿ��Ѿ�������뽹��$/;"	m	class:ege::egeControlBase
m_bVisable	C++\ege-13.04.02-full\include\ege.h	/^	int m_bVisable;     \/\/ �Ƿ�ɼ�$/;"	m	class:ege::egeControlBase
m_childmap	C++\ege-13.04.02-full\include\ege.h	/^	void* m_childmap;       \/\/ �ӿؼ�$/;"	m	class:ege::egeControlBase
m_childzorder	C++\ege-13.04.02-full\include\ege.h	/^	void* m_childzorder;    \/\/ �ӿؼ�����$/;"	m	class:ege::egeControlBase
m_dwCallBack	C++\ege-13.04.02-full\include\ege.h	/^	PVOID       m_dwCallBack;$/;"	m	class:ege::MUSIC
m_h	C++\ege-13.04.02-full\include\ege.h	/^	int m_w, m_h;       \/\/ ����$/;"	m	class:ege::egeControlBase
m_inherit_level	C++\ege-13.04.02-full\include\ege.h	/^		int m_inherit_level;$/;"	m	class:ege::egeControlBase::InitObject
m_inheritlevel	C++\ege-13.04.02-full\include\ege.h	/^	int     m_inheritlevel;     \/\/ �̳в��$/;"	m	class:ege::egeControlBase
m_mainFilter	C++\ege-13.04.02-full\include\ege.h	/^	PIMAGE   m_mainFilter;   \/\/ ������$/;"	m	class:ege::egeControlBase
m_mainbuf	C++\ege-13.04.02-full\include\ege.h	/^	PIMAGE   m_mainbuf;      \/\/ ������$/;"	m	class:ege::egeControlBase
m_parent	C++\ege-13.04.02-full\include\ege.h	/^	egeControlBase* m_parent;$/;"	m	class:ege::egeControlBase
m_preinit_func	C++\ege-13.04.02-full\include\ege.h	/^	void (* m_preinit_func )(egeControlBase*);$/;"	m	class:ege::egeControlBase
m_rop	C++\ege-13.04.02-full\include\ege.h	/^	DWORD   m_rop;              \/\/ ��Ϸ�ʽ$/;"	m	class:ege::egeControlBase
m_target	C++\ege-13.04.02-full\include\ege.h	/^	PIMAGE m_target;$/;"	m	class:ege::PushTarget
m_this	C++\ege-13.04.02-full\include\ege.h	/^		egeControlBase* m_this;$/;"	m	class:ege::egeControlBase::InitObject
m_w	C++\ege-13.04.02-full\include\ege.h	/^	int m_w, m_h;       \/\/ ����$/;"	m	class:ege::egeControlBase
m_x	C++\ege-13.04.02-full\include\ege.h	/^	int m_x, m_y;       \/\/ ���Ͻ�����$/;"	m	class:ege::egeControlBase
m_y	C++\ege-13.04.02-full\include\ege.h	/^	int m_x, m_y;       \/\/ ���Ͻ�����$/;"	m	class:ege::egeControlBase
m_zOrder	C++\ege-13.04.02-full\include\ege.h	/^	int m_zOrder;       \/\/ Z����ֵ�ϴ�����ǰ��ֵ��С�߻ᱻ�����ؼ��ڵ���$/;"	m	class:ege::egeControlBase
m_zOrderLayer	C++\ege-13.04.02-full\include\ege.h	/^	int m_zOrderLayer;  \/\/ Z����㣨ֵ�ϴ�����ǰ��ֵ��С�߻ᱻ�����ؼ��ڵ���$/;"	m	class:ege::egeControlBase
message_event	C++\ege-13.04.02-full\include\ege.h	/^enum message_event {$/;"	g	namespace:ege
message_mouse	C++\ege-13.04.02-full\include\ege.h	/^enum message_mouse {$/;"	g	namespace:ege
mouse_flag_ctrl	C++\ege-13.04.02-full\include\ege.h	/^	mouse_flag_ctrl     = 0x200,$/;"	e	enum:ege::mouse_flag_e
mouse_flag_e	C++\ege-13.04.02-full\include\ege.h	/^typedef enum mouse_flag_e {$/;"	g	namespace:ege
mouse_flag_e	C++\ege-13.04.02-full\include\ege.h	/^}mouse_flag_e;$/;"	t	namespace:ege	typeref:enum:ege::mouse_flag_e
mouse_flag_left	C++\ege-13.04.02-full\include\ege.h	/^	mouse_flag_left     = 1,$/;"	e	enum:ege::mouse_flag_e
mouse_flag_mid	C++\ege-13.04.02-full\include\ege.h	/^	mouse_flag_mid      = 4,$/;"	e	enum:ege::mouse_flag_e
mouse_flag_right	C++\ege-13.04.02-full\include\ege.h	/^	mouse_flag_right    = 2,$/;"	e	enum:ege::mouse_flag_e
mouse_flag_shift	C++\ege-13.04.02-full\include\ege.h	/^	mouse_flag_shift    = 0x100,$/;"	e	enum:ege::mouse_flag_e
mouse_msg	C++\ege-13.04.02-full\include\ege.h	/^typedef struct mouse_msg {$/;"	s	namespace:ege
mouse_msg	C++\ege-13.04.02-full\include\ege.h	/^}mouse_msg;$/;"	t	namespace:ege	typeref:struct:ege::mouse_msg
mouse_msg_down	C++\ege-13.04.02-full\include\ege.h	/^	mouse_msg_down      = 0x10,$/;"	e	enum:ege::mouse_msg_e
mouse_msg_e	C++\ege-13.04.02-full\include\ege.h	/^typedef enum mouse_msg_e {$/;"	g	namespace:ege
mouse_msg_e	C++\ege-13.04.02-full\include\ege.h	/^}mouse_msg_e;$/;"	t	namespace:ege	typeref:enum:ege::mouse_msg_e
mouse_msg_move	C++\ege-13.04.02-full\include\ege.h	/^	mouse_msg_move      = 0x40,$/;"	e	enum:ege::mouse_msg_e
mouse_msg_up	C++\ege-13.04.02-full\include\ege.h	/^	mouse_msg_up        = 0x20,$/;"	e	enum:ege::mouse_msg_e
mouse_msg_wheel	C++\ege-13.04.02-full\include\ege.h	/^	mouse_msg_wheel     = 0x80,$/;"	e	enum:ege::mouse_msg_e
move	C++\ege-13.04.02-full\include\ege.h	/^	void move(int x, int y)         { m_x = x; m_y = y; }$/;"	f	class:ege::egeControlBase
msg	C++\ege-13.04.02-full\include\ege.h	/^	key_msg_e       msg;$/;"	m	struct:ege::key_msg
msg	C++\ege-13.04.02-full\include\ege.h	/^	mouse_msg_e     msg;$/;"	m	struct:ege::mouse_msg
msg_createwindow	C++\ege-13.04.02-full\include\ege.h	/^struct msg_createwindow {$/;"	s	namespace:ege
music_state_flag	C++\ege-13.04.02-full\include\ege.h	/^enum music_state_flag {$/;"	g	namespace:ege
onAddChild	C++\ege-13.04.02-full\include\ege.h	/^	virtual void onAddChild(egeControlBase* pChild) {}$/;"	f	class:ege::egeControlBase
onDelChild	C++\ege-13.04.02-full\include\ege.h	/^	virtual void onDelChild(egeControlBase* pChild) {}$/;"	f	class:ege::egeControlBase
onDraw	C++\ege-13.04.02-full\include\ege.h	/^	virtual void onDraw(PIMAGE pimg) const {}$/;"	f	class:ege::egeControlBase
onGetFocus	C++\ege-13.04.02-full\include\ege.h	/^	virtual int  onGetFocus() { return 0; }$/;"	f	class:ege::egeControlBase
onIdle	C++\ege-13.04.02-full\include\ege.h	/^	virtual void onIdle() {} \/\/ �����ӿڣ�δ��$/;"	f	class:ege::egeControlBase
onKeyChar	C++\ege-13.04.02-full\include\ege.h	/^	virtual int  onKeyChar(int key, int flag) { return 0; }$/;"	f	class:ege::egeControlBase
onKeyDown	C++\ege-13.04.02-full\include\ege.h	/^	virtual int  onKeyDown(int key, int flag) { return 0; }$/;"	f	class:ege::egeControlBase
onKeyUp	C++\ege-13.04.02-full\include\ege.h	/^	virtual int  onKeyUp(int key, int flag) { return 0; }$/;"	f	class:ege::egeControlBase
onLostFocus	C++\ege-13.04.02-full\include\ege.h	/^	virtual void onLostFocus() { }$/;"	f	class:ege::egeControlBase
onMessage	C++\ege-13.04.02-full\include\ege.h	/^	virtual LRESULT onMessage(UINT message, WPARAM wParam, LPARAM lParam) { return 0; }$/;"	f	class:ege::egeControlBase
onMouse	C++\ege-13.04.02-full\include\ege.h	/^	virtual int  onMouse(int x, int y, int flag) { return 0; }$/;"	f	class:ege::egeControlBase
onResetFilter	C++\ege-13.04.02-full\include\ege.h	/^	virtual void onResetFilter() {$/;"	f	class:ege::egeControlBase
onSize	C++\ege-13.04.02-full\include\ege.h	/^	virtual void onSize(int w, int h) {}$/;"	f	class:ege::egeControlBase
onSizing	C++\ege-13.04.02-full\include\ege.h	/^	virtual void onSizing(int *w, int *h) {}$/;"	f	class:ege::egeControlBase
onUpdate	C++\ege-13.04.02-full\include\ege.h	/^	virtual int  onUpdate() { return 0; }$/;"	f	class:ege::egeControlBase
operator <	C++\ege-13.04.02-full\include\ege.h	/^	bool operator < (const egeControlBase& pbase) const {$/;"	f	class:ege::egeControlBase
operator =	C++\ege-13.04.02-full\include\ege.h	/^	VECTOR3D& operator = (const VECTOR3D& _fp)  {$/;"	f	struct:ege::VECTOR3D
operator HWND	C++\ege-13.04.02-full\include\ege.h	/^	operator HWND()const{return (HWND)m_dwCallBack;}$/;"	f	class:ege::MUSIC
param	C++\ege-13.04.02-full\include\ege.h	/^	LPVOID param;$/;"	m	struct:ege::msg_createwindow
parent	C++\ege-13.04.02-full\include\ege.h	/^	const egeControlBase* parent() const { return m_parent; }$/;"	f	class:ege::egeControlBase
parent	C++\ege-13.04.02-full\include\ege.h	/^	egeControlBase* parent() { return m_parent; }$/;"	f	class:ege::egeControlBase
pattern_lineargradient	C++\ege-13.04.02-full\include\ege.h	/^	pattern_lineargradient  = 1,$/;"	e	enum:ege::pattern_type_e
pattern_none	C++\ege-13.04.02-full\include\ege.h	/^	pattern_none            = 0,$/;"	e	enum:ege::pattern_type_e
pattern_pathgradient	C++\ege-13.04.02-full\include\ege.h	/^	pattern_pathgradient    = 2,$/;"	e	enum:ege::pattern_type_e
pattern_texture	C++\ege-13.04.02-full\include\ege.h	/^	pattern_texture         = 3,$/;"	e	enum:ege::pattern_type_e
pattern_type_e	C++\ege-13.04.02-full\include\ege.h	/^typedef enum pattern_type_e {$/;"	g	namespace:ege
pattern_type_e	C++\ege-13.04.02-full\include\ege.h	/^}pattern_type_e;$/;"	t	namespace:ege	typeref:enum:ege::pattern_type_e
rendermode_e	C++\ege-13.04.02-full\include\ege.h	/^enum rendermode_e {$/;"	g	namespace:ege
right	C++\ege-13.04.02-full\include\ege.h	/^	int right;$/;"	m	struct:ege::viewporttype
s_maxchildid	C++\ege-13.04.02-full\include\ege.h	/^	static int s_maxchildid;   \/\/ ��һ���ӿؼ�����IDֵ$/;"	m	class:ege::egeControlBase
setrop	C++\ege-13.04.02-full\include\ege.h	/^	void setrop(int rop) { m_rop = rop; } \/\/ ����ö������ROP���������$/;"	f	class:ege::egeControlBase
size	C++\ege-13.04.02-full\include\ege.h	/^	void size(int w, int h) {$/;"	f	class:ege::egeControlBase
style	C++\ege-13.04.02-full\include\ege.h	/^	DWORD style;$/;"	m	struct:ege::msg_createwindow
text_just	C++\ege-13.04.02-full\include\ege.h	/^enum text_just {        \/* Horizontal and vertical justification$/;"	g	namespace:ege
textsettingstype	C++\ege-13.04.02-full\include\ege.h	/^struct textsettingstype {$/;"	s	namespace:ege
thickness	C++\ege-13.04.02-full\include\ege.h	/^	int thickness;$/;"	m	struct:ege::linestyletype
top	C++\ege-13.04.02-full\include\ege.h	/^	int top;$/;"	m	struct:ege::viewporttype
upattern	C++\ege-13.04.02-full\include\ege.h	/^	unsigned short upattern;$/;"	m	struct:ege::linestyletype
vert	C++\ege-13.04.02-full\include\ege.h	/^	int vert;$/;"	m	struct:ege::textsettingstype
viewporttype	C++\ege-13.04.02-full\include\ege.h	/^struct viewporttype {$/;"	s	namespace:ege
visable	C++\ege-13.04.02-full\include\ege.h	/^	void visable(bool bvisable)     { m_bVisable = (bvisable ? 1 : 0); }$/;"	f	class:ege::egeControlBase
w	C++\ege-13.04.02-full\include\ege.h	/^	float w;$/;"	m	struct:ege::ege_rect
wheel	C++\ege-13.04.02-full\include\ege.h	/^	int             wheel;$/;"	m	struct:ege::mouse_msg
width	C++\ege-13.04.02-full\include\ege.h	/^	int width()     const { return m_w; }$/;"	f	class:ege::egeControlBase
x	C++\ege-13.04.02-full\include\ege.h	/^	float   x;$/;"	m	struct:ege::ege_colpoint
x	C++\ege-13.04.02-full\include\ege.h	/^	float x, y, z;$/;"	m	struct:ege::VECTOR3D
x	C++\ege-13.04.02-full\include\ege.h	/^	float x;$/;"	m	struct:ege::ege_point
x	C++\ege-13.04.02-full\include\ege.h	/^	float x;$/;"	m	struct:ege::ege_rect
x	C++\ege-13.04.02-full\include\ege.h	/^	int             x;$/;"	m	struct:ege::mouse_msg
y	C++\ege-13.04.02-full\include\ege.h	/^	float   y;$/;"	m	struct:ege::ege_colpoint
y	C++\ege-13.04.02-full\include\ege.h	/^	float x, y, z;$/;"	m	struct:ege::VECTOR3D
y	C++\ege-13.04.02-full\include\ege.h	/^	float y;$/;"	m	struct:ege::ege_point
y	C++\ege-13.04.02-full\include\ege.h	/^	float y;$/;"	m	struct:ege::ege_rect
y	C++\ege-13.04.02-full\include\ege.h	/^	int             y;$/;"	m	struct:ege::mouse_msg
z	C++\ege-13.04.02-full\include\ege.h	/^	float x, y, z;$/;"	m	struct:ege::VECTOR3D
~PushTarget	C++\ege-13.04.02-full\include\ege.h	/^	~PushTarget() { settarget(m_target); }$/;"	f	class:ege::PushTarget
CTL_PREINIT	C++\ege-13.04.02-full\include\ege\button.h	/^        CTL_PREINIT(button, egeControlBase) {$/;"	f	class:button
CTL_PREINITEND	C++\ege-13.04.02-full\include\ege\button.h	/^        } CTL_PREINITEND;$/;"	m	class:button
_EGE_BUTTON_H_	C++\ege-13.04.02-full\include\ege\button.h	8;"	d
_alpha	C++\ege-13.04.02-full\include\ege\button.h	/^        int _alpha;$/;"	m	class:button
_bg_color	C++\ege-13.04.02-full\include\ege\button.h	/^        COLORREF _bg_color;$/;"	m	class:button
_caption	C++\ege-13.04.02-full\include\ege\button.h	/^        char _caption[1024];$/;"	m	class:button
_face	C++\ege-13.04.02-full\include\ege\button.h	/^        char _face[32];$/;"	m	class:button
_font_height	C++\ege-13.04.02-full\include\ege\button.h	/^        int _font_height;$/;"	m	class:button
_line_color	C++\ege-13.04.02-full\include\ege\button.h	/^        COLORREF _line_color;$/;"	m	class:button
_logger	C++\ege-13.04.02-full\include\ege\button.h	/^        label* _logger;$/;"	m	class:button
_on_click	C++\ege-13.04.02-full\include\ege\button.h	/^        int (*_on_click)(void*);$/;"	m	class:button
_pushed	C++\ege-13.04.02-full\include\ege\button.h	/^        bool _pushed;$/;"	m	class:button
_shadow_color	C++\ege-13.04.02-full\include\ege\button.h	/^        COLORREF _shadow_color;$/;"	m	class:button
_side_width	C++\ege-13.04.02-full\include\ege\button.h	/^        int _side_width;$/;"	m	class:button
_text_color	C++\ege-13.04.02-full\include\ege\button.h	/^        COLORREF _text_color;$/;"	m	class:button
alpha	C++\ege-13.04.02-full\include\ege\button.h	/^        int alpha() const{$/;"	f	class:button
alpha	C++\ege-13.04.02-full\include\ege\button.h	/^        void alpha(int alpha){$/;"	f	class:button
bgcolor	C++\ege-13.04.02-full\include\ege\button.h	/^        COLORREF bgcolor() const{$/;"	f	class:button
bgcolor	C++\ege-13.04.02-full\include\ege\button.h	/^        void bgcolor(COLORREF color){$/;"	f	class:button
button	C++\ege-13.04.02-full\include\ege\button.h	/^        button(CTL_DEFPARAM) : CTL_INITBASE(egeControlBase) {$/;"	f	class:button
button	C++\ege-13.04.02-full\include\ege\button.h	/^class button : public egeControlBase$/;"	c
callback	C++\ege-13.04.02-full\include\ege\button.h	/^            T callback() const{$/;"	f	class:button
callback	C++\ege-13.04.02-full\include\ege\button.h	/^        void callback(int (*fun)(void*),void* param){$/;"	f	class:button
callback_param	C++\ege-13.04.02-full\include\ege\button.h	/^        void* callback_param;$/;"	m	class:button
caption	C++\ege-13.04.02-full\include\ege\button.h	/^        const char* caption() const{$/;"	f	class:button
caption	C++\ege-13.04.02-full\include\ege\button.h	/^        void caption(const char* text) {$/;"	f	class:button
font	C++\ege-13.04.02-full\include\ege\button.h	/^        const char* font() const{$/;"	f	class:button
font	C++\ege-13.04.02-full\include\ege\button.h	/^        void font(const char* fontface) {$/;"	f	class:button
fontsize	C++\ege-13.04.02-full\include\ege\button.h	/^        int fontsize() const{$/;"	f	class:button
fontsize	C++\ege-13.04.02-full\include\ege\button.h	/^        void fontsize(int height) {$/;"	f	class:button
linecolor	C++\ege-13.04.02-full\include\ege\button.h	/^        COLORREF linecolor() const{$/;"	f	class:button
linecolor	C++\ege-13.04.02-full\include\ege\button.h	/^        void linecolor(COLORREF color){$/;"	f	class:button
logger	C++\ege-13.04.02-full\include\ege\button.h	/^        label* logger() const{$/;"	f	class:button
logger	C++\ege-13.04.02-full\include\ege\button.h	/^        void logger(label* logger){$/;"	f	class:button
logout	C++\ege-13.04.02-full\include\ege\button.h	/^        void logout(const char* msg){$/;"	f	class:button
logout	C++\ege-13.04.02-full\include\ege\button.h	19;"	d
onClick	C++\ege-13.04.02-full\include\ege\button.h	/^        virtual void onClick(){$/;"	f	class:button
onDraw	C++\ege-13.04.02-full\include\ege\button.h	/^        virtual void onDraw(PIMAGE pimg) const {$/;"	f	class:button
onGetFocus	C++\ege-13.04.02-full\include\ege\button.h	/^        virtual int  onGetFocus() {$/;"	f	class:button
onKeyDown	C++\ege-13.04.02-full\include\ege\button.h	/^        virtual int  onKeyDown(int key, int flag) {$/;"	f	class:button
onKeyUp	C++\ege-13.04.02-full\include\ege\button.h	/^        virtual int  onKeyUp(int key, int flag) {$/;"	f	class:button
onLostFocus	C++\ege-13.04.02-full\include\ege\button.h	/^        virtual void onLostFocus() {$/;"	f	class:button
onMouse	C++\ege-13.04.02-full\include\ege\button.h	/^        virtual int onMouse(int x, int y, int flag) {$/;"	f	class:button
onResetFilter	C++\ege-13.04.02-full\include\ege\button.h	/^        virtual void onResetFilter() {$/;"	f	class:button
onSize	C++\ege-13.04.02-full\include\ege\button.h	/^        virtual void onSize(int w, int h) {$/;"	f	class:button
onSizing	C++\ege-13.04.02-full\include\ege\button.h	/^        virtual void onSizing(int *w, int *h) {$/;"	f	class:button
onUpdate	C++\ege-13.04.02-full\include\ege\button.h	/^        virtual int  onUpdate() { $/;"	f	class:button
redraw	C++\ege-13.04.02-full\include\ege\button.h	/^        virtual void redraw() const {$/;"	f	class:button
shadowcolor	C++\ege-13.04.02-full\include\ege\button.h	/^        COLORREF shadowcolor() const{$/;"	f	class:button
shadowcolor	C++\ege-13.04.02-full\include\ege\button.h	/^        void shadowcolor(COLORREF color){$/;"	f	class:button
textcolor	C++\ege-13.04.02-full\include\ege\button.h	/^        COLORREF textcolor() const{$/;"	f	class:button
textcolor	C++\ege-13.04.02-full\include\ege\button.h	/^        void textcolor(COLORREF color){$/;"	f	class:button
updatesidewidth	C++\ege-13.04.02-full\include\ege\button.h	/^        void updatesidewidth(){$/;"	f	class:button
CTL_PREINIT	C++\ege-13.04.02-full\include\ege\fps.h	/^    CTL_PREINIT(fps, egeControlBase) {$/;"	f	class:ege::fps
CTL_PREINITEND	C++\ege-13.04.02-full\include\ege\fps.h	/^    } CTL_PREINITEND;$/;"	m	class:ege::fps
_EGE_FPS_H_	C++\ege-13.04.02-full\include\ege\fps.h	2;"	d
ege	C++\ege-13.04.02-full\include\ege\fps.h	/^namespace ege {$/;"	n
fps	C++\ege-13.04.02-full\include\ege\fps.h	/^    fps(CTL_DEFPARAM) : CTL_INITBASE(egeControlBase) {$/;"	f	class:ege::fps
fps	C++\ege-13.04.02-full\include\ege\fps.h	/^class fps : public egeControlBase$/;"	c	namespace:ege
onDraw	C++\ege-13.04.02-full\include\ege\fps.h	/^    void onDraw(PIMAGE pimg) const {$/;"	f	class:ege::fps
CTL_PREINIT	C++\ege-13.04.02-full\include\ege\label.h	/^    CTL_PREINIT(label, egeControlBase) {$/;"	f	class:label
CTL_PREINITEND	C++\ege-13.04.02-full\include\ege\label.h	/^    } CTL_PREINITEND;$/;"	m	class:label
_EGE_LABEL_H_	C++\ege-13.04.02-full\include\ege\label.h	2;"	d
alpha	C++\ege-13.04.02-full\include\ege\label.h	/^    int alpha() const {$/;"	f	class:label
alpha	C++\ege-13.04.02-full\include\ege\label.h	/^    void alpha(int alpha) {$/;"	f	class:label
bkcolor	C++\ege-13.04.02-full\include\ege\label.h	/^    color_t bkcolor() const {$/;"	f	class:label
bkcolor	C++\ege-13.04.02-full\include\ege\label.h	/^    void bkcolor(color_t color) {$/;"	f	class:label
caption	C++\ege-13.04.02-full\include\ege\label.h	/^    const char* caption() const {$/;"	f	class:label
caption	C++\ege-13.04.02-full\include\ege\label.h	/^    void caption(const char* text) {$/;"	f	class:label
color	C++\ege-13.04.02-full\include\ege\label.h	/^    color_t color() const {$/;"	f	class:label
color	C++\ege-13.04.02-full\include\ege\label.h	/^    void color(color_t color) {$/;"	f	class:label
font	C++\ege-13.04.02-full\include\ege\label.h	/^    const char* font() const {$/;"	f	class:label
font	C++\ege-13.04.02-full\include\ege\label.h	/^    void font(const char* fontface) {$/;"	f	class:label
fontsize	C++\ege-13.04.02-full\include\ege\label.h	/^    int fontsize() const {$/;"	f	class:label
fontsize	C++\ege-13.04.02-full\include\ege\label.h	/^    void fontsize(int height) {$/;"	f	class:label
label	C++\ege-13.04.02-full\include\ege\label.h	/^    label(CTL_DEFPARAM) : CTL_INITBASE(egeControlBase) {$/;"	f	class:label
label	C++\ege-13.04.02-full\include\ege\label.h	/^class label : public egeControlBase$/;"	c
m_alpha	C++\ege-13.04.02-full\include\ege\label.h	/^    int m_alpha;$/;"	m	class:label
m_bkcolor	C++\ege-13.04.02-full\include\ege\label.h	/^    color_t m_bkcolor;$/;"	m	class:label
m_caption	C++\ege-13.04.02-full\include\ege\label.h	/^    char m_caption[1024];$/;"	m	class:label
m_color	C++\ege-13.04.02-full\include\ege\label.h	/^    color_t m_color;$/;"	m	class:label
m_face	C++\ege-13.04.02-full\include\ege\label.h	/^    char m_face[32];$/;"	m	class:label
m_fontheight	C++\ege-13.04.02-full\include\ege\label.h	/^    int m_fontheight;$/;"	m	class:label
m_transparent	C++\ege-13.04.02-full\include\ege\label.h	/^    bool m_transparent;$/;"	m	class:label
redraw	C++\ege-13.04.02-full\include\ege\label.h	/^    void redraw() {$/;"	f	class:label
transparent	C++\ege-13.04.02-full\include\ege\label.h	/^    bool transparent() const {$/;"	f	class:label
transparent	C++\ege-13.04.02-full\include\ege\label.h	/^    void transparent(bool t) {$/;"	f	class:label
CTL_PREINIT	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    CTL_PREINIT(sys_edit, egeControlBase) {$/;"	f	class:ege::sys_edit
CTL_PREINITEND	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    } CTL_PREINITEND;$/;"	m	class:ege::sys_edit
_EGE_SYS_EDIT_H_	C++\ege-13.04.02-full\include\ege\sys_edit.h	2;"	d
create	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    int create(bool multiline = false, int scrollbar = 2) {$/;"	f	class:ege::sys_edit
destory	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    int destory() {$/;"	f	class:ege::sys_edit
ege	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^namespace ege {$/;"	n
gettext	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    void gettext(int maxlen, LPSTR text) {$/;"	f	class:ege::sys_edit
gettext	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    void gettext(int maxlen, LPWSTR text) {$/;"	f	class:ege::sys_edit
m_bgcolor	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    color_t     m_bgcolor;$/;"	m	class:ege::sys_edit
m_callback	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    LONG_PTR    m_callback;$/;"	m	class:ege::sys_edit
m_color	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    color_t     m_color;$/;"	m	class:ege::sys_edit
m_hBrush	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    HBRUSH      m_hBrush;$/;"	m	class:ege::sys_edit
m_hFont	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    HFONT       m_hFont;$/;"	m	class:ege::sys_edit
m_hwnd	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    HWND        m_hwnd;$/;"	m	class:ege::sys_edit
move	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    void move(int x, int y) {$/;"	f	class:ege::sys_edit
onMessage	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    LRESULT onMessage(UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	class:ege::sys_edit
setbgcolor	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    void setbgcolor(color_t bgcolor) {$/;"	f	class:ege::sys_edit
setcolor	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    void setcolor(color_t color) {$/;"	f	class:ege::sys_edit
setfocus	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    void setfocus() {$/;"	f	class:ege::sys_edit
setfont	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    void setfont(int h, int w, LPCSTR fontface) {$/;"	f	class:ege::sys_edit
setfont	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    void setfont(int h, int w, LPCWSTR fontface) {$/;"	f	class:ege::sys_edit
setmaxlen	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    void setmaxlen(int maxlen) {$/;"	f	class:ege::sys_edit
setreadonly	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    void setreadonly(bool readonly) {$/;"	f	class:ege::sys_edit
settext	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    void settext(LPCSTR text) {$/;"	f	class:ege::sys_edit
settext	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    void settext(LPCWSTR text) {$/;"	f	class:ege::sys_edit
size	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    void size(int w, int h) {$/;"	f	class:ege::sys_edit
sys_edit	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    sys_edit(CTL_DEFPARAM) : CTL_INITBASE(egeControlBase) {$/;"	f	class:ege::sys_edit
sys_edit	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^class sys_edit : public egeControlBase$/;"	c	namespace:ege
visable	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    void visable(bool bvisable) {$/;"	f	class:ege::sys_edit
~sys_edit	C++\ege-13.04.02-full\include\ege\sys_edit.h	/^    ~sys_edit() {$/;"	f	class:ege::sys_edit
_GRAPHICS_H_	C++\ege-13.04.02-full\include\graphics.h	37;"	d
g_filename	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\MazeLock.cpp	/^char g_filename[MAX_PATH];$/;"	v
g_time	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\MazeLock.cpp	/^clock_t g_time;$/;"	v
main	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\MazeLock.cpp	/^int main()$/;"	f
mazeLock	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\MazeLock.cpp	/^bool mazeLock()$/;"	f
Stack	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^Stack::Stack()$/;"	f	class:Stack
fuckit	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^bool Map::fuckit(Stack& stk)$/;"	f	class:Map
g_cblocks	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^const char g_cblocks[][4] = { "��", "��", "��", "��", "��", "��", "��",$/;"	v
g_mask	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^const char g_mask[][10] = {  \/\/�Ҫ�ǰ�����ĳɶ�����16λ��short�����߿��������,��֪����᲻�ᵰ��$/;"	v
g_wblocks	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^const wchar_t g_wblocks[] = { L'��', L'��', L'��', L'��', L'��', L'��', L'��',$/;"	v
genMask	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^void Map::genMask()$/;"	f	class:Map
getFileNameDlg	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^bool getFileNameDlg(HWND hwnd, LPSTR pfilename)$/;"	f
initMap	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^bool Map::initMap(const char* filename)$/;"	f	class:Map
pop	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^int Stack::pop(Elem &elem)$/;"	f	class:Stack
printMap	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^void Map::printMap()$/;"	f	class:Map
push	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^void Stack::push(const Elem &elem)$/;"	f	class:Stack
reflect	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^char reflect(const char* block)$/;"	f
reflect	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^char reflect(wchar_t block)  \/\/�⺯�����ǵ���$/;"	f
showMask	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^void Map::showMask()$/;"	f	class:Map
showResult	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^bool Map::showResult()     \/\/������ҳɹ����map����ʹ�ñ�����!$/;"	f	class:Map
~Stack	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.cpp	/^Stack::~Stack()$/;"	f	class:Stack
BLOCK_NUM	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	16;"	d
BUFFER_SIZE	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	15;"	d
Elem	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^typedef struct Elem$/;"	s
Elem	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^}Elem;$/;"	t	typeref:struct:Elem
MAX_CAPACITY	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	14;"	d
Map	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^	Map() : m_width(0), m_height(0) {}$/;"	f	class:Map
Map	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^class Map$/;"	c
SCR_HEIGHT	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	13;"	d
SCR_WIDTH	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	12;"	d
Stack	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^typedef class Stack   \/\/Ϊ����ʹ�ã��Լ�ʵ����һ���򵥵�ջ�ṹ$/;"	c
Stack	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^}Stack;$/;"	t	typeref:class:Stack
UNICODE	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	4;"	d
_WYSAID_H_	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	2;"	d
capacity	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^	int size, capacity;$/;"	m	class:Stack
getMask	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^	int *getMask() { return m_mapMask; }$/;"	f	class:Map
getMaskHeight	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^	int getMaskHeight() { return 3 * m_height; }$/;"	f	class:Map
getMaskWitdh	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^	int getMaskWitdh() { return 3 * m_width; }$/;"	f	class:Map
initStartPoint	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^	void initStartPoint(int n) { m_mapMask[n] = -1;	}$/;"	f	class:Map
m_height	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^	int m_width, m_height;$/;"	m	class:Map
m_map	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^	char m_map[10*BUFFER_SIZE];$/;"	m	class:Map
m_mapMask	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^	int m_mapMask[100*BUFFER_SIZE];$/;"	m	class:Map
m_width	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^	int m_width, m_height;$/;"	m	class:Map
point	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^	Elem *point;$/;"	m	class:Stack
size	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^	int size, capacity;$/;"	m	class:Stack
x	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^	int x, y;$/;"	m	struct:Elem
y	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\wysaid.h	/^	int x, y;$/;"	m	struct:Elem
AniObj	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^    AniObj()$/;"	f	class:AniObj
AniObj	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^class AniObj$/;"	c	file:
Init	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^    void Init()$/;"	f	class:AniObj
MAXOBJ	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	77;"	d	file:
Point	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^} Point;$/;"	t	typeref:struct:__anon11	file:
cnt	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^    int cnt;$/;"	m	class:AniObj	file:
color	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^    int color;$/;"	m	class:AniObj	file:
color	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^    int color;$/;"	m	struct:__anon11	file:
drawobj	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^    void drawobj()$/;"	f	class:AniObj
main	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^int main()$/;"	f
myrand	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	5;"	d	file:
n	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^    int n;$/;"	m	class:AniObj	file:
p	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^    Point p[100];$/;"	m	class:AniObj	file:
start	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^    int start;$/;"	m	class:AniObj	file:
updateobj	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^    void updateobj()$/;"	f	class:AniObj
vx	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^    float vx, vy;$/;"	m	struct:__anon11	file:
vy	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^    float vx, vy;$/;"	m	struct:__anon11	file:
x	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^    float x, y;$/;"	m	struct:__anon11	file:
y	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^    float x, y;$/;"	m	struct:__anon11	file:
~AniObj	C++\ege-13.04.02-full\man\netfriendsdemo\MazeLock\δ����1.cpp	/^    ~AniObj()$/;"	f	class:AniObj
MaxNum	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	7;"	d	file:
Mid_X	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	9;"	d	file:
Mid_Y	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	10;"	d	file:
PI	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	8;"	d	file:
angle	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^    int angle, speed, num; \/\/ 3个变量分别为初始角度、离心速度、当前已经发射的数目$/;"	m	class:object	file:
draw	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^void object::draw ()$/;"	f	class:object
img	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^    PIMAGE img;$/;"	m	class:object	file:
initial	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^void object::initial (int x0, int y0)$/;"	f	class:object
main	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^int main ()$/;"	f
num	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^    int angle, speed, num; \/\/ 3个变量分别为初始角度、离心速度、当前已经发射的数目$/;"	m	class:object	file:
object	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^class object$/;"	c	file:
object	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^object::object(int initAngle) : angle(initAngle), speed(5), num(0)$/;"	f	class:object
p	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^    point p[MaxNum];$/;"	m	class:object	file:
point	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^struct point$/;"	s	file:
speed	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^    int angle, speed, num; \/\/ 3个变量分别为初始角度、离心速度、当前已经发射的数目$/;"	m	class:object	file:
update	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^void object::update ()$/;"	f	class:object
vx	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^    double vx, vy;$/;"	m	struct:point	file:
vy	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^    double vx, vy;$/;"	m	struct:point	file:
x	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^    double x, y;$/;"	m	struct:point	file:
y	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^    double x, y;$/;"	m	struct:point	file:
~object	C++\ege-13.04.02-full\man\netfriendsdemo\doufuguolyl_barrage.cpp	/^    ~object () {closegraph ();}$/;"	f	class:object
main	C++\ege-13.04.02-full\man\netfriendsdemo\fractal_leaf.cpp	/^int main() {$/;"	f
Ball	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	/^    Ball() {$/;"	f	struct:Ball
Ball	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	/^struct Ball {$/;"	s	file:
SCR_HEIGHT	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	4;"	d	file:
SCR_WIDTH	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	3;"	d	file:
ball	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	/^} ball[500];$/;"	v	typeref:struct:Ball
color	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	/^    color_t color;$/;"	m	struct:Ball	file:
dir	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	/^    static float dir;$/;"	m	struct:Ball	file:
dir	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	/^float Ball::dir = 0.0f;$/;"	m	class:Ball	file:
dx	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	/^    float dx, dy;$/;"	m	struct:Ball	file:
dy	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	/^    float dx, dy;$/;"	m	struct:Ball	file:
main	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	/^int main() {$/;"	f
radius	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	/^    float radius;$/;"	m	struct:Ball	file:
sp	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	/^    static float sp;$/;"	m	struct:Ball	file:
sp	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	/^float Ball::sp = 0.5f;$/;"	m	class:Ball	file:
x	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	/^    float x, y;$/;"	m	struct:Ball	file:
y	C++\ege-13.04.02-full\man\netfriendsdemo\littleballs.cpp	/^    float x, y;$/;"	m	struct:Ball	file:
BALL_AMOUNT	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	8;"	d	file:
Ball	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	Ball() : m_x(SCREEN_WIDTH \/ 2), m_y(SCREEN_HEIGHT \/ 2)$/;"	f	class:Ball
Ball	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^class Ball$/;"	c	file:
FLOATCOMP0	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	16;"	d	file:
Line	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	Line() {}$/;"	f	class:Line
Line	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	Line(int x1, int y1, int x2, int y2)$/;"	f	class:Line
Line	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^class Line$/;"	c	file:
PI	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	11;"	d	file:
PI	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	14;"	d	file:
PI2	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	15;"	d	file:
SCREEN_HEIGHT	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	7;"	d	file:
SCREEN_WIDTH	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	6;"	d	file:
Scene	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	Scene() : m_activeBallNum(0), m_bUpdate(true), m_bBlurring(true) {}$/;"	f	class:Scene
Scene	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^class Scene$/;"	c	file:
addLine	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	void addLine()$/;"	f	class:Scene
collisionDetect	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	void collisionDetect(Ball& ball)$/;"	f	class:Line
getAngleByNormal	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^float getAngleByNormal(float x, float y)$/;"	f
getLineEquation	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	void getLineEquation()  \/\/ax + by + c = 0$/;"	f	class:Line
getPos	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	void getPos(float& x, float& y)$/;"	f	class:Ball
getRadius	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	float getRadius() { return m_radius; }$/;"	f	class:Ball
getSpeed	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	float getSpeed() { return m_speed; }$/;"	f	class:Ball
init	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	void init() { m_ball[0].setSpeed(m_ball[BALL_AMOUNT - 1].getSpeed()); }$/;"	f	class:Scene
m_a	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	float m_a, m_b, m_c, m_d, m_d2;$/;"	m	class:Line	file:
m_activeBallNum	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	int m_activeBallNum;$/;"	m	class:Scene	file:
m_b	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	float m_a, m_b, m_c, m_d, m_d2;$/;"	m	class:Line	file:
m_bBlurring	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	bool m_bBlurring, m_bUpdate;$/;"	m	class:Scene	file:
m_bUpdate	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	bool m_bBlurring, m_bUpdate;$/;"	m	class:Scene	file:
m_ball	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	Ball m_ball[BALL_AMOUNT];$/;"	m	class:Scene	file:
m_c	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	float m_a, m_b, m_c, m_d, m_d2;$/;"	m	class:Line	file:
m_color	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	COLORREF m_color;$/;"	m	class:Ball	file:
m_d	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	float m_a, m_b, m_c, m_d, m_d2;$/;"	m	class:Line	file:
m_d2	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	float m_a, m_b, m_c, m_d, m_d2;$/;"	m	class:Line	file:
m_dx	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	float m_dx, m_dy;$/;"	m	class:Ball	file:
m_dy	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	float m_dx, m_dy;$/;"	m	class:Ball	file:
m_maxx	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	int m_maxx, m_maxy, m_minx, m_miny;$/;"	m	class:Line	file:
m_maxy	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	int m_maxx, m_maxy, m_minx, m_miny;$/;"	m	class:Line	file:
m_minx	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	int m_maxx, m_maxy, m_minx, m_miny;$/;"	m	class:Line	file:
m_miny	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	int m_maxx, m_maxy, m_minx, m_miny;$/;"	m	class:Line	file:
m_radius	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	float m_radius;$/;"	m	class:Ball	file:
m_speed	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	float m_speed;$/;"	m	class:Ball	file:
m_vec	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	vector<Line> m_vec;$/;"	m	class:Scene	file:
m_x	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	float m_x, m_y;$/;"	m	class:Ball	file:
m_x1	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	int m_x1, m_y1;$/;"	m	class:Line	file:
m_x2	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	int m_x2, m_y2;$/;"	m	class:Line	file:
m_y	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	float m_x, m_y;$/;"	m	class:Ball	file:
m_y1	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	int m_x1, m_y1;$/;"	m	class:Line	file:
m_y2	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	int m_x2, m_y2;$/;"	m	class:Line	file:
main	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^int main()$/;"	f
render	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	void render() { line(m_x1, m_y1, m_x2, m_y2); }$/;"	f	class:Line
render	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	void render()$/;"	f	class:Ball
s_direction	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	static float s_direction;$/;"	m	class:Ball	file:
s_direction	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^float Ball::s_direction;$/;"	m	class:Ball	file:
s_speed	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	static float s_speed;$/;"	m	class:Ball	file:
s_speed	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^float Ball::s_speed = 0.5f;$/;"	m	class:Ball	file:
setSpeed	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	void setSpeed(float speed) { m_speed = speed; }$/;"	f	class:Ball
show	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	void show()$/;"	f	class:Scene
turn	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	void turn(float x, float y)$/;"	f	class:Ball
update	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	void update()$/;"	f	class:Ball
update	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	void update()$/;"	f	class:Scene
~Ball	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	~Ball() {}$/;"	f	class:Ball
~Line	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	~Line() {}$/;"	f	class:Line
~Scene	C++\ege-13.04.02-full\man\netfriendsdemo\wysaid_collisiondetect.cpp	/^	~Scene() {}$/;"	f	class:Scene
main	C++\ege-13.04.02-full\man\tutorial\t01.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t02.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t03.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t04.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t05.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t06.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t07.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t08.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t09.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t10.cpp	/^int main()$/;"	f
AniObj	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^    AniObj() {$/;"	f	class:AniObj
AniObj	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^class AniObj {$/;"	c	file:
Crash	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^    void Crash( Obj &a, Obj &b ) {$/;"	f	class:AniObj	file:
Distance	C++\ege-13.04.02-full\man\tutorial\t11.cpp	17;"	d	file:
IsCrash	C++\ege-13.04.02-full\man\tutorial\t11.cpp	13;"	d	file:
IsEdge	C++\ege-13.04.02-full\man\tutorial\t11.cpp	16;"	d	file:
IsHEdge	C++\ege-13.04.02-full\man\tutorial\t11.cpp	15;"	d	file:
IsWEdge	C++\ege-13.04.02-full\man\tutorial\t11.cpp	14;"	d	file:
Obj	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^} Obj;$/;"	t	typeref:struct:__anon12	file:
SC_H	C++\ege-13.04.02-full\man\tutorial\t11.cpp	10;"	d	file:
SC_W	C++\ege-13.04.02-full\man\tutorial\t11.cpp	9;"	d	file:
color	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^    int color;$/;"	m	struct:__anon12	file:
draw	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^void draw( color_t* d_pt, color_t* s_pt, int w, int h ) {$/;"	f
draw_colorscan	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^void draw_colorscan( color_t* d_pt, color_t* s_pt, int w, int h ) {$/;"	f
draw_colorscan2	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^void draw_colorscan2( color_t* d_pt, color_t* s_pt, int w, int h ) {$/;"	f
draw_colorscan3	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^void draw_colorscan3( color_t* d_pt, color_t* s_pt, int w, int h ) {$/;"	f
draw_scanline50	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^void draw_scanline50( color_t* d_pt, color_t* s_pt, int w, int h ) {$/;"	f
draw_smooth	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^void draw_smooth( color_t* d_pt, color_t* s_pt, int w, int h ) {$/;"	f
drawobj	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^    void drawobj() {$/;"	f	class:AniObj
main	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^int main() {$/;"	f
myrand	C++\ege-13.04.02-full\man\tutorial\t11.cpp	12;"	d	file:
n	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^    int n;$/;"	m	class:AniObj	file:
obj	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^    Obj obj[20];$/;"	m	class:AniObj	file:
r	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^    int r;$/;"	m	struct:__anon12	file:
updateobj	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^    void updateobj() {$/;"	f	class:AniObj
vx	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^    float vx, vy;$/;"	m	struct:__anon12	file:
vy	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^    float vx, vy;$/;"	m	struct:__anon12	file:
x	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^    float x, y;$/;"	m	struct:__anon12	file:
y	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^    float x, y;$/;"	m	struct:__anon12	file:
~AniObj	C++\ege-13.04.02-full\man\tutorial\t11.cpp	/^    ~AniObj() {$/;"	f	class:AniObj
main	C++\ege-13.04.02-full\man\tutorial\t12.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t13.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t14.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t15.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t16.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t17.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t18.cpp	/^int main()$/;"	f
alphacol	C++\ege-13.04.02-full\man\tutorial\t19.cpp	/^color_t alphacol(color_t d, color_t s, color_t alpha)$/;"	f
alphasingle	C++\ege-13.04.02-full\man\tutorial\t19.cpp	/^color_t alphasingle(color_t a, color_t b, color_t alpha)$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t19.cpp	/^int main()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t21.cpp	/^int main(void)$/;"	f
mainloop	C++\ege-13.04.02-full\man\tutorial\t21.cpp	/^void mainloop()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t22.cpp	/^int main(void)$/;"	f
mainloop	C++\ege-13.04.02-full\man\tutorial\t22.cpp	/^void mainloop()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t23.cpp	/^int main(void)$/;"	f
mainloop	C++\ege-13.04.02-full\man\tutorial\t23.cpp	/^void mainloop()$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t24.cpp	/^int main(void)$/;"	f
mainloop	C++\ege-13.04.02-full\man\tutorial\t24.cpp	/^void mainloop()$/;"	f
AniObj	C++\ege-13.04.02-full\man\tutorial\t25.cpp	/^struct AniObj$/;"	s	file:
alpha	C++\ege-13.04.02-full\man\tutorial\t25.cpp	/^	int alpha, da;$/;"	m	struct:AniObj	file:
da	C++\ege-13.04.02-full\man\tutorial\t25.cpp	/^	int alpha, da;$/;"	m	struct:AniObj	file:
drawobj	C++\ege-13.04.02-full\man\tutorial\t25.cpp	/^void drawobj(AniObj* obj)$/;"	f
dx	C++\ege-13.04.02-full\man\tutorial\t25.cpp	/^	int dx, dy;$/;"	m	struct:AniObj	file:
dy	C++\ege-13.04.02-full\man\tutorial\t25.cpp	/^	int dx, dy;$/;"	m	struct:AniObj	file:
img	C++\ege-13.04.02-full\man\tutorial\t25.cpp	/^	PIMAGE img;$/;"	m	struct:AniObj	file:
initobj	C++\ege-13.04.02-full\man\tutorial\t25.cpp	/^void initobj(AniObj* obj)$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t25.cpp	/^int main(void)$/;"	f
mainloop	C++\ege-13.04.02-full\man\tutorial\t25.cpp	/^void mainloop()$/;"	f
r	C++\ege-13.04.02-full\man\tutorial\t25.cpp	/^	int x, y, r;$/;"	m	struct:AniObj	file:
releaseobj	C++\ege-13.04.02-full\man\tutorial\t25.cpp	/^void releaseobj(AniObj* obj)$/;"	f
updateobj	C++\ege-13.04.02-full\man\tutorial\t25.cpp	/^void updateobj(AniObj* obj)$/;"	f
x	C++\ege-13.04.02-full\man\tutorial\t25.cpp	/^	int x, y, r;$/;"	m	struct:AniObj	file:
y	C++\ege-13.04.02-full\man\tutorial\t25.cpp	/^	int x, y, r;$/;"	m	struct:AniObj	file:
AniObj	C++\ege-13.04.02-full\man\tutorial\t26.cpp	/^struct AniObj$/;"	s	file:
alpha	C++\ege-13.04.02-full\man\tutorial\t26.cpp	/^	int alpha, da;$/;"	m	struct:AniObj	file:
da	C++\ege-13.04.02-full\man\tutorial\t26.cpp	/^	int alpha, da;$/;"	m	struct:AniObj	file:
drawobj	C++\ege-13.04.02-full\man\tutorial\t26.cpp	/^void drawobj(AniObj* obj)$/;"	f
dx	C++\ege-13.04.02-full\man\tutorial\t26.cpp	/^	int dx, dy;$/;"	m	struct:AniObj	file:
dy	C++\ege-13.04.02-full\man\tutorial\t26.cpp	/^	int dx, dy;$/;"	m	struct:AniObj	file:
img	C++\ege-13.04.02-full\man\tutorial\t26.cpp	/^	PIMAGE img;$/;"	m	struct:AniObj	file:
initobj	C++\ege-13.04.02-full\man\tutorial\t26.cpp	/^void initobj(AniObj* obj)$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t26.cpp	/^int main(void)$/;"	f
mainloop	C++\ege-13.04.02-full\man\tutorial\t26.cpp	/^void mainloop()$/;"	f
r	C++\ege-13.04.02-full\man\tutorial\t26.cpp	/^	int r;$/;"	m	struct:AniObj	file:
releaseobj	C++\ege-13.04.02-full\man\tutorial\t26.cpp	/^void releaseobj(AniObj* obj)$/;"	f
updateobj	C++\ege-13.04.02-full\man\tutorial\t26.cpp	/^void updateobj(AniObj* obj)$/;"	f
x	C++\ege-13.04.02-full\man\tutorial\t26.cpp	/^	int x, y;$/;"	m	struct:AniObj	file:
y	C++\ege-13.04.02-full\man\tutorial\t26.cpp	/^	int x, y;$/;"	m	struct:AniObj	file:
AniObj	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^struct AniObj$/;"	s	file:
alpha	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^	int alpha, da;$/;"	m	struct:AniObj	file:
base_speed	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^const float base_speed = 0.5f;$/;"	v
da	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^	int alpha, da;$/;"	m	struct:AniObj	file:
drawobj	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^void drawobj(AniObj* obj)$/;"	f
dx	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^	float dx, dy;$/;"	m	struct:AniObj	file:
dy	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^	float dx, dy;$/;"	m	struct:AniObj	file:
img	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^	PIMAGE img;$/;"	m	struct:AniObj	file:
initobj	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^void initobj(AniObj* obj)$/;"	f
main	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^int main(void)$/;"	f
mainloop	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^void mainloop()$/;"	f
myrand	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^float myrand(float m)$/;"	f
r	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^	int r;$/;"	m	struct:AniObj	file:
randspeed	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^const float randspeed = 1.5f;$/;"	v
releaseobj	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^void releaseobj(AniObj* obj)$/;"	f
updateobj	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^void updateobj(AniObj* obj)$/;"	f
x	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^	float x, y;$/;"	m	struct:AniObj	file:
y	C++\ege-13.04.02-full\man\tutorial\t27.cpp	/^	float x, y;$/;"	m	struct:AniObj	file:
AniObj	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^	AniObj()$/;"	f	class:AniObj
AniObj	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^class AniObj$/;"	c	file:
_alpha	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^	int _alpha, _da;$/;"	m	class:AniObj	file:
_da	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^	int _alpha, _da;$/;"	m	class:AniObj	file:
_dx	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^	float _dx, _dy;$/;"	m	class:AniObj	file:
_dy	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^	float _dx, _dy;$/;"	m	class:AniObj	file:
_img	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^	ege::PIMAGE _img;$/;"	m	class:AniObj	file:
_r	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^	int _r;$/;"	m	class:AniObj	file:
_x	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^	float _x, _y;$/;"	m	class:AniObj	file:
_y	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^	float _x, _y;$/;"	m	class:AniObj	file:
base_speed	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^const float base_speed = 0.5f;$/;"	v
main	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^int main(void)$/;"	f
mainloop	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^void mainloop()$/;"	f
myrand	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^float myrand(float m)$/;"	f
randspeed	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^const float randspeed = 1.5f;$/;"	v
render	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^	void render()$/;"	f	class:AniObj
update	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^	void update()$/;"	f	class:AniObj
~AniObj	C++\ege-13.04.02-full\man\tutorial\t28.cpp	/^	~AniObj()$/;"	f	class:AniObj
AniObj	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	AniObj()$/;"	f	class:AniObj
AniObj	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^class AniObj$/;"	c	file:
Scene	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	Scene(int nAniObj)$/;"	f	class:Scene
Scene	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^class Scene$/;"	c	file:
_alpha	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	int _alpha, _da;$/;"	m	class:AniObj	file:
_da	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	int _alpha, _da;$/;"	m	class:AniObj	file:
_dx	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	float _dx, _dy;$/;"	m	class:AniObj	file:
_dy	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	float _dx, _dy;$/;"	m	class:AniObj	file:
_img	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	ege::PIMAGE _img;$/;"	m	class:AniObj	file:
_r	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	int _r;$/;"	m	class:AniObj	file:
_x	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	float _x, _y;$/;"	m	class:AniObj	file:
_y	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	float _x, _y;$/;"	m	class:AniObj	file:
base_speed	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^const float base_speed = 0.5f;$/;"	v
m_cntObj	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	int m_cntObj;$/;"	m	class:Scene	file:
m_endscene	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	int m_endscene;$/;"	m	class:Scene	file:
m_pause	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	int m_pause;$/;"	m	class:Scene	file:
m_pobj	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	AniObj* m_pobj;$/;"	m	class:Scene	file:
main	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^int main(void)$/;"	f
mainloop	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^void mainloop()$/;"	f
myrand	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^float myrand(float m)$/;"	f
onkey	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	void onkey(int key)$/;"	f	class:AniObj
onkey	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	void onkey(int key)$/;"	f	class:Scene
randspeed	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^const float randspeed = 1.5f;$/;"	v
render	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	void render()$/;"	f	class:AniObj
render	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	void render()$/;"	f	class:Scene
update	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	int update()$/;"	f	class:AniObj
update	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	int update()$/;"	f	class:Scene
~AniObj	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	~AniObj()$/;"	f	class:AniObj
~Scene	C++\ege-13.04.02-full\man\tutorial\t29.cpp	/^	~Scene()$/;"	f	class:Scene
AniObj	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	AniObj()$/;"	f	class:AniObj
AniObj	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^class AniObj$/;"	c	file:
Scene	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	Scene(int nAniObj)$/;"	f	class:Scene
Scene	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^class Scene$/;"	c	file:
_alpha	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	int _alpha, _da;$/;"	m	class:AniObj	file:
_da	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	int _alpha, _da;$/;"	m	class:AniObj	file:
_dx	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	float _dx, _dy;$/;"	m	class:AniObj	file:
_dy	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	float _dx, _dy;$/;"	m	class:AniObj	file:
_img	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	ege::PIMAGE _img;$/;"	m	class:AniObj	file:
_mouse_x	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	int _mouse_x, _mouse_y;$/;"	m	class:AniObj	file:
_mouse_y	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	int _mouse_x, _mouse_y;$/;"	m	class:AniObj	file:
_r	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	int _r;$/;"	m	class:AniObj	file:
_x	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	float _x, _y;$/;"	m	class:AniObj	file:
_y	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	float _x, _y;$/;"	m	class:AniObj	file:
base_speed	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^const float base_speed = 0.5f;$/;"	v
m_cntObj	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	int m_cntObj;$/;"	m	class:Scene	file:
m_endscene	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	int m_endscene;$/;"	m	class:Scene	file:
m_pause	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	int m_pause;$/;"	m	class:Scene	file:
m_pobj	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	AniObj* m_pobj;$/;"	m	class:Scene	file:
main	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^int main(void)$/;"	f
mainloop	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^void mainloop()$/;"	f
myrand	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^float myrand(float m)$/;"	f
onkey	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	void onkey(int key)$/;"	f	class:AniObj
onkey	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	void onkey(int key)$/;"	f	class:Scene
onmouse	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	void onmouse(int x, int y)$/;"	f	class:AniObj
onmouse	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	void onmouse(int x, int y)$/;"	f	class:Scene
randspeed	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^const float randspeed = 4.0f;$/;"	v
render	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	void render()$/;"	f	class:AniObj
render	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	void render()$/;"	f	class:Scene
sgn	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^float sgn(float f)$/;"	f
update	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	int update()$/;"	f	class:AniObj
update	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	int update()$/;"	f	class:Scene
~AniObj	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	~AniObj()$/;"	f	class:AniObj
~Scene	C++\ege-13.04.02-full\man\tutorial\t30.cpp	/^	~Scene()$/;"	f	class:Scene
dx	C++\ege-13.04.02-full\man\tutorial\t50.cpp	/^	double dx, dy;$/;"	m	class:graph	file:
dy	C++\ege-13.04.02-full\man\tutorial\t50.cpp	/^	double dx, dy;$/;"	m	class:graph	file:
graph	C++\ege-13.04.02-full\man\tutorial\t50.cpp	/^	graph() {$/;"	f	class:graph
graph	C++\ege-13.04.02-full\man\tutorial\t50.cpp	/^class graph : public ege::egeControlBase$/;"	c	file:
main	C++\ege-13.04.02-full\man\tutorial\t50.cpp	/^int main()$/;"	f
onDraw	C++\ege-13.04.02-full\man\tutorial\t50.cpp	/^	void onDraw(ege::PIMAGE pimg) const {$/;"	f	class:graph
onUpdate	C++\ege-13.04.02-full\man\tutorial\t50.cpp	/^	int onUpdate() {$/;"	f	class:graph
x	C++\ege-13.04.02-full\man\tutorial\t50.cpp	/^	double x, y;$/;"	m	class:graph	file:
y	C++\ege-13.04.02-full\man\tutorial\t50.cpp	/^	double x, y;$/;"	m	class:graph	file:
CTL_PREINIT	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	CTL_PREINIT(Window, ege::egeControlBase) {$/;"	f	class:Window
CTL_PREINIT	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	CTL_PREINIT(Window2, Window) {$/;"	f	class:Window2
CTL_PREINIT	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	CTL_PREINIT(graph, ege::egeControlBase) {$/;"	f	class:graph
CTL_PREINITEND	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	} CTL_PREINITEND;$/;"	m	class:Window	file:
CTL_PREINITEND	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	} CTL_PREINITEND;$/;"	m	class:Window2	file:
CTL_PREINITEND	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	} CTL_PREINITEND;$/;"	m	class:graph	file:
Window	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	Window(CTL_DEFPARAM) : CTL_INITBASE(ege::egeControlBase) {$/;"	f	class:Window
Window	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^class Window : public ege::egeControlBase$/;"	c	file:
Window2	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	Window2(CTL_DEFPARAM) : CTL_INITBASE(Window) {$/;"	f	class:Window2
Window2	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^class Window2 : public Window$/;"	c	file:
dx	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	double dx, dy;$/;"	m	class:graph	file:
dy	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	double dx, dy;$/;"	m	class:graph	file:
graph	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	graph(CTL_DEFPARAM) : CTL_INITBASE(ege::egeControlBase) {$/;"	f	class:graph
graph	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^class graph : public ege::egeControlBase$/;"	c	file:
m_capmouse	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	int m_capmouse;$/;"	m	class:Window	file:
m_capx	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	int m_capx, m_capy;$/;"	m	class:Window	file:
m_capy	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	int m_capx, m_capy;$/;"	m	class:Window	file:
m_col	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	ege::color_t m_col;$/;"	m	class:Window	file:
m_graph	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	graph m_graph[4];$/;"	m	class:Window	file:
main	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^int main()$/;"	f
onDraw	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	void onDraw(ege::PIMAGE pimg) const {$/;"	f	class:Window
onDraw	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	void onDraw(ege::PIMAGE pimg) const {$/;"	f	class:graph
onMouse	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	int onMouse(int x, int y, int flag) {$/;"	f	class:Window
onUpdate	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	int onUpdate() {$/;"	f	class:graph
x	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	double x, y;$/;"	m	class:graph	file:
y	C++\ege-13.04.02-full\man\tutorial\t51.cpp	/^	double x, y;$/;"	m	class:graph	file:
CHOOSE_INPUT	C++\ege-13.04.02-full\publish.bat	/^:CHOOSE_INPUT $/;"	l
INPUT_VER	C++\ege-13.04.02-full\publish.bat	/^:INPUT_VER$/;"	l
START_PACK	C++\ege-13.04.02-full\publish.bat	/^:START_PACK$/;"	l
compressor	C++\ege-13.04.02-full\publish.bat	/^REM set compressor=7z.exe a -t7z -mx=9 -ms=on$/;"	v
compressor	C++\ege-13.04.02-full\publish.bat	/^set compressor=7z.exe a -mx=9$/;"	v
egever	C++\ege-13.04.02-full\publish.bat	/^  set egever=%%a$/;"	v
egever	C++\ege-13.04.02-full\publish.bat	/^set egever=13.04.02$/;"	v
end	C++\ege-13.04.02-full\publish.bat	/^:end$/;"	l
filefull	C++\ege-13.04.02-full\publish.bat	/^set filefull=%filerelease% src$/;"	v
filerelease	C++\ege-13.04.02-full\publish.bat	/^set filerelease=AUTHORS ChangeLog CONTRIBUTORS COPYING README VERSION include lib man demo publish.bat 7z.exe 7z.dll$/;"	v
pkg7zfull	C++\ege-13.04.02-full\publish.bat	/^set pkg7zfull=ege-%egever%-full.7z$/;"	v
pkg7zrelease	C++\ege-13.04.02-full\publish.bat	/^set pkg7zrelease=ege-%egever%-release.7z$/;"	v
pkgzipfull	C++\ege-13.04.02-full\publish.bat	/^set pkgzipfull=ege-%egever%-full.zip$/;"	v
pkgziprelease	C++\ege-13.04.02-full\publish.bat	/^set pkgziprelease=ege-%egever%-release.zip$/;"	v
pubpath	C++\ege-13.04.02-full\publish.bat	/^set pubpath=publish\\%egever%$/;"	v
main	C++\ege-13.04.02-full\src\buildlogo.cpp	/^int main()$/;"	f
BLACKFORMAT	C++\ege-13.04.02-full\src\color.cpp	149;"	d	file:
BLACKFORMAT	C++\ege-13.04.02-full\src\color.cpp	164;"	d	file:
BLACKUNFORMAT	C++\ege-13.04.02-full\src\color.cpp	69;"	d	file:
BLACKUNFORMAT	C++\ege-13.04.02-full\src\color.cpp	86;"	d	file:
COLORHSL	C++\ege-13.04.02-full\src\color.cpp	/^typedef struct COLORHSL {$/;"	s	namespace:ege	file:
COLORHSL	C++\ege-13.04.02-full\src\color.cpp	/^}COLORHSL;$/;"	t	namespace:ege	typeref:struct:ege::COLORHSL	file:
COLORHSV	C++\ege-13.04.02-full\src\color.cpp	/^typedef struct COLORHSV {$/;"	s	namespace:ege	file:
COLORHSV	C++\ege-13.04.02-full\src\color.cpp	/^}COLORHSV;$/;"	t	namespace:ege	typeref:struct:ege::COLORHSV	file:
COLORRGB	C++\ege-13.04.02-full\src\color.cpp	/^typedef struct COLORRGB {$/;"	s	namespace:ege	file:
COLORRGB	C++\ege-13.04.02-full\src\color.cpp	/^}COLORRGB;$/;"	t	namespace:ege	typeref:struct:ege::COLORRGB	file:
HSV_TO_RGB	C++\ege-13.04.02-full\src\color.cpp	/^HSV_TO_RGB(COLORHSV* input,COLORRGB* output) {$/;"	f	namespace:ege
IFSWAP	C++\ege-13.04.02-full\src\color.cpp	43;"	d	file:
IFSWAP	C++\ege-13.04.02-full\src\color.cpp	49;"	d	file:
RGB_TO_HSV	C++\ege-13.04.02-full\src\color.cpp	/^RGB_TO_HSV(const COLORRGB* input,COLORHSV* output) {$/;"	f	namespace:ege
SATFORMAT	C++\ege-13.04.02-full\src\color.cpp	144;"	d	file:
SATFORMAT	C++\ege-13.04.02-full\src\color.cpp	148;"	d	file:
SATUNFORMAT	C++\ege-13.04.02-full\src\color.cpp	103;"	d	file:
SATUNFORMAT	C++\ege-13.04.02-full\src\color.cpp	95;"	d	file:
WHITEFORMAT	C++\ege-13.04.02-full\src\color.cpp	150;"	d	file:
WHITEFORMAT	C++\ege-13.04.02-full\src\color.cpp	165;"	d	file:
WHITEUNFORMAT	C++\ege-13.04.02-full\src\color.cpp	70;"	d	file:
WHITEUNFORMAT	C++\ege-13.04.02-full\src\color.cpp	87;"	d	file:
_HSLtoRGB	C++\ege-13.04.02-full\src\color.cpp	/^_HSLtoRGB(float _h, float _s, float _l) {$/;"	f	namespace:ege
_RGBtoHSL	C++\ege-13.04.02-full\src\color.cpp	/^_RGBtoHSL(int _col) {$/;"	f	namespace:ege
b	C++\ege-13.04.02-full\src\color.cpp	/^	unsigned char b;$/;"	m	struct:ege::COLORRGB	file:
ege	C++\ege-13.04.02-full\src\color.cpp	/^namespace ege {$/;"	n	file:
g	C++\ege-13.04.02-full\src\color.cpp	/^	unsigned char g;$/;"	m	struct:ege::COLORRGB	file:
h	C++\ege-13.04.02-full\src\color.cpp	/^	float h;$/;"	m	struct:ege::COLORHSL	file:
h	C++\ege-13.04.02-full\src\color.cpp	/^	float h;$/;"	m	struct:ege::COLORHSV	file:
hsl2rgb	C++\ege-13.04.02-full\src\color.cpp	/^hsl2rgb(float H, float S, float L) {$/;"	f	namespace:ege
hsv2rgb	C++\ege-13.04.02-full\src\color.cpp	/^hsv2rgb(float H, float S, float V) {$/;"	f	namespace:ege
l	C++\ege-13.04.02-full\src\color.cpp	/^	float l;$/;"	m	struct:ege::COLORHSL	file:
r	C++\ege-13.04.02-full\src\color.cpp	/^	unsigned char r;$/;"	m	struct:ege::COLORRGB	file:
rgb2gray	C++\ege-13.04.02-full\src\color.cpp	/^rgb2gray(color_t color) {$/;"	f	namespace:ege
rgb2hsl	C++\ege-13.04.02-full\src\color.cpp	/^rgb2hsl(color_t rgb, float *H, float *S, float *L) {$/;"	f	namespace:ege
rgb2hsv	C++\ege-13.04.02-full\src\color.cpp	/^rgb2hsv(color_t rgb, float *H, float *S, float *V) {$/;"	f	namespace:ege
s	C++\ege-13.04.02-full\src\color.cpp	/^	float s;$/;"	m	struct:ege::COLORHSL	file:
s	C++\ege-13.04.02-full\src\color.cpp	/^	float s;$/;"	m	struct:ege::COLORHSV	file:
v	C++\ege-13.04.02-full\src\color.cpp	/^	float v;$/;"	m	struct:ege::COLORHSV	file:
ALPHABLEND	C++\ege-13.04.02-full\src\ege.h	/^		ALPHABLEND = 1,$/;"	e	enum:ege::egeControlBase::blendmode_e
AND	C++\ege-13.04.02-full\src\ege.h	/^		AND     = SRCAND,$/;"	e	enum:ege::egeControlBase::ROP
ATT400	C++\ege-13.04.02-full\src\ege.h	/^	HERCMONO, ATT400, VGA, PC3270,          \/* 7 - 10 *\/$/;"	e	enum:ege::graphics_drivers
ATT400C0	C++\ege-13.04.02-full\src\ege.h	/^	ATT400C0    = 0,  \/* 320x200 palette 0; 1 page  *\/$/;"	e	enum:ege::graphics_modes
ATT400C1	C++\ege-13.04.02-full\src\ege.h	/^	ATT400C1    = 1,  \/* 320x200 palette 1; 1 page  *\/$/;"	e	enum:ege::graphics_modes
ATT400C2	C++\ege-13.04.02-full\src\ege.h	/^	ATT400C2    = 2,  \/* 320x200 palette 2; 1 page  *\/$/;"	e	enum:ege::graphics_modes
ATT400C3	C++\ege-13.04.02-full\src\ege.h	/^	ATT400C3    = 3,  \/* 320x200 palette 3; 1 page  *\/$/;"	e	enum:ege::graphics_modes
ATT400HI	C++\ege-13.04.02-full\src\ege.h	/^	ATT400HI    = 5,  \/* 640x400 1 page             *\/$/;"	e	enum:ege::graphics_modes
ATT400MED	C++\ege-13.04.02-full\src\ege.h	/^	ATT400MED   = 4,  \/* 640x200 1 page             *\/$/;"	e	enum:ege::graphics_modes
BKSLASH_FILL	C++\ege-13.04.02-full\src\ege.h	/^	BKSLASH_FILL,   \/* \\\\\\ fill with thick lines *\/$/;"	e	enum:ege::fill_patterns
BLACK	C++\ege-13.04.02-full\src\ege.h	/^	BLACK           = 0,$/;"	e	enum:ege::COLORS
BLUE	C++\ege-13.04.02-full\src\ege.h	/^	BLUE            = EGERGB(0, 0, 0xA8),$/;"	e	enum:ege::COLORS
BOTTOM_TEXT	C++\ege-13.04.02-full\src\ege.h	/^	BOTTOM_TEXT = 0,$/;"	e	enum:ege::text_just
BROWN	C++\ege-13.04.02-full\src\ege.h	/^	BROWN           = EGERGB(0xA8, 0xA8, 0),$/;"	e	enum:ege::COLORS
CALLBACK_PROC	C++\ege-13.04.02-full\src\ege.h	/^typedef void (CALLBACK_PROC)();$/;"	t	namespace:ege
CENTER_LINE	C++\ege-13.04.02-full\src\ege.h	/^	CENTER_LINE     = PS_DASH,$/;"	e	enum:ege::line_styles
CENTER_TEXT	C++\ege-13.04.02-full\src\ege.h	/^	CENTER_TEXT = 1,$/;"	e	enum:ege::text_just
CGA	C++\ege-13.04.02-full\src\ege.h	/^	CGA, MCGA, EGA, EGA64, EGAMONO, IBM8514,\/* 1 - 6 *\/$/;"	e	enum:ege::graphics_drivers
CGAC0	C++\ege-13.04.02-full\src\ege.h	/^	CGAC0       = 0,  \/* 320x200 palette 0; 1 page  *\/$/;"	e	enum:ege::graphics_modes
CGAC1	C++\ege-13.04.02-full\src\ege.h	/^	CGAC1       = 1,  \/* 320x200 palette 1; 1 page  *\/$/;"	e	enum:ege::graphics_modes
CGAC2	C++\ege-13.04.02-full\src\ege.h	/^	CGAC2       = 2,  \/* 320x200 palette 2: 1 page  *\/$/;"	e	enum:ege::graphics_modes
CGAC3	C++\ege-13.04.02-full\src\ege.h	/^	CGAC3       = 3,  \/* 320x200 palette 3; 1 page  *\/$/;"	e	enum:ege::graphics_modes
CGAHI	C++\ege-13.04.02-full\src\ege.h	/^	CGAHI       = 4,  \/* 640x200 1 page             *\/$/;"	e	enum:ege::graphics_modes
CLOSE_DOT_FILL	C++\ege-13.04.02-full\src\ege.h	/^	CLOSE_DOT_FILL, \/* Closely spaced dot fill *\/$/;"	e	enum:ege::fill_patterns
COLORS	C++\ege-13.04.02-full\src\ege.h	/^enum COLORS {$/;"	g	namespace:ege
COPY	C++\ege-13.04.02-full\src\ege.h	/^		COPY    = SRCCOPY,$/;"	e	enum:ege::egeControlBase::ROP
CTL_DEFPARAM	C++\ege-13.04.02-full\src\ege.h	1089;"	d
CTL_INIT	C++\ege-13.04.02-full\src\ege.h	1091;"	d
CTL_INITBASE	C++\ege-13.04.02-full\src\ege.h	1090;"	d
CTL_PREINIT	C++\ege-13.04.02-full\src\ege.h	1077;"	d
CTL_PREINITEND	C++\ege-13.04.02-full\src\ege.h	1088;"	d
CURRENT_DRIVER	C++\ege-13.04.02-full\src\ege.h	/^	CURRENT_DRIVER = -1$/;"	e	enum:ege::graphics_drivers
CYAN	C++\ege-13.04.02-full\src\ege.h	/^	CYAN            = EGERGB(0, 0xA8, 0xA8),$/;"	e	enum:ege::COLORS
DARKGRAY	C++\ege-13.04.02-full\src\ege.h	/^	DARKGRAY        = EGERGB(0x54, 0x54, 0x54),$/;"	e	enum:ege::COLORS
DASHED_LINE	C++\ege-13.04.02-full\src\ege.h	/^	DASHED_LINE     = PS_DASHDOT,$/;"	e	enum:ege::line_styles
DETECT	C++\ege-13.04.02-full\src\ege.h	/^	DETECT,         \/* requests auto detection *\/$/;"	e	enum:ege::graphics_drivers
DOTTED_LINE	C++\ege-13.04.02-full\src\ege.h	/^	DOTTED_LINE     = PS_DOT,$/;"	e	enum:ege::line_styles
EGA	C++\ege-13.04.02-full\src\ege.h	/^	CGA, MCGA, EGA, EGA64, EGAMONO, IBM8514,\/* 1 - 6 *\/$/;"	e	enum:ege::graphics_drivers
EGA64	C++\ege-13.04.02-full\src\ege.h	/^	CGA, MCGA, EGA, EGA64, EGAMONO, IBM8514,\/* 1 - 6 *\/$/;"	e	enum:ege::graphics_drivers
EGA64HI	C++\ege-13.04.02-full\src\ege.h	/^	EGA64HI     = 1,  \/* 640x350 4 color  1 page    *\/$/;"	e	enum:ege::graphics_modes
EGA64LO	C++\ege-13.04.02-full\src\ege.h	/^	EGA64LO     = 0,  \/* 640x200 16 color 1 page    *\/$/;"	e	enum:ege::graphics_modes
EGAHI	C++\ege-13.04.02-full\src\ege.h	/^	EGAHI       = 1,  \/* 640x350 16 color 2 pages   *\/$/;"	e	enum:ege::graphics_modes
EGALO	C++\ege-13.04.02-full\src\ege.h	/^	EGALO       = 0,  \/* 640x200 16 color 4 pages   *\/$/;"	e	enum:ege::graphics_modes
EGAMONO	C++\ege-13.04.02-full\src\ege.h	/^	CGA, MCGA, EGA, EGA64, EGAMONO, IBM8514,\/* 1 - 6 *\/$/;"	e	enum:ege::graphics_drivers
EGAMONOHI	C++\ege-13.04.02-full\src\ege.h	/^	EGAMONOHI   = 0,  \/* 640x350 64K on card, 1 page - 256K on card, 4 pages *\/$/;"	e	enum:ege::graphics_modes
EGEACOLOR	C++\ege-13.04.02-full\src\ege.h	236;"	d
EGEAGRAY	C++\ege-13.04.02-full\src\ege.h	244;"	d
EGEAPI	C++\ege-13.04.02-full\src\ege.h	201;"	d
EGEAPI	C++\ege-13.04.02-full\src\ege.h	203;"	d
EGEAPI	C++\ege-13.04.02-full\src\ege.h	208;"	d
EGEAPI	C++\ege-13.04.02-full\src\ege.h	210;"	d
EGEAPI	C++\ege-13.04.02-full\src\ege.h	213;"	d
EGEARGB	C++\ege-13.04.02-full\src\ege.h	235;"	d
EGECOLORA	C++\ege-13.04.02-full\src\ege.h	237;"	d
EGECTRL_INITEND	C++\ege-13.04.02-full\src\ege.h	1094;"	d
EGEGET_A	C++\ege-13.04.02-full\src\ege.h	241;"	d
EGEGET_B	C++\ege-13.04.02-full\src\ege.h	240;"	d
EGEGET_G	C++\ege-13.04.02-full\src\ege.h	239;"	d
EGEGET_R	C++\ege-13.04.02-full\src\ege.h	238;"	d
EGEGRAY	C++\ege-13.04.02-full\src\ege.h	242;"	d
EGEGRAYA	C++\ege-13.04.02-full\src\ege.h	243;"	d
EGERGB	C++\ege-13.04.02-full\src\ege.h	233;"	d
EGERGBA	C++\ege-13.04.02-full\src\ege.h	234;"	d
EGE_DEPRECATE	C++\ege-13.04.02-full\src\ege.h	218;"	d
EGE_DEPRECATE	C++\ege-13.04.02-full\src\ege.h	222;"	d
EGE_DEPRECATE	C++\ege-13.04.02-full\src\ege.h	224;"	d
EGE_DEPRECATE	C++\ege-13.04.02-full\src\ege.h	227;"	d
EMPTY_FILL	C++\ege-13.04.02-full\src\ege.h	/^	EMPTY_FILL,     \/* fills area in background color *\/$/;"	e	enum:ege::fill_patterns
GREEN	C++\ege-13.04.02-full\src\ege.h	/^	GREEN           = EGERGB(0, 0xA8, 0),$/;"	e	enum:ege::COLORS
GWLP_USERDATA	C++\ege-13.04.02-full\src\ege.h	172;"	d
GWLP_WNDPROC	C++\ege-13.04.02-full\src\ege.h	173;"	d
GetSqrModule	C++\ege-13.04.02-full\src\ege.h	/^	float GetSqrModule() const {$/;"	f	struct:ege::VECTOR3D
GetWindowLongPtrW	C++\ege-13.04.02-full\src\ege.h	171;"	d
HATCH_FILL	C++\ege-13.04.02-full\src\ege.h	/^	HATCH_FILL,     \/* light hatch fill *\/$/;"	e	enum:ege::fill_patterns
HERCMONO	C++\ege-13.04.02-full\src\ege.h	/^	HERCMONO, ATT400, VGA, PC3270,          \/* 7 - 10 *\/$/;"	e	enum:ege::graphics_drivers
HERCMONOHI	C++\ege-13.04.02-full\src\ege.h	/^	HERCMONOHI  = 0,  \/* 720x348 2 pages            *\/$/;"	e	enum:ege::graphics_modes
HSLtoRGB	C++\ege-13.04.02-full\src\ege.h	786;"	d
HSVtoRGB	C++\ege-13.04.02-full\src\ege.h	787;"	d
IBM8514	C++\ege-13.04.02-full\src\ege.h	/^	CGA, MCGA, EGA, EGA64, EGAMONO, IBM8514,\/* 1 - 6 *\/$/;"	e	enum:ege::graphics_drivers
IBM8514HI	C++\ege-13.04.02-full\src\ege.h	/^	IBM8514HI   = 1   \/*1024x768 256 colors         *\/$/;"	e	enum:ege::graphics_modes
IBM8514LO	C++\ege-13.04.02-full\src\ege.h	/^	IBM8514LO   = 0,  \/* 640x480 256 colors         *\/$/;"	e	enum:ege::graphics_modes
INITGRAPH	C++\ege-13.04.02-full\src\ege.h	651;"	d
INITGRAPH3	C++\ege-13.04.02-full\src\ege.h	653;"	d
INIT_ANIMATION	C++\ege-13.04.02-full\src\ege.h	/^	INIT_ANIMATION  = INIT_DEFAULT | INIT_RENDERMANUAL | INIT_NOFORCEEXIT,$/;"	e	enum:ege::initmode_flag
INIT_CHILD	C++\ege-13.04.02-full\src\ege.h	/^	INIT_CHILD          = 0x2,$/;"	e	enum:ege::initmode_flag
INIT_DEFAULT	C++\ege-13.04.02-full\src\ege.h	/^	INIT_DEFAULT    = 0x0,$/;"	e	enum:ege::initmode_flag
INIT_NOBORDER	C++\ege-13.04.02-full\src\ege.h	/^	INIT_NOBORDER       = 0x1,$/;"	e	enum:ege::initmode_flag
INIT_NOFORCEEXIT	C++\ege-13.04.02-full\src\ege.h	/^	INIT_NOFORCEEXIT    = 0x10,$/;"	e	enum:ege::initmode_flag
INIT_RENDERMANUAL	C++\ege-13.04.02-full\src\ege.h	/^	INIT_RENDERMANUAL   = 0x8,$/;"	e	enum:ege::initmode_flag
INIT_TOPMOST	C++\ege-13.04.02-full\src\ege.h	/^	INIT_TOPMOST        = 0x4,$/;"	e	enum:ege::initmode_flag
INIT_WITHLOGO	C++\ege-13.04.02-full\src\ege.h	/^	INIT_WITHLOGO       = 0x100,$/;"	e	enum:ege::initmode_flag
INTERLEAVE_FILL	C++\ege-13.04.02-full\src\ege.h	/^	INTERLEAVE_FILL,\/* interleaving line fill *\/$/;"	e	enum:ege::fill_patterns
InitObject	C++\ege-13.04.02-full\src\ege.h	/^	class InitObject {$/;"	c	class:ege::egeControlBase
IsOpen	C++\ege-13.04.02-full\src\ege.h	/^	int   IsOpen() {return (m_DID != MUSIC_ERROR) ? 1 : 0;}$/;"	f	class:ege::MUSIC
KEYMSG_CHAR	C++\ege-13.04.02-full\src\ege.h	/^	KEYMSG_CHAR         = 0x40000,$/;"	e	enum:ege::key_msg_flag
KEYMSG_CHAR_FLAG	C++\ege-13.04.02-full\src\ege.h	/^	KEYMSG_CHAR_FLAG    = 2,$/;"	e	enum:ege::key_msg_flag
KEYMSG_DOWN	C++\ege-13.04.02-full\src\ege.h	/^	KEYMSG_DOWN         = 0x10000,$/;"	e	enum:ege::key_msg_flag
KEYMSG_DOWN_FLAG	C++\ege-13.04.02-full\src\ege.h	/^	KEYMSG_DOWN_FLAG    = 1,$/;"	e	enum:ege::key_msg_flag
KEYMSG_FIRSTDOWN	C++\ege-13.04.02-full\src\ege.h	/^	KEYMSG_FIRSTDOWN    = 0x80000,$/;"	e	enum:ege::key_msg_flag
KEYMSG_UP	C++\ege-13.04.02-full\src\ege.h	/^	KEYMSG_UP           = 0x20000,$/;"	e	enum:ege::key_msg_flag
KEYMSG_UP_FLAG	C++\ege-13.04.02-full\src\ege.h	/^	KEYMSG_UP_FLAG      = 1,$/;"	e	enum:ege::key_msg_flag
LEFT_TEXT	C++\ege-13.04.02-full\src\ege.h	/^	LEFT_TEXT   = 0,$/;"	e	enum:ege::text_just
LIGHTBLUE	C++\ege-13.04.02-full\src\ege.h	/^	LIGHTBLUE       = EGERGB(0x54, 0x54, 0xFC),$/;"	e	enum:ege::COLORS
LIGHTCYAN	C++\ege-13.04.02-full\src\ege.h	/^	LIGHTCYAN       = EGERGB(0x54, 0xFC, 0xFC),$/;"	e	enum:ege::COLORS
LIGHTGRAY	C++\ege-13.04.02-full\src\ege.h	/^	LIGHTGRAY       = EGERGB(0xA8, 0xA8, 0xA8),$/;"	e	enum:ege::COLORS
LIGHTGREEN	C++\ege-13.04.02-full\src\ege.h	/^	LIGHTGREEN      = EGERGB(0x54, 0xFC, 0x54),$/;"	e	enum:ege::COLORS
LIGHTMAGENTA	C++\ege-13.04.02-full\src\ege.h	/^	LIGHTMAGENTA    = EGERGB(0xFC, 0x54, 0xFC),$/;"	e	enum:ege::COLORS
LIGHTRED	C++\ege-13.04.02-full\src\ege.h	/^	LIGHTRED        = EGERGB(0xFC, 0x54, 0x54),$/;"	e	enum:ege::COLORS
LINE_FILL	C++\ege-13.04.02-full\src\ege.h	/^	LINE_FILL,      \/* --- fill *\/$/;"	e	enum:ege::fill_patterns
LPCALLBACK_PROC	C++\ege-13.04.02-full\src\ege.h	/^typedef CALLBACK_PROC       * LPCALLBACK_PROC;$/;"	t	namespace:ege
LPMSG_KEY_PROC	C++\ege-13.04.02-full\src\ege.h	/^typedef MSG_KEY_PROC        * LPMSG_KEY_PROC;$/;"	t	namespace:ege
LPMSG_MOUSE_PROC	C++\ege-13.04.02-full\src\ege.h	/^typedef MSG_MOUSE_PROC      * LPMSG_MOUSE_PROC;$/;"	t	namespace:ege
LTBKSLASH_FILL	C++\ege-13.04.02-full\src\ege.h	/^	LTBKSLASH_FILL, \/* \\\\\\ fill *\/$/;"	e	enum:ege::fill_patterns
LTSLASH_FILL	C++\ege-13.04.02-full\src\ege.h	/^	LTSLASH_FILL,   \/* \/\/\/ fill *\/$/;"	e	enum:ege::fill_patterns
MAGENTA	C++\ege-13.04.02-full\src\ege.h	/^	MAGENTA         = EGERGB(0xA8, 0, 0xA8),$/;"	e	enum:ege::COLORS
MCGA	C++\ege-13.04.02-full\src\ege.h	/^	CGA, MCGA, EGA, EGA64, EGAMONO, IBM8514,\/* 1 - 6 *\/$/;"	e	enum:ege::graphics_drivers
MCGAC0	C++\ege-13.04.02-full\src\ege.h	/^	MCGAC0      = 0,  \/* 320x200 palette 0; 1 page  *\/$/;"	e	enum:ege::graphics_modes
MCGAC1	C++\ege-13.04.02-full\src\ege.h	/^	MCGAC1      = 1,  \/* 320x200 palette 1; 1 page  *\/$/;"	e	enum:ege::graphics_modes
MCGAC2	C++\ege-13.04.02-full\src\ege.h	/^	MCGAC2      = 2,  \/* 320x200 palette 2; 1 page  *\/$/;"	e	enum:ege::graphics_modes
MCGAC3	C++\ege-13.04.02-full\src\ege.h	/^	MCGAC3      = 3,  \/* 320x200 palette 3; 1 page  *\/$/;"	e	enum:ege::graphics_modes
MCGAHI	C++\ege-13.04.02-full\src\ege.h	/^	MCGAHI      = 5,  \/* 640x480 1 page             *\/$/;"	e	enum:ege::graphics_modes
MCGAMED	C++\ege-13.04.02-full\src\ege.h	/^	MCGAMED     = 4,  \/* 640x200 1 page             *\/$/;"	e	enum:ege::graphics_modes
MSG_EVENT_CLICK	C++\ege-13.04.02-full\src\ege.h	/^	MSG_EVENT_CLICK         = 0x01,$/;"	e	enum:ege::message_event
MSG_EVENT_DBCLICK	C++\ege-13.04.02-full\src\ege.h	/^	MSG_EVENT_DBCLICK       = 0x02,$/;"	e	enum:ege::message_event
MSG_EVENT_DOWN	C++\ege-13.04.02-full\src\ege.h	/^	MSG_EVENT_DOWN          = 0x01,$/;"	e	enum:ege::message_event
MSG_EVENT_MOVE	C++\ege-13.04.02-full\src\ege.h	/^	MSG_EVENT_MOVE          = 0x04,$/;"	e	enum:ege::message_event
MSG_EVENT_UP	C++\ege-13.04.02-full\src\ege.h	/^	MSG_EVENT_UP            = 0x00,$/;"	e	enum:ege::message_event
MSG_EVENT_WHEEL	C++\ege-13.04.02-full\src\ege.h	/^	MSG_EVENT_WHEEL         = 0x10,$/;"	e	enum:ege::message_event
MSG_KEY_PROC	C++\ege-13.04.02-full\src\ege.h	/^typedef int (__stdcall MSG_KEY_PROC  )(void*, unsigned, int);$/;"	t	namespace:ege
MSG_MOUSE_LEFT	C++\ege-13.04.02-full\src\ege.h	/^	MSG_MOUSE_LEFT      = 0x01,$/;"	e	enum:ege::message_mouse
MSG_MOUSE_MID	C++\ege-13.04.02-full\src\ege.h	/^	MSG_MOUSE_MID       = 0x04,$/;"	e	enum:ege::message_mouse
MSG_MOUSE_PROC	C++\ege-13.04.02-full\src\ege.h	/^typedef int (__stdcall MSG_MOUSE_PROC)(void*, unsigned, int, int, int);$/;"	t	namespace:ege
MSG_MOUSE_RIGHT	C++\ege-13.04.02-full\src\ege.h	/^	MSG_MOUSE_RIGHT     = 0x02,$/;"	e	enum:ege::message_mouse
MUSIC	C++\ege-13.04.02-full\src\ege.h	/^class MUSIC$/;"	c	namespace:ege
MUSIC_ERROR	C++\ege-13.04.02-full\src\ege.h	657;"	d
MUSIC_MODE_NOT_OPEN	C++\ege-13.04.02-full\src\ege.h	/^	MUSIC_MODE_NOT_OPEN = 0x0,$/;"	e	enum:ege::music_state_flag
MUSIC_MODE_NOT_READY	C++\ege-13.04.02-full\src\ege.h	/^	MUSIC_MODE_NOT_READY = 0x20C,$/;"	e	enum:ege::music_state_flag
MUSIC_MODE_OPEN	C++\ege-13.04.02-full\src\ege.h	/^	MUSIC_MODE_OPEN = 0x212,$/;"	e	enum:ege::music_state_flag
MUSIC_MODE_PAUSE	C++\ege-13.04.02-full\src\ege.h	/^	MUSIC_MODE_PAUSE = 0x211,$/;"	e	enum:ege::music_state_flag
MUSIC_MODE_PLAY	C++\ege-13.04.02-full\src\ege.h	/^	MUSIC_MODE_PLAY = 0x20E,$/;"	e	enum:ege::music_state_flag
MUSIC_MODE_SEEK	C++\ege-13.04.02-full\src\ege.h	/^	MUSIC_MODE_SEEK = 0x210,$/;"	e	enum:ege::music_state_flag
MUSIC_MODE_STOP	C++\ege-13.04.02-full\src\ege.h	/^	MUSIC_MODE_STOP = 0x20D,$/;"	e	enum:ege::music_state_flag
NULL_LINE	C++\ege-13.04.02-full\src\ege.h	/^	NULL_LINE       = PS_NULL,$/;"	e	enum:ege::line_styles
OR	C++\ege-13.04.02-full\src\ege.h	/^		OR      = SRCPAINT,$/;"	e	enum:ege::egeControlBase::ROP
PC3270	C++\ege-13.04.02-full\src\ege.h	/^	HERCMONO, ATT400, VGA, PC3270,          \/* 7 - 10 *\/$/;"	e	enum:ege::graphics_drivers
PC3270HI	C++\ege-13.04.02-full\src\ege.h	/^	PC3270HI    = 0,  \/* 720x350 1 page             *\/$/;"	e	enum:ege::graphics_modes
PI	C++\ege-13.04.02-full\src\ege.h	/^const double PI = 3.1415926535897932384626;$/;"	m	namespace:ege
PIMAGE	C++\ege-13.04.02-full\src\ege.h	/^typedef IMAGE *PIMAGE;$/;"	t	namespace:ege
PushTarget	C++\ege-13.04.02-full\src\ege.h	/^	PushTarget() { m_target = gettarget(); }$/;"	f	class:ege::PushTarget
PushTarget	C++\ege-13.04.02-full\src\ege.h	/^	PushTarget(PIMAGE target) { m_target = gettarget(); settarget(target); }$/;"	f	class:ege::PushTarget
PushTarget	C++\ege-13.04.02-full\src\ege.h	/^class PushTarget {$/;"	c	namespace:ege
RED	C++\ege-13.04.02-full\src\ege.h	/^	RED             = EGERGB(0xA8, 0, 0),$/;"	e	enum:ege::COLORS
RENDER_AUTO	C++\ege-13.04.02-full\src\ege.h	/^	RENDER_AUTO,$/;"	e	enum:ege::rendermode_e
RENDER_MANUAL	C++\ege-13.04.02-full\src\ege.h	/^	RENDER_MANUAL,$/;"	e	enum:ege::rendermode_e
RGBTOBGR	C++\ege-13.04.02-full\src\ege.h	232;"	d
RGBtoGRAY	C++\ege-13.04.02-full\src\ege.h	783;"	d
RGBtoHSL	C++\ege-13.04.02-full\src\ege.h	784;"	d
RGBtoHSV	C++\ege-13.04.02-full\src\ege.h	785;"	d
RIGHT_TEXT	C++\ege-13.04.02-full\src\ege.h	/^	RIGHT_TEXT  = 2,$/;"	e	enum:ege::text_just
ROP	C++\ege-13.04.02-full\src\ege.h	/^	enum ROP {$/;"	g	class:ege::egeControlBase
Rotate	C++\ege-13.04.02-full\src\ege.h	/^	VECTOR3D& Rotate(float rad, float x, float y, float z) {$/;"	f	struct:ege::VECTOR3D
SHOWCONSOLE	C++\ege-13.04.02-full\src\ege.h	231;"	d
SLASH_FILL	C++\ege-13.04.02-full\src\ege.h	/^	SLASH_FILL,     \/* \/\/\/ fill with thick lines *\/$/;"	e	enum:ege::fill_patterns
SOLIDCOPY	C++\ege-13.04.02-full\src\ege.h	/^		SOLIDCOPY = 0,$/;"	e	enum:ege::egeControlBase::blendmode_e
SOLID_FILL	C++\ege-13.04.02-full\src\ege.h	/^	SOLID_FILL,     \/* fills area in solid fill color *\/$/;"	e	enum:ege::fill_patterns
SOLID_LINE	C++\ege-13.04.02-full\src\ege.h	/^	SOLID_LINE      = PS_SOLID,$/;"	e	enum:ege::line_styles
SetModule	C++\ege-13.04.02-full\src\ege.h	/^	VECTOR3D& SetModule(float m) {$/;"	f	struct:ege::VECTOR3D
SetWindowLongPtrW	C++\ege-13.04.02-full\src\ege.h	170;"	d
Sleep	C++\ege-13.04.02-full\src\ege.h	1415;"	d
TOP_TEXT	C++\ege-13.04.02-full\src\ege.h	/^	TOP_TEXT    = 2$/;"	e	enum:ege::text_just
TRUECOLOR	C++\ege-13.04.02-full\src\ege.h	/^	TRUECOLOR, TRUECOLORSIZE,$/;"	e	enum:ege::graphics_drivers
TRUECOLORSIZE	C++\ege-13.04.02-full\src\ege.h	/^	TRUECOLOR, TRUECOLORSIZE,$/;"	e	enum:ege::graphics_drivers
USERBIT_LINE	C++\ege-13.04.02-full\src\ege.h	/^	USERBIT_LINE    = PS_USERSTYLE,   \/* User defined line style *\/$/;"	e	enum:ege::line_styles
USER_FILL	C++\ege-13.04.02-full\src\ege.h	/^	USER_FILL       \/* user defined fill *\/$/;"	e	enum:ege::fill_patterns
VECTOR3D	C++\ege-13.04.02-full\src\ege.h	/^	VECTOR3D() {$/;"	f	struct:ege::VECTOR3D
VECTOR3D	C++\ege-13.04.02-full\src\ege.h	/^	VECTOR3D(float _x, float _y) {$/;"	f	struct:ege::VECTOR3D
VECTOR3D	C++\ege-13.04.02-full\src\ege.h	/^	VECTOR3D(float _x, float _y, float _z) {$/;"	f	struct:ege::VECTOR3D
VECTOR3D	C++\ege-13.04.02-full\src\ege.h	/^struct VECTOR3D {$/;"	s	namespace:ege
VGA	C++\ege-13.04.02-full\src\ege.h	/^	HERCMONO, ATT400, VGA, PC3270,          \/* 7 - 10 *\/$/;"	e	enum:ege::graphics_drivers
VGAHI	C++\ege-13.04.02-full\src\ege.h	/^	VGAHI       = 2,  \/* 640x480 16 color 1 page    *\/$/;"	e	enum:ege::graphics_modes
VGALO	C++\ege-13.04.02-full\src\ege.h	/^	VGALO       = 0,  \/* 640x200 16 color 4 pages   *\/$/;"	e	enum:ege::graphics_modes
VGAMED	C++\ege-13.04.02-full\src\ege.h	/^	VGAMED      = 1,  \/* 640x350 16 color 2 pages   *\/$/;"	e	enum:ege::graphics_modes
WHITE	C++\ege-13.04.02-full\src\ege.h	/^	WHITE           = EGERGB(0xFC, 0xFC, 0xFC),$/;"	e	enum:ege::COLORS
WIDE_DOT_FILL	C++\ege-13.04.02-full\src\ege.h	/^	WIDE_DOT_FILL,  \/* Widely spaced dot fill *\/$/;"	e	enum:ege::fill_patterns
WINVER	C++\ege-13.04.02-full\src\ege.h	58;"	d
WM_MOUSEWHEEL	C++\ege-13.04.02-full\src\ege.h	184;"	d
WinMain	C++\ege-13.04.02-full\src\ege.h	1420;"	d
XHATCH_FILL	C++\ege-13.04.02-full\src\ege.h	/^	XHATCH_FILL,    \/* heavy cross hatch fill *\/$/;"	e	enum:ege::fill_patterns
XOR	C++\ege-13.04.02-full\src\ege.h	/^		XOR     = SRCINVERT,$/;"	e	enum:ege::egeControlBase::ROP
YELLOW	C++\ege-13.04.02-full\src\ege.h	/^	YELLOW          = EGERGB(0xFC, 0xFC, 0x54),$/;"	e	enum:ege::COLORS
_ALLOW_ITERATOR_DEBUG_LEVEL_MISMATCH	C++\ege-13.04.02-full\src\ege.h	81;"	d
_ALLOW_RUNTIME_LIBRARY_MISMATCH	C++\ege-13.04.02-full\src\ege.h	84;"	d
_CONIO_H_	C++\ege-13.04.02-full\src\ege.h	1327;"	d
_CRT_NON_CONFORMING_SWPRINTFS	C++\ege-13.04.02-full\src\ege.h	159;"	d
_CRT_NON_CONFORMING_SWPRINTFS	C++\ege-13.04.02-full\src\ege.h	163;"	d
_CRT_SECURE_NO_DEPRECATE	C++\ege-13.04.02-full\src\ege.h	155;"	d
_CRT_SECURE_NO_WARNINGS	C++\ege-13.04.02-full\src\ege.h	151;"	d
_Cdecl	C++\ege-13.04.02-full\src\ege.h	193;"	d
_Cdecl	C++\ege-13.04.02-full\src\ege.h	195;"	d
_EGE_H_	C++\ege-13.04.02-full\src\ege.h	50;"	d
_INC_CONIO	C++\ege-13.04.02-full\src\ege.h	1326;"	d
_WIN32_WINDOWS	C++\ege-13.04.02-full\src\ege.h	66;"	d
_WIN32_WINNT	C++\ege-13.04.02-full\src\ege.h	62;"	d
autoredraw	C++\ege-13.04.02-full\src\ege.h	/^	void autoredraw(bool bvisable)  { m_bAutoDraw = (m_bAutoDraw ? 1 : 0); }$/;"	f	class:ege::egeControlBase
blendmode	C++\ege-13.04.02-full\src\ege.h	/^	void blendmode(int mode) { m_AlphablendMode = mode; }$/;"	f	class:ege::egeControlBase
blendmode_e	C++\ege-13.04.02-full\src\ege.h	/^	enum blendmode_e {$/;"	g	class:ege::egeControlBase
bottom	C++\ege-13.04.02-full\src\ege.h	/^	int bottom;$/;"	m	struct:ege::viewporttype
buf	C++\ege-13.04.02-full\src\ege.h	/^	PIMAGE buf() const { return m_mainbuf; }$/;"	f	class:ege::egeControlBase
buf	C++\ege-13.04.02-full\src\ege.h	/^	PIMAGE buf() { return m_mainbuf; }$/;"	f	class:ege::egeControlBase
capmouse	C++\ege-13.04.02-full\src\ege.h	/^	void capmouse(bool bcapmouse)   { m_bCapMouse = (bcapmouse ? 1 : 0); }$/;"	f	class:ege::egeControlBase
capture	C++\ege-13.04.02-full\src\ege.h	/^	void capture(bool bcapture)     { m_bCapture = (bcapture ? 1 : 0); }$/;"	f	class:ege::egeControlBase
charsize	C++\ege-13.04.02-full\src\ege.h	/^	int charsize;$/;"	m	struct:ege::textsettingstype
classname	C++\ege-13.04.02-full\src\ege.h	/^	LPCWSTR classname;$/;"	m	struct:ege::msg_createwindow
clipflag	C++\ege-13.04.02-full\src\ege.h	/^	int clipflag;$/;"	m	struct:ege::viewporttype
color	C++\ege-13.04.02-full\src\ege.h	/^	color_t color;$/;"	m	struct:ege::ege_colpoint
color_t	C++\ege-13.04.02-full\src\ege.h	/^typedef unsigned int color_t;$/;"	t	namespace:ege
directdraw	C++\ege-13.04.02-full\src\ege.h	/^	void directdraw(bool bdraw) { m_bDirectDraw = (bdraw ? 1 : 0); }$/;"	f	class:ege::egeControlBase
direction	C++\ege-13.04.02-full\src\ege.h	/^	int direction;$/;"	m	struct:ege::textsettingstype
ege	C++\ege-13.04.02-full\src\ege.h	/^namespace ege {$/;"	n
egeControlBase	C++\ege-13.04.02-full\src\ege.h	/^class egeControlBase$/;"	c	namespace:ege
ege_colpoint	C++\ege-13.04.02-full\src\ege.h	/^typedef struct ege_colpoint {$/;"	s	namespace:ege
ege_colpoint	C++\ege-13.04.02-full\src\ege.h	/^}ege_colpoint;$/;"	t	namespace:ege	typeref:struct:ege::ege_colpoint
ege_point	C++\ege-13.04.02-full\src\ege.h	/^typedef struct ege_point {$/;"	s	namespace:ege
ege_point	C++\ege-13.04.02-full\src\ege.h	/^}ege_point;$/;"	t	namespace:ege	typeref:struct:ege::ege_point
ege_rect	C++\ege-13.04.02-full\src\ege.h	/^typedef struct ege_rect {$/;"	s	namespace:ege
ege_rect	C++\ege-13.04.02-full\src\ege.h	/^}ege_rect;$/;"	t	namespace:ege	typeref:struct:ege::ege_rect
enable	C++\ege-13.04.02-full\src\ege.h	/^	void enable(bool benable)       { m_bEnable = (benable ? 1 : 0); }$/;"	f	class:ege::egeControlBase
exstyle	C++\ege-13.04.02-full\src\ege.h	/^	DWORD exstyle;$/;"	m	struct:ege::msg_createwindow
fill_patterns	C++\ege-13.04.02-full\src\ege.h	/^enum fill_patterns {\/* Fill patterns for get\/setfillstyle *\/$/;"	g	namespace:ege
filter	C++\ege-13.04.02-full\src\ege.h	/^	PIMAGE filter() const { return m_mainFilter; }$/;"	f	class:ege::egeControlBase
filter	C++\ege-13.04.02-full\src\ege.h	/^	PIMAGE filter() { return m_mainFilter; }$/;"	f	class:ege::egeControlBase
flags	C++\ege-13.04.02-full\src\ege.h	/^	unsigned int    flags;$/;"	m	struct:ege::key_msg
flags	C++\ege-13.04.02-full\src\ege.h	/^	unsigned int    flags;$/;"	m	struct:ege::mouse_msg
font	C++\ege-13.04.02-full\src\ege.h	/^	int font;$/;"	m	struct:ege::textsettingstype
getch	C++\ege-13.04.02-full\src\ege.h	1331;"	d
geth	C++\ege-13.04.02-full\src\ege.h	/^	int geth()      const { return m_h; }$/;"	f	class:ege::egeControlBase
getmaxx	C++\ege-13.04.02-full\src\ege.h	955;"	d
getmaxy	C++\ege-13.04.02-full\src\ege.h	956;"	d
getw	C++\ege-13.04.02-full\src\ege.h	/^	int getw()      const { return m_w; }$/;"	f	class:ege::egeControlBase
getx	C++\ege-13.04.02-full\src\ege.h	/^	int getx()      const { return m_x; }$/;"	f	class:ege::egeControlBase
gety	C++\ege-13.04.02-full\src\ege.h	/^	int gety()      const { return m_y; }$/;"	f	class:ege::egeControlBase
grAllocError	C++\ege-13.04.02-full\src\ege.h	/^	grAllocError        = 0x15,$/;"	e	enum:ege::graphics_errors
grError	C++\ege-13.04.02-full\src\ege.h	/^	grError             = -11,   \/* generic error *\/$/;"	e	enum:ege::graphics_errors
grException	C++\ege-13.04.02-full\src\ege.h	/^	grException         = 0x10,  \/* ege error *\/$/;"	e	enum:ege::graphics_errors
grFileNotFound	C++\ege-13.04.02-full\src\ege.h	/^	grFileNotFound      =  -3,$/;"	e	enum:ege::graphics_errors
grFontNotFound	C++\ege-13.04.02-full\src\ege.h	/^	grFontNotFound      =  -8,$/;"	e	enum:ege::graphics_errors
grIOerror	C++\ege-13.04.02-full\src\ege.h	/^	grIOerror           = -12,$/;"	e	enum:ege::graphics_errors
grInvalidDriver	C++\ege-13.04.02-full\src\ege.h	/^	grInvalidDriver     =  -4,$/;"	e	enum:ege::graphics_errors
grInvalidFont	C++\ege-13.04.02-full\src\ege.h	/^	grInvalidFont       = -13,$/;"	e	enum:ege::graphics_errors
grInvalidFontNum	C++\ege-13.04.02-full\src\ege.h	/^	grInvalidFontNum    = -14,$/;"	e	enum:ege::graphics_errors
grInvalidMemory	C++\ege-13.04.02-full\src\ege.h	/^	grInvalidMemory     = 0xCDCDCDCD,$/;"	e	enum:ege::graphics_errors
grInvalidMode	C++\ege-13.04.02-full\src\ege.h	/^	grInvalidMode       = -10,$/;"	e	enum:ege::graphics_errors
grInvalidRegion	C++\ege-13.04.02-full\src\ege.h	/^	grInvalidRegion     = 0x12,$/;"	e	enum:ege::graphics_errors
grInvalidVersion	C++\ege-13.04.02-full\src\ege.h	/^	grInvalidVersion    = -18,$/;"	e	enum:ege::graphics_errors
grNoFloodMem	C++\ege-13.04.02-full\src\ege.h	/^	grNoFloodMem        =  -7,$/;"	e	enum:ege::graphics_errors
grNoFontMem	C++\ege-13.04.02-full\src\ege.h	/^	grNoFontMem         =  -9,$/;"	e	enum:ege::graphics_errors
grNoInitGraph	C++\ege-13.04.02-full\src\ege.h	/^	grNoInitGraph       =  -1,$/;"	e	enum:ege::graphics_errors
grNoLoadMem	C++\ege-13.04.02-full\src\ege.h	/^	grNoLoadMem         =  -5,$/;"	e	enum:ege::graphics_errors
grNoScanMem	C++\ege-13.04.02-full\src\ege.h	/^	grNoScanMem         =  -6,$/;"	e	enum:ege::graphics_errors
grNotDetected	C++\ege-13.04.02-full\src\ege.h	/^	grNotDetected       =  -2,$/;"	e	enum:ege::graphics_errors
grNullPointer	C++\ege-13.04.02-full\src\ege.h	/^	grNullPointer       = 0x14,$/;"	e	enum:ege::graphics_errors
grOk	C++\ege-13.04.02-full\src\ege.h	/^	grOk                =   0,$/;"	e	enum:ege::graphics_errors
grOutOfMemory	C++\ege-13.04.02-full\src\ege.h	/^	grOutOfMemory       = 0x13,$/;"	e	enum:ege::graphics_errors
grParamError	C++\ege-13.04.02-full\src\ege.h	/^	grParamError        = 0x11,$/;"	e	enum:ege::graphics_errors
graphics_drivers	C++\ege-13.04.02-full\src\ege.h	/^enum graphics_drivers {     \/* define graphics drivers *\/$/;"	g	namespace:ege
graphics_errors	C++\ege-13.04.02-full\src\ege.h	/^enum graphics_errors {      \/* graphresult error return codes *\/$/;"	g	namespace:ege
graphics_modes	C++\ege-13.04.02-full\src\ege.h	/^enum graphics_modes { \/* graphics modes for each driver *\/$/;"	g	namespace:ege
h	C++\ege-13.04.02-full\src\ege.h	/^	float h;$/;"	m	struct:ege::ege_rect
hEvent	C++\ege-13.04.02-full\src\ege.h	/^	HANDLE hEvent;$/;"	m	struct:ege::msg_createwindow
height	C++\ege-13.04.02-full\src\ege.h	/^	int height()    const { return m_h; }$/;"	f	class:ege::egeControlBase
horiz	C++\ege-13.04.02-full\src\ege.h	/^	int horiz;$/;"	m	struct:ege::textsettingstype
hwnd	C++\ege-13.04.02-full\src\ege.h	/^	HWND hwnd;$/;"	m	struct:ege::msg_createwindow
id	C++\ege-13.04.02-full\src\ege.h	/^	unsigned id;$/;"	m	struct:ege::msg_createwindow
inherit_e	C++\ege-13.04.02-full\src\ege.h	/^	enum inherit_e {$/;"	g	class:ege::egeControlBase
inherit_level_e	C++\ege-13.04.02-full\src\ege.h	/^		inherit_level_e = 0,$/;"	e	enum:ege::egeControlBase::inherit_e
initmode_flag	C++\ege-13.04.02-full\src\ege.h	/^enum initmode_flag {$/;"	g	namespace:ege
is_down	C++\ege-13.04.02-full\src\ege.h	/^	bool is_down() {return msg == mouse_msg_down;}$/;"	f	struct:ege::mouse_msg
is_left	C++\ege-13.04.02-full\src\ege.h	/^	bool is_left() {return (flags & mouse_flag_left) != 0;}$/;"	f	struct:ege::mouse_msg
is_mid	C++\ege-13.04.02-full\src\ege.h	/^	bool is_mid() {return (flags & mouse_flag_mid) != 0;}$/;"	f	struct:ege::mouse_msg
is_move	C++\ege-13.04.02-full\src\ege.h	/^	bool is_move() {return msg == mouse_msg_move;}$/;"	f	struct:ege::mouse_msg
is_right	C++\ege-13.04.02-full\src\ege.h	/^	bool is_right() {return (flags & mouse_flag_right) != 0;}$/;"	f	struct:ege::mouse_msg
is_up	C++\ege-13.04.02-full\src\ege.h	/^	bool is_up() {return msg == mouse_msg_up;}$/;"	f	struct:ege::mouse_msg
is_wheel	C++\ege-13.04.02-full\src\ege.h	/^	bool is_wheel() {return msg == mouse_msg_wheel;}$/;"	f	struct:ege::mouse_msg
isautoredraw	C++\ege-13.04.02-full\src\ege.h	/^	bool isautoredraw() const       { return (m_bAutoDraw != 0);}$/;"	f	class:ege::egeControlBase
iscapmouse	C++\ege-13.04.02-full\src\ege.h	/^	bool iscapmouse() const         { return (m_bCapMouse != 0); }$/;"	f	class:ege::egeControlBase
iscapture	C++\ege-13.04.02-full\src\ege.h	/^	bool iscapture() const          { return (m_bCapture != 0); }$/;"	f	class:ege::egeControlBase
isdirectdraw	C++\ege-13.04.02-full\src\ege.h	/^	bool isdirectdraw() const { return (m_bDirectDraw != 0); }$/;"	f	class:ege::egeControlBase
isenable	C++\ege-13.04.02-full\src\ege.h	/^	bool isenable() const           { return (m_bEnable != 0);}$/;"	f	class:ege::egeControlBase
isfocus	C++\ege-13.04.02-full\src\ege.h	/^	bool isfocus() const            { return (m_bInputFocus != 0); }$/;"	f	class:ege::egeControlBase
isvisable	C++\ege-13.04.02-full\src\ege.h	/^	bool isvisable() const          { return (m_bVisable != 0);}$/;"	f	class:ege::egeControlBase
kbhit	C++\ege-13.04.02-full\src\ege.h	1332;"	d
key	C++\ege-13.04.02-full\src\ege.h	/^	int             key;$/;"	m	struct:ege::key_msg
key_0	C++\ege-13.04.02-full\src\ege.h	/^	key_0           = 0x30,$/;"	e	enum:ege::key_code_e
key_1	C++\ege-13.04.02-full\src\ege.h	/^	key_1           = 0x31,$/;"	e	enum:ege::key_code_e
key_2	C++\ege-13.04.02-full\src\ege.h	/^	key_2           = 0x32,$/;"	e	enum:ege::key_code_e
key_3	C++\ege-13.04.02-full\src\ege.h	/^	key_3           = 0x33,$/;"	e	enum:ege::key_code_e
key_4	C++\ege-13.04.02-full\src\ege.h	/^	key_4           = 0x34,$/;"	e	enum:ege::key_code_e
key_5	C++\ege-13.04.02-full\src\ege.h	/^	key_5           = 0x35,$/;"	e	enum:ege::key_code_e
key_6	C++\ege-13.04.02-full\src\ege.h	/^	key_6           = 0x36,$/;"	e	enum:ege::key_code_e
key_7	C++\ege-13.04.02-full\src\ege.h	/^	key_7           = 0x37,$/;"	e	enum:ege::key_code_e
key_8	C++\ege-13.04.02-full\src\ege.h	/^	key_8           = 0x38,$/;"	e	enum:ege::key_code_e
key_9	C++\ege-13.04.02-full\src\ege.h	/^	key_9           = 0x39,$/;"	e	enum:ege::key_code_e
key_A	C++\ege-13.04.02-full\src\ege.h	/^	key_A           = 0x41,$/;"	e	enum:ege::key_code_e
key_Z	C++\ege-13.04.02-full\src\ege.h	/^	key_Z           = 0x5a,$/;"	e	enum:ege::key_code_e
key_back	C++\ege-13.04.02-full\src\ege.h	/^	key_back        = 0x08,$/;"	e	enum:ege::key_code_e
key_backslash	C++\ege-13.04.02-full\src\ege.h	/^	key_backslash   = 0xdc,$/;"	e	enum:ege::key_code_e
key_capslock	C++\ege-13.04.02-full\src\ege.h	/^	key_capslock    = 0x14,$/;"	e	enum:ege::key_code_e
key_code_e	C++\ege-13.04.02-full\src\ege.h	/^typedef enum key_code_e {$/;"	g	namespace:ege
key_code_e	C++\ege-13.04.02-full\src\ege.h	/^}key_code_e;$/;"	t	namespace:ege	typeref:enum:ege::key_code_e
key_comma	C++\ege-13.04.02-full\src\ege.h	/^	key_comma       = 0xbc,$/;"	e	enum:ege::key_code_e
key_control	C++\ege-13.04.02-full\src\ege.h	/^	key_control     = 0x11,$/;"	e	enum:ege::key_code_e
key_control_l	C++\ege-13.04.02-full\src\ege.h	/^	key_control_l   = 0xa2,$/;"	e	enum:ege::key_code_e
key_control_r	C++\ege-13.04.02-full\src\ege.h	/^	key_control_r   = 0xa3,$/;"	e	enum:ege::key_code_e
key_delete	C++\ege-13.04.02-full\src\ege.h	/^	key_delete      = 0x2e,$/;"	e	enum:ege::key_code_e
key_down	C++\ege-13.04.02-full\src\ege.h	/^	key_down        = 0x28,$/;"	e	enum:ege::key_code_e
key_end	C++\ege-13.04.02-full\src\ege.h	/^	key_end         = 0x24,$/;"	e	enum:ege::key_code_e
key_enter	C++\ege-13.04.02-full\src\ege.h	/^	key_enter       = 0x0d,$/;"	e	enum:ege::key_code_e
key_esc	C++\ege-13.04.02-full\src\ege.h	/^	key_esc         = 0x1b,$/;"	e	enum:ege::key_code_e
key_f1	C++\ege-13.04.02-full\src\ege.h	/^	key_f1          = 0x70,$/;"	e	enum:ege::key_code_e
key_f10	C++\ege-13.04.02-full\src\ege.h	/^	key_f10         = 0x79,$/;"	e	enum:ege::key_code_e
key_f11	C++\ege-13.04.02-full\src\ege.h	/^	key_f11         = 0x7a,$/;"	e	enum:ege::key_code_e
key_f12	C++\ege-13.04.02-full\src\ege.h	/^	key_f12         = 0x7b,$/;"	e	enum:ege::key_code_e
key_f2	C++\ege-13.04.02-full\src\ege.h	/^	key_f2          = 0x71,$/;"	e	enum:ege::key_code_e
key_f3	C++\ege-13.04.02-full\src\ege.h	/^	key_f3          = 0x72,$/;"	e	enum:ege::key_code_e
key_f4	C++\ege-13.04.02-full\src\ege.h	/^	key_f4          = 0x73,$/;"	e	enum:ege::key_code_e
key_f5	C++\ege-13.04.02-full\src\ege.h	/^	key_f5          = 0x74,$/;"	e	enum:ege::key_code_e
key_f6	C++\ege-13.04.02-full\src\ege.h	/^	key_f6          = 0x75,$/;"	e	enum:ege::key_code_e
key_f7	C++\ege-13.04.02-full\src\ege.h	/^	key_f7          = 0x76,$/;"	e	enum:ege::key_code_e
key_f8	C++\ege-13.04.02-full\src\ege.h	/^	key_f8          = 0x77,$/;"	e	enum:ege::key_code_e
key_f9	C++\ege-13.04.02-full\src\ege.h	/^	key_f9          = 0x78,$/;"	e	enum:ege::key_code_e
key_flag_ctrl	C++\ege-13.04.02-full\src\ege.h	/^	key_flag_ctrl   = 0x200,$/;"	e	enum:ege::key_flag_e
key_flag_e	C++\ege-13.04.02-full\src\ege.h	/^typedef enum key_flag_e {$/;"	g	namespace:ege
key_flag_e	C++\ege-13.04.02-full\src\ege.h	/^}key_flag_e;$/;"	t	namespace:ege	typeref:enum:ege::key_flag_e
key_flag_shift	C++\ege-13.04.02-full\src\ege.h	/^	key_flag_shift  = 0x100,$/;"	e	enum:ege::key_flag_e
key_home	C++\ege-13.04.02-full\src\ege.h	/^	key_home        = 0x23,$/;"	e	enum:ege::key_code_e
key_ime_process	C++\ege-13.04.02-full\src\ege.h	/^	key_ime_process = 0xe5,$/;"	e	enum:ege::key_code_e
key_insert	C++\ege-13.04.02-full\src\ege.h	/^	key_insert      = 0x2d,$/;"	e	enum:ege::key_code_e
key_lbrace	C++\ege-13.04.02-full\src\ege.h	/^	key_lbrace      = 0xdb,$/;"	e	enum:ege::key_code_e
key_left	C++\ege-13.04.02-full\src\ege.h	/^	key_left        = 0x25,$/;"	e	enum:ege::key_code_e
key_menu	C++\ege-13.04.02-full\src\ege.h	/^	key_menu        = 0x12,$/;"	e	enum:ege::key_code_e
key_menu_l	C++\ege-13.04.02-full\src\ege.h	/^	key_menu_l      = 0xa4,$/;"	e	enum:ege::key_code_e
key_menu_r	C++\ege-13.04.02-full\src\ege.h	/^	key_menu_r      = 0xa5,$/;"	e	enum:ege::key_code_e
key_minus	C++\ege-13.04.02-full\src\ege.h	/^	key_minus       = 0xbd,$/;"	e	enum:ege::key_code_e
key_mouse_l	C++\ege-13.04.02-full\src\ege.h	/^	key_mouse_l     = 0x01,$/;"	e	enum:ege::key_code_e
key_mouse_m	C++\ege-13.04.02-full\src\ege.h	/^	key_mouse_m     = 0x04,$/;"	e	enum:ege::key_code_e
key_mouse_r	C++\ege-13.04.02-full\src\ege.h	/^	key_mouse_r     = 0x02,$/;"	e	enum:ege::key_code_e
key_msg	C++\ege-13.04.02-full\src\ege.h	/^typedef struct key_msg {$/;"	s	namespace:ege
key_msg	C++\ege-13.04.02-full\src\ege.h	/^}key_msg;$/;"	t	namespace:ege	typeref:struct:ege::key_msg
key_msg_char	C++\ege-13.04.02-full\src\ege.h	/^	key_msg_char    = 4,$/;"	e	enum:ege::key_msg_e
key_msg_down	C++\ege-13.04.02-full\src\ege.h	/^	key_msg_down    = 1,$/;"	e	enum:ege::key_msg_e
key_msg_e	C++\ege-13.04.02-full\src\ege.h	/^typedef enum key_msg_e {$/;"	g	namespace:ege
key_msg_e	C++\ege-13.04.02-full\src\ege.h	/^}key_msg_e;$/;"	t	namespace:ege	typeref:enum:ege::key_msg_e
key_msg_flag	C++\ege-13.04.02-full\src\ege.h	/^enum key_msg_flag {$/;"	g	namespace:ege
key_msg_up	C++\ege-13.04.02-full\src\ege.h	/^	key_msg_up      = 2,$/;"	e	enum:ege::key_msg_e
key_num0	C++\ege-13.04.02-full\src\ege.h	/^	key_num0        = 0x60,$/;"	e	enum:ege::key_code_e
key_num1	C++\ege-13.04.02-full\src\ege.h	/^	key_num1        = 0x61,$/;"	e	enum:ege::key_code_e
key_num2	C++\ege-13.04.02-full\src\ege.h	/^	key_num2        = 0x62,$/;"	e	enum:ege::key_code_e
key_num3	C++\ege-13.04.02-full\src\ege.h	/^	key_num3        = 0x63,$/;"	e	enum:ege::key_code_e
key_num4	C++\ege-13.04.02-full\src\ege.h	/^	key_num4        = 0x64,$/;"	e	enum:ege::key_code_e
key_num5	C++\ege-13.04.02-full\src\ege.h	/^	key_num5        = 0x65,$/;"	e	enum:ege::key_code_e
key_num6	C++\ege-13.04.02-full\src\ege.h	/^	key_num6        = 0x66,$/;"	e	enum:ege::key_code_e
key_num7	C++\ege-13.04.02-full\src\ege.h	/^	key_num7        = 0x67,$/;"	e	enum:ege::key_code_e
key_num8	C++\ege-13.04.02-full\src\ege.h	/^	key_num8        = 0x68,$/;"	e	enum:ege::key_code_e
key_num9	C++\ege-13.04.02-full\src\ege.h	/^	key_num9        = 0x69,$/;"	e	enum:ege::key_code_e
key_numlock	C++\ege-13.04.02-full\src\ege.h	/^	key_numlock     = 0x90,$/;"	e	enum:ege::key_code_e
key_pagedown	C++\ege-13.04.02-full\src\ege.h	/^	key_pagedown    = 0x22,$/;"	e	enum:ege::key_code_e
key_pageup	C++\ege-13.04.02-full\src\ege.h	/^	key_pageup      = 0x21,$/;"	e	enum:ege::key_code_e
key_pause	C++\ege-13.04.02-full\src\ege.h	/^	key_pause       = 0x13,$/;"	e	enum:ege::key_code_e
key_period	C++\ege-13.04.02-full\src\ege.h	/^	key_period      = 0xbe,$/;"	e	enum:ege::key_code_e
key_plus	C++\ege-13.04.02-full\src\ege.h	/^	key_plus        = 0xbb,$/;"	e	enum:ege::key_code_e
key_print	C++\ege-13.04.02-full\src\ege.h	/^	key_print       = 0x2a,$/;"	e	enum:ege::key_code_e
key_quote	C++\ege-13.04.02-full\src\ege.h	/^	key_quote       = 0xde,$/;"	e	enum:ege::key_code_e
key_rbrace	C++\ege-13.04.02-full\src\ege.h	/^	key_rbrace      = 0xdd,$/;"	e	enum:ege::key_code_e
key_right	C++\ege-13.04.02-full\src\ege.h	/^	key_right       = 0x27,$/;"	e	enum:ege::key_code_e
key_scrolllock	C++\ege-13.04.02-full\src\ege.h	/^	key_scrolllock  = 0x91,$/;"	e	enum:ege::key_code_e
key_semicolon	C++\ege-13.04.02-full\src\ege.h	/^	key_semicolon   = 0xba,$/;"	e	enum:ege::key_code_e
key_shift	C++\ege-13.04.02-full\src\ege.h	/^	key_shift       = 0x10,$/;"	e	enum:ege::key_code_e
key_shift_l	C++\ege-13.04.02-full\src\ege.h	/^	key_shift_l     = 0xa0,$/;"	e	enum:ege::key_code_e
key_shift_r	C++\ege-13.04.02-full\src\ege.h	/^	key_shift_r     = 0xa1,$/;"	e	enum:ege::key_code_e
key_slash	C++\ege-13.04.02-full\src\ege.h	/^	key_slash       = 0xbf,$/;"	e	enum:ege::key_code_e
key_sleep	C++\ege-13.04.02-full\src\ege.h	/^	key_sleep       = 0x5f,$/;"	e	enum:ege::key_code_e
key_snapshot	C++\ege-13.04.02-full\src\ege.h	/^	key_snapshot    = 0x2c,$/;"	e	enum:ege::key_code_e
key_space	C++\ege-13.04.02-full\src\ege.h	/^	key_space       = 0x20,$/;"	e	enum:ege::key_code_e
key_tab	C++\ege-13.04.02-full\src\ege.h	/^	key_tab         = 0x09,$/;"	e	enum:ege::key_code_e
key_tilde	C++\ege-13.04.02-full\src\ege.h	/^	key_tilde       = 0xc0,$/;"	e	enum:ege::key_code_e
key_up	C++\ege-13.04.02-full\src\ege.h	/^	key_up          = 0x26,$/;"	e	enum:ege::key_code_e
key_win_l	C++\ege-13.04.02-full\src\ege.h	/^	key_win_l       = 0x5b,$/;"	e	enum:ege::key_code_e
key_win_r	C++\ege-13.04.02-full\src\ege.h	/^	key_win_r       = 0x5c,$/;"	e	enum:ege::key_code_e
left	C++\ege-13.04.02-full\src\ege.h	/^	int left;$/;"	m	struct:ege::viewporttype
line_styles	C++\ege-13.04.02-full\src\ege.h	/^enum line_styles {      \/* Line styles for get\/setlinestyle *\/$/;"	g	namespace:ege
linestyle	C++\ege-13.04.02-full\src\ege.h	/^	int linestyle;$/;"	m	struct:ege::linestyletype
linestyletype	C++\ege-13.04.02-full\src\ege.h	/^struct linestyletype {$/;"	s	namespace:ege
m_AlphablendMode	C++\ege-13.04.02-full\src\ege.h	/^	int     m_AlphablendMode;   \/\/ �滭��Ϲ��˷�ʽ$/;"	m	class:ege::egeControlBase
m_DID	C++\ege-13.04.02-full\src\ege.h	/^	DWORD       m_DID;$/;"	m	class:ege::MUSIC
m_allocId	C++\ege-13.04.02-full\src\ege.h	/^	int m_allocId;      \/\/ ����id$/;"	m	class:ege::egeControlBase
m_allocZorder	C++\ege-13.04.02-full\src\ege.h	/^	int m_allocZorder;  \/\/ ����Z����$/;"	m	class:ege::egeControlBase
m_bAutoDraw	C++\ege-13.04.02-full\src\ege.h	/^	int m_bAutoDraw;    \/\/ �Ƿ��Զ��滭��������$/;"	m	class:ege::egeControlBase
m_bCapMouse	C++\ege-13.04.02-full\src\ege.h	/^	int m_bCapMouse;    \/\/ �Ƿ�׽��꣨��ʹ�������������ڣ�$/;"	m	class:ege::egeControlBase
m_bCapture	C++\ege-13.04.02-full\src\ege.h	/^	int m_bCapture;     \/\/ �Ƿ�ɻ�ü������뽹��$/;"	m	class:ege::egeControlBase
m_bDirectDraw	C++\ege-13.04.02-full\src\ege.h	/^	int     m_bDirectDraw;      \/\/ ����ֱ�ӻ滭$/;"	m	class:ege::egeControlBase
m_bEnable	C++\ege-13.04.02-full\src\ege.h	/^	int m_bEnable;      \/\/ �Ƿ�ɻ�����루���̺���꣩$/;"	m	class:ege::egeControlBase
m_bInputFocus	C++\ege-13.04.02-full\src\ege.h	/^	int m_bInputFocus;  \/\/ �Ƿ��Ѿ�������뽹��$/;"	m	class:ege::egeControlBase
m_bVisable	C++\ege-13.04.02-full\src\ege.h	/^	int m_bVisable;     \/\/ �Ƿ�ɼ�$/;"	m	class:ege::egeControlBase
m_childmap	C++\ege-13.04.02-full\src\ege.h	/^	void* m_childmap;       \/\/ �ӿؼ�$/;"	m	class:ege::egeControlBase
m_childzorder	C++\ege-13.04.02-full\src\ege.h	/^	void* m_childzorder;    \/\/ �ӿؼ�����$/;"	m	class:ege::egeControlBase
m_dwCallBack	C++\ege-13.04.02-full\src\ege.h	/^	PVOID       m_dwCallBack;$/;"	m	class:ege::MUSIC
m_h	C++\ege-13.04.02-full\src\ege.h	/^	int m_w, m_h;       \/\/ ����$/;"	m	class:ege::egeControlBase
m_inherit_level	C++\ege-13.04.02-full\src\ege.h	/^		int m_inherit_level;$/;"	m	class:ege::egeControlBase::InitObject
m_inheritlevel	C++\ege-13.04.02-full\src\ege.h	/^	int     m_inheritlevel;     \/\/ �̳в��$/;"	m	class:ege::egeControlBase
m_mainFilter	C++\ege-13.04.02-full\src\ege.h	/^	PIMAGE   m_mainFilter;   \/\/ ������$/;"	m	class:ege::egeControlBase
m_mainbuf	C++\ege-13.04.02-full\src\ege.h	/^	PIMAGE   m_mainbuf;      \/\/ ������$/;"	m	class:ege::egeControlBase
m_parent	C++\ege-13.04.02-full\src\ege.h	/^	egeControlBase* m_parent;$/;"	m	class:ege::egeControlBase
m_preinit_func	C++\ege-13.04.02-full\src\ege.h	/^	void (* m_preinit_func )(egeControlBase*);$/;"	m	class:ege::egeControlBase
m_rop	C++\ege-13.04.02-full\src\ege.h	/^	DWORD   m_rop;              \/\/ ��Ϸ�ʽ$/;"	m	class:ege::egeControlBase
m_target	C++\ege-13.04.02-full\src\ege.h	/^	PIMAGE m_target;$/;"	m	class:ege::PushTarget
m_this	C++\ege-13.04.02-full\src\ege.h	/^		egeControlBase* m_this;$/;"	m	class:ege::egeControlBase::InitObject
m_w	C++\ege-13.04.02-full\src\ege.h	/^	int m_w, m_h;       \/\/ ����$/;"	m	class:ege::egeControlBase
m_x	C++\ege-13.04.02-full\src\ege.h	/^	int m_x, m_y;       \/\/ ���Ͻ�����$/;"	m	class:ege::egeControlBase
m_y	C++\ege-13.04.02-full\src\ege.h	/^	int m_x, m_y;       \/\/ ���Ͻ�����$/;"	m	class:ege::egeControlBase
m_zOrder	C++\ege-13.04.02-full\src\ege.h	/^	int m_zOrder;       \/\/ Z����ֵ�ϴ�����ǰ��ֵ��С�߻ᱻ�����ؼ��ڵ���$/;"	m	class:ege::egeControlBase
m_zOrderLayer	C++\ege-13.04.02-full\src\ege.h	/^	int m_zOrderLayer;  \/\/ Z����㣨ֵ�ϴ�����ǰ��ֵ��С�߻ᱻ�����ؼ��ڵ���$/;"	m	class:ege::egeControlBase
message_event	C++\ege-13.04.02-full\src\ege.h	/^enum message_event {$/;"	g	namespace:ege
message_mouse	C++\ege-13.04.02-full\src\ege.h	/^enum message_mouse {$/;"	g	namespace:ege
mouse_flag_ctrl	C++\ege-13.04.02-full\src\ege.h	/^	mouse_flag_ctrl     = 0x200,$/;"	e	enum:ege::mouse_flag_e
mouse_flag_e	C++\ege-13.04.02-full\src\ege.h	/^typedef enum mouse_flag_e {$/;"	g	namespace:ege
mouse_flag_e	C++\ege-13.04.02-full\src\ege.h	/^}mouse_flag_e;$/;"	t	namespace:ege	typeref:enum:ege::mouse_flag_e
mouse_flag_left	C++\ege-13.04.02-full\src\ege.h	/^	mouse_flag_left     = 1,$/;"	e	enum:ege::mouse_flag_e
mouse_flag_mid	C++\ege-13.04.02-full\src\ege.h	/^	mouse_flag_mid      = 4,$/;"	e	enum:ege::mouse_flag_e
mouse_flag_right	C++\ege-13.04.02-full\src\ege.h	/^	mouse_flag_right    = 2,$/;"	e	enum:ege::mouse_flag_e
mouse_flag_shift	C++\ege-13.04.02-full\src\ege.h	/^	mouse_flag_shift    = 0x100,$/;"	e	enum:ege::mouse_flag_e
mouse_msg	C++\ege-13.04.02-full\src\ege.h	/^typedef struct mouse_msg {$/;"	s	namespace:ege
mouse_msg	C++\ege-13.04.02-full\src\ege.h	/^}mouse_msg;$/;"	t	namespace:ege	typeref:struct:ege::mouse_msg
mouse_msg_down	C++\ege-13.04.02-full\src\ege.h	/^	mouse_msg_down      = 0x10,$/;"	e	enum:ege::mouse_msg_e
mouse_msg_e	C++\ege-13.04.02-full\src\ege.h	/^typedef enum mouse_msg_e {$/;"	g	namespace:ege
mouse_msg_e	C++\ege-13.04.02-full\src\ege.h	/^}mouse_msg_e;$/;"	t	namespace:ege	typeref:enum:ege::mouse_msg_e
mouse_msg_move	C++\ege-13.04.02-full\src\ege.h	/^	mouse_msg_move      = 0x40,$/;"	e	enum:ege::mouse_msg_e
mouse_msg_up	C++\ege-13.04.02-full\src\ege.h	/^	mouse_msg_up        = 0x20,$/;"	e	enum:ege::mouse_msg_e
mouse_msg_wheel	C++\ege-13.04.02-full\src\ege.h	/^	mouse_msg_wheel     = 0x80,$/;"	e	enum:ege::mouse_msg_e
move	C++\ege-13.04.02-full\src\ege.h	/^	void move(int x, int y)         { m_x = x; m_y = y; }$/;"	f	class:ege::egeControlBase
msg	C++\ege-13.04.02-full\src\ege.h	/^	key_msg_e       msg;$/;"	m	struct:ege::key_msg
msg	C++\ege-13.04.02-full\src\ege.h	/^	mouse_msg_e     msg;$/;"	m	struct:ege::mouse_msg
msg_createwindow	C++\ege-13.04.02-full\src\ege.h	/^struct msg_createwindow {$/;"	s	namespace:ege
music_state_flag	C++\ege-13.04.02-full\src\ege.h	/^enum music_state_flag {$/;"	g	namespace:ege
onAddChild	C++\ege-13.04.02-full\src\ege.h	/^	virtual void onAddChild(egeControlBase* pChild) {}$/;"	f	class:ege::egeControlBase
onDelChild	C++\ege-13.04.02-full\src\ege.h	/^	virtual void onDelChild(egeControlBase* pChild) {}$/;"	f	class:ege::egeControlBase
onDraw	C++\ege-13.04.02-full\src\ege.h	/^	virtual void onDraw(PIMAGE pimg) const {}$/;"	f	class:ege::egeControlBase
onGetFocus	C++\ege-13.04.02-full\src\ege.h	/^	virtual int  onGetFocus() { return 0; }$/;"	f	class:ege::egeControlBase
onIdle	C++\ege-13.04.02-full\src\ege.h	/^	virtual void onIdle() {} \/\/ �����ӿڣ�δ��$/;"	f	class:ege::egeControlBase
onKeyChar	C++\ege-13.04.02-full\src\ege.h	/^	virtual int  onKeyChar(int key, int flag) { return 0; }$/;"	f	class:ege::egeControlBase
onKeyDown	C++\ege-13.04.02-full\src\ege.h	/^	virtual int  onKeyDown(int key, int flag) { return 0; }$/;"	f	class:ege::egeControlBase
onKeyUp	C++\ege-13.04.02-full\src\ege.h	/^	virtual int  onKeyUp(int key, int flag) { return 0; }$/;"	f	class:ege::egeControlBase
onLostFocus	C++\ege-13.04.02-full\src\ege.h	/^	virtual void onLostFocus() { }$/;"	f	class:ege::egeControlBase
onMessage	C++\ege-13.04.02-full\src\ege.h	/^	virtual LRESULT onMessage(UINT message, WPARAM wParam, LPARAM lParam) { return 0; }$/;"	f	class:ege::egeControlBase
onMouse	C++\ege-13.04.02-full\src\ege.h	/^	virtual int  onMouse(int x, int y, int flag) { return 0; }$/;"	f	class:ege::egeControlBase
onResetFilter	C++\ege-13.04.02-full\src\ege.h	/^	virtual void onResetFilter() {$/;"	f	class:ege::egeControlBase
onSize	C++\ege-13.04.02-full\src\ege.h	/^	virtual void onSize(int w, int h) {}$/;"	f	class:ege::egeControlBase
onSizing	C++\ege-13.04.02-full\src\ege.h	/^	virtual void onSizing(int *w, int *h) {}$/;"	f	class:ege::egeControlBase
onUpdate	C++\ege-13.04.02-full\src\ege.h	/^	virtual int  onUpdate() { return 0; }$/;"	f	class:ege::egeControlBase
operator <	C++\ege-13.04.02-full\src\ege.h	/^	bool operator < (const egeControlBase& pbase) const {$/;"	f	class:ege::egeControlBase
operator =	C++\ege-13.04.02-full\src\ege.h	/^	VECTOR3D& operator = (const VECTOR3D& _fp)  {$/;"	f	struct:ege::VECTOR3D
operator HWND	C++\ege-13.04.02-full\src\ege.h	/^	operator HWND()const{return (HWND)m_dwCallBack;}$/;"	f	class:ege::MUSIC
param	C++\ege-13.04.02-full\src\ege.h	/^	LPVOID param;$/;"	m	struct:ege::msg_createwindow
parent	C++\ege-13.04.02-full\src\ege.h	/^	const egeControlBase* parent() const { return m_parent; }$/;"	f	class:ege::egeControlBase
parent	C++\ege-13.04.02-full\src\ege.h	/^	egeControlBase* parent() { return m_parent; }$/;"	f	class:ege::egeControlBase
pattern_lineargradient	C++\ege-13.04.02-full\src\ege.h	/^	pattern_lineargradient  = 1,$/;"	e	enum:ege::pattern_type_e
pattern_none	C++\ege-13.04.02-full\src\ege.h	/^	pattern_none            = 0,$/;"	e	enum:ege::pattern_type_e
pattern_pathgradient	C++\ege-13.04.02-full\src\ege.h	/^	pattern_pathgradient    = 2,$/;"	e	enum:ege::pattern_type_e
pattern_texture	C++\ege-13.04.02-full\src\ege.h	/^	pattern_texture         = 3,$/;"	e	enum:ege::pattern_type_e
pattern_type_e	C++\ege-13.04.02-full\src\ege.h	/^typedef enum pattern_type_e {$/;"	g	namespace:ege
pattern_type_e	C++\ege-13.04.02-full\src\ege.h	/^}pattern_type_e;$/;"	t	namespace:ege	typeref:enum:ege::pattern_type_e
rendermode_e	C++\ege-13.04.02-full\src\ege.h	/^enum rendermode_e {$/;"	g	namespace:ege
right	C++\ege-13.04.02-full\src\ege.h	/^	int right;$/;"	m	struct:ege::viewporttype
s_maxchildid	C++\ege-13.04.02-full\src\ege.h	/^	static int s_maxchildid;   \/\/ ��һ���ӿؼ�����IDֵ$/;"	m	class:ege::egeControlBase
setrop	C++\ege-13.04.02-full\src\ege.h	/^	void setrop(int rop) { m_rop = rop; } \/\/ ����ö������ROP���������$/;"	f	class:ege::egeControlBase
size	C++\ege-13.04.02-full\src\ege.h	/^	void size(int w, int h) {$/;"	f	class:ege::egeControlBase
style	C++\ege-13.04.02-full\src\ege.h	/^	DWORD style;$/;"	m	struct:ege::msg_createwindow
text_just	C++\ege-13.04.02-full\src\ege.h	/^enum text_just {        \/* Horizontal and vertical justification$/;"	g	namespace:ege
textsettingstype	C++\ege-13.04.02-full\src\ege.h	/^struct textsettingstype {$/;"	s	namespace:ege
thickness	C++\ege-13.04.02-full\src\ege.h	/^	int thickness;$/;"	m	struct:ege::linestyletype
top	C++\ege-13.04.02-full\src\ege.h	/^	int top;$/;"	m	struct:ege::viewporttype
upattern	C++\ege-13.04.02-full\src\ege.h	/^	unsigned short upattern;$/;"	m	struct:ege::linestyletype
vert	C++\ege-13.04.02-full\src\ege.h	/^	int vert;$/;"	m	struct:ege::textsettingstype
viewporttype	C++\ege-13.04.02-full\src\ege.h	/^struct viewporttype {$/;"	s	namespace:ege
visable	C++\ege-13.04.02-full\src\ege.h	/^	void visable(bool bvisable)     { m_bVisable = (bvisable ? 1 : 0); }$/;"	f	class:ege::egeControlBase
w	C++\ege-13.04.02-full\src\ege.h	/^	float w;$/;"	m	struct:ege::ege_rect
wheel	C++\ege-13.04.02-full\src\ege.h	/^	int             wheel;$/;"	m	struct:ege::mouse_msg
width	C++\ege-13.04.02-full\src\ege.h	/^	int width()     const { return m_w; }$/;"	f	class:ege::egeControlBase
x	C++\ege-13.04.02-full\src\ege.h	/^	float   x;$/;"	m	struct:ege::ege_colpoint
x	C++\ege-13.04.02-full\src\ege.h	/^	float x, y, z;$/;"	m	struct:ege::VECTOR3D
x	C++\ege-13.04.02-full\src\ege.h	/^	float x;$/;"	m	struct:ege::ege_point
x	C++\ege-13.04.02-full\src\ege.h	/^	float x;$/;"	m	struct:ege::ege_rect
x	C++\ege-13.04.02-full\src\ege.h	/^	int             x;$/;"	m	struct:ege::mouse_msg
y	C++\ege-13.04.02-full\src\ege.h	/^	float   y;$/;"	m	struct:ege::ege_colpoint
y	C++\ege-13.04.02-full\src\ege.h	/^	float x, y, z;$/;"	m	struct:ege::VECTOR3D
y	C++\ege-13.04.02-full\src\ege.h	/^	float y;$/;"	m	struct:ege::ege_point
y	C++\ege-13.04.02-full\src\ege.h	/^	float y;$/;"	m	struct:ege::ege_rect
y	C++\ege-13.04.02-full\src\ege.h	/^	int             y;$/;"	m	struct:ege::mouse_msg
z	C++\ege-13.04.02-full\src\ege.h	/^	float x, y, z;$/;"	m	struct:ege::VECTOR3D
~PushTarget	C++\ege-13.04.02-full\src\ege.h	/^	~PushTarget() { settarget(m_target); }$/;"	f	class:ege::PushTarget
CTL_PREINIT	C++\ege-13.04.02-full\src\ege\button.h	/^        CTL_PREINIT(button, egeControlBase) {$/;"	f	class:button
CTL_PREINITEND	C++\ege-13.04.02-full\src\ege\button.h	/^        } CTL_PREINITEND;$/;"	m	class:button
_EGE_BUTTON_H_	C++\ege-13.04.02-full\src\ege\button.h	8;"	d
_alpha	C++\ege-13.04.02-full\src\ege\button.h	/^        int _alpha;$/;"	m	class:button
_bg_color	C++\ege-13.04.02-full\src\ege\button.h	/^        COLORREF _bg_color;$/;"	m	class:button
_caption	C++\ege-13.04.02-full\src\ege\button.h	/^        char _caption[1024];$/;"	m	class:button
_face	C++\ege-13.04.02-full\src\ege\button.h	/^        char _face[32];$/;"	m	class:button
_font_height	C++\ege-13.04.02-full\src\ege\button.h	/^        int _font_height;$/;"	m	class:button
_line_color	C++\ege-13.04.02-full\src\ege\button.h	/^        COLORREF _line_color;$/;"	m	class:button
_logger	C++\ege-13.04.02-full\src\ege\button.h	/^        label* _logger;$/;"	m	class:button
_on_click	C++\ege-13.04.02-full\src\ege\button.h	/^        int (*_on_click)(void*);$/;"	m	class:button
_pushed	C++\ege-13.04.02-full\src\ege\button.h	/^        bool _pushed;$/;"	m	class:button
_shadow_color	C++\ege-13.04.02-full\src\ege\button.h	/^        COLORREF _shadow_color;$/;"	m	class:button
_side_width	C++\ege-13.04.02-full\src\ege\button.h	/^        int _side_width;$/;"	m	class:button
_text_color	C++\ege-13.04.02-full\src\ege\button.h	/^        COLORREF _text_color;$/;"	m	class:button
alpha	C++\ege-13.04.02-full\src\ege\button.h	/^        int alpha() const{$/;"	f	class:button
alpha	C++\ege-13.04.02-full\src\ege\button.h	/^        void alpha(int alpha){$/;"	f	class:button
bgcolor	C++\ege-13.04.02-full\src\ege\button.h	/^        COLORREF bgcolor() const{$/;"	f	class:button
bgcolor	C++\ege-13.04.02-full\src\ege\button.h	/^        void bgcolor(COLORREF color){$/;"	f	class:button
button	C++\ege-13.04.02-full\src\ege\button.h	/^        button(CTL_DEFPARAM) : CTL_INITBASE(egeControlBase) {$/;"	f	class:button
button	C++\ege-13.04.02-full\src\ege\button.h	/^class button : public egeControlBase$/;"	c
callback	C++\ege-13.04.02-full\src\ege\button.h	/^            T callback() const{$/;"	f	class:button
callback	C++\ege-13.04.02-full\src\ege\button.h	/^        void callback(int (*fun)(void*),void* param){$/;"	f	class:button
callback_param	C++\ege-13.04.02-full\src\ege\button.h	/^        void* callback_param;$/;"	m	class:button
caption	C++\ege-13.04.02-full\src\ege\button.h	/^        const char* caption() const{$/;"	f	class:button
caption	C++\ege-13.04.02-full\src\ege\button.h	/^        void caption(const char* text) {$/;"	f	class:button
font	C++\ege-13.04.02-full\src\ege\button.h	/^        const char* font() const{$/;"	f	class:button
font	C++\ege-13.04.02-full\src\ege\button.h	/^        void font(const char* fontface) {$/;"	f	class:button
fontsize	C++\ege-13.04.02-full\src\ege\button.h	/^        int fontsize() const{$/;"	f	class:button
fontsize	C++\ege-13.04.02-full\src\ege\button.h	/^        void fontsize(int height) {$/;"	f	class:button
linecolor	C++\ege-13.04.02-full\src\ege\button.h	/^        COLORREF linecolor() const{$/;"	f	class:button
linecolor	C++\ege-13.04.02-full\src\ege\button.h	/^        void linecolor(COLORREF color){$/;"	f	class:button
logger	C++\ege-13.04.02-full\src\ege\button.h	/^        label* logger() const{$/;"	f	class:button
logger	C++\ege-13.04.02-full\src\ege\button.h	/^        void logger(label* logger){$/;"	f	class:button
logout	C++\ege-13.04.02-full\src\ege\button.h	/^        void logout(const char* msg){$/;"	f	class:button
logout	C++\ege-13.04.02-full\src\ege\button.h	19;"	d
onClick	C++\ege-13.04.02-full\src\ege\button.h	/^        virtual void onClick(){$/;"	f	class:button
onDraw	C++\ege-13.04.02-full\src\ege\button.h	/^        virtual void onDraw(PIMAGE pimg) const {$/;"	f	class:button
onGetFocus	C++\ege-13.04.02-full\src\ege\button.h	/^        virtual int  onGetFocus() {$/;"	f	class:button
onKeyDown	C++\ege-13.04.02-full\src\ege\button.h	/^        virtual int  onKeyDown(int key, int flag) {$/;"	f	class:button
onKeyUp	C++\ege-13.04.02-full\src\ege\button.h	/^        virtual int  onKeyUp(int key, int flag) {$/;"	f	class:button
onLostFocus	C++\ege-13.04.02-full\src\ege\button.h	/^        virtual void onLostFocus() {$/;"	f	class:button
onMouse	C++\ege-13.04.02-full\src\ege\button.h	/^        virtual int onMouse(int x, int y, int flag) {$/;"	f	class:button
onResetFilter	C++\ege-13.04.02-full\src\ege\button.h	/^        virtual void onResetFilter() {$/;"	f	class:button
onSize	C++\ege-13.04.02-full\src\ege\button.h	/^        virtual void onSize(int w, int h) {$/;"	f	class:button
onSizing	C++\ege-13.04.02-full\src\ege\button.h	/^        virtual void onSizing(int *w, int *h) {$/;"	f	class:button
onUpdate	C++\ege-13.04.02-full\src\ege\button.h	/^        virtual int  onUpdate() { $/;"	f	class:button
redraw	C++\ege-13.04.02-full\src\ege\button.h	/^        virtual void redraw() const {$/;"	f	class:button
shadowcolor	C++\ege-13.04.02-full\src\ege\button.h	/^        COLORREF shadowcolor() const{$/;"	f	class:button
shadowcolor	C++\ege-13.04.02-full\src\ege\button.h	/^        void shadowcolor(COLORREF color){$/;"	f	class:button
textcolor	C++\ege-13.04.02-full\src\ege\button.h	/^        COLORREF textcolor() const{$/;"	f	class:button
textcolor	C++\ege-13.04.02-full\src\ege\button.h	/^        void textcolor(COLORREF color){$/;"	f	class:button
updatesidewidth	C++\ege-13.04.02-full\src\ege\button.h	/^        void updatesidewidth(){$/;"	f	class:button
CTL_PREINIT	C++\ege-13.04.02-full\src\ege\fps.h	/^    CTL_PREINIT(fps, egeControlBase) {$/;"	f	class:ege::fps
CTL_PREINITEND	C++\ege-13.04.02-full\src\ege\fps.h	/^    } CTL_PREINITEND;$/;"	m	class:ege::fps
_EGE_FPS_H_	C++\ege-13.04.02-full\src\ege\fps.h	2;"	d
ege	C++\ege-13.04.02-full\src\ege\fps.h	/^namespace ege {$/;"	n
fps	C++\ege-13.04.02-full\src\ege\fps.h	/^    fps(CTL_DEFPARAM) : CTL_INITBASE(egeControlBase) {$/;"	f	class:ege::fps
fps	C++\ege-13.04.02-full\src\ege\fps.h	/^class fps : public egeControlBase$/;"	c	namespace:ege
onDraw	C++\ege-13.04.02-full\src\ege\fps.h	/^    void onDraw(PIMAGE pimg) const {$/;"	f	class:ege::fps
CTL_PREINIT	C++\ege-13.04.02-full\src\ege\label.h	/^    CTL_PREINIT(label, egeControlBase) {$/;"	f	class:label
CTL_PREINITEND	C++\ege-13.04.02-full\src\ege\label.h	/^    } CTL_PREINITEND;$/;"	m	class:label
_EGE_LABEL_H_	C++\ege-13.04.02-full\src\ege\label.h	2;"	d
alpha	C++\ege-13.04.02-full\src\ege\label.h	/^    int alpha() const {$/;"	f	class:label
alpha	C++\ege-13.04.02-full\src\ege\label.h	/^    void alpha(int alpha) {$/;"	f	class:label
bkcolor	C++\ege-13.04.02-full\src\ege\label.h	/^    color_t bkcolor() const {$/;"	f	class:label
bkcolor	C++\ege-13.04.02-full\src\ege\label.h	/^    void bkcolor(color_t color) {$/;"	f	class:label
caption	C++\ege-13.04.02-full\src\ege\label.h	/^    const char* caption() const {$/;"	f	class:label
caption	C++\ege-13.04.02-full\src\ege\label.h	/^    void caption(const char* text) {$/;"	f	class:label
color	C++\ege-13.04.02-full\src\ege\label.h	/^    color_t color() const {$/;"	f	class:label
color	C++\ege-13.04.02-full\src\ege\label.h	/^    void color(color_t color) {$/;"	f	class:label
font	C++\ege-13.04.02-full\src\ege\label.h	/^    const char* font() const {$/;"	f	class:label
font	C++\ege-13.04.02-full\src\ege\label.h	/^    void font(const char* fontface) {$/;"	f	class:label
fontsize	C++\ege-13.04.02-full\src\ege\label.h	/^    int fontsize() const {$/;"	f	class:label
fontsize	C++\ege-13.04.02-full\src\ege\label.h	/^    void fontsize(int height) {$/;"	f	class:label
label	C++\ege-13.04.02-full\src\ege\label.h	/^    label(CTL_DEFPARAM) : CTL_INITBASE(egeControlBase) {$/;"	f	class:label
label	C++\ege-13.04.02-full\src\ege\label.h	/^class label : public egeControlBase$/;"	c
m_alpha	C++\ege-13.04.02-full\src\ege\label.h	/^    int m_alpha;$/;"	m	class:label
m_bkcolor	C++\ege-13.04.02-full\src\ege\label.h	/^    color_t m_bkcolor;$/;"	m	class:label
m_caption	C++\ege-13.04.02-full\src\ege\label.h	/^    char m_caption[1024];$/;"	m	class:label
m_color	C++\ege-13.04.02-full\src\ege\label.h	/^    color_t m_color;$/;"	m	class:label
m_face	C++\ege-13.04.02-full\src\ege\label.h	/^    char m_face[32];$/;"	m	class:label
m_fontheight	C++\ege-13.04.02-full\src\ege\label.h	/^    int m_fontheight;$/;"	m	class:label
m_transparent	C++\ege-13.04.02-full\src\ege\label.h	/^    bool m_transparent;$/;"	m	class:label
redraw	C++\ege-13.04.02-full\src\ege\label.h	/^    void redraw() {$/;"	f	class:label
transparent	C++\ege-13.04.02-full\src\ege\label.h	/^    bool transparent() const {$/;"	f	class:label
transparent	C++\ege-13.04.02-full\src\ege\label.h	/^    void transparent(bool t) {$/;"	f	class:label
CTL_PREINIT	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    CTL_PREINIT(sys_edit, egeControlBase) {$/;"	f	class:ege::sys_edit
CTL_PREINITEND	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    } CTL_PREINITEND;$/;"	m	class:ege::sys_edit
_EGE_SYS_EDIT_H_	C++\ege-13.04.02-full\src\ege\sys_edit.h	2;"	d
create	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    int create(bool multiline = false, int scrollbar = 2) {$/;"	f	class:ege::sys_edit
destory	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    int destory() {$/;"	f	class:ege::sys_edit
ege	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^namespace ege {$/;"	n
gettext	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    void gettext(int maxlen, LPSTR text) {$/;"	f	class:ege::sys_edit
gettext	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    void gettext(int maxlen, LPWSTR text) {$/;"	f	class:ege::sys_edit
m_bgcolor	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    color_t     m_bgcolor;$/;"	m	class:ege::sys_edit
m_callback	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    LONG_PTR    m_callback;$/;"	m	class:ege::sys_edit
m_color	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    color_t     m_color;$/;"	m	class:ege::sys_edit
m_hBrush	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    HBRUSH      m_hBrush;$/;"	m	class:ege::sys_edit
m_hFont	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    HFONT       m_hFont;$/;"	m	class:ege::sys_edit
m_hwnd	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    HWND        m_hwnd;$/;"	m	class:ege::sys_edit
move	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    void move(int x, int y) {$/;"	f	class:ege::sys_edit
onMessage	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    LRESULT onMessage(UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	class:ege::sys_edit
setbgcolor	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    void setbgcolor(color_t bgcolor) {$/;"	f	class:ege::sys_edit
setcolor	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    void setcolor(color_t color) {$/;"	f	class:ege::sys_edit
setfocus	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    void setfocus() {$/;"	f	class:ege::sys_edit
setfont	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    void setfont(int h, int w, LPCSTR fontface) {$/;"	f	class:ege::sys_edit
setfont	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    void setfont(int h, int w, LPCWSTR fontface) {$/;"	f	class:ege::sys_edit
setmaxlen	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    void setmaxlen(int maxlen) {$/;"	f	class:ege::sys_edit
setreadonly	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    void setreadonly(bool readonly) {$/;"	f	class:ege::sys_edit
settext	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    void settext(LPCSTR text) {$/;"	f	class:ege::sys_edit
settext	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    void settext(LPCWSTR text) {$/;"	f	class:ege::sys_edit
size	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    void size(int w, int h) {$/;"	f	class:ege::sys_edit
sys_edit	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    sys_edit(CTL_DEFPARAM) : CTL_INITBASE(egeControlBase) {$/;"	f	class:ege::sys_edit
sys_edit	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^class sys_edit : public egeControlBase$/;"	c	namespace:ege
visable	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    void visable(bool bvisable) {$/;"	f	class:ege::sys_edit
~sys_edit	C++\ege-13.04.02-full\src\ege\sys_edit.h	/^    ~sys_edit() {$/;"	f	class:ege::sys_edit
Array	C++\ege-13.04.02-full\src\ege_common.h	/^	Array() {$/;"	f	class:ege::Array
Array	C++\ege-13.04.02-full\src\ege_common.h	/^	Array(const Array& arr) {$/;"	f	class:ege::Array
Array	C++\ege-13.04.02-full\src\ege_common.h	/^class Array$/;"	c	namespace:ege
Set	C++\ege-13.04.02-full\src\ege_common.h	/^	Set() : m_set() {$/;"	f	class:ege::Set
Set	C++\ege-13.04.02-full\src\ege_common.h	/^class Set$/;"	c	namespace:ege
_it	C++\ege-13.04.02-full\src\ege_common.h	/^		iterator _it;$/;"	m	class:ege::Array::reverse_iterator
_it	C++\ege-13.04.02-full\src\ege_common.h	/^		sbt_int_t _it;$/;"	m	class:ege::Set::iterator
_t	C++\ege-13.04.02-full\src\ege_common.h	/^		SBT<T>* _t;$/;"	m	class:ege::Set::iterator
back	C++\ege-13.04.02-full\src\ege_common.h	/^	back() {$/;"	f	class:ege::Array
begin	C++\ege-13.04.02-full\src\ege_common.h	/^	begin() {$/;"	f	class:ege::Array
begin	C++\ege-13.04.02-full\src\ege_common.h	/^	begin() {$/;"	f	class:ege::Set
ege	C++\ege-13.04.02-full\src\ege_common.h	/^namespace ege {$/;"	n
end	C++\ege-13.04.02-full\src\ege_common.h	/^	end() {$/;"	f	class:ege::Array
end	C++\ege-13.04.02-full\src\ege_common.h	/^	end() {$/;"	f	class:ege::Set
erase	C++\ege-13.04.02-full\src\ege_common.h	/^		erase() {$/;"	f	class:ege::Set::iterator
erase	C++\ege-13.04.02-full\src\ege_common.h	/^	erase ( iterator position ) {$/;"	f	class:ege::Array
erase	C++\ege-13.04.02-full\src\ege_common.h	/^	erase(const T& obj) {$/;"	f	class:ege::Set
erase	C++\ege-13.04.02-full\src\ege_common.h	/^	erase(iterator it) {$/;"	f	class:ege::Set
erase	C++\ege-13.04.02-full\src\ege_common.h	/^	erase(reverse_iterator it) {$/;"	f	class:ege::Set
find	C++\ege-13.04.02-full\src\ege_common.h	/^	find(const T& obj) {$/;"	f	class:ege::Set
front	C++\ege-13.04.02-full\src\ege_common.h	/^	front() {$/;"	f	class:ege::Array
index	C++\ege-13.04.02-full\src\ege_common.h	/^		index() const {$/;"	f	class:ege::Set::iterator
insert	C++\ege-13.04.02-full\src\ege_common.h	/^	insert ( iterator position, const T& val ) {$/;"	f	class:ege::Array
insert	C++\ege-13.04.02-full\src\ege_common.h	/^	insert(const T& obj) {$/;"	f	class:ege::Set
iterator	C++\ege-13.04.02-full\src\ege_common.h	/^		iterator(SBT<T>& t, sbt_int_t it) {$/;"	f	class:ege::Set::iterator
iterator	C++\ege-13.04.02-full\src\ege_common.h	/^	class iterator {$/;"	c	class:ege::Set
iterator	C++\ege-13.04.02-full\src\ege_common.h	/^	typedef T *iterator;$/;"	t	class:ege::Array
m_arr	C++\ege-13.04.02-full\src\ege_common.h	/^	T* m_arr;$/;"	m	class:ege::Array
m_capacity	C++\ege-13.04.02-full\src\ege_common.h	/^	size_t m_capacity;$/;"	m	class:ege::Array
m_set	C++\ege-13.04.02-full\src\ege_common.h	/^	SBT<T> m_set;$/;"	m	class:ege::Set
m_size	C++\ege-13.04.02-full\src\ege_common.h	/^	size_t m_size;$/;"	m	class:ege::Array
nth	C++\ege-13.04.02-full\src\ege_common.h	/^	nth(sbt_int_t n) {$/;"	f	class:ege::Set
operator !=	C++\ege-13.04.02-full\src\ege_common.h	/^		operator != (const iterator &it) {$/;"	f	class:ege::Set::iterator
operator !=	C++\ege-13.04.02-full\src\ege_common.h	/^		operator != (const reverse_iterator &rit) {$/;"	f	class:ege::Array::reverse_iterator
operator !=	C++\ege-13.04.02-full\src\ege_common.h	/^		operator != (const reverse_iterator &rit) {$/;"	f	class:ege::Set::reverse_iterator
operator *	C++\ege-13.04.02-full\src\ege_common.h	/^		operator* () {$/;"	f	class:ege::Array::reverse_iterator
operator *	C++\ege-13.04.02-full\src\ege_common.h	/^		operator* () {$/;"	f	class:ege::Set::iterator
operator +	C++\ege-13.04.02-full\src\ege_common.h	/^		operator + (sbt_int_t i) {$/;"	f	class:ege::Set::iterator
operator +	C++\ege-13.04.02-full\src\ege_common.h	/^		operator + (sbt_int_t i) {$/;"	f	class:ege::Set::reverse_iterator
operator ++	C++\ege-13.04.02-full\src\ege_common.h	/^		operator ++ () {$/;"	f	class:ege::Array::reverse_iterator
operator ++	C++\ege-13.04.02-full\src\ege_common.h	/^		operator ++ () {$/;"	f	class:ege::Set::iterator
operator ++	C++\ege-13.04.02-full\src\ege_common.h	/^		operator ++ () {$/;"	f	class:ege::Set::reverse_iterator
operator -	C++\ege-13.04.02-full\src\ege_common.h	/^		operator - (sbt_int_t i) {$/;"	f	class:ege::Set::iterator
operator -	C++\ege-13.04.02-full\src\ege_common.h	/^		operator - (sbt_int_t i) {$/;"	f	class:ege::Set::reverse_iterator
operator --	C++\ege-13.04.02-full\src\ege_common.h	/^		operator -- () {$/;"	f	class:ege::Array::reverse_iterator
operator --	C++\ege-13.04.02-full\src\ege_common.h	/^		operator -- () {$/;"	f	class:ege::Set::iterator
operator --	C++\ege-13.04.02-full\src\ege_common.h	/^		operator -- () {$/;"	f	class:ege::Set::reverse_iterator
operator ==	C++\ege-13.04.02-full\src\ege_common.h	/^		operator == (const iterator &it) {$/;"	f	class:ege::Set::iterator
operator ==	C++\ege-13.04.02-full\src\ege_common.h	/^		operator == (const reverse_iterator &rit) {$/;"	f	class:ege::Array::reverse_iterator
operator ==	C++\ege-13.04.02-full\src\ege_common.h	/^		operator == (const reverse_iterator &rit) {$/;"	f	class:ege::Set::reverse_iterator
pop_back	C++\ege-13.04.02-full\src\ege_common.h	/^	pop_back() {$/;"	f	class:ege::Array
push_back	C++\ege-13.04.02-full\src\ege_common.h	/^	push_back(const T& obj) {$/;"	f	class:ege::Array
rbegin	C++\ege-13.04.02-full\src\ege_common.h	/^	rbegin() {$/;"	f	class:ege::Array
rbegin	C++\ege-13.04.02-full\src\ege_common.h	/^	rbegin() {$/;"	f	class:ege::Set
rend	C++\ege-13.04.02-full\src\ege_common.h	/^	rend() {$/;"	f	class:ege::Array
rend	C++\ege-13.04.02-full\src\ege_common.h	/^	rend() {$/;"	f	class:ege::Set
resize	C++\ege-13.04.02-full\src\ege_common.h	/^	resize(size_t sz, T c = T()) {$/;"	f	class:ege::Array
reverse_iterator	C++\ege-13.04.02-full\src\ege_common.h	/^		reverse_iterator(SBT<T>& t, sbt_int_t it) : iterator(t, it) {$/;"	f	class:ege::Set::reverse_iterator
reverse_iterator	C++\ege-13.04.02-full\src\ege_common.h	/^		reverse_iterator(const reverse_iterator &rit) {$/;"	f	class:ege::Array::reverse_iterator
reverse_iterator	C++\ege-13.04.02-full\src\ege_common.h	/^		reverse_iterator(iterator it) {$/;"	f	class:ege::Array::reverse_iterator
reverse_iterator	C++\ege-13.04.02-full\src\ege_common.h	/^	class reverse_iterator : public iterator {$/;"	c	class:ege::Set
reverse_iterator	C++\ege-13.04.02-full\src\ege_common.h	/^	class reverse_iterator {$/;"	c	class:ege::Array
size	C++\ege-13.04.02-full\src\ege_common.h	/^	size() const {$/;"	f	class:ege::Array
size	C++\ege-13.04.02-full\src\ege_common.h	/^	size() const {$/;"	f	class:ege::Set
~Array	C++\ege-13.04.02-full\src\ege_common.h	/^	~Array() {$/;"	f	class:ege::Array
~Set	C++\ege-13.04.02-full\src\ege_common.h	/^	~Set() {$/;"	f	class:ege::Set
ASSERT_TRUE	C++\ege-13.04.02-full\src\ege_head.h	33;"	d
ASSERT_TRUE	C++\ege-13.04.02-full\src\ege_head.h	35;"	d
BITMAP_PAGE_SIZE	C++\ege-13.04.02-full\src\ege_head.h	54;"	d
CONVERT_IMAGE	C++\ege-13.04.02-full\src\ege_head.h	77;"	d
CONVERT_IMAGE_CONST	C++\ege-13.04.02-full\src\ege_head.h	83;"	d
CONVERT_IMAGE_END	C++\ege-13.04.02-full\src\ege_head.h	93;"	d
CONVERT_IMAGE_F	C++\ege-13.04.02-full\src\ege_head.h	89;"	d
CONVERT_IMAGE_F_CONST	C++\ege-13.04.02-full\src\ege_head.h	91;"	d
DEFAULT_CHARSET	C++\ege-13.04.02-full\src\ege_head.h	96;"	d
DWORD_PTR	C++\ege-13.04.02-full\src\ege_head.h	/^typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;$/;"	t
EGEMSG	C++\ege-13.04.02-full\src\ege_head.h	/^struct EGEMSG {$/;"	s	namespace:ege
EGE_GDIPLUS	C++\ege-13.04.02-full\src\ege_head.h	39;"	d
ERROR_SUCCESS	C++\ege-13.04.02-full\src\ege_head.h	27;"	d
FLOAT_EPS	C++\ege-13.04.02-full\src\ege_head.h	59;"	d
FORCE_UPDATE	C++\ege-13.04.02-full\src\ege_head.h	/^	FORCE_UPDATE = true,$/;"	e	enum:ege::dealmessage_update
GRADIENT_FILL_OP_FLAG	C++\ege-13.04.02-full\src\ege_head.h	137;"	d
GRADIENT_FILL_RECT_H	C++\ege-13.04.02-full\src\ege_head.h	134;"	d
GRADIENT_FILL_RECT_V	C++\ege-13.04.02-full\src\ege_head.h	135;"	d
GRADIENT_FILL_TRIANGLE	C++\ege-13.04.02-full\src\ege_head.h	136;"	d
IFATODOB	C++\ege-13.04.02-full\src\ege_head.h	74;"	d
IFNATODOB	C++\ege-13.04.02-full\src\ege_head.h	75;"	d
IMAGE	C++\ege-13.04.02-full\src\ege_head.h	/^class IMAGE$/;"	c	namespace:ege
IMAGE_INIT_FLAG	C++\ege-13.04.02-full\src\ege_head.h	57;"	d
LONG_PTR	C++\ege-13.04.02-full\src\ege_head.h	/^typedef _W64 long LONG_PTR, *PLONG_PTR;$/;"	t
LONG_PTR	C++\ege-13.04.02-full\src\ege_head.h	/^typedef __int64 LONG_PTR, *PLONG_PTR;$/;"	t
MAX_KEY_VCODE	C++\ege-13.04.02-full\src\ege_head.h	58;"	d
NORMAL_UPDATE	C++\ege-13.04.02-full\src\ege_head.h	/^	NORMAL_UPDATE = false,$/;"	e	enum:ege::dealmessage_update
PDWORD_PTR	C++\ege-13.04.02-full\src\ege_head.h	/^typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;$/;"	t
PLONG_PTR	C++\ege-13.04.02-full\src\ege_head.h	/^typedef _W64 long LONG_PTR, *PLONG_PTR;$/;"	t
PLONG_PTR	C++\ege-13.04.02-full\src\ege_head.h	/^typedef __int64 LONG_PTR, *PLONG_PTR;$/;"	t
POINTER_SIZE	C++\ege-13.04.02-full\src\ege_head.h	/^typedef intptr_t POINTER_SIZE;$/;"	t
POINTER_SIZE	C++\ege-13.04.02-full\src\ege_head.h	/^typedef long POINTER_SIZE;$/;"	t
PULONG_PTR	C++\ege-13.04.02-full\src\ege_head.h	/^typedef _W64 unsigned long ULONG_PTR, *PULONG_PTR;$/;"	t
PULONG_PTR	C++\ege-13.04.02-full\src\ege_head.h	/^typedef unsigned __int64 ULONG_PTR, *PULONG_PTR;$/;"	t
QUEUE_LEN	C++\ege-13.04.02-full\src\ege_head.h	53;"	d
RENDER_TIMER_ID	C++\ege-13.04.02-full\src\ege_head.h	56;"	d
SWAP	C++\ege-13.04.02-full\src\ege_head.h	63;"	d
ULONG_PTR	C++\ege-13.04.02-full\src\ege_head.h	/^typedef _W64 unsigned long ULONG_PTR, *PULONG_PTR;$/;"	t
ULONG_PTR	C++\ege-13.04.02-full\src\ege_head.h	/^typedef unsigned __int64 ULONG_PTR, *PULONG_PTR;$/;"	t
UPDATE_MAX_CALL	C++\ege-13.04.02-full\src\ege_head.h	55;"	d
_ALLOW_ITERATOR_DEBUG_LEVEL_MISMATCH	C++\ege-13.04.02-full\src\ege_head.h	12;"	d
_ALLOW_RUNTIME_LIBRARY_MISMATCH	C++\ege-13.04.02-full\src\ege_head.h	15;"	d
_EGE_HEAD_H_	C++\ege-13.04.02-full\src\ege_head.h	9;"	d
_GRAPH_LIB_BUILD_	C++\ege-13.04.02-full\src\ege_head.h	22;"	d
_W64	C++\ege-13.04.02-full\src\ege_head.h	101;"	d
_W64	C++\ege-13.04.02-full\src\ege_head.h	103;"	d
__int3264	C++\ege-13.04.02-full\src\ege_head.h	112;"	d
__int3264	C++\ege-13.04.02-full\src\ege_head.h	118;"	d
_aspectratio	C++\ege-13.04.02-full\src\ege_head.h	/^	struct _aspectratio {$/;"	s	struct:ege::_graph_setting
_graph	C++\ege-13.04.02-full\src\ege_head.h	/^	struct _graph {$/;"	s	struct:ege::_graph_setting
_graph_setting	C++\ege-13.04.02-full\src\ege_head.h	/^struct _graph_setting {$/;"	s	namespace:ege
active_page	C++\ege-13.04.02-full\src\ege_head.h	/^	int     active_page;$/;"	m	struct:ege::_graph_setting
aspectratio	C++\ege-13.04.02-full\src\ege_head.h	/^	}aspectratio;$/;"	m	struct:ege::_graph_setting	typeref:struct:ege::_graph_setting::_aspectratio
base_h	C++\ege-13.04.02-full\src\ege_head.h	/^	int base_x, base_y, base_w, base_h;$/;"	m	struct:ege::_graph_setting
base_w	C++\ege-13.04.02-full\src\ege_head.h	/^	int base_x, base_y, base_w, base_h;$/;"	m	struct:ege::_graph_setting
base_x	C++\ege-13.04.02-full\src\ege_head.h	/^	int base_x, base_y, base_w, base_h;$/;"	m	struct:ege::_graph_setting
base_y	C++\ege-13.04.02-full\src\ege_head.h	/^	int base_x, base_y, base_w, base_h;$/;"	m	struct:ege::_graph_setting
callback_close	C++\ege-13.04.02-full\src\ege_head.h	/^	LPCALLBACK_PROC callback_close;$/;"	m	struct:ege::_graph_setting
callback_key	C++\ege-13.04.02-full\src\ege_head.h	/^	LPMSG_KEY_PROC callback_key;$/;"	m	struct:ege::_graph_setting
callback_key_param	C++\ege-13.04.02-full\src\ege_head.h	/^	void* callback_key_param;$/;"	m	struct:ege::_graph_setting
callback_mouse	C++\ege-13.04.02-full\src\ege_head.h	/^	LPMSG_MOUSE_PROC callback_mouse;$/;"	m	struct:ege::_graph_setting
callback_mouse_param	C++\ege-13.04.02-full\src\ege_head.h	/^	void* callback_mouse_param;$/;"	m	struct:ege::_graph_setting
close_manually	C++\ege-13.04.02-full\src\ege_head.h	/^	bool    close_manually;$/;"	m	struct:ege::_graph_setting
count_ptr	C++\ege-13.04.02-full\src\ege_head.h	/^	count_ptr( const count_ptr<T>& count_ptr_ ) {$/;"	f	struct:ege::count_ptr
count_ptr	C++\ege-13.04.02-full\src\ege_head.h	/^	explicit count_ptr( T* p ) {$/;"	f	struct:ege::count_ptr
count_ptr	C++\ege-13.04.02-full\src\ege_head.h	/^struct count_ptr {$/;"	s	namespace:ege
dc	C++\ege-13.04.02-full\src\ege_head.h	/^	HDC dc;$/;"	m	struct:ege::_graph_setting
dc_h	C++\ege-13.04.02-full\src\ege_head.h	/^	int dc_w, dc_h;$/;"	m	struct:ege::_graph_setting
dc_w	C++\ege-13.04.02-full\src\ege_head.h	/^	int dc_w, dc_h;$/;"	m	struct:ege::_graph_setting
dealmessage_update	C++\ege-13.04.02-full\src\ege_head.h	/^enum dealmessage_update {$/;"	g	namespace:ege
delay_fps_dwLast	C++\ege-13.04.02-full\src\ege_head.h	/^	double delay_fps_dwLast;$/;"	m	struct:ege::_graph_setting
delay_ms_dwLast	C++\ege-13.04.02-full\src\ege_head.h	/^	double delay_ms_dwLast;$/;"	m	struct:ege::_graph_setting
ege	C++\ege-13.04.02-full\src\ege_head.h	/^namespace ege {$/;"	n
egectrl_focus	C++\ege-13.04.02-full\src\ege_head.h	/^	egeControlBase* egectrl_focus;$/;"	m	struct:ege::_graph_setting
egectrl_root	C++\ege-13.04.02-full\src\ege_head.h	/^	egeControlBase* egectrl_root;$/;"	m	struct:ege::_graph_setting
exit_flag	C++\ege-13.04.02-full\src\ege_head.h	/^	int     exit_flag;$/;"	m	struct:ege::_graph_setting
exit_window	C++\ege-13.04.02-full\src\ege_head.h	/^	int     exit_window;$/;"	m	struct:ege::_graph_setting
fclock_start	C++\ege-13.04.02-full\src\ege_head.h	/^	DWORD         fclock_start;$/;"	m	struct:ege::_graph_setting
flag	C++\ege-13.04.02-full\src\ege_head.h	/^	UINT        flag;$/;"	m	struct:ege::EGEMSG
g_gdiplusToken	C++\ege-13.04.02-full\src\ege_head.h	/^	ULONG_PTR g_gdiplusToken;$/;"	m	struct:ege::_graph_setting
g_t_buff	C++\ege-13.04.02-full\src\ege_head.h	/^	DWORD g_t_buff[1024 * 8];$/;"	m	struct:ege::_graph_setting
get_highfeq_time_start	C++\ege-13.04.02-full\src\ege_head.h	/^	LARGE_INTEGER get_highfeq_time_start;$/;"	m	struct:ege::_graph_setting
getbuffer	C++\ege-13.04.02-full\src\ege_head.h	/^	color_t* getbuffer() const {return (color_t*)m_pBuffer;}$/;"	f	class:ege::IMAGE
getch_last_key	C++\ege-13.04.02-full\src\ege_head.h	/^	int getch_last_key;$/;"	m	struct:ege::_graph_setting
getdc	C++\ege-13.04.02-full\src\ege_head.h	/^	HDC getdc()        const {return m_hDC;}$/;"	f	class:ege::IMAGE
getheight	C++\ege-13.04.02-full\src\ege_head.h	/^	int getheight()    const {return m_height;}$/;"	f	class:ege::IMAGE
getwidth	C++\ege-13.04.02-full\src\ege_head.h	/^	int getwidth()     const {return m_width; }$/;"	f	class:ege::IMAGE
graph	C++\ege-13.04.02-full\src\ege_head.h	/^	}graph;$/;"	m	struct:ege::_graph_setting	typeref:struct:ege::_graph_setting::_graph
height	C++\ege-13.04.02-full\src\ege_head.h	/^		int height;$/;"	m	struct:ege::_graph_setting::_graph
hwnd	C++\ege-13.04.02-full\src\ege_head.h	/^	HWND        hwnd;$/;"	m	struct:ege::EGEMSG
hwnd	C++\ege-13.04.02-full\src\ege_head.h	/^	HWND    hwnd;$/;"	m	struct:ege::_graph_setting
img_page	C++\ege-13.04.02-full\src\ege_head.h	/^	PIMAGE img_page[BITMAP_PAGE_SIZE];$/;"	m	struct:ege::_graph_setting
img_timer_update	C++\ege-13.04.02-full\src\ege_head.h	/^	PIMAGE  img_timer_update;$/;"	m	struct:ege::_graph_setting
imgtarget	C++\ege-13.04.02-full\src\ege_head.h	/^	PIMAGE  imgtarget;$/;"	m	struct:ege::_graph_setting
imgtarget_set	C++\ege-13.04.02-full\src\ege_head.h	/^	PIMAGE  imgtarget_set;$/;"	m	struct:ege::_graph_setting
init_finish	C++\ege-13.04.02-full\src\ege_head.h	/^	bool    init_finish;$/;"	m	struct:ege::_graph_setting
instance	C++\ege-13.04.02-full\src\ege_head.h	/^	HINSTANCE instance;$/;"	m	struct:ege::_graph_setting
keystatemap	C++\ege-13.04.02-full\src\ege_head.h	/^	int keystatemap[MAX_KEY_VCODE];$/;"	m	struct:ege::_graph_setting
lParam	C++\ege-13.04.02-full\src\ege_head.h	/^	LPARAM      lParam;$/;"	m	struct:ege::EGEMSG
lock_window	C++\ege-13.04.02-full\src\ege_head.h	/^	bool    lock_window;$/;"	m	struct:ege::_graph_setting
m_aa	C++\ege-13.04.02-full\src\ege_head.h	/^	bool        m_aa;$/;"	m	class:ege::IMAGE
m_bk_color	C++\ege-13.04.02-full\src\ege_head.h	/^	color_t             m_bk_color;$/;"	m	class:ege::IMAGE
m_cnt	C++\ege-13.04.02-full\src\ege_head.h	/^	long* m_cnt;$/;"	m	struct:ege::count_ptr
m_color	C++\ege-13.04.02-full\src\ege_head.h	/^	color_t     m_color;$/;"	m	class:ege::IMAGE
m_fillcolor	C++\ege-13.04.02-full\src\ege_head.h	/^	color_t     m_fillcolor;$/;"	m	class:ege::IMAGE
m_hBmp	C++\ege-13.04.02-full\src\ege_head.h	/^	HBITMAP     m_hBmp;$/;"	m	class:ege::IMAGE
m_hDC	C++\ege-13.04.02-full\src\ege_head.h	/^	HDC         m_hDC;$/;"	m	class:ege::IMAGE
m_height	C++\ege-13.04.02-full\src\ege_head.h	/^	int         m_height;$/;"	m	class:ege::IMAGE
m_initflag	C++\ege-13.04.02-full\src\ege_head.h	/^	int     m_initflag;$/;"	m	class:ege::IMAGE
m_linestyle	C++\ege-13.04.02-full\src\ege_head.h	/^	linestyletype       m_linestyle;$/;"	m	class:ege::IMAGE
m_linewidth	C++\ege-13.04.02-full\src\ege_head.h	/^	float               m_linewidth;$/;"	m	class:ege::IMAGE
m_p	C++\ege-13.04.02-full\src\ege_head.h	/^	T* m_p;$/;"	m	struct:ege::count_ptr
m_pBuffer	C++\ege-13.04.02-full\src\ege_head.h	/^	PDWORD      m_pBuffer;$/;"	m	class:ege::IMAGE
m_pattern_obj	C++\ege-13.04.02-full\src\ege_head.h	/^	void*               m_pattern_obj;$/;"	m	class:ege::IMAGE
m_pattern_type	C++\ege-13.04.02-full\src\ege_head.h	/^	int                 m_pattern_type;$/;"	m	class:ege::IMAGE
m_texttype	C++\ege-13.04.02-full\src\ege_head.h	/^	textsettingstype    m_texttype;$/;"	m	class:ege::IMAGE
m_texture	C++\ege-13.04.02-full\src\ege_head.h	/^	void*               m_texture;$/;"	m	class:ege::IMAGE
m_vpt	C++\ege-13.04.02-full\src\ege_head.h	/^	viewporttype        m_vpt;$/;"	m	class:ege::IMAGE
m_width	C++\ege-13.04.02-full\src\ege_head.h	/^	int         m_width;$/;"	m	class:ege::IMAGE
max	C++\ege-13.04.02-full\src\ege_head.h	67;"	d
message	C++\ege-13.04.02-full\src\ege_head.h	/^	UINT        message;$/;"	m	struct:ege::EGEMSG
min	C++\ege-13.04.02-full\src\ege_head.h	71;"	d
mouse_last_x	C++\ege-13.04.02-full\src\ege_head.h	/^	int mouse_last_x, mouse_last_y;$/;"	m	struct:ege::_graph_setting
mouse_last_y	C++\ege-13.04.02-full\src\ege_head.h	/^	int mouse_last_x, mouse_last_y;$/;"	m	struct:ege::_graph_setting
mouse_lastclick_x	C++\ege-13.04.02-full\src\ege_head.h	/^	int mouse_lastclick_x, mouse_lastclick_y;$/;"	m	struct:ege::_graph_setting
mouse_lastclick_y	C++\ege-13.04.02-full\src\ege_head.h	/^	int mouse_lastclick_x, mouse_lastclick_y;$/;"	m	struct:ege::_graph_setting
mouse_lastup_x	C++\ege-13.04.02-full\src\ege_head.h	/^	int mouse_lastup_x, mouse_lastup_y;$/;"	m	struct:ege::_graph_setting
mouse_lastup_y	C++\ege-13.04.02-full\src\ege_head.h	/^	int mouse_lastup_x, mouse_lastup_y;$/;"	m	struct:ege::_graph_setting
mouse_show	C++\ege-13.04.02-full\src\ege_head.h	/^	int mouse_show;$/;"	m	struct:ege::_graph_setting
mouse_state_l	C++\ege-13.04.02-full\src\ege_head.h	/^	int mouse_state_l, mouse_state_m, mouse_state_r;$/;"	m	struct:ege::_graph_setting
mouse_state_m	C++\ege-13.04.02-full\src\ege_head.h	/^	int mouse_state_l, mouse_state_m, mouse_state_r;$/;"	m	struct:ege::_graph_setting
mouse_state_r	C++\ege-13.04.02-full\src\ege_head.h	/^	int mouse_state_l, mouse_state_m, mouse_state_r;$/;"	m	struct:ege::_graph_setting
mousekey	C++\ege-13.04.02-full\src\ege_head.h	/^	UINT        mousekey;$/;"	m	struct:ege::EGEMSG
msgkey_queue	C++\ege-13.04.02-full\src\ege_head.h	/^	thread_queue<EGEMSG> *msgkey_queue, *msgmouse_queue;$/;"	m	struct:ege::_graph_setting
msgmouse_queue	C++\ege-13.04.02-full\src\ege_head.h	/^	thread_queue<EGEMSG> *msgkey_queue, *msgmouse_queue;$/;"	m	struct:ege::_graph_setting
operator *	C++\ege-13.04.02-full\src\ege_head.h	/^	T& operator * () const {$/;"	f	struct:ege::count_ptr
operator ->	C++\ege-13.04.02-full\src\ege_head.h	/^	T* operator -> () const {$/;"	f	struct:ege::count_ptr
operator =	C++\ege-13.04.02-full\src\ege_head.h	/^	count_ptr<T>& operator= ( const count_ptr<T>& count_ptr_ ) {$/;"	f	struct:ege::count_ptr
operator T*	C++\ege-13.04.02-full\src\ege_head.h	/^	operator T* () const {$/;"	f	struct:ege::count_ptr
savebrush_hbr	C++\ege-13.04.02-full\src\ege_head.h	/^	HBRUSH savebrush_hbr;$/;"	m	struct:ege::_graph_setting
skip_timer_mark	C++\ege-13.04.02-full\src\ege_head.h	/^	bool    skip_timer_mark;$/;"	m	struct:ege::_graph_setting
threadui_handle	C++\ege-13.04.02-full\src\ege_head.h	/^	HANDLE threadui_handle;$/;"	m	struct:ege::_graph_setting
time	C++\ege-13.04.02-full\src\ege_head.h	/^	DWORD       time;$/;"	m	struct:ege::EGEMSG
timer_stop_mark	C++\ege-13.04.02-full\src\ege_head.h	/^	bool    timer_stop_mark;$/;"	m	struct:ege::_graph_setting
uint32	C++\ege-13.04.02-full\src\ege_head.h	/^typedef unsigned int uint32;$/;"	t
update_mark_count	C++\ege-13.04.02-full\src\ege_head.h	/^	int     update_mark_count; \/\/���±��$/;"	m	struct:ege::_graph_setting
use_force_exit	C++\ege-13.04.02-full\src\ege_head.h	/^	bool    use_force_exit; \/\/ǿ�ƹرս��̱��$/;"	m	struct:ege::_graph_setting
visual_page	C++\ege-13.04.02-full\src\ege_head.h	/^	int     visual_page;$/;"	m	struct:ege::_graph_setting
wParam	C++\ege-13.04.02-full\src\ege_head.h	/^	WPARAM      wParam;$/;"	m	struct:ege::EGEMSG
width	C++\ege-13.04.02-full\src\ege_head.h	/^		int width;$/;"	m	struct:ege::_graph_setting::_graph
window_caption	C++\ege-13.04.02-full\src\ege_head.h	/^	TCHAR   window_caption[128];$/;"	m	struct:ege::_graph_setting
window_class_name	C++\ege-13.04.02-full\src\ege_head.h	/^	TCHAR   window_class_name[32];$/;"	m	struct:ege::_graph_setting
window_dc	C++\ege-13.04.02-full\src\ege_head.h	/^	HDC window_dc;$/;"	m	struct:ege::_graph_setting
writemode	C++\ege-13.04.02-full\src\ege_head.h	/^	int writemode;$/;"	m	struct:ege::_graph_setting
xasp	C++\ege-13.04.02-full\src\ege_head.h	/^		float xasp, yasp;$/;"	m	struct:ege::_graph_setting::_aspectratio
yasp	C++\ege-13.04.02-full\src\ege_head.h	/^		float xasp, yasp;$/;"	m	struct:ege::_graph_setting::_aspectratio
~count_ptr	C++\ege-13.04.02-full\src\ege_head.h	/^	~count_ptr() {$/;"	f	struct:ege::count_ptr
NULL_PTR	C++\ege-13.04.02-full\src\ege_sbt.h	4;"	d
NodeType	C++\ege-13.04.02-full\src\ege_sbt.h	/^	typedef SBT_Node  NodeType;$/;"	t	class:ege::SBT
SBT	C++\ege-13.04.02-full\src\ege_sbt.h	/^	SBT() : _root(NULL_PTR) {$/;"	f	class:ege::SBT
SBT	C++\ege-13.04.02-full\src\ege_sbt.h	/^	SBT(const SBT& sbt) : _root(NULL_PTR) {$/;"	f	class:ege::SBT
SBT	C++\ege-13.04.02-full\src\ege_sbt.h	/^class SBT {$/;"	c	namespace:ege
SBT_Node	C++\ege-13.04.02-full\src\ege_sbt.h	/^		SBT_Node(): l(NULL_PTR), r(NULL_PTR), p(NULL_PTR), size(1) {$/;"	f	struct:ege::SBT::SBT_Node
SBT_Node	C++\ege-13.04.02-full\src\ege_sbt.h	/^	struct SBT_Node {$/;"	s	class:ege::SBT
TreeType	C++\ege-13.04.02-full\src\ege_sbt.h	/^	typedef SBT_Node* TreeType;$/;"	t	class:ege::SBT
_clear	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_clear(TreeType t) {$/;"	f	class:ege::SBT
_copy	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_copy(TreeType p, TreeType t1, const TreeType t2) {$/;"	f	class:ege::SBT
_insert	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_insert(TreeType p, TreeType & t, const VAL & val_) {$/;"	f	class:ege::SBT
_left_rotate	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_left_rotate(TreeType t) {$/;"	f	class:ege::SBT
_lower_bound	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_lower_bound(const TreeType t, const VAL & val_) const {$/;"	f	class:ege::SBT
_maintain	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_maintain(TreeType t, bool flag) {$/;"	f	class:ege::SBT
_pred	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_pred(const TreeType t, const VAL & val_) const {$/;"	f	class:ege::SBT
_rank	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_rank(const TreeType t, const VAL & val_) const {$/;"	f	class:ege::SBT
_remove	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_remove(TreeType * pt, const VAL & val_) {$/;"	f	class:ege::SBT
_remove_select	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_remove_select(TreeType * pt, sbt_int_t rank) {$/;"	f	class:ege::SBT
_right_rotate	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_right_rotate(TreeType t) {$/;"	f	class:ege::SBT
_root	C++\ege-13.04.02-full\src\ege_sbt.h	/^	TreeType _root;$/;"	m	class:ege::SBT
_search	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_search(const TreeType t, const VAL & val_) const {$/;"	f	class:ege::SBT
_select	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_select(const TreeType t, sbt_int_t rank) const {$/;"	f	class:ege::SBT
_set_left	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_set_left(TreeType t, TreeType ch) {$/;"	f	class:ege::SBT
_set_right	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_set_right(TreeType t, TreeType ch) {$/;"	f	class:ege::SBT
_succ	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_succ(const TreeType t, const VAL & val_) const {$/;"	f	class:ege::SBT
_upper_bound	C++\ege-13.04.02-full\src\ege_sbt.h	/^	_upper_bound(const TreeType t, const VAL & val_) const {$/;"	f	class:ege::SBT
clear	C++\ege-13.04.02-full\src\ege_sbt.h	/^	clear() {$/;"	f	class:ege::SBT
ege	C++\ege-13.04.02-full\src\ege_sbt.h	/^namespace ege {$/;"	n
insert	C++\ege-13.04.02-full\src\ege_sbt.h	/^	insert(const VAL & val) {$/;"	f	class:ege::SBT
l	C++\ege-13.04.02-full\src\ege_sbt.h	/^		SBT_Node*   l;$/;"	m	struct:ege::SBT::SBT_Node
left	C++\ege-13.04.02-full\src\ege_sbt.h	/^	left(TreeType t) {$/;"	f	class:ege::SBT
left	C++\ege-13.04.02-full\src\ege_sbt.h	/^	left(const TreeType t) const {$/;"	f	class:ege::SBT
operator =	C++\ege-13.04.02-full\src\ege_sbt.h	/^	operator = (const SBT & sbt) {$/;"	f	class:ege::SBT
p	C++\ege-13.04.02-full\src\ege_sbt.h	/^		SBT_Node*   p;$/;"	m	struct:ege::SBT::SBT_Node
parent	C++\ege-13.04.02-full\src\ege_sbt.h	/^	parent(TreeType t) {$/;"	f	class:ege::SBT
pred	C++\ege-13.04.02-full\src\ege_sbt.h	/^	pred(const VAL & val) {$/;"	f	class:ege::SBT
r	C++\ege-13.04.02-full\src\ege_sbt.h	/^		SBT_Node*   r;$/;"	m	struct:ege::SBT::SBT_Node
rank	C++\ege-13.04.02-full\src\ege_sbt.h	/^	rank(const VAL & val) const {$/;"	f	class:ege::SBT
remove	C++\ege-13.04.02-full\src\ege_sbt.h	/^	remove(const VAL & val) {$/;"	f	class:ege::SBT
remove_select	C++\ege-13.04.02-full\src\ege_sbt.h	/^	remove_select(sbt_int_t rank) {$/;"	f	class:ege::SBT
right	C++\ege-13.04.02-full\src\ege_sbt.h	/^	right(TreeType t) {$/;"	f	class:ege::SBT
right	C++\ege-13.04.02-full\src\ege_sbt.h	/^	right(const TreeType t) const {$/;"	f	class:ege::SBT
root	C++\ege-13.04.02-full\src\ege_sbt.h	/^	root() const {$/;"	f	class:ege::SBT
root	C++\ege-13.04.02-full\src\ege_sbt.h	/^	root() {$/;"	f	class:ege::SBT
safe_size	C++\ege-13.04.02-full\src\ege_sbt.h	/^	safe_size(const TreeType t) const {$/;"	f	class:ege::SBT
sbt_int_t	C++\ege-13.04.02-full\src\ege_sbt.h	/^typedef long sbt_int_t;$/;"	t	namespace:ege
search	C++\ege-13.04.02-full\src\ege_sbt.h	/^	search(const VAL & val) {$/;"	f	class:ege::SBT
select	C++\ege-13.04.02-full\src\ege_sbt.h	/^	select(sbt_int_t rank) const {$/;"	f	class:ege::SBT
select	C++\ege-13.04.02-full\src\ege_sbt.h	/^	select(sbt_int_t rank) {$/;"	f	class:ege::SBT
size	C++\ege-13.04.02-full\src\ege_sbt.h	/^		sbt_int_t   size;$/;"	m	struct:ege::SBT::SBT_Node
size	C++\ege-13.04.02-full\src\ege_sbt.h	/^	size() const {$/;"	f	class:ege::SBT
size	C++\ege-13.04.02-full\src\ege_sbt.h	/^	size(TreeType t) {$/;"	f	class:ege::SBT
size	C++\ege-13.04.02-full\src\ege_sbt.h	/^	size(const TreeType t) const {$/;"	f	class:ege::SBT
succ	C++\ege-13.04.02-full\src\ege_sbt.h	/^	succ(const VAL & val) {$/;"	f	class:ege::SBT
val	C++\ege-13.04.02-full\src\ege_sbt.h	/^		VAL         val;$/;"	m	struct:ege::SBT::SBT_Node
val	C++\ege-13.04.02-full\src\ege_sbt.h	/^	val(TreeType t) {$/;"	f	class:ege::SBT
val	C++\ege-13.04.02-full\src\ege_sbt.h	/^	val(const TreeType t) const {$/;"	f	class:ege::SBT
~SBT	C++\ege-13.04.02-full\src\ege_sbt.h	/^	~SBT() {$/;"	f	class:ege::SBT
NULL_PTR	C++\ege-13.04.02-full\src\ege_sbt_simple.h	4;"	d
NodeType	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	typedef SBT_Node  NodeType;$/;"	t	class:ege::SBT
SBT	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	SBT() : _root(NULL_PTR) {$/;"	f	class:ege::SBT
SBT	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	SBT(const SBT& sbt) : _root(NULL_PTR) {$/;"	f	class:ege::SBT
SBT	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^class SBT {$/;"	c	namespace:ege
SBT_Node	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^		SBT_Node(): l(NULL_PTR), r(NULL_PTR), size(1) {$/;"	f	struct:ege::SBT::SBT_Node
SBT_Node	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	struct SBT_Node {$/;"	s	class:ege::SBT
TreeType	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	typedef SBT_Node* TreeType;$/;"	t	class:ege::SBT
_clear	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_clear(TreeType& t) {$/;"	f	class:ege::SBT
_copy	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_copy(TreeType &t1, const TreeType &t2) {$/;"	f	class:ege::SBT
_insert	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_insert(TreeType& t, const VAL & val) {$/;"	f	class:ege::SBT
_left_rotate	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_left_rotate(TreeType &t) {$/;"	f	class:ege::SBT
_lower_bound	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_lower_bound(const TreeType t, const VAL & val) const {$/;"	f	class:ege::SBT
_maintain	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_maintain(TreeType& t, bool flag) {$/;"	f	class:ege::SBT
_pred	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_pred(const TreeType t, const VAL & val) const {$/;"	f	class:ege::SBT
_rank	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_rank(const TreeType t, const VAL & val) const {$/;"	f	class:ege::SBT
_remove	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_remove(TreeType& t, const VAL & val) {$/;"	f	class:ege::SBT
_remove_select	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_remove_select(TreeType& t, sbt_int_t rank) {$/;"	f	class:ege::SBT
_right_rotate	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_right_rotate(TreeType &t) {$/;"	f	class:ege::SBT
_root	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	TreeType _root;$/;"	m	class:ege::SBT
_search	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_search(const TreeType t, const VAL & val) const {$/;"	f	class:ege::SBT
_select	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_select(const TreeType t, sbt_int_t rank) const {$/;"	f	class:ege::SBT
_size	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_size(const TreeType& t) const {$/;"	f	class:ege::SBT
_succ	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_succ(const TreeType t, const VAL & val) const {$/;"	f	class:ege::SBT
_upper_bound	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	_upper_bound(const TreeType t, const VAL & val) const {$/;"	f	class:ege::SBT
clear	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	clear() {$/;"	f	class:ege::SBT
ege	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^namespace ege {$/;"	n
insert	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	insert(const VAL & val) {$/;"	f	class:ege::SBT
l	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^		SBT_Node*   l;$/;"	m	struct:ege::SBT::SBT_Node
operator =	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	operator = (const SBT& sbt) {$/;"	f	class:ege::SBT
pred	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	pred(const VAL & val) {$/;"	f	class:ege::SBT
r	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^		SBT_Node*   r;$/;"	m	struct:ege::SBT::SBT_Node
rank	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	rank(const VAL & val) const {$/;"	f	class:ege::SBT
remove	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	remove(const VAL & val) {$/;"	f	class:ege::SBT
remove_select	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	remove_select(sbt_int_t rank) {$/;"	f	class:ege::SBT
root	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	root() const {$/;"	f	class:ege::SBT
root	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	root() {$/;"	f	class:ege::SBT
sbt_int_t	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^typedef long sbt_int_t;$/;"	t	namespace:ege
search	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	search(const VAL & val) {$/;"	f	class:ege::SBT
select	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	select(sbt_int_t rank) const {$/;"	f	class:ege::SBT
select	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	select(sbt_int_t rank) {$/;"	f	class:ege::SBT
size	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^		sbt_int_t   size;$/;"	m	struct:ege::SBT::SBT_Node
size	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	size() const {$/;"	f	class:ege::SBT
succ	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	succ(const VAL & val) {$/;"	f	class:ege::SBT
val	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^		VAL         val;$/;"	m	struct:ege::SBT::SBT_Node
~SBT	C++\ege-13.04.02-full\src\ege_sbt_simple.h	/^	~SBT() {$/;"	f	class:ege::SBT
InitObject	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^egeControlBase::InitObject::InitObject(egeControlBase* pThis, int inherit_level) {$/;"	f	class:ege::egeControlBase::InitObject
_ALLOW_ITERATOR_DEBUG_LEVEL_MISMATCH	C++\ege-13.04.02-full\src\egecontrolbase.cpp	8;"	d	file:
_ALLOW_RUNTIME_LIBRARY_MISMATCH	C++\ege-13.04.02-full\src\egecontrolbase.cpp	11;"	d	file:
addchild	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^int egeControlBase::addchild(egeControlBase* pChild) {$/;"	f	class:ege::egeControlBase
allocId	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^int egeControlBase::allocId() {$/;"	f	class:ege::egeControlBase
allocZorder	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^int egeControlBase::allocZorder() {$/;"	f	class:ege::egeControlBase
ctlcmp	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^bool ctlcmp(const egeControlBase* pa, const egeControlBase* pb) {$/;"	f	namespace:ege
delchild	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^int egeControlBase::delchild(egeControlBase* pChild) {$/;"	f	class:ege::egeControlBase
draw	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^void egeControlBase::draw(PIMAGE pimg) {$/;"	f	class:ege::egeControlBase
ege	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^namespace ege {$/;"	n	file:
egeControlBase	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^egeControlBase::egeControlBase() {$/;"	f	class:ege::egeControlBase
egeControlBase	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^egeControlBase::egeControlBase(int inherit, egeControlBase* pParent) {$/;"	f	class:ege::egeControlBase
egectlmap	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^typedef Set<egeControlBase*> egectlmap;$/;"	t	namespace:ege	file:
egectlvec	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^typedef Array<egeControlBase*> egectlvec;$/;"	t	namespace:ege	file:
fixzorder	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^void egeControlBase::fixzorder() {$/;"	f	class:ege::egeControlBase
init	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^egeControlBase::init(egeControlBase* parent) {$/;"	f	class:ege::egeControlBase
initok	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^void egeControlBase::initok() {$/;"	f	class:ege::egeControlBase
keymsgchar	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^void egeControlBase::keymsgchar(unsigned key, int flag) {$/;"	f	class:ege::egeControlBase
keymsgdown	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^void egeControlBase::keymsgdown(unsigned key, int flag) {$/;"	f	class:ege::egeControlBase
keymsgup	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^void egeControlBase::keymsgup(unsigned key, int flag) {$/;"	f	class:ege::egeControlBase
mouse	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^void egeControlBase::mouse(int x, int y, int flag) {$/;"	f	class:ege::egeControlBase
s_egeCtlParent	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^static egectlvec s_egeCtlParent;$/;"	m	namespace:ege	file:
s_maxchildid	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^int egeControlBase::s_maxchildid = 1024;$/;"	m	class:ege::egeControlBase	file:
sortzorder	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^void egeControlBase::sortzorder() {$/;"	f	class:ege::egeControlBase
update	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^void egeControlBase::update() {$/;"	f	class:ege::egeControlBase
zorderdown	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^void egeControlBase::zorderdown() {$/;"	f	class:ege::egeControlBase
zorderset	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^void egeControlBase::zorderset(int z) {$/;"	f	class:ege::egeControlBase
zorderup	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^void egeControlBase::zorderup() {$/;"	f	class:ege::egeControlBase
~InitObject	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^egeControlBase::InitObject::~InitObject() {$/;"	f	class:ege::egeControlBase::InitObject
~egeControlBase	C++\ege-13.04.02-full\src\egecontrolbase.cpp	/^egeControlBase::~egeControlBase() {$/;"	f	class:ege::egeControlBase
FLT_EPSILON	C++\ege-13.04.02-full\src\egegapi.cpp	2465;"	d	file:
FLT_MAX	C++\ege-13.04.02-full\src\egegapi.cpp	2463;"	d	file:
FLT_MIN	C++\ege-13.04.02-full\src\egegapi.cpp	2461;"	d	file:
SetCloseHandler	C++\ege-13.04.02-full\src\egegapi.cpp	/^SetCloseHandler(LPCALLBACK_PROC func) {$/;"	f	namespace:ege
_CRT_NON_CONFORMING_SWPRINTFS	C++\ege-13.04.02-full\src\egegapi.cpp	9;"	d	file:
_GetFPS	C++\ege-13.04.02-full\src\egegapi.cpp	/^_GetFPS(int add) {\/\/��ȡ֡��$/;"	f	namespace:ege
api_sleep	C++\ege-13.04.02-full\src\egegapi.cpp	/^api_sleep(long dwMilliseconds) {$/;"	f	namespace:ege
arc	C++\ege-13.04.02-full\src\egegapi.cpp	/^arc(int x, int y, int stangle, int endangle, int radius, PIMAGE pimg) {$/;"	f	namespace:ege
arcf	C++\ege-13.04.02-full\src\egegapi.cpp	/^arcf(float x, float y, float stangle, float endangle, float radius, PIMAGE pimg) {$/;"	f	namespace:ege
bar	C++\ege-13.04.02-full\src\egegapi.cpp	/^bar(int left, int top, int right, int bottom, PIMAGE pimg) {$/;"	f	namespace:ege
bar3d	C++\ege-13.04.02-full\src\egegapi.cpp	/^bar3d(int x1, int y1, int x2, int y2, int depth, int topflag, PIMAGE pimg) {$/;"	f	namespace:ege
circle	C++\ege-13.04.02-full\src\egegapi.cpp	/^circle(int x, int y, int radius, PIMAGE pimg) {$/;"	f	namespace:ege
circlef	C++\ege-13.04.02-full\src\egegapi.cpp	/^circlef(float x, float y, float radius, PIMAGE pimg) {$/;"	f	namespace:ege
cleardevice	C++\ege-13.04.02-full\src\egegapi.cpp	/^cleardevice(PIMAGE pimg) {$/;"	f	namespace:ege
clearviewport	C++\ege-13.04.02-full\src\egegapi.cpp	/^clearviewport(PIMAGE pimg) {$/;"	f	namespace:ege
delay	C++\ege-13.04.02-full\src\egegapi.cpp	/^delay(long ms) {$/;"	f	namespace:ege
delay_fps	C++\ege-13.04.02-full\src\egegapi.cpp	/^delay_fps(double fps) {$/;"	f	namespace:ege
delay_fps	C++\ege-13.04.02-full\src\egegapi.cpp	/^delay_fps(int fps) {$/;"	f	namespace:ege
delay_fps	C++\ege-13.04.02-full\src\egegapi.cpp	/^delay_fps(long fps) {$/;"	f	namespace:ege
delay_jfps	C++\ege-13.04.02-full\src\egegapi.cpp	/^delay_jfps(double fps) {$/;"	f	namespace:ege
delay_jfps	C++\ege-13.04.02-full\src\egegapi.cpp	/^delay_jfps(int fps) {$/;"	f	namespace:ege
delay_jfps	C++\ege-13.04.02-full\src\egegapi.cpp	/^delay_jfps(long fps) {$/;"	f	namespace:ege
delay_ms	C++\ege-13.04.02-full\src\egegapi.cpp	/^delay_ms(long ms) {$/;"	f	namespace:ege
draw_frame	C++\ege-13.04.02-full\src\egegapi.cpp	/^draw_frame(PIMAGE img, int l, int t, int r, int b, color_t lc, color_t dc) {$/;"	f	namespace:ege
drawbezier	C++\ege-13.04.02-full\src\egegapi.cpp	/^drawbezier(int numpoints, const int *polypoints, PIMAGE pimg) {$/;"	f	namespace:ege
drawlines	C++\ege-13.04.02-full\src\egegapi.cpp	/^drawlines(int numlines, const int *polypoints, PIMAGE pimg) {$/;"	f	namespace:ege
drawpoly	C++\ege-13.04.02-full\src\egegapi.cpp	/^drawpoly(int numpoints, const int *polypoints, PIMAGE pimg) {$/;"	f	namespace:ege
ege	C++\ege-13.04.02-full\src\egegapi.cpp	/^namespace ege {$/;"	n	file:
ege_arc	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_arc(float x, float y, float w, float h, float stangle, float sweepAngle, PIMAGE pimg) {$/;"	f	namespace:ege
ege_bezier	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_bezier(int numpoints, ege_point* polypoints, PIMAGE pimg) {$/;"	f	namespace:ege
ege_compress	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_compress(void *dest, unsigned long *destLen, const void *source, unsigned long sourceLen) {$/;"	f	namespace:ege
ege_compress2	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_compress2(void *dest, unsigned long *destLen, const void *source, unsigned long sourceLen, int level) {$/;"	f	namespace:ege
ege_drawcurve	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_drawcurve(int numpoints, ege_point* polypoints, PIMAGE pimg) {$/;"	f	namespace:ege
ege_drawpoly	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_drawpoly(int numpoints, ege_point* polypoints, PIMAGE pimg) {$/;"	f	namespace:ege
ege_ellipse	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_ellipse(float x, float y, float w, float h, PIMAGE pimg) {$/;"	f	namespace:ege
ege_fillellipse	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_fillellipse(float x, float y, float w, float h, PIMAGE pimg) {$/;"	f	namespace:ege
ege_fillpie	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_fillpie(float x, float y, float w, float h, float stangle, float sweepAngle, PIMAGE pimg) {$/;"	f	namespace:ege
ege_fillpoly	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_fillpoly(int numpoints, ege_point* polypoints, PIMAGE pimg) {$/;"	f	namespace:ege
ege_fillrect	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_fillrect(float x, float y, float w, float h, PIMAGE pimg) {$/;"	f	namespace:ege
ege_gentexture	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_gentexture(bool gen, PIMAGE pimg) {$/;"	f	namespace:ege
ege_line	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_line(float x1, float y1, float x2, float y2, PIMAGE pimg) {$/;"	f	namespace:ege
ege_pie	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_pie(float x, float y, float w, float h, float stangle, float sweepAngle, PIMAGE pimg) {$/;"	f	namespace:ege
ege_puttexture	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_puttexture(PIMAGE srcimg, ege_rect dest, PIMAGE pimg) {$/;"	f	namespace:ege
ege_puttexture	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_puttexture(PIMAGE srcimg, ege_rect dest, ege_rect src, PIMAGE pimg) {$/;"	f	namespace:ege
ege_puttexture	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_puttexture(PIMAGE srcimg, float x, float y, float w, float h, PIMAGE pimg) {$/;"	f	namespace:ege
ege_rectangle	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_rectangle(float x, float y, float w, float h, PIMAGE pimg) {$/;"	f	namespace:ege
ege_setalpha	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_setalpha(int alpha, PIMAGE pimg) {$/;"	f	namespace:ege
ege_setpattern_ellipsegradient	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_setpattern_ellipsegradient(ege_point center, color_t centercolor,$/;"	f	namespace:ege
ege_setpattern_lineargradient	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_setpattern_lineargradient(float x1, float y1, color_t c1, float x2, float y2, color_t c2, PIMAGE pimg) {$/;"	f	namespace:ege
ege_setpattern_none	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_setpattern_none(PIMAGE pimg) {$/;"	f	namespace:ege
ege_setpattern_pathgradient	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_setpattern_pathgradient(ege_point center, color_t centercolor,$/;"	f	namespace:ege
ege_setpattern_texture	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_setpattern_texture(PIMAGE srcimg, float x, float y, float w, float h, PIMAGE pimg) {$/;"	f	namespace:ege
ege_sleep	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_sleep(long ms) {$/;"	f	namespace:ege
ege_uncompress	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_uncompress(void *dest, unsigned long *destLen, const void *source, unsigned long sourceLen) {$/;"	f	namespace:ege
ege_uncompress_size	C++\ege-13.04.02-full\src\egegapi.cpp	/^ege_uncompress_size(const void *source, unsigned long sourceLen) {$/;"	f	namespace:ege
ellipse	C++\ege-13.04.02-full\src\egegapi.cpp	/^ellipse(int x, int y, int stangle, int endangle, int xradius, int yradius, PIMAGE pimg) {$/;"	f	namespace:ege
ellipsef	C++\ege-13.04.02-full\src\egegapi.cpp	/^ellipsef(float x, float y, float stangle, float endangle, float xradius, float yradius, PIMAGE pimg) {$/;"	f	namespace:ege
fclock	C++\ege-13.04.02-full\src\egegapi.cpp	/^fclock() {$/;"	f	namespace:ege
fillellipse	C++\ege-13.04.02-full\src\egegapi.cpp	/^fillellipse(int x, int y, int xradius, int yradius, PIMAGE pimg) {$/;"	f	namespace:ege
fillellipsef	C++\ege-13.04.02-full\src\egegapi.cpp	/^fillellipsef(float x, float y, float xradius, float yradius, PIMAGE pimg) {$/;"	f	namespace:ege
fillpoly	C++\ege-13.04.02-full\src\egegapi.cpp	/^fillpoly(int numpoints, const int *polypoints, PIMAGE pimg) {$/;"	f	namespace:ege
fillpoly_gradient	C++\ege-13.04.02-full\src\egegapi.cpp	/^fillpoly_gradient(int numpoints, const ege_colpoint* polypoints, PIMAGE pimg) {$/;"	f	namespace:ege
floodfill	C++\ege-13.04.02-full\src\egegapi.cpp	/^floodfill(int x, int y, int border, PIMAGE pimg) {$/;"	f	namespace:ege
floodfillsurface	C++\ege-13.04.02-full\src\egegapi.cpp	/^floodfillsurface(int x, int y, color_t areacolor, PIMAGE pimg) {$/;"	f	namespace:ege
getChar	C++\ege-13.04.02-full\src\egegapi.cpp	/^getChar(LPCSTR text)$/;"	f	namespace:ege
getCoords	C++\ege-13.04.02-full\src\egegapi.cpp	/^getCoords(int* const coords, unsigned int pairs, LPCSTR title)$/;"	f	namespace:ege
getDouble	C++\ege-13.04.02-full\src\egegapi.cpp	/^getDouble(LPCSTR text)$/;"	f	namespace:ege
getHInstance	C++\ege-13.04.02-full\src\egegapi.cpp	/^getHInstance() {$/;"	f	namespace:ege
getHWnd	C++\ege-13.04.02-full\src\egegapi.cpp	/^getHWnd() {$/;"	f	namespace:ege
getInteger	C++\ege-13.04.02-full\src\egegapi.cpp	/^getInteger(LPCSTR text)$/;"	f	namespace:ege
getString	C++\ege-13.04.02-full\src\egegapi.cpp	/^getString(LPSTR buf, int length, LPCSTR text)$/;"	f	namespace:ege
get_highfeq_time_ls	C++\ege-13.04.02-full\src\egegapi.cpp	/^get_highfeq_time_ls(struct _graph_setting * pg) {$/;"	f	namespace:ege
getbkcolor	C++\ege-13.04.02-full\src\egegapi.cpp	/^getbkcolor(PIMAGE pimg) {$/;"	f	namespace:ege
getcolor	C++\ege-13.04.02-full\src\egegapi.cpp	/^getcolor(PIMAGE pimg) {$/;"	f	namespace:ege
getfillcolor	C++\ege-13.04.02-full\src\egegapi.cpp	/^getfillcolor(PIMAGE pimg) {$/;"	f	namespace:ege
getfont	C++\ege-13.04.02-full\src\egegapi.cpp	/^getfont(LOGFONTA *font, PIMAGE pimg) {$/;"	f	namespace:ege
getfont	C++\ege-13.04.02-full\src\egegapi.cpp	/^getfont(LOGFONTW *font, PIMAGE pimg) {$/;"	f	namespace:ege
getfps	C++\ege-13.04.02-full\src\egegapi.cpp	/^getfps() {$/;"	f	namespace:ege
getlinestyle	C++\ege-13.04.02-full\src\egegapi.cpp	/^getlinestyle(int *plinestyle, unsigned short *pupattern, int *pthickness, PIMAGE pimg) {$/;"	f	namespace:ege
getpixel	C++\ege-13.04.02-full\src\egegapi.cpp	/^getpixel(int x, int y, PIMAGE pimg) {$/;"	f	namespace:ege
getpixel_f	C++\ege-13.04.02-full\src\egegapi.cpp	/^getpixel_f(int x, int y, PIMAGE pimg) {$/;"	f	namespace:ege
gettarget	C++\ege-13.04.02-full\src\egegapi.cpp	/^PIMAGE gettarget() {$/;"	f	namespace:ege
getviewport	C++\ege-13.04.02-full\src\egegapi.cpp	/^getviewport(int *pleft, int *ptop, int *pright, int *pbottom, int *pclip, PIMAGE pimg) {$/;"	f	namespace:ege
inputbox_getline	C++\ege-13.04.02-full\src\egegapi.cpp	/^inputbox_getline(LPCSTR title, LPCSTR text, LPSTR buf, int len) {$/;"	f	namespace:ege
inputbox_getline	C++\ege-13.04.02-full\src\egegapi.cpp	/^inputbox_getline(LPCWSTR title, LPCWSTR text, LPWSTR buf, int len) {$/;"	f	namespace:ege
is_run	C++\ege-13.04.02-full\src\egegapi.cpp	/^is_run() {$/;"	f	namespace:ege
line	C++\ege-13.04.02-full\src\egegapi.cpp	/^line(int x1, int y1, int x2, int y2, PIMAGE pimg) {$/;"	f	namespace:ege
line_base	C++\ege-13.04.02-full\src\egegapi.cpp	/^line_base(float x1, float y1, float x2, float y2, PIMAGE img) {$/;"	f	namespace:ege
line_f	C++\ege-13.04.02-full\src\egegapi.cpp	/^line_f(float x1, float y1, float x2, float y2, PIMAGE pimg) {$/;"	f	namespace:ege
linerel	C++\ege-13.04.02-full\src\egegapi.cpp	/^linerel(int dx, int dy, PIMAGE pimg) {$/;"	f	namespace:ege
linerel_f	C++\ege-13.04.02-full\src\egegapi.cpp	/^linerel_f(float dx, float dy, PIMAGE pimg) {$/;"	f	namespace:ege
lineto	C++\ege-13.04.02-full\src\egegapi.cpp	/^lineto(int x, int y, PIMAGE pimg) {$/;"	f	namespace:ege
lineto_f	C++\ege-13.04.02-full\src\egegapi.cpp	/^lineto_f(float x, float y, PIMAGE pimg) {$/;"	f	namespace:ege
message_addkeyhandler	C++\ege-13.04.02-full\src\egegapi.cpp	/^message_addkeyhandler(void* param, LPMSG_KEY_PROC func) {$/;"	f	namespace:ege
message_addmousehandler	C++\ege-13.04.02-full\src\egegapi.cpp	/^message_addmousehandler(void* param, LPMSG_MOUSE_PROC func) {$/;"	f	namespace:ege
mousepos	C++\ege-13.04.02-full\src\egegapi.cpp	/^mousepos(int *x, int *y) {$/;"	f	namespace:ege
moverel	C++\ege-13.04.02-full\src\egegapi.cpp	/^moverel(int dx, int dy, PIMAGE pimg) {$/;"	f	namespace:ege
moveto	C++\ege-13.04.02-full\src\egegapi.cpp	/^moveto(int x, int y, PIMAGE pimg) {$/;"	f	namespace:ege
outtext	C++\ege-13.04.02-full\src\egegapi.cpp	/^outtext(CHAR c, PIMAGE pimg) {$/;"	f	namespace:ege
outtext	C++\ege-13.04.02-full\src\egegapi.cpp	/^outtext(LPCSTR textstring, PIMAGE pimg) {$/;"	f	namespace:ege
outtext	C++\ege-13.04.02-full\src\egegapi.cpp	/^outtext(LPCWSTR textstring, PIMAGE pimg) {$/;"	f	namespace:ege
outtext	C++\ege-13.04.02-full\src\egegapi.cpp	/^outtext(WCHAR c, PIMAGE pimg) {$/;"	f	namespace:ege
outtextrect	C++\ege-13.04.02-full\src\egegapi.cpp	/^outtextrect(int x, int y, int w, int h, LPCSTR  textstring, PIMAGE pimg) {$/;"	f	namespace:ege
outtextrect	C++\ege-13.04.02-full\src\egegapi.cpp	/^outtextrect(int x, int y, int w, int h, LPCWSTR textstring, PIMAGE pimg) {$/;"	f	namespace:ege
outtextxy	C++\ege-13.04.02-full\src\egegapi.cpp	/^outtextxy(int x, int y, CHAR c, PIMAGE pimg) {$/;"	f	namespace:ege
outtextxy	C++\ege-13.04.02-full\src\egegapi.cpp	/^outtextxy(int x, int y, LPCSTR textstring, PIMAGE pimg) {$/;"	f	namespace:ege
outtextxy	C++\ege-13.04.02-full\src\egegapi.cpp	/^outtextxy(int x, int y, LPCWSTR textstring, PIMAGE pimg) {$/;"	f	namespace:ege
outtextxy	C++\ege-13.04.02-full\src\egegapi.cpp	/^outtextxy(int x, int y, WCHAR c, PIMAGE pimg) {$/;"	f	namespace:ege
pieslice	C++\ege-13.04.02-full\src\egegapi.cpp	/^pieslice(int x, int y, int stangle, int endangle, int radius, PIMAGE pimg) {$/;"	f	namespace:ege
pieslicef	C++\ege-13.04.02-full\src\egegapi.cpp	/^pieslicef(float x, float y, float stangle, float endangle, float radius, PIMAGE pimg) {$/;"	f	namespace:ege
private_gettextmode	C++\ege-13.04.02-full\src\egegapi.cpp	/^private_gettextmode(PIMAGE img) {$/;"	f	namespace:ege
private_textout	C++\ege-13.04.02-full\src\egegapi.cpp	/^private_textout (PIMAGE img, LPCSTR textstring, int x, int y, int horiz, int vert) {$/;"	f	namespace:ege
private_textout	C++\ege-13.04.02-full\src\egegapi.cpp	/^private_textout (PIMAGE img, LPCWSTR textstring, int x, int y, int horiz, int vert) {$/;"	f	namespace:ege
putpixel	C++\ege-13.04.02-full\src\egegapi.cpp	/^putpixel(int x, int y, color_t color, PIMAGE pimg) {$/;"	f	namespace:ege
putpixel_f	C++\ege-13.04.02-full\src\egegapi.cpp	/^putpixel_f(int x, int y, color_t color, PIMAGE pimg) {$/;"	f	namespace:ege
putpixels	C++\ege-13.04.02-full\src\egegapi.cpp	/^putpixels(int nPoint, int* pPoints, PIMAGE pimg) {$/;"	f	namespace:ege
putpixels_f	C++\ege-13.04.02-full\src\egegapi.cpp	/^putpixels_f(int nPoint, int* pPoints, PIMAGE pimg) {$/;"	f	namespace:ege
rectangle	C++\ege-13.04.02-full\src\egegapi.cpp	/^void rectangle(int left, int top, int right, int bottom, PIMAGE pimg) {$/;"	f	namespace:ege
rectprintf	C++\ege-13.04.02-full\src\egegapi.cpp	/^rectprintf(int x, int y, int w, int h, LPCSTR  fmt, ...) {$/;"	f	namespace:ege
rectprintf	C++\ege-13.04.02-full\src\egegapi.cpp	/^rectprintf(int x, int y, int w, int h, LPCWSTR fmt, ...) {$/;"	f	namespace:ege
saveBrush	C++\ege-13.04.02-full\src\egegapi.cpp	/^saveBrush(PIMAGE img, int save) { \/\/�˺�������ǰ���Ѿ���Lock$/;"	f	namespace:ege
sector	C++\ege-13.04.02-full\src\egegapi.cpp	/^sector(int x, int y, int stangle, int endangle, int xradius, int yradius, PIMAGE pimg) {$/;"	f	namespace:ege
sectorf	C++\ege-13.04.02-full\src\egegapi.cpp	/^sectorf(float x, float y, float stangle, float endangle, float xradius, float yradius, PIMAGE pimg) {$/;"	f	namespace:ege
setactivepage	C++\ege-13.04.02-full\src\egegapi.cpp	/^setactivepage(int page) {$/;"	f	namespace:ege
setbkcolor	C++\ege-13.04.02-full\src\egegapi.cpp	/^setbkcolor(color_t color, PIMAGE pimg) {$/;"	f	namespace:ege
setbkcolor_f	C++\ege-13.04.02-full\src\egegapi.cpp	/^setbkcolor_f(color_t color, PIMAGE pimg) {$/;"	f	namespace:ege
setbkmode	C++\ege-13.04.02-full\src\egegapi.cpp	/^setbkmode(int iBkMode, PIMAGE pimg) {$/;"	f	namespace:ege
setcaption	C++\ege-13.04.02-full\src\egegapi.cpp	/^setcaption(LPCSTR  caption) {$/;"	f	namespace:ege
setcaption	C++\ege-13.04.02-full\src\egegapi.cpp	/^setcaption(LPCWSTR caption) {$/;"	f	namespace:ege
setcolor	C++\ege-13.04.02-full\src\egegapi.cpp	/^setcolor(color_t color, PIMAGE pimg) {$/;"	f	namespace:ege
setfillcolor	C++\ege-13.04.02-full\src\egegapi.cpp	/^setfillcolor(color_t color, PIMAGE pimg) {$/;"	f	namespace:ege
setfillstyle	C++\ege-13.04.02-full\src\egegapi.cpp	/^setfillstyle(int pattern, color_t color, PIMAGE pimg) {$/;"	f	namespace:ege
setfont	C++\ege-13.04.02-full\src\egegapi.cpp	/^setfont($/;"	f	namespace:ege
setfont	C++\ege-13.04.02-full\src\egegapi.cpp	/^setfont(const LOGFONTA *font, PIMAGE pimg) {$/;"	f	namespace:ege
setfont	C++\ege-13.04.02-full\src\egegapi.cpp	/^setfont(const LOGFONTW *font, PIMAGE pimg) {$/;"	f	namespace:ege
setfont	C++\ege-13.04.02-full\src\egegapi.cpp	/^setfont(int nHeight, int nWidth, LPCSTR lpszFace, PIMAGE pimg) {$/;"	f	namespace:ege
setfont	C++\ege-13.04.02-full\src\egegapi.cpp	/^setfont(int nHeight, int nWidth, LPCWSTR lpszFace, PIMAGE pimg) {$/;"	f	namespace:ege
setfontbkcolor	C++\ege-13.04.02-full\src\egegapi.cpp	/^void setfontbkcolor(color_t color, PIMAGE pimg) {$/;"	f	namespace:ege
setlinestyle	C++\ege-13.04.02-full\src\egegapi.cpp	/^setlinestyle(int linestyle, unsigned short upattern, int thickness, PIMAGE pimg) {$/;"	f	namespace:ege
setlinewidth	C++\ege-13.04.02-full\src\egegapi.cpp	/^setlinewidth(float width, PIMAGE pimg) {$/;"	f	namespace:ege
setrendermode	C++\ege-13.04.02-full\src\egegapi.cpp	/^void setrendermode(rendermode_e mode) {$/;"	f	namespace:ege
settarget	C++\ege-13.04.02-full\src\egegapi.cpp	/^int settarget(PIMAGE pbuf) {$/;"	f	namespace:ege
settextjustify	C++\ege-13.04.02-full\src\egegapi.cpp	/^settextjustify(int horiz, int vert, PIMAGE pimg) {$/;"	f	namespace:ege
setviewport	C++\ege-13.04.02-full\src\egegapi.cpp	/^setviewport(int left, int top, int right, int bottom, int clip, PIMAGE pimg) {$/;"	f	namespace:ege
setvisualpage	C++\ege-13.04.02-full\src\egegapi.cpp	/^setvisualpage(int page) {$/;"	f	namespace:ege
setwritemode	C++\ege-13.04.02-full\src\egegapi.cpp	/^setwritemode(int mode, PIMAGE pimg) {$/;"	f	namespace:ege
showmouse	C++\ege-13.04.02-full\src\egegapi.cpp	/^int showmouse(int bShow) {$/;"	f	namespace:ege
swappage	C++\ege-13.04.02-full\src\egegapi.cpp	/^swappage() {$/;"	f	namespace:ege
textheight	C++\ege-13.04.02-full\src\egegapi.cpp	/^textheight(CHAR c, PIMAGE pimg) {$/;"	f	namespace:ege
textheight	C++\ege-13.04.02-full\src\egegapi.cpp	/^textheight(LPCSTR textstring, PIMAGE pimg) {$/;"	f	namespace:ege
textheight	C++\ege-13.04.02-full\src\egegapi.cpp	/^textheight(LPCWSTR textstring, PIMAGE pimg) {$/;"	f	namespace:ege
textheight	C++\ege-13.04.02-full\src\egegapi.cpp	/^textheight(WCHAR c, PIMAGE pimg) {$/;"	f	namespace:ege
textwidth	C++\ege-13.04.02-full\src\egegapi.cpp	/^textwidth(CHAR c, PIMAGE pimg) {$/;"	f	namespace:ege
textwidth	C++\ege-13.04.02-full\src\egegapi.cpp	/^textwidth(LPCSTR textstring, PIMAGE pimg) {$/;"	f	namespace:ege
textwidth	C++\ege-13.04.02-full\src\egegapi.cpp	/^textwidth(LPCWSTR textstring, PIMAGE pimg) {$/;"	f	namespace:ege
textwidth	C++\ege-13.04.02-full\src\egegapi.cpp	/^textwidth(WCHAR c, PIMAGE pimg) {$/;"	f	namespace:ege
window_getviewport	C++\ege-13.04.02-full\src\egegapi.cpp	/^window_getviewport(int* left, int* top, int* right, int* bottom) {$/;"	f	namespace:ege
window_getviewport	C++\ege-13.04.02-full\src\egegapi.cpp	/^window_getviewport(struct viewporttype * viewport) {$/;"	f	namespace:ege
window_setviewport	C++\ege-13.04.02-full\src\egegapi.cpp	/^window_setviewport(int left, int top, int right, int bottom) {$/;"	f	namespace:ege
xyprintf	C++\ege-13.04.02-full\src\egegapi.cpp	/^xyprintf(int x, int y, LPCSTR  fmt, ...) {$/;"	f	namespace:ege
xyprintf	C++\ege-13.04.02-full\src\egegapi.cpp	/^xyprintf(int x, int y, LPCWSTR fmt, ...) {$/;"	f	namespace:ege
CTL_PREINIT	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    CTL_PREINIT(Window, egeControlBase) {$/;"	f	class:Window
CTL_PREINIT	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    CTL_PREINIT(Window2, Window) {$/;"	f	class:Window2
CTL_PREINIT	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    CTL_PREINIT(graph, egeControlBase) {$/;"	f	class:graph
CTL_PREINITEND	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    } CTL_PREINITEND;$/;"	m	class:Window	file:
CTL_PREINITEND	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    } CTL_PREINITEND;$/;"	m	class:Window2	file:
CTL_PREINITEND	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    } CTL_PREINITEND;$/;"	m	class:graph	file:
Window	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    Window(CTL_DEFPARAM) : CTL_INITBASE(egeControlBase) {$/;"	f	class:Window
Window	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^class Window : public egeControlBase$/;"	c	file:
Window2	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    Window2(CTL_DEFPARAM) : CTL_INITBASE(Window) {$/;"	f	class:Window2
Window2	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^class Window2 : public Window$/;"	c	file:
dx	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    double dx, dy;$/;"	m	class:graph	file:
dy	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    double dx, dy;$/;"	m	class:graph	file:
graph	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    graph(CTL_DEFPARAM) : CTL_INITBASE(egeControlBase) {$/;"	f	class:graph
graph	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^class graph : public egeControlBase$/;"	c	file:
m_capmouse	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    int m_capmouse;$/;"	m	class:Window	file:
m_capx	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    int m_capx, m_capy;$/;"	m	class:Window	file:
m_capy	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    int m_capx, m_capy;$/;"	m	class:Window	file:
m_col	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    color_t m_col;$/;"	m	class:Window	file:
m_graph	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    graph m_graph[4];$/;"	m	class:Window	file:
main	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^int main()$/;"	f
onDraw	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    void onDraw(PIMAGE pimg) const {$/;"	f	class:Window
onDraw	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    void onDraw(PIMAGE pimg) const {$/;"	f	class:graph
onMouse	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    int onMouse(int x, int y, int flag) {$/;"	f	class:Window
onUpdate	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    int onUpdate() {$/;"	f	class:graph
x	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    double x, y;$/;"	m	class:graph	file:
y	C++\ege-13.04.02-full\src\egetest\maintest.cpp	/^    double x, y;$/;"	m	class:graph	file:
Gdiplus	C++\ege-13.04.02-full\src\gdiplus3\gdiplus.h	/^namespace Gdiplus {$/;"	n
IDirectDrawSurface7	C++\ege-13.04.02-full\src\gdiplus3\gdiplus.h	/^typedef _COM_interface IDirectDrawSurface7 IDirectDrawSurface7;$/;"	t
INT16	C++\ege-13.04.02-full\src\gdiplus3\gdiplus.h	/^typedef SHORT INT16;$/;"	t	namespace:Gdiplus
IStream	C++\ege-13.04.02-full\src\gdiplus3\gdiplus.h	/^typedef _COM_interface IStream IStream;$/;"	t
REAL	C++\ege-13.04.02-full\src\gdiplus3\gdiplus.h	/^typedef float REAL;$/;"	t	namespace:Gdiplus
UINT16	C++\ege-13.04.02-full\src\gdiplus3\gdiplus.h	/^typedef WORD UINT16;$/;"	t	namespace:Gdiplus
__GDIPLUS_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplus.h	24;"	d
GdiplusBase	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbase.h	/^class GdiplusBase$/;"	c
__GDIPLUS_BASE_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbase.h	24;"	d
operator delete	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbase.h	/^	static void operator delete(void *in_pVoid)$/;"	f	class:GdiplusBase
operator delete[]	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbase.h	/^	static void operator delete[](void *in_pVoid)$/;"	f	class:GdiplusBase
operator new	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbase.h	/^	static void* operator new(size_t in_size)$/;"	f	class:GdiplusBase
operator new[]	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbase.h	/^	static void* operator new[](size_t in_size)$/;"	f	class:GdiplusBase
Brush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Brush(): nativeBrush(NULL), lastStatus(Ok) {}$/;"	f	class:Brush
Brush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Brush(GpBrush *brush, Status status):$/;"	f	class:Brush
Brush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^class Brush: public GdiplusBase$/;"	c
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	virtual Brush* Clone() const  \/\/ each subclass must implement this$/;"	f	class:Brush
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	virtual HatchBrush* Clone() const$/;"	f	class:HatchBrush
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	virtual LinearGradientBrush* Clone() const$/;"	f	class:LinearGradientBrush
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	virtual SolidBrush* Clone() const$/;"	f	class:SolidBrush
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	virtual TextureBrush* Clone() const$/;"	f	class:TextureBrush
GetBackgroundColor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status GetBackgroundColor(Color *color) const$/;"	f	class:HatchBrush
GetBlend	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status GetBlend(REAL *blendFactors, REAL *blendPositions,$/;"	f	class:LinearGradientBrush
GetBlendCount	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	INT GetBlendCount() const$/;"	f	class:LinearGradientBrush
GetColor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status GetColor(Color *color) const$/;"	f	class:SolidBrush
GetForegroundColor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status GetForegroundColor(Color *color) const$/;"	f	class:HatchBrush
GetGammaCorrection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	BOOL GetGammaCorrection() const$/;"	f	class:LinearGradientBrush
GetHatchStyle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	HatchStyle GetHatchStyle() const$/;"	f	class:HatchBrush
GetInterpolationColorCount	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	INT GetInterpolationColorCount() const$/;"	f	class:LinearGradientBrush
GetInterpolationColors	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status GetInterpolationColors(Color *presetColors,$/;"	f	class:LinearGradientBrush
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status GetLastStatus() const$/;"	f	class:Brush
GetLinearColors	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status GetLinearColors(Color *colors) const$/;"	f	class:LinearGradientBrush
GetRectangle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status GetRectangle(Rect *rect) const$/;"	f	class:LinearGradientBrush
GetRectangle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status GetRectangle(RectF *rect) const$/;"	f	class:LinearGradientBrush
GetTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status GetTransform(Matrix *matrix) const$/;"	f	class:LinearGradientBrush
GetTransfrom	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status GetTransfrom(Matrix *matrix) const$/;"	f	class:TextureBrush
GetType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	BrushType GetType() const$/;"	f	class:Brush
GetWrapMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	WrapMode GetWrapMode() const$/;"	f	class:LinearGradientBrush
GetWrapMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	WrapMode GetWrapMode() const$/;"	f	class:TextureBrush
HatchBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	HatchBrush(GpBrush *brush, Status status): Brush(brush, status) {}$/;"	f	class:HatchBrush
HatchBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	HatchBrush(HatchStyle hatchStyle,$/;"	f	class:HatchBrush
HatchBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^class HatchBrush: public Brush$/;"	c
LinearGradientBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	LinearGradientBrush(GpBrush *brush, Status status): Brush(brush, status) {}$/;"	f	class:LinearGradientBrush
LinearGradientBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	LinearGradientBrush(const Point& point1, const Point& point2,$/;"	f	class:LinearGradientBrush
LinearGradientBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	LinearGradientBrush(const PointF& point1, const PointF& point2,$/;"	f	class:LinearGradientBrush
LinearGradientBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	LinearGradientBrush(const Rect& rect, const Color& color1,$/;"	f	class:LinearGradientBrush
LinearGradientBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	LinearGradientBrush(const RectF& rect, const Color& color1,$/;"	f	class:LinearGradientBrush
LinearGradientBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^class LinearGradientBrush: public Brush$/;"	c
MultiplyTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status MultiplyTransform(const Matrix *matrix,$/;"	f	class:LinearGradientBrush
MultiplyTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status MultiplyTransform(const Matrix *matrix,$/;"	f	class:TextureBrush
ResetTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status ResetTransform()$/;"	f	class:LinearGradientBrush
ResetTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status ResetTransform()$/;"	f	class:TextureBrush
RotateTranform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status RotateTranform(REAL angle, MatrixOrder order = MatrixOrderPrepend)$/;"	f	class:LinearGradientBrush
RotateTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status RotateTransform(REAL angle,$/;"	f	class:TextureBrush
ScaleTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status ScaleTransform(REAL sx, REAL sy,$/;"	f	class:LinearGradientBrush
ScaleTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status ScaleTransform(REAL sx, REAL sy,$/;"	f	class:TextureBrush
SetBlend	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status SetBlend(const REAL *blendFactors,$/;"	f	class:LinearGradientBrush
SetBlendBellShape	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status SetBlendBellShape(REAL focus, REAL scale = 1.0f)$/;"	f	class:LinearGradientBrush
SetBlendTriangularShape	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status SetBlendTriangularShape(REAL focus, REAL scale = 1.0f)$/;"	f	class:LinearGradientBrush
SetColor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status SetColor(const Color& color)$/;"	f	class:SolidBrush
SetGammaCorrection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status SetGammaCorrection(BOOL useGammaCorrection)$/;"	f	class:LinearGradientBrush
SetInterpolationColors	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status SetInterpolationColors(const Color *presetColors,$/;"	f	class:LinearGradientBrush
SetLinearColors	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status SetLinearColors(const Color& color1, const Color& color2)$/;"	f	class:LinearGradientBrush
SetTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status SetTransform(const Matrix *matrix)$/;"	f	class:LinearGradientBrush
SetTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status SetTransform(const Matrix *matrix)$/;"	f	class:TextureBrush
SetWrapMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status SetWrapMode(WrapMode wrapMode)$/;"	f	class:LinearGradientBrush
SetWrapMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status SetWrapMode(WrapMode wrapMode)$/;"	f	class:TextureBrush
SolidBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	SolidBrush(GpBrush *brush, Status status): Brush(brush, status) {}$/;"	f	class:SolidBrush
SolidBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	SolidBrush(const Color& color)$/;"	f	class:SolidBrush
SolidBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^class SolidBrush: public Brush$/;"	c
TextureBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	TextureBrush(GpBrush *brush, Status status): Brush(brush, status) {}$/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	TextureBrush(Image *image, WrapMode wrapMode = WrapModeTile)$/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	TextureBrush(Image *image, WrapMode wrapMode, const Rect& dstRect)$/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	TextureBrush(Image *image, WrapMode wrapMode, const RectF& dstRect)$/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	TextureBrush(Image *image, WrapMode wrapMode,$/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	TextureBrush(Image *image, const Rect& dstRect,$/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	TextureBrush(Image *image, const RectF& dstRect,$/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^class TextureBrush: public Brush$/;"	c
TranslateTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status TranslateTransform(REAL dx, REAL dy,$/;"	f	class:LinearGradientBrush
TranslateTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status TranslateTransform(REAL dx, REAL dy,$/;"	f	class:TextureBrush
__GDIPLUS_BRUSH_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	24;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	mutable Status lastStatus;$/;"	m	class:Brush
nativeBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	GpBrush *nativeBrush;$/;"	m	class:Brush
updateStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Brush
~Brush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusbrush.h	/^	virtual ~Brush()$/;"	f	class:Brush
AliceBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB AliceBlue            = 0xFFF0F8FFUL;$/;"	m	struct:Color
AlphaMask	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB AlphaMask            = 0xFF000000UL;$/;"	m	struct:Color
AntiqueWhite	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB AntiqueWhite         = 0xFFFAEBD7UL;$/;"	m	struct:Color
Aqua	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Aqua                 = 0xFF00FFFFUL;$/;"	m	struct:Color
Aquamarine	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Aquamarine           = 0xFF7FFFD4UL;$/;"	m	struct:Color
Azure	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Azure                = 0xFFF0FFFFUL;$/;"	m	struct:Color
Beige	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Beige                = 0xFFF5F5DCUL;$/;"	m	struct:Color
Bisque	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Bisque               = 0xFFFFE4C4UL;$/;"	m	struct:Color
Black	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Black                = 0xFF000000UL;$/;"	m	struct:Color
BlanchedAlmond	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB BlanchedAlmond       = 0xFFFFEBCDUL;$/;"	m	struct:Color
Blue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Blue                 = 0xFF0000FFUL;$/;"	m	struct:Color
BlueViolet	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB BlueViolet           = 0xFF8A2BE2UL;$/;"	m	struct:Color
Brown	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Brown                = 0xFFA52A2AUL;$/;"	m	struct:Color
BurlyWood	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB BurlyWood            = 0xFFDEB887UL;$/;"	m	struct:Color
CadetBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB CadetBlue            = 0xFF5F9EA0UL;$/;"	m	struct:Color
Chartreuse	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Chartreuse           = 0xFF7FFF00UL;$/;"	m	struct:Color
Chocolate	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Chocolate            = 0xFFD2691EUL;$/;"	m	struct:Color
Color	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	Color(): Value(0xFF000000) {}$/;"	f	struct:Color
Color	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	Color(ARGB argb): Value(argb) {}$/;"	f	struct:Color
Color	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	Color(BYTE a, BYTE r, BYTE g, BYTE b): Value(MakeARGB(a, r, g, b)) {}$/;"	f	struct:Color
Color	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	Color(BYTE r, BYTE g, BYTE b): Value(MakeARGB(0xFF, r, g, b)) {}$/;"	f	struct:Color
Color	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^typedef struct Color$/;"	s
Color	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^} Color;$/;"	t	typeref:struct:Color
ColorChannelFlags	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^typedef enum ColorChannelFlags {$/;"	g
ColorChannelFlags	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^} ColorChannelFlags;$/;"	t	typeref:enum:ColorChannelFlags
ColorChannelFlagsC	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	ColorChannelFlagsC = 0,$/;"	e	enum:ColorChannelFlags
ColorChannelFlagsK	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	ColorChannelFlagsK = 3,$/;"	e	enum:ColorChannelFlags
ColorChannelFlagsLast	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	ColorChannelFlagsLast = 4$/;"	e	enum:ColorChannelFlags
ColorChannelFlagsM	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	ColorChannelFlagsM = 1,$/;"	e	enum:ColorChannelFlags
ColorChannelFlagsY	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	ColorChannelFlagsY = 2,$/;"	e	enum:ColorChannelFlags
Coral	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Coral                = 0xFFFF7F50UL;$/;"	m	struct:Color
CornflowerBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB CornflowerBlue       = 0xFF6495EDUL;$/;"	m	struct:Color
Cornsilk	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Cornsilk             = 0xFFFFF8DCUL;$/;"	m	struct:Color
Crimson	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Crimson              = 0xFFDC143CUL;$/;"	m	struct:Color
Cyan	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Cyan                 = 0xFF00FFFFUL;$/;"	m	struct:Color
DarkBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkBlue             = 0xFF00008BUL;$/;"	m	struct:Color
DarkCyan	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkCyan             = 0xFF008B8BUL;$/;"	m	struct:Color
DarkGoldenrod	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkGoldenrod        = 0xFFB8860BUL;$/;"	m	struct:Color
DarkGray	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkGray             = 0xFFA9A9A9UL;$/;"	m	struct:Color
DarkGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkGreen            = 0xFF006400UL;$/;"	m	struct:Color
DarkKhaki	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkKhaki            = 0xFFBDB76BUL;$/;"	m	struct:Color
DarkMagenta	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkMagenta          = 0xFF8B008BUL;$/;"	m	struct:Color
DarkOliveGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkOliveGreen       = 0xFF556B2FUL;$/;"	m	struct:Color
DarkOrange	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkOrange           = 0xFFFF8C00UL;$/;"	m	struct:Color
DarkOrchid	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkOrchid           = 0xFF9932CCUL;$/;"	m	struct:Color
DarkRed	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkRed              = 0xFF8B0000UL;$/;"	m	struct:Color
DarkSalmon	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkSalmon           = 0xFFE9967AUL;$/;"	m	struct:Color
DarkSeaGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkSeaGreen         = 0xFF8FBC8FUL;$/;"	m	struct:Color
DarkSlateBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkSlateBlue        = 0xFF483D8BUL;$/;"	m	struct:Color
DarkSlateGray	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkSlateGray        = 0xFF2F4F4FUL;$/;"	m	struct:Color
DarkTurquoise	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkTurquoise        = 0xFF00CED1UL;$/;"	m	struct:Color
DarkViolet	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DarkViolet           = 0xFF9400D3UL;$/;"	m	struct:Color
DeepPink	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DeepPink             = 0xFFFF1493UL;$/;"	m	struct:Color
DeepSkyBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DeepSkyBlue          = 0xFF00BFFFUL;$/;"	m	struct:Color
DimGray	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DimGray              = 0xFF696969UL;$/;"	m	struct:Color
DodgerBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB DodgerBlue           = 0xFF1E90FFUL;$/;"	m	struct:Color
Firebrick	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Firebrick            = 0xFFB22222UL;$/;"	m	struct:Color
FloralWhite	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB FloralWhite          = 0xFFFFFAF0UL;$/;"	m	struct:Color
ForestGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB ForestGreen          = 0xFF228B22UL;$/;"	m	struct:Color
Fuchsia	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Fuchsia              = 0xFFFF00FFUL;$/;"	m	struct:Color
Gainsboro	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Gainsboro            = 0xFFDCDCDCUL;$/;"	m	struct:Color
GetA	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	BYTE GetA() const$/;"	f	struct:Color
GetAlpha	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	BYTE GetAlpha() const$/;"	f	struct:Color
GetB	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	BYTE GetB() const$/;"	f	struct:Color
GetBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	BYTE GetBlue() const$/;"	f	struct:Color
GetG	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	BYTE GetG() const$/;"	f	struct:Color
GetGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	BYTE GetGreen() const$/;"	f	struct:Color
GetR	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	BYTE GetR() const$/;"	f	struct:Color
GetRed	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	BYTE GetRed() const$/;"	f	struct:Color
GetValue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	ARGB GetValue() const$/;"	f	struct:Color
GhostWhite	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB GhostWhite           = 0xFFF8F8FFUL;$/;"	m	struct:Color
Gold	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Gold                 = 0xFFFFD700UL;$/;"	m	struct:Color
Goldenrod	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Goldenrod            = 0xFFDAA520UL;$/;"	m	struct:Color
Gray	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Gray                 = 0xFF808080UL;$/;"	m	struct:Color
Green	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Green                = 0xFF008000UL;$/;"	m	struct:Color
GreenYellow	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB GreenYellow          = 0xFFADFF2FUL;$/;"	m	struct:Color
Honeydew	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Honeydew             = 0xFFF0FFF0UL;$/;"	m	struct:Color
HotPink	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB HotPink              = 0xFFFF69B4UL;$/;"	m	struct:Color
IndianRed	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB IndianRed            = 0xFFCD5C5CUL;$/;"	m	struct:Color
Indigo	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Indigo               = 0xFF4B0082UL;$/;"	m	struct:Color
Ivory	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Ivory                = 0xFFFFFFF0UL;$/;"	m	struct:Color
Khaki	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Khaki                = 0xFFF0E68CUL;$/;"	m	struct:Color
Lavender	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Lavender             = 0xFFE6E6FAUL;$/;"	m	struct:Color
LavenderBlush	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LavenderBlush        = 0xFFFFF0F5UL;$/;"	m	struct:Color
LawnGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LawnGreen            = 0xFF7CFC00UL;$/;"	m	struct:Color
LemonChiffon	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LemonChiffon         = 0xFFFFFACDUL;$/;"	m	struct:Color
LightBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LightBlue            = 0xFFADD8E6UL;$/;"	m	struct:Color
LightCoral	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LightCoral           = 0xFFF08080UL;$/;"	m	struct:Color
LightCyan	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LightCyan            = 0xFFE0FFFFUL;$/;"	m	struct:Color
LightGoldenrodYellow	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LightGoldenrodYellow = 0xFFFAFAD2UL;$/;"	m	struct:Color
LightGray	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LightGray            = 0xFFD3D3D3UL;$/;"	m	struct:Color
LightGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LightGreen           = 0xFF90EE90UL;$/;"	m	struct:Color
LightPink	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LightPink            = 0xFFFFB6C1UL;$/;"	m	struct:Color
LightSalmon	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LightSalmon          = 0xFFFFA07AUL;$/;"	m	struct:Color
LightSeaGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LightSeaGreen        = 0xFF20B2AAUL;$/;"	m	struct:Color
LightSkyBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LightSkyBlue         = 0xFF87CEFAUL;$/;"	m	struct:Color
LightSlateGray	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LightSlateGray       = 0xFF778899UL;$/;"	m	struct:Color
LightSteelBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LightSteelBlue       = 0xFFB0C4DEUL;$/;"	m	struct:Color
LightYellow	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LightYellow          = 0xFFFFFFE0UL;$/;"	m	struct:Color
Lime	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Lime                 = 0xFF00FF00UL;$/;"	m	struct:Color
LimeGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB LimeGreen            = 0xFF32CD32UL;$/;"	m	struct:Color
Linen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Linen                = 0xFFFAF0E6UL;$/;"	m	struct:Color
Magenta	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Magenta              = 0xFFFF00FFUL;$/;"	m	struct:Color
MakeARGB	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static ARGB MakeARGB(BYTE a, BYTE r, BYTE g, BYTE b)$/;"	f	struct:Color
Maroon	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Maroon               = 0xFF800000UL;$/;"	m	struct:Color
MediumAquamarine	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB MediumAquamarine     = 0xFF66CDAAUL;$/;"	m	struct:Color
MediumBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB MediumBlue           = 0xFF0000CDUL;$/;"	m	struct:Color
MediumOrchid	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB MediumOrchid         = 0xFFBA55D3UL;$/;"	m	struct:Color
MediumPurple	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB MediumPurple         = 0xFF9370DBUL;$/;"	m	struct:Color
MediumSeaGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB MediumSeaGreen       = 0xFF3CB371UL;$/;"	m	struct:Color
MediumSlateBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB MediumSlateBlue      = 0xFF7B68EEUL;$/;"	m	struct:Color
MediumSpringGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB MediumSpringGreen    = 0xFF00FA9AUL;$/;"	m	struct:Color
MediumTurquoise	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB MediumTurquoise      = 0xFF48D1CCUL;$/;"	m	struct:Color
MediumVioletRed	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB MediumVioletRed      = 0xFFC71585UL;$/;"	m	struct:Color
MidnightBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB MidnightBlue         = 0xFF191970UL;$/;"	m	struct:Color
MintCream	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB MintCream            = 0xFFF5FFFAUL;$/;"	m	struct:Color
MistyRose	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB MistyRose            = 0xFFFFE4E1UL;$/;"	m	struct:Color
Moccasin	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Moccasin             = 0xFFFFE4B5UL;$/;"	m	struct:Color
NavajoWhite	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB NavajoWhite          = 0xFFFFDEADUL;$/;"	m	struct:Color
Navy	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Navy                 = 0xFF000080UL;$/;"	m	struct:Color
OldLace	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB OldLace              = 0xFFFDF5E6UL;$/;"	m	struct:Color
Olive	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Olive                = 0xFF808000UL;$/;"	m	struct:Color
OliveDrab	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB OliveDrab            = 0xFF6B8E23UL;$/;"	m	struct:Color
Orange	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Orange               = 0xFFFFA500UL;$/;"	m	struct:Color
OrangeRed	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB OrangeRed            = 0xFFFF4500UL;$/;"	m	struct:Color
Orchid	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Orchid               = 0xFFDA70D6UL;$/;"	m	struct:Color
PaleGoldenrod	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB PaleGoldenrod        = 0xFFEEE8AAUL;$/;"	m	struct:Color
PaleGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB PaleGreen            = 0xFF98FB98UL;$/;"	m	struct:Color
PaleTurquoise	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB PaleTurquoise        = 0xFFAFEEEEUL;$/;"	m	struct:Color
PaleVioletRed	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB PaleVioletRed        = 0xFFDB7093UL;$/;"	m	struct:Color
PapayaWhip	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB PapayaWhip           = 0xFFFFEFD5UL;$/;"	m	struct:Color
PeachPuff	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB PeachPuff            = 0xFFFFDAB9UL;$/;"	m	struct:Color
Peru	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Peru                 = 0xFFCD853FUL;$/;"	m	struct:Color
Pink	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Pink                 = 0xFFFFC0CBUL;$/;"	m	struct:Color
Plum	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Plum                 = 0xFFDDA0DDUL;$/;"	m	struct:Color
PowderBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB PowderBlue           = 0xFFB0E0E6UL;$/;"	m	struct:Color
Purple	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Purple               = 0xFF800080UL;$/;"	m	struct:Color
Red	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Red                  = 0xFFFF0000UL;$/;"	m	struct:Color
RosyBrown	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB RosyBrown            = 0xFFBC8F8FUL;$/;"	m	struct:Color
RoyalBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB RoyalBlue            = 0xFF4169E1UL;$/;"	m	struct:Color
SaddleBrown	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB SaddleBrown          = 0xFF8B4513UL;$/;"	m	struct:Color
Salmon	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Salmon               = 0xFFFA8072UL;$/;"	m	struct:Color
SandyBrown	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB SandyBrown           = 0xFFF4A460UL;$/;"	m	struct:Color
SeaGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB SeaGreen             = 0xFF2E8B57UL;$/;"	m	struct:Color
SeaShell	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB SeaShell             = 0xFFFFF5EEUL;$/;"	m	struct:Color
SetFromCOLORREF	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	VOID SetFromCOLORREF(COLORREF rgb)$/;"	f	struct:Color
SetValue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	VOID SetValue(ARGB argb)$/;"	f	struct:Color
Sienna	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Sienna               = 0xFFA0522DUL;$/;"	m	struct:Color
Silver	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Silver               = 0xFFC0C0C0UL;$/;"	m	struct:Color
SkyBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB SkyBlue              = 0xFF87CEEBUL;$/;"	m	struct:Color
SlateBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB SlateBlue            = 0xFF6A5ACDUL;$/;"	m	struct:Color
SlateGray	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB SlateGray            = 0xFF708090UL;$/;"	m	struct:Color
Snow	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Snow                 = 0xFFFFFAFAUL;$/;"	m	struct:Color
SpringGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB SpringGreen          = 0xFF00FF7FUL;$/;"	m	struct:Color
SteelBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB SteelBlue            = 0xFF4682B4UL;$/;"	m	struct:Color
Tan	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Tan                  = 0xFFD2B48CUL;$/;"	m	struct:Color
Teal	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Teal                 = 0xFF008080UL;$/;"	m	struct:Color
Thistle	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Thistle              = 0xFFD8BFD8UL;$/;"	m	struct:Color
ToCOLORREF	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	COLORREF ToCOLORREF() const$/;"	f	struct:Color
Tomato	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Tomato               = 0xFFFF6347UL;$/;"	m	struct:Color
Transparent	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Transparent          = 0x00FFFFFFUL;$/;"	m	struct:Color
Turquoise	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Turquoise            = 0xFF40E0D0UL;$/;"	m	struct:Color
Value	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	ARGB Value;$/;"	m	struct:Color
Violet	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Violet               = 0xFFEE82EEUL;$/;"	m	struct:Color
Wheat	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Wheat                = 0xFFF5DEB3UL;$/;"	m	struct:Color
White	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB White                = 0xFFFFFFFFUL;$/;"	m	struct:Color
WhiteSmoke	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB WhiteSmoke           = 0xFFF5F5F5UL;$/;"	m	struct:Color
Yellow	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB Yellow               = 0xFFFFFF00UL;$/;"	m	struct:Color
YellowGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	/^	static const ARGB YellowGreen          = 0xFF9ACD32UL;$/;"	m	struct:Color
__GDIPLUS_COLOR_H	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolor.h	24;"	d
ColorAdjustType	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^typedef enum ColorAdjustType {$/;"	g
ColorAdjustType	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^} ColorAdjustType;$/;"	t	typeref:enum:ColorAdjustType
ColorAdjustTypeAny	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	ColorAdjustTypeAny = 6$/;"	e	enum:ColorAdjustType
ColorAdjustTypeBitmap	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	ColorAdjustTypeBitmap = 1,$/;"	e	enum:ColorAdjustType
ColorAdjustTypeBrush	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	ColorAdjustTypeBrush = 2,$/;"	e	enum:ColorAdjustType
ColorAdjustTypeCount	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	ColorAdjustTypeCount = 5,$/;"	e	enum:ColorAdjustType
ColorAdjustTypeDefault	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	ColorAdjustTypeDefault = 0,$/;"	e	enum:ColorAdjustType
ColorAdjustTypePen	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	ColorAdjustTypePen = 3,$/;"	e	enum:ColorAdjustType
ColorAdjustTypeText	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	ColorAdjustTypeText = 4,$/;"	e	enum:ColorAdjustType
ColorChannelLUT	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^typedef BYTE ColorChannelLUT[256];$/;"	t
ColorMap	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^typedef struct ColorMap {$/;"	s
ColorMap	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^} ColorMap;$/;"	t	typeref:struct:ColorMap
ColorMatrix	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^typedef struct ColorMatrix {$/;"	s
ColorMatrix	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^} ColorMatrix;$/;"	t	typeref:struct:ColorMatrix
ColorMatrixFlags	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^typedef enum ColorMatrixFlags {$/;"	g
ColorMatrixFlags	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^} ColorMatrixFlags;$/;"	t	typeref:enum:ColorMatrixFlags
ColorMatrixFlagsAltGray	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	ColorMatrixFlagsAltGray = 2$/;"	e	enum:ColorMatrixFlags
ColorMatrixFlagsDefault	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	ColorMatrixFlagsDefault = 0,$/;"	e	enum:ColorMatrixFlags
ColorMatrixFlagsSkipGrays	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	ColorMatrixFlagsSkipGrays = 1,$/;"	e	enum:ColorMatrixFlags
HistogramFormat	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^typedef enum HistogramFormat {$/;"	g
HistogramFormat	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^} HistogramFormat;$/;"	t	typeref:enum:HistogramFormat
HistogramFormatA	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	HistogramFormatA = 7$/;"	e	enum:HistogramFormat
HistogramFormatARGB	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	HistogramFormatARGB = 0,$/;"	e	enum:HistogramFormat
HistogramFormatB	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	HistogramFormatB = 4,$/;"	e	enum:HistogramFormat
HistogramFormatG	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	HistogramFormatG = 5,$/;"	e	enum:HistogramFormat
HistogramFormatGray	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	HistogramFormatGray = 3,$/;"	e	enum:HistogramFormat
HistogramFormatPARGB	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	HistogramFormatPARGB = 1,$/;"	e	enum:HistogramFormat
HistogramFormatR	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	HistogramFormatR = 6,$/;"	e	enum:HistogramFormat
HistogramFormatRGB	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	HistogramFormatRGB = 2,$/;"	e	enum:HistogramFormat
__GDIPLUS_COLORMATRIX_H	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	24;"	d
m	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	REAL m[5][5];$/;"	m	struct:ColorMatrix
newColor	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	Color newColor;$/;"	m	struct:ColorMap
oldColor	C++\ege-13.04.02-full\src\gdiplus3\gdipluscolormatrix.h	/^	Color oldColor;$/;"	m	struct:ColorMap
AdjustBlackSaturation	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	AdjustBlackSaturation = 7$/;"	e	enum:CurveAdjustments
AdjustContrast	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	AdjustContrast = 2,$/;"	e	enum:CurveAdjustments
AdjustDensity	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	AdjustDensity = 1,$/;"	e	enum:CurveAdjustments
AdjustExposure	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	AdjustExposure = 0,$/;"	e	enum:CurveAdjustments
AdjustHighlight	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	AdjustHighlight = 3,$/;"	e	enum:CurveAdjustments
AdjustMidtone	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	AdjustMidtone = 5,$/;"	e	enum:CurveAdjustments
AdjustShadow	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	AdjustShadow = 4,$/;"	e	enum:CurveAdjustments
AdjustWhiteSaturation	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	AdjustWhiteSaturation = 6,$/;"	e	enum:CurveAdjustments
BlurParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^typedef struct BlurParams {$/;"	s
BlurParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^} BlurParams;$/;"	t	typeref:struct:BlurParams
BrightnessContrastParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^typedef struct BrightnessContrastParams {$/;"	s
BrightnessContrastParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^} BrightnessContrastParams;$/;"	t	typeref:struct:BrightnessContrastParams
ColorBalanceParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^typedef struct ColorBalanceParams {$/;"	s
ColorBalanceParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^} ColorBalanceParams;$/;"	t	typeref:struct:ColorBalanceParams
ColorCurveParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^typedef struct ColorCurveParams {$/;"	s
ColorCurveParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^} ColorCurveParams;$/;"	t	typeref:struct:ColorCurveParams
ColorLUTParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^typedef struct ColorLUTParams {$/;"	s
ColorLUTParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^} ColorLUTParams;$/;"	t	typeref:struct:ColorLUTParams
CurveAdjustments	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^typedef enum CurveAdjustments {$/;"	g
CurveAdjustments	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^} CurveAdjustments;$/;"	t	typeref:enum:CurveAdjustments
CurveChannel	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^typedef enum CurveChannel {$/;"	g
CurveChannel	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^} CurveChannel;$/;"	t	typeref:enum:CurveChannel
CurveChannelAll	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	CurveChannelAll = 0,$/;"	e	enum:CurveChannel
CurveChannelBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	CurveChannelBlue = 3$/;"	e	enum:CurveChannel
CurveChannelGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	CurveChannelGreen = 2,$/;"	e	enum:CurveChannel
CurveChannelRed	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	CurveChannelRed = 1,$/;"	e	enum:CurveChannel
HueSaturationLightnessParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^typedef struct HueSaturationLightnessParams {$/;"	s
HueSaturationLightnessParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^} HueSaturationLightnessParams;$/;"	t	typeref:struct:HueSaturationLightnessParams
LevelsParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^typedef struct LevelsParams {$/;"	s
LevelsParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^} LevelsParams;$/;"	t	typeref:struct:LevelsParams
RedEyeCorrectionParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^typedef struct RedEyeCorrectionParams {$/;"	s
RedEyeCorrectionParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^} RedEyeCorrectionParams;$/;"	t	typeref:struct:RedEyeCorrectionParams
SharpenParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^typedef struct SharpenParams {$/;"	s
SharpenParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^} SharpenParams;$/;"	t	typeref:struct:SharpenParams
TintParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^typedef struct TintParams {$/;"	s
TintParams	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^} TintParams;$/;"	t	typeref:struct:TintParams
__GDIPLUS_EFFECTS_H	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	24;"	d
adjustValue	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	INT adjustValue;$/;"	m	struct:ColorCurveParams
adjustment	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	CurveAdjustments adjustment;$/;"	m	struct:ColorCurveParams
amount	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	INT amount;$/;"	m	struct:TintParams
amount	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	REAL amount;$/;"	m	struct:SharpenParams
areas	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	RECT *areas;$/;"	m	struct:RedEyeCorrectionParams
brightnessLevel	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	INT brightnessLevel;$/;"	m	struct:BrightnessContrastParams
channel	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	CurveChannel channel;$/;"	m	struct:ColorCurveParams
contrastLevel	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	INT contrastLevel;$/;"	m	struct:BrightnessContrastParams
cyanRed	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	INT cyanRed;$/;"	m	struct:ColorBalanceParams
expandEdge	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	BOOL expandEdge;$/;"	m	struct:BlurParams
highlight	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	INT highlight;$/;"	m	struct:LevelsParams
hue	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	INT hue;$/;"	m	struct:TintParams
hueLevel	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	INT hueLevel;$/;"	m	struct:HueSaturationLightnessParams
lightnessLevel	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	INT lightnessLevel;$/;"	m	struct:HueSaturationLightnessParams
lutA	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	ColorChannelLUT lutA;$/;"	m	struct:ColorLUTParams
lutB	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	ColorChannelLUT lutB;$/;"	m	struct:ColorLUTParams
lutG	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	ColorChannelLUT lutG;$/;"	m	struct:ColorLUTParams
lutR	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	ColorChannelLUT lutR;$/;"	m	struct:ColorLUTParams
magentaGreen	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	INT magentaGreen;$/;"	m	struct:ColorBalanceParams
midtone	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	INT midtone;$/;"	m	struct:LevelsParams
numberOfAreas	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	UINT numberOfAreas;$/;"	m	struct:RedEyeCorrectionParams
radius	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	REAL radius;$/;"	m	struct:BlurParams
radius	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	REAL radius;$/;"	m	struct:SharpenParams
saturationLevel	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	INT saturationLevel;$/;"	m	struct:HueSaturationLightnessParams
shadow	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	INT shadow;$/;"	m	struct:LevelsParams
yellowBlue	C++\ege-13.04.02-full\src\gdiplus3\gdipluseffects.h	/^	INT yellowBlue;$/;"	m	struct:ColorBalanceParams
BrushType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum BrushType {$/;"	g
BrushType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} BrushType;$/;"	t	typeref:enum:BrushType
BrushTypeHatchFill	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	BrushTypeHatchFill = 1,$/;"	e	enum:BrushType
BrushTypeLinearGradient	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	BrushTypeLinearGradient = 4$/;"	e	enum:BrushType
BrushTypePathGradient	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	BrushTypePathGradient = 3,$/;"	e	enum:BrushType
BrushTypeSolidColor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	BrushTypeSolidColor = 0,$/;"	e	enum:BrushType
BrushTypeTextureFill	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	BrushTypeTextureFill = 2,$/;"	e	enum:BrushType
CombineMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum CombineMode {$/;"	g
CombineMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} CombineMode;$/;"	t	typeref:enum:CombineMode
CombineModeComplement	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CombineModeComplement = 5$/;"	e	enum:CombineMode
CombineModeExclude	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CombineModeExclude = 4,$/;"	e	enum:CombineMode
CombineModeIntersect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CombineModeIntersect = 1,$/;"	e	enum:CombineMode
CombineModeReplace	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CombineModeReplace = 0,$/;"	e	enum:CombineMode
CombineModeUnion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CombineModeUnion = 2,$/;"	e	enum:CombineMode
CombineModeXor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CombineModeXor = 3,$/;"	e	enum:CombineMode
CompositingMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum CompositingMode {$/;"	g
CompositingMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} CompositingMode;$/;"	t	typeref:enum:CompositingMode
CompositingModeSourceCopy	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CompositingModeSourceCopy = 1$/;"	e	enum:CompositingMode
CompositingModeSourceOver	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CompositingModeSourceOver = 0,$/;"	e	enum:CompositingMode
CompositingQuality	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum CompositingQuality {$/;"	g
CompositingQuality	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} CompositingQuality;$/;"	t	typeref:enum:CompositingQuality
CompositingQualityAssumeLinear	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CompositingQualityAssumeLinear = 4$/;"	e	enum:CompositingQuality
CompositingQualityDefault	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CompositingQualityDefault = 0,$/;"	e	enum:CompositingQuality
CompositingQualityGammaCorrected	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CompositingQualityGammaCorrected = 3,$/;"	e	enum:CompositingQuality
CompositingQualityHighQuality	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CompositingQualityHighQuality = 2,$/;"	e	enum:CompositingQuality
CompositingQualityHighSpeed	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CompositingQualityHighSpeed = 1,$/;"	e	enum:CompositingQuality
CoordinateSpace	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum CoordinateSpace {$/;"	g
CoordinateSpace	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} CoordinateSpace;$/;"	t	typeref:enum:CoordinateSpace
CoordinateSpaceDevice	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CoordinateSpaceDevice = 2$/;"	e	enum:CoordinateSpace
CoordinateSpacePage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CoordinateSpacePage = 1,$/;"	e	enum:CoordinateSpace
CoordinateSpaceWorld	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CoordinateSpaceWorld = 0,$/;"	e	enum:CoordinateSpace
CustomLineCapType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum CustomLineCapType {$/;"	g
CustomLineCapType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} CustomLineCapType;$/;"	t	typeref:enum:CustomLineCapType
CustomLineCapTypeAdjustableArrow	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CustomLineCapTypeAdjustableArrow = 1$/;"	e	enum:CustomLineCapType
CustomLineCapTypeDefault	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	CustomLineCapTypeDefault = 0,$/;"	e	enum:CustomLineCapType
DashCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum DashCap {$/;"	g
DashCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} DashCap;$/;"	t	typeref:enum:DashCap
DashCapFlat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DashCapFlat = 0,$/;"	e	enum:DashCap
DashCapRound	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DashCapRound = 2,$/;"	e	enum:DashCap
DashCapTriangle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DashCapTriangle = 3$/;"	e	enum:DashCap
DashStyle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum DashStyle {$/;"	g
DashStyle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} DashStyle;$/;"	t	typeref:enum:DashStyle
DashStyleCustom	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DashStyleCustom = 5$/;"	e	enum:DashStyle
DashStyleDash	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DashStyleDash = 1,$/;"	e	enum:DashStyle
DashStyleDashDot	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DashStyleDashDot = 3,$/;"	e	enum:DashStyle
DashStyleDashDotDot	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DashStyleDashDotDot = 4,$/;"	e	enum:DashStyle
DashStyleDot	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DashStyleDot = 2,$/;"	e	enum:DashStyle
DashStyleSolid	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DashStyleSolid = 0,$/;"	e	enum:DashStyle
DitherType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum DitherType {$/;"	g
DitherType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} DitherType;$/;"	t	typeref:enum:DitherType
DitherTypeDualSpiral4x4	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DitherTypeDualSpiral4x4 = 8,$/;"	e	enum:DitherType
DitherTypeDualSpiral8x8	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DitherTypeDualSpiral8x8 = 9,$/;"	e	enum:DitherType
DitherTypeErrorDiffusion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DitherTypeErrorDiffusion = 10$/;"	e	enum:DitherType
DitherTypeNone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DitherTypeNone = 0,$/;"	e	enum:DitherType
DitherTypeOrdered16x16	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DitherTypeOrdered16x16 = 4,$/;"	e	enum:DitherType
DitherTypeOrdered4x4	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DitherTypeOrdered4x4 = 2,$/;"	e	enum:DitherType
DitherTypeOrdered8x8	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DitherTypeOrdered8x8 = 3,$/;"	e	enum:DitherType
DitherTypeOrdered91x91	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DitherTypeOrdered91x91 = 5,$/;"	e	enum:DitherType
DitherTypeSolid	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DitherTypeSolid = 1,$/;"	e	enum:DitherType
DitherTypeSpiral4x4	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DitherTypeSpiral4x4 = 6,$/;"	e	enum:DitherType
DitherTypeSpiral8x8	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DitherTypeSpiral8x8 = 7,$/;"	e	enum:DitherType
DriverStringOptions	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum DriverStringOptions {$/;"	g
DriverStringOptions	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} DriverStringOptions;$/;"	t	typeref:enum:DriverStringOptions
DriverStringOptionsCmapLookup	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DriverStringOptionsCmapLookup = 1,$/;"	e	enum:DriverStringOptions
DriverStringOptionsLimitSubpixel	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DriverStringOptionsLimitSubpixel = 8$/;"	e	enum:DriverStringOptions
DriverStringOptionsRealizedAdvance	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DriverStringOptionsRealizedAdvance = 4,$/;"	e	enum:DriverStringOptions
DriverStringOptionsVertical	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	DriverStringOptionsVertical = 2,$/;"	e	enum:DriverStringOptions
EmfPlusRecordTotal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTotal,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum EmfPlusRecordType {$/;"	g
EmfPlusRecordType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} EmfPlusRecordType;$/;"	t	typeref:enum:EmfPlusRecordType
EmfPlusRecordTypeBeginContainer	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeBeginContainer,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeBeginContainerNoParams	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeBeginContainerNoParams,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeClear	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeClear,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeComment	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeComment,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawArc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeDrawArc,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawBeziers	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeDrawBeziers,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawClosedCurve	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeDrawClosedCurve,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawCurve	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeDrawCurve,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawDriverString	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeDrawDriverString,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawEllipse	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeDrawEllipse,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeDrawImage,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawImagePoints	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeDrawImagePoints,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawLines	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeDrawLines,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeDrawPath,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawPie	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeDrawPie,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawRects	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeDrawRects,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawString	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeDrawString,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeEndContainer	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeEndContainer,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeEndOfFile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeEndOfFile,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillClosedCurve	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeFillClosedCurve,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillEllipse	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeFillEllipse,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeFillPath,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillPie	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeFillPie,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillPolygon	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeFillPolygon,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillRects	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeFillRects,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillRegion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeFillRegion,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeGetDC	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeGetDC,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeHeader	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeHeader,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeInvalid	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeInvalid                   = GDIP_EMFPLUS_RECORD_BASE,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMax	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeMax = EmfPlusRecordTotal-1,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMin	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeMin = EmfPlusRecordTypeHeader$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMultiFormatEnd	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeMultiFormatEnd,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMultiFormatSection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeMultiFormatSection,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMultiFormatStart	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeMultiFormatStart,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMultiplyWorldTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeMultiplyWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeObject	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeObject,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeOffsetClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeOffsetClip,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeResetClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeResetClip,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeResetWorldTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeResetWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeRestore	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeRestore,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeRotateWorldTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeRotateWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSave	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSave,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeScaleWorldTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeScaleWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSerializableObject	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSerializableObject,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetAntiAliasMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetAntiAliasMode,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetClipPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetClipPath,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetClipRect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetClipRect,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetClipRegion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetClipRegion,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetCompositingMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetCompositingMode,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetCompositingQuality	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetCompositingQuality,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetGammaValue	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetGammaValue,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetInterpolationMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetInterpolationMode,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetPageTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetPageTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetPixelOffsetMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetPixelOffsetMode,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetRenderingOrigin	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetRenderingOrigin,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetTSClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetTSClip,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetTSGraphics	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetTSGraphics,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetTextContrast	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetTextContrast,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetTextRenderingHint	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetTextRenderingHint,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetWorldTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeSetWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeStrokeFillPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeStrokeFillPath,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeTranslateWorldTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfPlusRecordTypeTranslateWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeAbortPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeAbortPath                     = EMR_ABORTPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeAlphaBlend	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeAlphaBlend                    = 114,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeAngleArc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeAngleArc                      = EMR_ANGLEARC,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeArc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeArc                           = EMR_ARC,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeArcTo	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeArcTo                         = EMR_ARCTO,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeBeginPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeBeginPath                     = EMR_BEGINPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeBitBlt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeBitBlt                        = EMR_BITBLT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeChord	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeChord                         = EMR_CHORD,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCloseFigure	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeCloseFigure                   = EMR_CLOSEFIGURE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeColorCorrectPalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeColorCorrectPalette           = 111,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeColorMatchToTargetW	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeColorMatchToTargetW           = 121,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreateBrushIndirect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeCreateBrushIndirect           = EMR_CREATEBRUSHINDIRECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreateColorSpace	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeCreateColorSpace              = 99,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreateColorSpaceW	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeCreateColorSpaceW             = 122,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreateDIBPatternBrushPt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeCreateDIBPatternBrushPt       = EMR_CREATEDIBPATTERNBRUSHPT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreateMonoBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeCreateMonoBrush               = EMR_CREATEMONOBRUSH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreatePalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeCreatePalette                 = EMR_CREATEPALETTE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreatePen	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeCreatePen                     = EMR_CREATEPEN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeDeleteColorSpace	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeDeleteColorSpace              = 101,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeDeleteObject	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeDeleteObject                  = EMR_DELETEOBJECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeDrawEscape	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeDrawEscape                    = 105,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeEOF	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeEOF                           = EMR_EOF,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeEllipse	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeEllipse                       = EMR_ELLIPSE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeEndPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeEndPath                       = EMR_ENDPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExcludeClipRect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeExcludeClipRect               = EMR_EXCLUDECLIPRECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtCreateFontIndirect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeExtCreateFontIndirect         = EMR_EXTCREATEFONTINDIRECTW,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtCreatePen	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeExtCreatePen                  = EMR_EXTCREATEPEN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtEscape	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeExtEscape                     = 106,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtFloodFill	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeExtFloodFill                  = EMR_EXTFLOODFILL,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtSelectClipRgn	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeExtSelectClipRgn              = EMR_EXTSELECTCLIPRGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtTextOutA	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeExtTextOutA                   = EMR_EXTTEXTOUTA,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtTextOutW	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeExtTextOutW                   = EMR_EXTTEXTOUTW,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeFillPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeFillPath                      = EMR_FILLPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeFillRgn	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeFillRgn                       = EMR_FILLRGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeFlattenPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeFlattenPath                   = EMR_FLATTENPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeForceUFIMapping	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeForceUFIMapping               = 109,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeFrameRgn	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeFrameRgn                      = EMR_FRAMERGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeGLSBoundedRecord	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeGLSBoundedRecord              = 103,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeGLSRecord	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeGLSRecord                     = 102,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeGdiComment	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeGdiComment                    = EMR_GDICOMMENT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeGradientFill	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeGradientFill                  = 118,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeHeader	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeHeader                        = EMR_HEADER,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeIntersectClipRect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeIntersectClipRect             = EMR_INTERSECTCLIPRECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeInvertRgn	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeInvertRgn                     = EMR_INVERTRGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeLineTo	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeLineTo                        = EMR_LINETO,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeMaskBlt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeMaskBlt                       = EMR_MASKBLT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeMax	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeMax                           = 122,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeMin	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeMin                           = 1,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeModifyWorldTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeModifyWorldTransform          = EMR_MODIFYWORLDTRANSFORM,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeMoveToEx	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeMoveToEx                      = EMR_MOVETOEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeNamedEscape	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeNamedEscape                   = 110,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeOffsetClipRgn	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeOffsetClipRgn                 = EMR_OFFSETCLIPRGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePaintRgn	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePaintRgn                      = EMR_PAINTRGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePie	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePie                           = EMR_PIE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePixelFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePixelFormat                   = 104,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePlgBlt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePlgBlt                        = EMR_PLGBLT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyBezier	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolyBezier                    = EMR_POLYBEZIER,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyBezier16	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolyBezier16                  = EMR_POLYBEZIER16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyBezierTo	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolyBezierTo                  = EMR_POLYBEZIERTO,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyBezierTo16	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolyBezierTo16                = EMR_POLYBEZIERTO16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyDraw	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolyDraw                      = EMR_POLYDRAW,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyDraw16	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolyDraw16                    = EMR_POLYDRAW16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyLineTo	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolyLineTo                    = EMR_POLYLINETO,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyPolygon	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolyPolygon                   = EMR_POLYPOLYGON,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyPolygon16	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolyPolygon16                 = EMR_POLYPOLYGON16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyPolyline	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolyPolyline                  = EMR_POLYPOLYLINE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyPolyline16	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolyPolyline16                = EMR_POLYPOLYLINE16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyTextOutA	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolyTextOutA                  = EMR_POLYTEXTOUTA,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyTextOutW	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolyTextOutW                  = EMR_POLYTEXTOUTW,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolygon	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolygon                       = EMR_POLYGON,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolygon16	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolygon16                     = EMR_POLYGON16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyline	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolyline                      = EMR_POLYLINE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyline16	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolyline16                    = EMR_POLYLINE16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolylineTo16	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypePolylineTo16                  = EMR_POLYLINETO16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeRealizePalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeRealizePalette                = EMR_REALIZEPALETTE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeRectangle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeRectangle                     = EMR_RECTANGLE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeReserved_069	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeReserved_069                  = 69,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeReserved_117	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeReserved_117                  = 117,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeResizePalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeResizePalette                 = EMR_RESIZEPALETTE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeRestoreDC	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeRestoreDC                     = EMR_RESTOREDC,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeRoundRect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeRoundRect                     = EMR_ROUNDRECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSaveDC	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSaveDC                        = EMR_SAVEDC,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeScaleViewportExtEx	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeScaleViewportExtEx            = EMR_SCALEVIEWPORTEXTEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeScaleWindowExtEx	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeScaleWindowExtEx              = EMR_SCALEWINDOWEXTEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSelectClipPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSelectClipPath                = EMR_SELECTCLIPPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSelectObject	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSelectObject                  = EMR_SELECTOBJECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSelectPalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSelectPalette                 = EMR_SELECTPALETTE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetArcDirection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetArcDirection               = EMR_SETARCDIRECTION,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetBkColor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetBkColor                    = EMR_SETBKCOLOR,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetBkMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetBkMode                     = EMR_SETBKMODE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetBrushOrgEx	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetBrushOrgEx                 = EMR_SETBRUSHORGEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetColorAdjustment	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetColorAdjustment            = EMR_SETCOLORADJUSTMENT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetColorSpace	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetColorSpace                 = 100,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetDIBitsToDevice	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetDIBitsToDevice             = EMR_SETDIBITSTODEVICE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetICMMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetICMMode                    = 98,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetICMProfileA	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetICMProfileA                = 112,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetICMProfileW	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetICMProfileW                = 113,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetLayout	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetLayout                     = 115,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetLinkedUFIs	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetLinkedUFIs                 = 119,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetMapMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetMapMode                    = EMR_SETMAPMODE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetMapperFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetMapperFlags                = EMR_SETMAPPERFLAGS,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetMetaRgn	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetMetaRgn                    = EMR_SETMETARGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetMiterLimit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetMiterLimit                 = EMR_SETMITERLIMIT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetPaletteEntries	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetPaletteEntries             = EMR_SETPALETTEENTRIES,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetPixelV	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetPixelV                     = EMR_SETPIXELV,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetPolyFillMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetPolyFillMode               = EMR_SETPOLYFILLMODE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetROP2	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetROP2                       = EMR_SETROP2,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetStretchBltMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetStretchBltMode             = EMR_SETSTRETCHBLTMODE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetTextAlign	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetTextAlign                  = EMR_SETTEXTALIGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetTextColor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetTextColor                  = EMR_SETTEXTCOLOR,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetTextJustification	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetTextJustification          = 120,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetViewportExtEx	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetViewportExtEx              = EMR_SETVIEWPORTEXTEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetViewportOrgEx	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetViewportOrgEx              = EMR_SETVIEWPORTORGEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetWindowExtEx	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetWindowExtEx                = EMR_SETWINDOWEXTEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetWindowOrgEx	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetWindowOrgEx                = EMR_SETWINDOWORGEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetWorldTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSetWorldTransform             = EMR_SETWORLDTRANSFORM,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSmallTextOut	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeSmallTextOut                  = 108,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeStartDoc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeStartDoc                      = 107,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeStretchBlt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeStretchBlt                    = EMR_STRETCHBLT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeStretchDIBits	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeStretchDIBits                 = EMR_STRETCHDIBITS,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeStrokeAndFillPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeStrokeAndFillPath             = EMR_STROKEANDFILLPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeStrokePath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeStrokePath                    = EMR_STROKEPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeTransparentBlt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeTransparentBlt                = 116,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeWidenPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfRecordTypeWidenPath                     = EMR_WIDENPATH,$/;"	e	enum:EmfPlusRecordType
EmfToWmfBitsFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum EmfToWmfBitsFlags {$/;"	g
EmfToWmfBitsFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} EmfToWmfBitsFlags;$/;"	t	typeref:enum:EmfToWmfBitsFlags
EmfToWmfBitsFlagsDefault	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfToWmfBitsFlagsDefault = 0,$/;"	e	enum:EmfToWmfBitsFlags
EmfToWmfBitsFlagsEmbedEmf	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfToWmfBitsFlagsEmbedEmf = 1,$/;"	e	enum:EmfToWmfBitsFlags
EmfToWmfBitsFlagsIncludePlaceable	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfToWmfBitsFlagsIncludePlaceable = 2,$/;"	e	enum:EmfToWmfBitsFlags
EmfToWmfBitsFlagsNoXORClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfToWmfBitsFlagsNoXORClip = 4$/;"	e	enum:EmfToWmfBitsFlags
EmfType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum EmfType {$/;"	g
EmfType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} EmfType;$/;"	t	typeref:enum:EmfType
EmfTypeEmfOnly	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfTypeEmfOnly = 3,$/;"	e	enum:EmfType
EmfTypeEmfPlusDual	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfTypeEmfPlusDual = 5$/;"	e	enum:EmfType
EmfTypeEmfPlusOnly	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EmfTypeEmfPlusOnly = 4,$/;"	e	enum:EmfType
EncoderParameterValueType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum EncoderParameterValueType {$/;"	g
EncoderParameterValueType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} EncoderParameterValueType;$/;"	t	typeref:enum:EncoderParameterValueType
EncoderParameterValueTypeASCII	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderParameterValueTypeASCII = 2,$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeByte	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderParameterValueTypeByte = 1,$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeLong	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderParameterValueTypeLong = 4,$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeLongRange	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderParameterValueTypeLongRange = 6,$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypePointer	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderParameterValueTypePointer = 9$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeRational	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderParameterValueTypeRational = 5,$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeRationalRange	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderParameterValueTypeRationalRange = 8,$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeShort	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderParameterValueTypeShort = 3,$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeUndefined	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderParameterValueTypeUndefined = 7,$/;"	e	enum:EncoderParameterValueType
EncoderValue	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum EncoderValue {$/;"	g
EncoderValue	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} EncoderValue;$/;"	t	typeref:enum:EncoderValue
EncoderValueColorTypeCMYK	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueColorTypeCMYK = 0,$/;"	e	enum:EncoderValue
EncoderValueColorTypeYCCK	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueColorTypeYCCK = 1,$/;"	e	enum:EncoderValue
EncoderValueCompressionCCITT3	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueCompressionCCITT3 = 3,$/;"	e	enum:EncoderValue
EncoderValueCompressionCCITT4	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueCompressionCCITT4 = 4,$/;"	e	enum:EncoderValue
EncoderValueCompressionLZW	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueCompressionLZW = 2,$/;"	e	enum:EncoderValue
EncoderValueCompressionNone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueCompressionNone = 6,$/;"	e	enum:EncoderValue
EncoderValueCompressionRle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueCompressionRle = 5,$/;"	e	enum:EncoderValue
EncoderValueFlush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueFlush = 20,$/;"	e	enum:EncoderValue
EncoderValueFrameDimensionPage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueFrameDimensionPage = 23$/;"	e	enum:EncoderValue
EncoderValueFrameDimensionResolution	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueFrameDimensionResolution = 22,$/;"	e	enum:EncoderValue
EncoderValueFrameDimensionTime	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueFrameDimensionTime = 21,$/;"	e	enum:EncoderValue
EncoderValueLastFrame	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueLastFrame = 19,$/;"	e	enum:EncoderValue
EncoderValueMultiFrame	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueMultiFrame = 18,$/;"	e	enum:EncoderValue
EncoderValueRenderNonProgressive	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueRenderNonProgressive = 12,$/;"	e	enum:EncoderValue
EncoderValueRenderProgressive	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueRenderProgressive = 11,$/;"	e	enum:EncoderValue
EncoderValueScanMethodInterlaced	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueScanMethodInterlaced = 7,$/;"	e	enum:EncoderValue
EncoderValueScanMethodNonInterlaced	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueScanMethodNonInterlaced = 8,$/;"	e	enum:EncoderValue
EncoderValueTransformFlipHorizontal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueTransformFlipHorizontal = 16,$/;"	e	enum:EncoderValue
EncoderValueTransformFlipVertical	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueTransformFlipVertical = 17,$/;"	e	enum:EncoderValue
EncoderValueTransformRotate180	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueTransformRotate180 = 14,$/;"	e	enum:EncoderValue
EncoderValueTransformRotate270	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueTransformRotate270 = 15,$/;"	e	enum:EncoderValue
EncoderValueTransformRotate90	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueTransformRotate90 = 13,$/;"	e	enum:EncoderValue
EncoderValueVersionGif87	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueVersionGif87 = 9,$/;"	e	enum:EncoderValue
EncoderValueVersionGif89	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	EncoderValueVersionGif89 = 10,$/;"	e	enum:EncoderValue
FillMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum FillMode {$/;"	g
FillMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} FillMode;$/;"	t	typeref:enum:FillMode
FillModeAlternate	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	FillModeAlternate = 0,$/;"	e	enum:FillMode
FillModeWinding	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	FillModeWinding = 1$/;"	e	enum:FillMode
FlatnessDefault	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^const REAL FlatnessDefault = 0.25f;$/;"	v
FlatnessDefault	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	734;"	d
FlushIntention	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum FlushIntention {$/;"	g
FlushIntention	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} FlushIntention;$/;"	t	typeref:enum:FlushIntention
FlushIntentionFlush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	FlushIntentionFlush = 0,$/;"	e	enum:FlushIntention
FlushIntentionSync	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	FlushIntentionSync = 1$/;"	e	enum:FlushIntention
FontStyle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum FontStyle {$/;"	g
FontStyle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} FontStyle;$/;"	t	typeref:enum:FontStyle
FontStyleBold	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	FontStyleBold = 1,$/;"	e	enum:FontStyle
FontStyleBoldItalic	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	FontStyleBoldItalic = 3,$/;"	e	enum:FontStyle
FontStyleItalic	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	FontStyleItalic = 2,$/;"	e	enum:FontStyle
FontStyleRegular	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	FontStyleRegular = 0,$/;"	e	enum:FontStyle
FontStyleStrikeout	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	FontStyleStrikeout = 8$/;"	e	enum:FontStyle
FontStyleUnderline	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	FontStyleUnderline = 4,$/;"	e	enum:FontStyle
GDIP_EMFPLUS_RECORD_BASE	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	107;"	d
GDIP_WMF_RECORD_TO_EMFPLUS	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	106;"	d
GpTestControlEnum	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum GpTestControlEnum {$/;"	g
GpTestControlEnum	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} GpTestControlEnum;$/;"	t	typeref:enum:GpTestControlEnum
GraphicsContainer	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef DWORD GraphicsContainer;$/;"	t
GraphicsState	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef DWORD GraphicsState;$/;"	t
HatchStyle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum HatchStyle {$/;"	g
HatchStyle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} HatchStyle;$/;"	t	typeref:enum:HatchStyle
HatchStyle05Percent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyle05Percent = 6,$/;"	e	enum:HatchStyle
HatchStyle10Percent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyle10Percent = 7,$/;"	e	enum:HatchStyle
HatchStyle20Percent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyle20Percent = 8,$/;"	e	enum:HatchStyle
HatchStyle25Percent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyle25Percent = 9,$/;"	e	enum:HatchStyle
HatchStyle30Percent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyle30Percent = 10,$/;"	e	enum:HatchStyle
HatchStyle40Percent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyle40Percent = 11,$/;"	e	enum:HatchStyle
HatchStyle50Percent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyle50Percent = 12,$/;"	e	enum:HatchStyle
HatchStyle60Percent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyle60Percent = 13,$/;"	e	enum:HatchStyle
HatchStyle70Percent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyle70Percent = 14,$/;"	e	enum:HatchStyle
HatchStyle75Percent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyle75Percent = 15,$/;"	e	enum:HatchStyle
HatchStyle80Percent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyle80Percent = 16,$/;"	e	enum:HatchStyle
HatchStyle90Percent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyle90Percent = 17,$/;"	e	enum:HatchStyle
HatchStyleBackwardDiagonal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleBackwardDiagonal = 3,$/;"	e	enum:HatchStyle
HatchStyleCross	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleCross = 4,$/;"	e	enum:HatchStyle
HatchStyleDarkDownwardDiagonal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleDarkDownwardDiagonal = 20,$/;"	e	enum:HatchStyle
HatchStyleDarkHorizontal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleDarkHorizontal = 29,$/;"	e	enum:HatchStyle
HatchStyleDarkUpwardDiagonal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleDarkUpwardDiagonal = 21,$/;"	e	enum:HatchStyle
HatchStyleDarkVertical	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleDarkVertical = 28,$/;"	e	enum:HatchStyle
HatchStyleDashedDownwardDiagonal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleDashedDownwardDiagonal = 30,$/;"	e	enum:HatchStyle
HatchStyleDashedHorizontal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleDashedHorizontal = 32,$/;"	e	enum:HatchStyle
HatchStyleDashedUpwardDiagonal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleDashedUpwardDiagonal = 31,$/;"	e	enum:HatchStyle
HatchStyleDashedVertical	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleDashedVertical = 33,$/;"	e	enum:HatchStyle
HatchStyleDiagonalBrick	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleDiagonalBrick = 38,$/;"	e	enum:HatchStyle
HatchStyleDiagonalCross	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleDiagonalCross = 5,$/;"	e	enum:HatchStyle
HatchStyleDivot	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleDivot = 42,$/;"	e	enum:HatchStyle
HatchStyleDottedDiamond	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleDottedDiamond = 44,$/;"	e	enum:HatchStyle
HatchStyleDottedGrid	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleDottedGrid = 43,$/;"	e	enum:HatchStyle
HatchStyleForwardDiagonal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleForwardDiagonal = 2,$/;"	e	enum:HatchStyle
HatchStyleHorizontal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleHorizontal = 0,$/;"	e	enum:HatchStyle
HatchStyleHorizontalBrick	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleHorizontalBrick = 39,$/;"	e	enum:HatchStyle
HatchStyleLargeCheckerBoard	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleLargeCheckerBoard = 50,$/;"	e	enum:HatchStyle
HatchStyleLargeConfetti	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleLargeConfetti = 35,$/;"	e	enum:HatchStyle
HatchStyleLargeGrid	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleLargeGrid = 4,$/;"	e	enum:HatchStyle
HatchStyleLightDownwardDiagonal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleLightDownwardDiagonal = 18,$/;"	e	enum:HatchStyle
HatchStyleLightHorizontal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleLightHorizontal = 25,$/;"	e	enum:HatchStyle
HatchStyleLightUpwardDiagonal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleLightUpwardDiagonal = 19,$/;"	e	enum:HatchStyle
HatchStyleLightVertical	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleLightVertical = 24,$/;"	e	enum:HatchStyle
HatchStyleMax	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleMax = HatchStyleTotal - 1$/;"	e	enum:HatchStyle
HatchStyleMin	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleMin = HatchStyleHorizontal,$/;"	e	enum:HatchStyle
HatchStyleNarrowHorizontal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleNarrowHorizontal = 27,$/;"	e	enum:HatchStyle
HatchStyleNarrowVertical	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleNarrowVertical = 26,$/;"	e	enum:HatchStyle
HatchStyleOutlinedDiamond	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleOutlinedDiamond = 51,$/;"	e	enum:HatchStyle
HatchStylePlaid	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStylePlaid = 41,$/;"	e	enum:HatchStyle
HatchStyleShingle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleShingle = 45,$/;"	e	enum:HatchStyle
HatchStyleSmallCheckerBoard	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleSmallCheckerBoard = 49,$/;"	e	enum:HatchStyle
HatchStyleSmallConfetti	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleSmallConfetti = 34,$/;"	e	enum:HatchStyle
HatchStyleSmallGrid	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleSmallGrid = 48,$/;"	e	enum:HatchStyle
HatchStyleSolidDiamond	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleSolidDiamond = 52,$/;"	e	enum:HatchStyle
HatchStyleSphere	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleSphere = 47,$/;"	e	enum:HatchStyle
HatchStyleTotal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleTotal = 53,$/;"	e	enum:HatchStyle
HatchStyleTrellis	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleTrellis = 46,$/;"	e	enum:HatchStyle
HatchStyleVertical	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleVertical = 1,$/;"	e	enum:HatchStyle
HatchStyleWave	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleWave = 37,$/;"	e	enum:HatchStyle
HatchStyleWeave	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleWeave = 40,$/;"	e	enum:HatchStyle
HatchStyleWideDownwardDiagonal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleWideDownwardDiagonal = 22,$/;"	e	enum:HatchStyle
HatchStyleWideUpwardDiagonal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleWideUpwardDiagonal = 23,$/;"	e	enum:HatchStyle
HatchStyleZigZag	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HatchStyleZigZag = 36,$/;"	e	enum:HatchStyle
HotkeyPrefix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum HotkeyPrefix {$/;"	g
HotkeyPrefix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} HotkeyPrefix;$/;"	t	typeref:enum:HotkeyPrefix
HotkeyPrefixHide	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HotkeyPrefixHide = 2$/;"	e	enum:HotkeyPrefix
HotkeyPrefixNone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HotkeyPrefixNone = 0,$/;"	e	enum:HotkeyPrefix
HotkeyPrefixShow	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	HotkeyPrefixShow = 1,$/;"	e	enum:HotkeyPrefix
ImageType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum ImageType {$/;"	g
ImageType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} ImageType;$/;"	t	typeref:enum:ImageType
ImageTypeBitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	ImageTypeBitmap = 1,$/;"	e	enum:ImageType
ImageTypeMetafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	ImageTypeMetafile = 2$/;"	e	enum:ImageType
ImageTypeUnknown	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	ImageTypeUnknown = 0,$/;"	e	enum:ImageType
InterpolationMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum InterpolationMode {$/;"	g
InterpolationMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} InterpolationMode;$/;"	t	typeref:enum:InterpolationMode
InterpolationModeBicubic	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	InterpolationModeBicubic = 4,$/;"	e	enum:InterpolationMode
InterpolationModeBilinear	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	InterpolationModeBilinear = 3,$/;"	e	enum:InterpolationMode
InterpolationModeDefault	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	InterpolationModeDefault = 0,$/;"	e	enum:InterpolationMode
InterpolationModeHighQuality	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	InterpolationModeHighQuality = 2,$/;"	e	enum:InterpolationMode
InterpolationModeHighQualityBicubic	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	InterpolationModeHighQualityBicubic = 7$/;"	e	enum:InterpolationMode
InterpolationModeHighQualityBilinear	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	InterpolationModeHighQualityBilinear = 6,$/;"	e	enum:InterpolationMode
InterpolationModeLowQuality	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	InterpolationModeLowQuality = 1,$/;"	e	enum:InterpolationMode
InterpolationModeNearestNeighbor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	InterpolationModeNearestNeighbor = 5,$/;"	e	enum:InterpolationMode
LineCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum LineCap {$/;"	g
LineCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} LineCap;$/;"	t	typeref:enum:LineCap
LineCapArrowAnchor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LineCapArrowAnchor = 20,$/;"	e	enum:LineCap
LineCapCustom	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LineCapCustom = 255$/;"	e	enum:LineCap
LineCapDiamondAnchor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LineCapDiamondAnchor = 19,$/;"	e	enum:LineCap
LineCapFlat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LineCapFlat = 0,$/;"	e	enum:LineCap
LineCapNoAnchor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LineCapNoAnchor = 16,$/;"	e	enum:LineCap
LineCapRound	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LineCapRound = 2,$/;"	e	enum:LineCap
LineCapRoundAnchor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LineCapRoundAnchor = 18,$/;"	e	enum:LineCap
LineCapSquare	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LineCapSquare = 1,$/;"	e	enum:LineCap
LineCapSquareAnchor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LineCapSquareAnchor = 17,$/;"	e	enum:LineCap
LineCapTriangle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LineCapTriangle = 3,$/;"	e	enum:LineCap
LineJoin	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum LineJoin {$/;"	g
LineJoin	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} LineJoin;$/;"	t	typeref:enum:LineJoin
LineJoinBevel	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LineJoinBevel = 1,$/;"	e	enum:LineJoin
LineJoinMiter	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LineJoinMiter = 0,$/;"	e	enum:LineJoin
LineJoinMiterClipped	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LineJoinMiterClipped = 3$/;"	e	enum:LineJoin
LineJoinRound	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LineJoinRound = 2,$/;"	e	enum:LineJoin
LinearGradientMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum LinearGradientMode {$/;"	g
LinearGradientMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} LinearGradientMode;$/;"	t	typeref:enum:LinearGradientMode
LinearGradientModeBackwardDiagonal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LinearGradientModeBackwardDiagonal = 3 $/;"	e	enum:LinearGradientMode
LinearGradientModeForwardDiagonal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LinearGradientModeForwardDiagonal = 2,$/;"	e	enum:LinearGradientMode
LinearGradientModeHorizontal	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LinearGradientModeHorizontal = 0,$/;"	e	enum:LinearGradientMode
LinearGradientModeVertical	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	LinearGradientModeVertical = 1,$/;"	e	enum:LinearGradientMode
MatrixOrder	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum MatrixOrder {$/;"	g
MatrixOrder	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} MatrixOrder;$/;"	t	typeref:enum:MatrixOrder
MatrixOrderAppend	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	MatrixOrderAppend = 1$/;"	e	enum:MatrixOrder
MatrixOrderPrepend	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	MatrixOrderPrepend = 0,$/;"	e	enum:MatrixOrder
MetafileFrameUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum MetafileFrameUnit {$/;"	g
MetafileFrameUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} MetafileFrameUnit;$/;"	t	typeref:enum:MetafileFrameUnit
MetafileFrameUnitDocument	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	MetafileFrameUnitDocument = 5,$/;"	e	enum:MetafileFrameUnit
MetafileFrameUnitGdi	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	MetafileFrameUnitGdi = 7$/;"	e	enum:MetafileFrameUnit
MetafileFrameUnitInch	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	MetafileFrameUnitInch = 4,$/;"	e	enum:MetafileFrameUnit
MetafileFrameUnitMillimeter	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	MetafileFrameUnitMillimeter = 6,$/;"	e	enum:MetafileFrameUnit
MetafileFrameUnitPixel	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	MetafileFrameUnitPixel = 2,$/;"	e	enum:MetafileFrameUnit
MetafileFrameUnitPoint	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	MetafileFrameUnitPoint = 3,$/;"	e	enum:MetafileFrameUnit
MetafileType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum MetafileType {$/;"	g
MetafileType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} MetafileType;$/;"	t	typeref:enum:MetafileType
MetafileTypeEmf	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	MetafileTypeEmf = 3,$/;"	e	enum:MetafileType
MetafileTypeEmfPlusDual	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	MetafileTypeEmfPlusDual = 5$/;"	e	enum:MetafileType
MetafileTypeEmfPlusOnly	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	MetafileTypeEmfPlusOnly = 4,$/;"	e	enum:MetafileType
MetafileTypeInvalid	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	MetafileTypeInvalid = 0,$/;"	e	enum:MetafileType
MetafileTypeWmf	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	MetafileTypeWmf = 1,$/;"	e	enum:MetafileType
MetafileTypeWmfPlaceable	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	MetafileTypeWmfPlaceable = 2,$/;"	e	enum:MetafileType
ObjectType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum ObjectType {$/;"	g
ObjectType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} ObjectType;$/;"	t	typeref:enum:ObjectType
ObjectTypeBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	ObjectTypeBrush = 1,$/;"	e	enum:ObjectType
ObjectTypeCustomLineCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	ObjectTypeCustomLineCap = 8,$/;"	e	enum:ObjectType
ObjectTypeFont	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	ObjectTypeFont = 5,$/;"	e	enum:ObjectType
ObjectTypeGraphics	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	ObjectTypeGraphics = 9,$/;"	e	enum:ObjectType
ObjectTypeImageAttributes	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	ObjectTypeImageAttributes = 7,$/;"	e	enum:ObjectType
ObjectTypeInvalid	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	ObjectTypeInvalid = 0,$/;"	e	enum:ObjectType
ObjectTypeIsValid	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^static __inline__ BOOL ObjectTypeIsValid(ObjectType type)$/;"	f
ObjectTypeMax	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	ObjectTypeMax = ObjectTypeGraphics$/;"	e	enum:ObjectType
ObjectTypeMin	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	ObjectTypeMin = ObjectTypeBrush,$/;"	e	enum:ObjectType
ObjectTypePath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	ObjectTypePath = 3,$/;"	e	enum:ObjectType
ObjectTypePen	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	ObjectTypePen = 2,$/;"	e	enum:ObjectType
ObjectTypeRegion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	ObjectTypeRegion = 4,$/;"	e	enum:ObjectType
ObjectTypeStringFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	ObjectTypeStringFormat = 6,$/;"	e	enum:ObjectType
PathPointType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum PathPointType {$/;"	g
PathPointType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} PathPointType;$/;"	t	typeref:enum:PathPointType
PathPointTypeBezier	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PathPointTypeBezier = 0x03,$/;"	e	enum:PathPointType
PathPointTypeBezier3	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PathPointTypeBezier3 = 0x03,$/;"	e	enum:PathPointType
PathPointTypeCloseSubpath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PathPointTypeCloseSubpath = 0x80$/;"	e	enum:PathPointType
PathPointTypeLine	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PathPointTypeLine = 0x01,$/;"	e	enum:PathPointType
PathPointTypePathDashMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PathPointTypePathDashMode = 0x10,$/;"	e	enum:PathPointType
PathPointTypePathMarker	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PathPointTypePathMarker = 0x20,$/;"	e	enum:PathPointType
PathPointTypePathTypeMask	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PathPointTypePathTypeMask = 0x07,$/;"	e	enum:PathPointType
PathPointTypeStart	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PathPointTypeStart = 0x00,$/;"	e	enum:PathPointType
PenAlignment	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum PenAlignment {$/;"	g
PenAlignment	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} PenAlignment;$/;"	t	typeref:enum:PenAlignment
PenAlignmentCenter	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PenAlignmentCenter = 0,$/;"	e	enum:PenAlignment
PenAlignmentInset	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PenAlignmentInset = 1$/;"	e	enum:PenAlignment
PenType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum PenType {$/;"	g
PenType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} PenType;$/;"	t	typeref:enum:PenType
PenTypeHatchFill	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PenTypeHatchFill = 1,$/;"	e	enum:PenType
PenTypeLinearGradient	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PenTypeLinearGradient = 4$/;"	e	enum:PenType
PenTypePathGradient	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PenTypePathGradient = 3,$/;"	e	enum:PenType
PenTypeSolidColor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PenTypeSolidColor = 0,$/;"	e	enum:PenType
PenTypeTextureFill	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PenTypeTextureFill = 2,$/;"	e	enum:PenType
PenTypeUnknown	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PenTypeUnknown = -1, $/;"	e	enum:PenType
PixelOffsetMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum PixelOffsetMode {$/;"	g
PixelOffsetMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} PixelOffsetMode;$/;"	t	typeref:enum:PixelOffsetMode
PixelOffsetModeDefault	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PixelOffsetModeDefault = 0,$/;"	e	enum:PixelOffsetMode
PixelOffsetModeHalf	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PixelOffsetModeHalf = 4$/;"	e	enum:PixelOffsetMode
PixelOffsetModeHighQuality	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PixelOffsetModeHighQuality = 2,$/;"	e	enum:PixelOffsetMode
PixelOffsetModeHighSpeed	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PixelOffsetModeHighSpeed = 1,$/;"	e	enum:PixelOffsetMode
PixelOffsetModeNone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	PixelOffsetModeNone = 3,$/;"	e	enum:PixelOffsetMode
QualityMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum QualityMode {$/;"	g
QualityMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} QualityMode;$/;"	t	typeref:enum:QualityMode
QualityModeDefault	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	QualityModeDefault = 0,$/;"	e	enum:QualityMode
QualityModeHigh	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	QualityModeHigh = 2$/;"	e	enum:QualityMode
QualityModeLow	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	QualityModeLow = 1,$/;"	e	enum:QualityMode
SmoothingMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum SmoothingMode {$/;"	g
SmoothingMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} SmoothingMode;$/;"	t	typeref:enum:SmoothingMode
SmoothingModeAntiAlias	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	SmoothingModeAntiAlias = 4,$/;"	e	enum:SmoothingMode
SmoothingModeAntiAlias8x4	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	SmoothingModeAntiAlias8x4 = 4,$/;"	e	enum:SmoothingMode
SmoothingModeAntiAlias8x8	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	SmoothingModeAntiAlias8x8 = 5$/;"	e	enum:SmoothingMode
SmoothingModeDefault	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	SmoothingModeDefault = 0,$/;"	e	enum:SmoothingMode
SmoothingModeHighQuality	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	SmoothingModeHighQuality = 2,$/;"	e	enum:SmoothingMode
SmoothingModeHighSpeed	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	SmoothingModeHighSpeed = 1,$/;"	e	enum:SmoothingMode
SmoothingModeNone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	SmoothingModeNone = 3,$/;"	e	enum:SmoothingMode
StringAlignment	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum StringAlignment {$/;"	g
StringAlignment	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} StringAlignment;$/;"	t	typeref:enum:StringAlignment
StringAlignmentCenter	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringAlignmentCenter = 1,$/;"	e	enum:StringAlignment
StringAlignmentFar	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringAlignmentFar = 2$/;"	e	enum:StringAlignment
StringAlignmentNear	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringAlignmentNear = 0,$/;"	e	enum:StringAlignment
StringDigitSubstitute	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum StringDigitSubstitute {$/;"	g
StringDigitSubstitute	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} StringDigitSubstitute;$/;"	t	typeref:enum:StringDigitSubstitute
StringDigitSubstituteNational	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringDigitSubstituteNational = 2,$/;"	e	enum:StringDigitSubstitute
StringDigitSubstituteNone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringDigitSubstituteNone = 1,$/;"	e	enum:StringDigitSubstitute
StringDigitSubstituteTraditional	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringDigitSubstituteTraditional = 3$/;"	e	enum:StringDigitSubstitute
StringDigitSubstituteUser	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringDigitSubstituteUser = 0,$/;"	e	enum:StringDigitSubstitute
StringFormatFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum StringFormatFlags {$/;"	g
StringFormatFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} StringFormatFlags;$/;"	t	typeref:enum:StringFormatFlags
StringFormatFlagsDirectionRightToLeft	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringFormatFlagsDirectionRightToLeft = 0x00000001,$/;"	e	enum:StringFormatFlags
StringFormatFlagsDirectionVertical	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringFormatFlagsDirectionVertical = 0x00000002,$/;"	e	enum:StringFormatFlags
StringFormatFlagsDisplayFormatControl	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringFormatFlagsDisplayFormatControl = 0x00000020,$/;"	e	enum:StringFormatFlags
StringFormatFlagsLineLimit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringFormatFlagsLineLimit = 0x00002000,$/;"	e	enum:StringFormatFlags
StringFormatFlagsMeasureTrailingSpaces	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringFormatFlagsMeasureTrailingSpaces = 0x00000800,$/;"	e	enum:StringFormatFlags
StringFormatFlagsNoClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringFormatFlagsNoClip = 0x00004000$/;"	e	enum:StringFormatFlags
StringFormatFlagsNoFitBlackBox	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringFormatFlagsNoFitBlackBox = 0x00000004,$/;"	e	enum:StringFormatFlags
StringFormatFlagsNoFontFallback	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringFormatFlagsNoFontFallback = 0x00000400,$/;"	e	enum:StringFormatFlags
StringFormatFlagsNoWrap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringFormatFlagsNoWrap = 0x00001000,$/;"	e	enum:StringFormatFlags
StringTrimming	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum StringTrimming {$/;"	g
StringTrimming	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} StringTrimming;$/;"	t	typeref:enum:StringTrimming
StringTrimmingCharacter	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringTrimmingCharacter = 1,$/;"	e	enum:StringTrimming
StringTrimmingEllipsisCharacter	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringTrimmingEllipsisCharacter = 3,$/;"	e	enum:StringTrimming
StringTrimmingEllipsisPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringTrimmingEllipsisPath = 5$/;"	e	enum:StringTrimming
StringTrimmingEllipsisWord	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringTrimmingEllipsisWord = 4,$/;"	e	enum:StringTrimming
StringTrimmingNone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringTrimmingNone = 0,$/;"	e	enum:StringTrimming
StringTrimmingWord	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	StringTrimmingWord = 2,$/;"	e	enum:StringTrimming
TestControlForceBilinear	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	TestControlForceBilinear = 0,$/;"	e	enum:GpTestControlEnum
TestControlForceNoICM	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	TestControlForceNoICM = 1,$/;"	e	enum:GpTestControlEnum
TestControlGetBuildNumber	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	TestControlGetBuildNumber = 2$/;"	e	enum:GpTestControlEnum
TextRenderingHint	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum TextRenderingHint {$/;"	g
TextRenderingHint	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} TextRenderingHint;$/;"	t	typeref:enum:TextRenderingHint
TextRenderingHintAntiAlias	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	TextRenderingHintAntiAlias = 4,$/;"	e	enum:TextRenderingHint
TextRenderingHintAntiAliasGridFit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	TextRenderingHintAntiAliasGridFit = 3,$/;"	e	enum:TextRenderingHint
TextRenderingHintClearTypeGridFit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	TextRenderingHintClearTypeGridFit = 5$/;"	e	enum:TextRenderingHint
TextRenderingHintSingleBitPerPixel	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	TextRenderingHintSingleBitPerPixel = 2,$/;"	e	enum:TextRenderingHint
TextRenderingHintSingleBitPerPixelGridFit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	TextRenderingHintSingleBitPerPixelGridFit = 1,$/;"	e	enum:TextRenderingHint
TextRenderingHintSystemDefault	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	TextRenderingHintSystemDefault = 0,$/;"	e	enum:TextRenderingHint
Unit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum Unit {$/;"	g
Unit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} Unit;$/;"	t	typeref:enum:Unit
UnitDisplay	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	UnitDisplay = 1,$/;"	e	enum:Unit
UnitDocument	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	UnitDocument = 5,$/;"	e	enum:Unit
UnitInch	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	UnitInch = 4,$/;"	e	enum:Unit
UnitMillimeter	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	UnitMillimeter = 6$/;"	e	enum:Unit
UnitPixel	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	UnitPixel = 2,$/;"	e	enum:Unit
UnitPoint	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	UnitPoint = 3,$/;"	e	enum:Unit
UnitWorld	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	UnitWorld = 0,$/;"	e	enum:Unit
WarpMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum WarpMode {$/;"	g
WarpMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} WarpMode;$/;"	t	typeref:enum:WarpMode
WarpModeBilinear	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WarpModeBilinear = 1$/;"	e	enum:WarpMode
WarpModePerspective	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WarpModePerspective = 0,$/;"	e	enum:WarpMode
WmfRecordTypeAbortDoc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeAbortDoc                      = GDIP_WMF_RECORD_TO_EMFPLUS(0x0052),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeAnimatePalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeAnimatePalette                = GDIP_WMF_RECORD_TO_EMFPLUS(META_ANIMATEPALETTE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeArc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeArc                           = GDIP_WMF_RECORD_TO_EMFPLUS(META_ARC),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeBitBlt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeBitBlt                        = GDIP_WMF_RECORD_TO_EMFPLUS(META_BITBLT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeChord	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeChord                         = GDIP_WMF_RECORD_TO_EMFPLUS(META_CHORD),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateBitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeCreateBitmap                  = GDIP_WMF_RECORD_TO_EMFPLUS(0x06FE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateBitmapIndirect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeCreateBitmapIndirect          = GDIP_WMF_RECORD_TO_EMFPLUS(0x02FD),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeCreateBrush                   = GDIP_WMF_RECORD_TO_EMFPLUS(0x00F8),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateBrushIndirect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeCreateBrushIndirect           = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEBRUSHINDIRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateFontIndirect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeCreateFontIndirect            = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEFONTINDIRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreatePalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeCreatePalette                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEPALETTE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreatePatternBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeCreatePatternBrush            = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEPATTERNBRUSH),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreatePenIndirect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeCreatePenIndirect             = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEPENINDIRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateRegion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeCreateRegion                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeDIBBitBlt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeDIBBitBlt                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_DIBBITBLT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeDIBCreatePatternBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeDIBCreatePatternBrush         = GDIP_WMF_RECORD_TO_EMFPLUS(META_DIBCREATEPATTERNBRUSH),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeDIBStretchBlt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeDIBStretchBlt                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_DIBSTRETCHBLT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeDeleteObject	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeDeleteObject                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_DELETEOBJECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeDrawText	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeDrawText                      = GDIP_WMF_RECORD_TO_EMFPLUS(0x062F),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeEllipse	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeEllipse                       = GDIP_WMF_RECORD_TO_EMFPLUS(META_ELLIPSE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeEndDoc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeEndDoc                        = GDIP_WMF_RECORD_TO_EMFPLUS(0x005E),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeEndPage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeEndPage                       = GDIP_WMF_RECORD_TO_EMFPLUS(0x0050),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeEscape	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeEscape                        = GDIP_WMF_RECORD_TO_EMFPLUS(META_ESCAPE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeExcludeClipRect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeExcludeClipRect               = GDIP_WMF_RECORD_TO_EMFPLUS(META_EXCLUDECLIPRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeExtFloodFill	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeExtFloodFill                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_EXTFLOODFILL),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeExtTextOut	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeExtTextOut                    = GDIP_WMF_RECORD_TO_EMFPLUS(META_EXTTEXTOUT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeFillRegion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeFillRegion                    = GDIP_WMF_RECORD_TO_EMFPLUS(META_FILLREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeFloodFill	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeFloodFill                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_FLOODFILL),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeFrameRegion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeFrameRegion                   = GDIP_WMF_RECORD_TO_EMFPLUS(META_FRAMEREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeIntersectClipRect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeIntersectClipRect             = GDIP_WMF_RECORD_TO_EMFPLUS(META_INTERSECTCLIPRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeInvertRegion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeInvertRegion                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_INVERTREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeLineTo	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeLineTo                        = GDIP_WMF_RECORD_TO_EMFPLUS(META_LINETO),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeMoveTo	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeMoveTo                        = GDIP_WMF_RECORD_TO_EMFPLUS(META_MOVETO),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeOffsetClipRgn	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeOffsetClipRgn                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_OFFSETCLIPRGN),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeOffsetViewportOrg	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeOffsetViewportOrg             = GDIP_WMF_RECORD_TO_EMFPLUS(META_OFFSETVIEWPORTORG),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeOffsetWindowOrg	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeOffsetWindowOrg               = GDIP_WMF_RECORD_TO_EMFPLUS(META_OFFSETWINDOWORG),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePaintRegion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypePaintRegion                   = GDIP_WMF_RECORD_TO_EMFPLUS(META_PAINTREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePatBlt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypePatBlt                        = GDIP_WMF_RECORD_TO_EMFPLUS(META_PATBLT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePie	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypePie                           = GDIP_WMF_RECORD_TO_EMFPLUS(META_PIE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePolyPolygon	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypePolyPolygon                   = GDIP_WMF_RECORD_TO_EMFPLUS(META_POLYPOLYGON),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePolygon	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypePolygon                       = GDIP_WMF_RECORD_TO_EMFPLUS(META_POLYGON),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePolyline	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypePolyline                      = GDIP_WMF_RECORD_TO_EMFPLUS(META_POLYLINE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeRealizePalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeRealizePalette                = GDIP_WMF_RECORD_TO_EMFPLUS(META_REALIZEPALETTE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeRectangle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeRectangle                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_RECTANGLE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeResetDC	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeResetDC                       = GDIP_WMF_RECORD_TO_EMFPLUS(0x014C),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeResizePalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeResizePalette                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_RESIZEPALETTE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeRestoreDC	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeRestoreDC                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_RESTOREDC),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeRoundRect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeRoundRect                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_ROUNDRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSaveDC	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSaveDC                        = GDIP_WMF_RECORD_TO_EMFPLUS(META_SAVEDC),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeScaleViewportExt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeScaleViewportExt              = GDIP_WMF_RECORD_TO_EMFPLUS(META_SCALEVIEWPORTEXT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeScaleWindowExt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeScaleWindowExt                = GDIP_WMF_RECORD_TO_EMFPLUS(META_SCALEWINDOWEXT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSelectClipRegion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSelectClipRegion              = GDIP_WMF_RECORD_TO_EMFPLUS(META_SELECTCLIPREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSelectObject	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSelectObject                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_SELECTOBJECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSelectPalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSelectPalette                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_SELECTPALETTE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetBkColor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetBkColor                    = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETBKCOLOR),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetBkMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetBkMode                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETBKMODE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetDIBToDev	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetDIBToDev                   = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETDIBTODEV),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetLayout	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetLayout                     = GDIP_WMF_RECORD_TO_EMFPLUS(0x0149),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetMapMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetMapMode                    = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETMAPMODE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetMapperFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetMapperFlags                = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETMAPPERFLAGS),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetPalEntries	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetPalEntries                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETPALENTRIES),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetPixel	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetPixel                      = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETPIXEL),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetPolyFillMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetPolyFillMode               = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETPOLYFILLMODE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetROP2	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetROP2                       = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETROP2),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetRelAbs	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetRelAbs                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETRELABS),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetStretchBltMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetStretchBltMode             = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETSTRETCHBLTMODE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetTextAlign	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetTextAlign                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETTEXTALIGN),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetTextCharExtra	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetTextCharExtra              = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETTEXTCHAREXTRA),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetTextColor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetTextColor                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETTEXTCOLOR),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetTextJustification	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetTextJustification          = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETTEXTJUSTIFICATION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetViewportExt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetViewportExt                = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETVIEWPORTEXT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetViewportOrg	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetViewportOrg                = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETVIEWPORTORG),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetWindowExt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetWindowExt                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETWINDOWEXT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetWindowOrg	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeSetWindowOrg                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETWINDOWORG),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeStartDoc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeStartDoc                      = GDIP_WMF_RECORD_TO_EMFPLUS(0x014D),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeStartPage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeStartPage                     = GDIP_WMF_RECORD_TO_EMFPLUS(0x004F),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeStretchBlt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeStretchBlt                    = GDIP_WMF_RECORD_TO_EMFPLUS(META_STRETCHBLT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeStretchDIB	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeStretchDIB                    = GDIP_WMF_RECORD_TO_EMFPLUS(META_STRETCHDIB),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeTextOut	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WmfRecordTypeTextOut                       = GDIP_WMF_RECORD_TO_EMFPLUS(META_TEXTOUT),$/;"	e	enum:EmfPlusRecordType
WrapMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^typedef enum WrapMode {$/;"	g
WrapMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^} WrapMode;$/;"	t	typeref:enum:WrapMode
WrapModeClamp	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WrapModeClamp = 4$/;"	e	enum:WrapMode
WrapModeTile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WrapModeTile = 0,$/;"	e	enum:WrapMode
WrapModeTileFlipX	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WrapModeTileFlipX = 1,$/;"	e	enum:WrapMode
WrapModeTileFlipXY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WrapModeTileFlipXY = 3,$/;"	e	enum:WrapMode
WrapModeTileFlipY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	/^	WrapModeTileFlipY = 2,$/;"	e	enum:WrapMode
__GDIPLUS_ENUMS_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusenums.h	24;"	d
DllExports	C++\ege-13.04.02-full\src\gdiplus3\gdiplusflat.h	/^namespace DllExports {$/;"	n
__GDIPLUS_FLAT_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusflat.h	24;"	d
CGpEffect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class CGpEffect {}; $/;"	c
CGpEffect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void CGpEffect;$/;"	t
GpAdjustableArrowCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpAdjustableArrowCap: public GpCustomLineCap {};$/;"	c
GpAdjustableArrowCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpAdjustableArrowCap;$/;"	t
GpBitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpBitmap: public GpImage {};$/;"	c
GpBitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpBitmap;$/;"	t
GpBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpBrush {};$/;"	c
GpBrush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpBrush;$/;"	t
GpBrushType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum BrushType GpBrushType;$/;"	t	typeref:enum:BrushType
GpCachedBitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpCachedBitmap {};$/;"	c
GpCachedBitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpCachedBitmap;$/;"	t
GpCombineMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum CombineMode GpCombineMode;$/;"	t	typeref:enum:CombineMode
GpCompositingMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum CompositingMode GpCompositingMode;$/;"	t	typeref:enum:CompositingMode
GpCompositingQuality	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum CompositingQuality GpCompositingQuality;$/;"	t	typeref:enum:CompositingQuality
GpCoordinateSpace	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum CoordinateSpace GpCoordinateSpace;$/;"	t	typeref:enum:CoordinateSpace
GpCustomLineCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpCustomLineCap {};$/;"	c
GpCustomLineCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpCustomLineCap;$/;"	t
GpCustomLineCapType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum CustomLineCapType GpCustomLineCapType;$/;"	t	typeref:enum:CustomLineCapType
GpDashCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum DashCap GpDashCap;$/;"	t	typeref:enum:DashCap
GpDashStyle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum DashStyle GpDashStyle;$/;"	t	typeref:enum:DashStyle
GpDitherType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum DitherType GpDitherType;$/;"	t	typeref:enum:DitherType
GpDriverStringOptions	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum DriverStringOptions GpDriverStringOptions;$/;"	t	typeref:enum:DriverStringOptions
GpEmfPlusRecordType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum EmfPlusRecordType GpEmfPlusRecordType;$/;"	t	typeref:enum:EmfPlusRecordType
GpEmfToWmfBitsFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum EmfToWmfBitsFlags GpEmfToWmfBitsFlags;$/;"	t	typeref:enum:EmfToWmfBitsFlags
GpEmfType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum EmfType GpEmfType;$/;"	t	typeref:enum:EmfType
GpEncoderParameterValueType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum EncoderParameterValueType GpEncoderParameterValueType;$/;"	t	typeref:enum:EncoderParameterValueType
GpEncoderValue	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum EncoderValue GpEncoderValue;$/;"	t	typeref:enum:EncoderValue
GpFillMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum FillMode GpFillMode;$/;"	t	typeref:enum:FillMode
GpFlushIntention	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum FlushIntention GpFlushIntention;$/;"	t	typeref:enum:FlushIntention
GpFont	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpFont {};$/;"	c
GpFont	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpFont;$/;"	t
GpFontCollection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpFontCollection {};$/;"	c
GpFontCollection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpFontCollection;$/;"	t
GpFontFamily	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpFontFamily {};$/;"	c
GpFontFamily	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpFontFamily;$/;"	t
GpFontStyle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum FontStyle GpFontStyle;$/;"	t	typeref:enum:FontStyle
GpGraphics	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpGraphics {};$/;"	c
GpGraphics	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpGraphics;$/;"	t
GpHatch	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpHatch: public GpBrush {};         \/* HatchBrush *\/$/;"	c
GpHatch	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpHatch;$/;"	t
GpHatchStyle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum HatchStyle GpHatchStyle;$/;"	t	typeref:enum:HatchStyle
GpHotkeyPrefix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum HotkeyPrefix GpHotkeyPrefix;$/;"	t	typeref:enum:HotkeyPrefix
GpImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpImage {};$/;"	c
GpImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpImage;$/;"	t
GpImageAttributes	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpImageAttributes {};$/;"	c
GpImageAttributes	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpImageAttributes;$/;"	t
GpImageType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum ImageType GpImageType;$/;"	t	typeref:enum:ImageType
GpInterpolationMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum InterpolationMode GpInterpolationMode;$/;"	t	typeref:enum:InterpolationMode
GpLineCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum LineCap GpLineCap;$/;"	t	typeref:enum:LineCap
GpLineGradient	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpLineGradient: public GpBrush {};  \/* LinearGradientBrush *\/$/;"	c
GpLineGradient	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpLineGradient;$/;"	t
GpLineJoin	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum LineJoin GpLineJoin;$/;"	t	typeref:enum:LineJoin
GpLinearGradientMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum LinearGradientMode GpLinearGradientMode;$/;"	t	typeref:enum:LinearGradientMode
GpMatrix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpMatrix {};$/;"	c
GpMatrix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpMatrix;$/;"	t
GpMatrixOrder	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum MatrixOrder GpMatrixOrder;$/;"	t	typeref:enum:MatrixOrder
GpMetafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpMetafile: public GpImage {};$/;"	c
GpMetafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpMetafile;$/;"	t
GpMetafileFrameUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum MetafileFrameUnit GpMetafileFrameUnit;$/;"	t	typeref:enum:MetafileFrameUnit
GpMetafileType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum MetafileType GpMetafileType;$/;"	t	typeref:enum:MetafileType
GpObjectType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum ObjectType GpObjectType;$/;"	t	typeref:enum:ObjectType
GpPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpPath {};                          \/* GraphicsPath *\/$/;"	c
GpPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpPath;$/;"	t
GpPathData	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpPathData {};$/;"	c
GpPathData	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpPathData;$/;"	t
GpPathGradient	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpPathGradient: public GpBrush {};  \/* PathGradientBrush *\/$/;"	c
GpPathGradient	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpPathGradient;$/;"	t
GpPathIterator	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpPathIterator {};                  \/* GraphicsPathIterator *\/$/;"	c
GpPathIterator	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpPathIterator;$/;"	t
GpPathPointType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum PathPointType GpPathPointType;$/;"	t	typeref:enum:PathPointType
GpPen	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpPen {};$/;"	c
GpPen	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpPen;$/;"	t
GpPenAlignment	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum PenAlignment GpPenAlignment;$/;"	t	typeref:enum:PenAlignment
GpPenType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum PenType GpPenType;$/;"	t	typeref:enum:PenType
GpPixelOffsetMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum PixelOffsetMode GpPixelOffsetMode;$/;"	t	typeref:enum:PixelOffsetMode
GpPoint	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef Point GpPoint;$/;"	t
GpPointF	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef PointF GpPointF;$/;"	t
GpQualityMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum QualityMode GpQualityMode;$/;"	t	typeref:enum:QualityMode
GpRect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef Rect GpRect;$/;"	t
GpRectF	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef RectF GpRectF;$/;"	t
GpRegion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpRegion {};$/;"	c
GpRegion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpRegion;$/;"	t
GpSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef Size GpSize;$/;"	t
GpSizeF	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef SizeF GpSizeF;$/;"	t
GpSmoothingMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum SmoothingMode GpSmoothingMode;$/;"	t	typeref:enum:SmoothingMode
GpSolidFill	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpSolidFill: public GpBrush {};     \/* SolidBrush *\/$/;"	c
GpSolidFill	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpSolidFill;$/;"	t
GpStringAlignment	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum StringAlignment GpStringAlignment;$/;"	t	typeref:enum:StringAlignment
GpStringDigitSubstitute	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum StringDigitSubstitute GpStringDigitSubstitute;$/;"	t	typeref:enum:StringDigitSubstitute
GpStringFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpStringFormat {};$/;"	c
GpStringFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpStringFormat;$/;"	t
GpStringFormatFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum StringFormatFlags GpStringFormatFlags;$/;"	t	typeref:enum:StringFormatFlags
GpStringTrimming	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum StringTrimming GpStringTrimming;$/;"	t	typeref:enum:StringTrimming
GpTextRenderingHint	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum TextRenderingHint GpTextRenderingHint;$/;"	t	typeref:enum:TextRenderingHint
GpTexture	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^class GpTexture: public GpBrush {};       \/* TextureBrush *\/$/;"	c
GpTexture	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef void GpTexture;$/;"	t
GpUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum Unit GpUnit;$/;"	t	typeref:enum:Unit
GpWarpMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum WarpMode GpWarpMode;$/;"	t	typeref:enum:WarpMode
GpWrapMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	/^typedef enum WrapMode GpWrapMode;$/;"	t	typeref:enum:WrapMode
__GDIPLUS_GPSTUBS_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgpstubs.h	24;"	d
AddMetafileComment	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status AddMetafileComment(const BYTE *data, UINT sizeData)$/;"	f	class:Graphics
BeginContainer	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	GraphicsContainer BeginContainer()$/;"	f	class:Graphics
BeginContainer	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	GraphicsContainer BeginContainer(const Rect& dstrect,$/;"	f	class:Graphics
BeginContainer	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	GraphicsContainer BeginContainer(const RectF& dstrect,$/;"	f	class:Graphics
Clear	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status Clear(const Color& color)$/;"	f	class:Graphics
DrawArc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawArc(const Pen *pen, INT x, INT y, INT width, INT height,$/;"	f	class:Graphics
DrawArc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawArc(const Pen *pen, REAL x, REAL y, REAL width, REAL height,$/;"	f	class:Graphics
DrawArc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawArc(const Pen *pen, const Rect& rect,$/;"	f	class:Graphics
DrawArc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawArc(const Pen *pen, const RectF& rect,$/;"	f	class:Graphics
DrawBezier	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawBezier(const Pen *pen,$/;"	f	class:Graphics
DrawBeziers	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawBeziers(const Pen *pen, const Point *points, INT count)$/;"	f	class:Graphics
DrawBeziers	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawBeziers(const Pen *pen, const PointF *points, INT count)$/;"	f	class:Graphics
DrawCachedBitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawCachedBitmap(CachedBitmap *cb, INT x, INT y)$/;"	f	class:Graphics
DrawClosedCurve	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawClosedCurve(const Pen *pen, const Point *points, INT count)$/;"	f	class:Graphics
DrawClosedCurve	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawClosedCurve(const Pen *pen, const Point *points, INT count,$/;"	f	class:Graphics
DrawClosedCurve	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawClosedCurve(const Pen *pen, const PointF *points, INT count)$/;"	f	class:Graphics
DrawClosedCurve	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawClosedCurve(const Pen *pen, const PointF *points, INT count,$/;"	f	class:Graphics
DrawCurve	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawCurve(const Pen *pen, const Point *points, INT count)$/;"	f	class:Graphics
DrawCurve	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawCurve(const Pen *pen, const Point *points, INT count,$/;"	f	class:Graphics
DrawCurve	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawCurve(const Pen *pen, const PointF *points, INT count)$/;"	f	class:Graphics
DrawCurve	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawCurve(const Pen *pen, const PointF *points, INT count,$/;"	f	class:Graphics
DrawDriverString	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawDriverString(const UINT16 *text, INT length,$/;"	f	class:Graphics
DrawEllipse	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawEllipse(const Pen *pen, INT x, INT y, INT width, INT height)$/;"	f	class:Graphics
DrawEllipse	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawEllipse(const Pen *pen, const Rect& rect)$/;"	f	class:Graphics
DrawEllipse	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawEllipse(const Pen *pen, const RectF& rect)$/;"	f	class:Graphics
DrawEllipse	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawEllipse(const Pen *pen,$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, INT x, INT y)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, INT x, INT y, INT srcx, INT srcy,$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, INT x, INT y, INT width, INT height)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, REAL x, REAL y)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, REAL x, REAL y, REAL srcx, REAL srcy,$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, REAL x, REAL y, REAL width, REAL height)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const Point *destPoints, INT count)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const Point *destPoints, INT count,$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const Point& point)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const PointF *destPoints, INT count)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const PointF *destPoints, INT count,$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const PointF& point)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const Rect& destRect,$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const Rect& rect)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const RectF& destRect,$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const RectF& rect)$/;"	f	class:Graphics
DrawLine	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawLine(const Pen *pen, INT x1, INT y1, INT x2, INT y2)$/;"	f	class:Graphics
DrawLine	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawLine(const Pen *pen, REAL x1, REAL y1, REAL x2, REAL y2)$/;"	f	class:Graphics
DrawLine	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawLine(const Pen *pen, const Point& pt1, const Point& pt2)$/;"	f	class:Graphics
DrawLine	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawLine(const Pen *pen, const PointF& pt1, const PointF& pt2)$/;"	f	class:Graphics
DrawLines	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawLines(const Pen *pen, const Point *points, INT count)$/;"	f	class:Graphics
DrawLines	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawLines(const Pen *pen, const PointF *points, INT count)$/;"	f	class:Graphics
DrawPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawPath(const Pen *pen, const GraphicsPath *path)$/;"	f	class:Graphics
DrawPie	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawPie(const Pen *pen, INT x, INT y, INT width, INT height,$/;"	f	class:Graphics
DrawPie	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawPie(const Pen *pen, REAL x, REAL y, REAL width, REAL height,$/;"	f	class:Graphics
DrawPie	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawPie(const Pen *pen, const Rect& rect,$/;"	f	class:Graphics
DrawPie	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawPie(const Pen *pen, const RectF& rect,$/;"	f	class:Graphics
DrawPolygon	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawPolygon(const Pen *pen, const Point *points, INT count)$/;"	f	class:Graphics
DrawPolygon	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawPolygon(const Pen *pen, const PointF *points, INT count)$/;"	f	class:Graphics
DrawRectangle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawRectangle(const Pen *pen, const Rect& rect)$/;"	f	class:Graphics
DrawRectangle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawRectangle(const Pen *pen, const RectF& rect)$/;"	f	class:Graphics
DrawRectangle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawRectangle(const Pen *pen,$/;"	f	class:Graphics
DrawRectangles	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawRectangles(const Pen *pen, const Rect *rects, INT count)$/;"	f	class:Graphics
DrawRectangles	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawRectangles(const Pen *pen, const RectF *rects, INT count)$/;"	f	class:Graphics
DrawString	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawString(const WCHAR *string, INT length, const Font *font,$/;"	f	class:Graphics
DrawString	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status DrawString(const WCHAR *string, INT length,$/;"	f	class:Graphics
EndContainer	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status EndContainer(GraphicsContainer state)$/;"	f	class:Graphics
EnumerateMetafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status EnumerateMetafile(const Metafile *metafile,$/;"	f	class:Graphics
ExcludeClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status ExcludeClip(const Rect& rect)$/;"	f	class:Graphics
ExcludeClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status ExcludeClip(const RectF& rect)$/;"	f	class:Graphics
ExcludeClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status ExcludeClip(const Region *region)$/;"	f	class:Graphics
FillClosedCurve	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillClosedCurve(const Brush *brush,$/;"	f	class:Graphics
FillEllipse	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillEllipse(const Brush *brush, const Rect& rect)$/;"	f	class:Graphics
FillEllipse	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillEllipse(const Brush *brush, const RectF& rect)$/;"	f	class:Graphics
FillEllipse	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillEllipse(const Brush *brush,$/;"	f	class:Graphics
FillPath	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillPath(const Brush *brush, const GraphicsPath *path)$/;"	f	class:Graphics
FillPie	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillPie(const Brush *brush, INT x, INT y, INT width, INT height,$/;"	f	class:Graphics
FillPie	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillPie(const Brush *brush, const Rect& rect,$/;"	f	class:Graphics
FillPie	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillPie(const Brush *brush, const RectF& rect,$/;"	f	class:Graphics
FillPie	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillPie(const Brush *brush,$/;"	f	class:Graphics
FillPolygon	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillPolygon(const Brush *brush, const Point *points, INT count)$/;"	f	class:Graphics
FillPolygon	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillPolygon(const Brush *brush, const Point *points, INT count,$/;"	f	class:Graphics
FillPolygon	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillPolygon(const Brush *brush, const PointF *points, INT count)$/;"	f	class:Graphics
FillPolygon	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillPolygon(const Brush *brush, const PointF *points, INT count,$/;"	f	class:Graphics
FillRectangle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillRectangle(const Brush *brush, const Rect& rect)$/;"	f	class:Graphics
FillRectangle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillRectangle(const Brush *brush, const RectF& rect)$/;"	f	class:Graphics
FillRectangle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillRectangle(const Brush *brush,$/;"	f	class:Graphics
FillRectangles	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillRectangles(const Brush *brush, const Rect *rects, INT count)$/;"	f	class:Graphics
FillRectangles	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillRectangles(const Brush *brush, const RectF *rects, INT count)$/;"	f	class:Graphics
FillRegion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status FillRegion(const Brush *brush, const Region *region)$/;"	f	class:Graphics
Flush	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	VOID Flush(FlushIntention intention = FlushIntentionFlush)$/;"	f	class:Graphics
FromHDC	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	static Graphics* FromHDC(HDC hdc)$/;"	f	class:Graphics
FromHDC	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	static Graphics* FromHDC(HDC hdc, HANDLE hdevice)$/;"	f	class:Graphics
FromHWND	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	static Graphics* FromHWND(HWND hwnd, BOOL icm = FALSE)$/;"	f	class:Graphics
FromImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	static Graphics* FromImage(Image *image)$/;"	f	class:Graphics
GetClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status GetClip(Region *region) const$/;"	f	class:Graphics
GetClipBounds	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status GetClipBounds(Rect *rect) const$/;"	f	class:Graphics
GetClipBounds	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status GetClipBounds(RectF *rect) const$/;"	f	class:Graphics
GetCompositingMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	CompositingMode GetCompositingMode() const$/;"	f	class:Graphics
GetCompositingQuality	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	CompositingQuality GetCompositingQuality() const$/;"	f	class:Graphics
GetDpiX	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	REAL GetDpiX() const$/;"	f	class:Graphics
GetDpiY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	REAL GetDpiY() const$/;"	f	class:Graphics
GetHDC	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	HDC GetHDC()$/;"	f	class:Graphics
GetHalftonePalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	static HPALETTE GetHalftonePalette()$/;"	f	class:Graphics
GetInterpolationMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	InterpolationMode GetInterpolationMode() const$/;"	f	class:Graphics
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status GetLastStatus() const$/;"	f	class:Graphics
GetNearestColor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status GetNearestColor(Color *color) const$/;"	f	class:Graphics
GetPageScale	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	REAL GetPageScale() const$/;"	f	class:Graphics
GetPageUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Unit GetPageUnit() const$/;"	f	class:Graphics
GetPixelOffsetMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	PixelOffsetMode GetPixelOffsetMode() const$/;"	f	class:Graphics
GetRenderingOrigin	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status GetRenderingOrigin(INT *x, INT *y) const$/;"	f	class:Graphics
GetSmoothingMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	SmoothingMode GetSmoothingMode() const$/;"	f	class:Graphics
GetTextContrast	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	UINT GetTextContrast() const$/;"	f	class:Graphics
GetTextRenderingHint	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	TextRenderingHint GetTextRenderingHint() const$/;"	f	class:Graphics
GetTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status GetTransform(Matrix *matrix) const$/;"	f	class:Graphics
GetVisibleClipBounds	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status GetVisibleClipBounds(Rect *rect) const$/;"	f	class:Graphics
GetVisibleClipBounds	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status GetVisibleClipBounds(RectF *rect) const$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Graphics(HDC hdc): nativeGraphics(NULL), lastStatus(Ok)$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Graphics(HDC hdc, HANDLE hdevice): nativeGraphics(NULL), lastStatus(Ok)$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Graphics(HWND hwnd, BOOL icm = FALSE):$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Graphics(Image *image): nativeGraphics(NULL), lastStatus(Ok)$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^class Graphics: public GdiplusBase$/;"	c
IntersectClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status IntersectClip(const Rect& rect)$/;"	f	class:Graphics
IntersectClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status IntersectClip(const RectF& rect)$/;"	f	class:Graphics
IntersectClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status IntersectClip(const Region *region)$/;"	f	class:Graphics
IsClipEmpty	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	BOOL IsClipEmpty() const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	BOOL IsVisible(INT x, INT y) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	BOOL IsVisible(INT x, INT y, INT width, INT height) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	BOOL IsVisible(REAL x, REAL y) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	BOOL IsVisible(REAL x, REAL y, REAL width, REAL height) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	BOOL IsVisible(const Point& point) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	BOOL IsVisible(const PointF& point) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	BOOL IsVisible(const Rect& rect) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	BOOL IsVisible(const RectF& rect) const$/;"	f	class:Graphics
IsVisibleClipEmpty	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	BOOL IsVisibleClipEmpty() const$/;"	f	class:Graphics
MeasureCharacterRanges	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status MeasureCharacterRanges(const WCHAR *string, INT length,$/;"	f	class:Graphics
MeasureDriverString	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status MeasureDriverString(const UINT16 *text, INT length,$/;"	f	class:Graphics
MeasureString	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status MeasureString(const WCHAR *string, INT length,$/;"	f	class:Graphics
MultiplyTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status MultiplyTransform(const Matrix *matrix,$/;"	f	class:Graphics
ReleaseHDC	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	VOID ReleaseHDC(HDC hdc)$/;"	f	class:Graphics
ResetClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status ResetClip()$/;"	f	class:Graphics
ResetTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status ResetTransform()$/;"	f	class:Graphics
Restore	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status Restore(GraphicsState state)$/;"	f	class:Graphics
RotateTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status RotateTransform(REAL angle,$/;"	f	class:Graphics
Save	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	GraphicsState Save() const$/;"	f	class:Graphics
ScaleTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status ScaleTransform(REAL sx, REAL sy,$/;"	f	class:Graphics
SetAbort	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	VOID SetAbort()$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetClip(HRGN hRgn, CombineMode combineMode = CombineModeReplace)$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetClip(const Graphics *g,$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetClip(const GraphicsPath *path,$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetClip(const Rect& rect,$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetClip(const RectF& rect,$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetClip(const Region *region,$/;"	f	class:Graphics
SetCompositingMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetCompositingMode(CompositingMode compositingMode)$/;"	f	class:Graphics
SetCompositingQuality	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetCompositingQuality(CompositingQuality compositingQuality)$/;"	f	class:Graphics
SetInterpolationMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetInterpolationMode(InterpolationMode interpolationMode)$/;"	f	class:Graphics
SetPageScale	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetPageScale(REAL scale)$/;"	f	class:Graphics
SetPageUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetPageUnit(Unit unit)$/;"	f	class:Graphics
SetPixelOffsetMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetPixelOffsetMode(PixelOffsetMode pixelOffsetMode)$/;"	f	class:Graphics
SetRenderingOrigin	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetRenderingOrigin(INT x, INT y)$/;"	f	class:Graphics
SetSmoothingMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetSmoothingMode(SmoothingMode smoothingMode)$/;"	f	class:Graphics
SetTextContrast	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetTextContrast(UINT contrast)$/;"	f	class:Graphics
SetTextRenderingHint	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetTextRenderingHint(TextRenderingHint textRenderingHint)$/;"	f	class:Graphics
SetTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status SetTransform(const Matrix *matrix)$/;"	f	class:Graphics
TransformPoints	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status TransformPoints(CoordinateSpace destSpace,$/;"	f	class:Graphics
TranslateClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status TranslateClip(INT dx, INT dy)$/;"	f	class:Graphics
TranslateClip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status TranslateClip(REAL dx, REAL dy)$/;"	f	class:Graphics
TranslateTransform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status TranslateTransform(REAL dx, REAL dy,$/;"	f	class:Graphics
__GDIPLUS_GRAPHICS_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	24;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	mutable Status lastStatus;$/;"	m	class:Graphics
nativeGraphics	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	GpGraphics *nativeGraphics;$/;"	m	class:Graphics
updateStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Graphics
~Graphics	C++\ege-13.04.02-full\src\gdiplus3\gdiplusgraphics.h	/^	~Graphics()$/;"	f	class:Graphics
Bitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Bitmap(GpImage *image, Status status): Image(image, status) {}$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^class Bitmap: public Image$/;"	c
CachedBitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^class CachedBitmap: public GdiplusBase$/;"	c
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	virtual Bitmap* Clone() const$/;"	f	class:Bitmap
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	virtual CustomLineCap* Clone() const$/;"	f	class:CustomLineCap
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	virtual Image* Clone() const$/;"	f	class:Image
CustomLineCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	CustomLineCap(GpCustomLineCap *customLineCap, Status status):$/;"	f	class:CustomLineCap
CustomLineCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^class CustomLineCap: public GdiplusBase$/;"	c
Font	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Font(GpFont *font, Status status):$/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^class Font: public GdiplusBase$/;"	c
FontCollection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^class FontCollection: public GdiplusBase$/;"	c
FontFamily	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	FontFamily(GpFontFamily *fontFamily, Status status):$/;"	f	class:FontFamily
FontFamily	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^class FontFamily: public GdiplusBase$/;"	c
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:CachedBitmap
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:CustomLineCap
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:Font
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:FontCollection
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:FontFamily
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:Image
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:Region
Image	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Image(GpImage *image, Status status):$/;"	f	class:Image
Image	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^class Image: public GdiplusBase$/;"	c
InstalledFontCollection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^class InstalledFontCollection: public FontCollection$/;"	c
IsAvailable	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	BOOL IsAvailable() const$/;"	f	class:Font
IsAvailable	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	BOOL IsAvailable() const$/;"	f	class:FontFamily
PrivateFontCollection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^class PrivateFontCollection: public FontCollection$/;"	c
Region	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Region(GpRegion *region, Status status):$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^class Region: public GdiplusBase$/;"	c
__GDIPLUS_HEADERS_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	27;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Status lastStatus;$/;"	m	class:CachedBitmap
lastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	mutable Status lastStatus;$/;"	m	class:CustomLineCap
lastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	mutable Status lastStatus;$/;"	m	class:Font
lastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	mutable Status lastStatus;$/;"	m	class:FontCollection
lastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	mutable Status lastStatus;$/;"	m	class:FontFamily
lastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	mutable Status lastStatus;$/;"	m	class:Image
lastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	mutable Status lastStatus;$/;"	m	class:Region
nativeCachedBitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	GpCachedBitmap *nativeCachedBitmap;$/;"	m	class:CachedBitmap
nativeCustomLineCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	GpCustomLineCap *nativeCustomLineCap;$/;"	m	class:CustomLineCap
nativeFont	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	GpFont *nativeFont;$/;"	m	class:Font
nativeFontCollection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	GpFontCollection *nativeFontCollection;$/;"	m	class:FontCollection
nativeFontFamily	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	GpFontFamily *nativeFontFamily;$/;"	m	class:FontFamily
nativeImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	GpImage *nativeImage;$/;"	m	class:Image
nativeRegion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	GpRegion *nativeRegion;$/;"	m	class:Region
updateStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:CustomLineCap
updateStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Font
updateStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:FontCollection
updateStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:FontFamily
updateStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Image
updateStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Region
~Bitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	virtual ~Bitmap()$/;"	f	class:Bitmap
~CustomLineCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	virtual ~CustomLineCap()$/;"	f	class:CustomLineCap
~FontCollection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	virtual ~FontCollection() {}$/;"	f	class:FontCollection
~Image	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	virtual ~Image()$/;"	f	class:Image
~InstalledFontCollection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	virtual ~InstalledFontCollection() {}$/;"	f	class:InstalledFontCollection
~PrivateFontCollection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusheaders.h	/^	virtual ~PrivateFontCollection()$/;"	f	class:PrivateFontCollection
ClearBrushRemapTable	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status ClearBrushRemapTable()$/;"	f	class:ImageAttributes
ClearColorKey	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status ClearColorKey(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearColorMatrices	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status ClearColorMatrices(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearColorMatrix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status ClearColorMatrix(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearGamma	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status ClearGamma(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearNoOp	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status ClearNoOp(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearOutputChannel	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status ClearOutputChannel(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearOutputChannelColorProfile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status ClearOutputChannelColorProfile($/;"	f	class:ImageAttributes
ClearRemapTable	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status ClearRemapTable(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearThreshold	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status ClearThreshold(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	ImageAttributes* Clone() const$/;"	f	class:ImageAttributes
GetAdjustedPalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status GetAdjustedPalette(ColorPalette *colorPalette,$/;"	f	class:ImageAttributes
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status GetLastStatus() const$/;"	f	class:ImageAttributes
ImageAttributes	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	ImageAttributes(): nativeImageAttributes(NULL), lastStatus(Ok)$/;"	f	class:ImageAttributes
ImageAttributes	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	ImageAttributes(GpImageAttributes *imageAttributes, Status status):$/;"	f	class:ImageAttributes
ImageAttributes	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^class ImageAttributes: public GdiplusBase$/;"	c
Reset	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status Reset(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
SetBrushRemapTable	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status SetBrushRemapTable(UINT mapSize, ColorMap *map)$/;"	f	class:ImageAttributes
SetColorKey	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status SetColorKey(const Color& colorLow, const Color& colorHigh,$/;"	f	class:ImageAttributes
SetColorMatrices	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status SetColorMatrices(const ColorMatrix *colorMatrix,$/;"	f	class:ImageAttributes
SetColorMatrix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status SetColorMatrix(const ColorMatrix *colorMatrix,$/;"	f	class:ImageAttributes
SetGamma	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status SetGamma(REAL gamma,$/;"	f	class:ImageAttributes
SetNoOp	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status SetNoOp(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
SetOutputChannel	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status SetOutputChannel(ColorChannelFlags channelFlags,$/;"	f	class:ImageAttributes
SetOutputChannelColorProfile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status SetOutputChannelColorProfile(const WCHAR *colorProfileFilename,$/;"	f	class:ImageAttributes
SetRemapTable	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status SetRemapTable(UINT mapSize, const ColorMap *map,$/;"	f	class:ImageAttributes
SetThreshold	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status SetThreshold(REAL threshold,$/;"	f	class:ImageAttributes
SetToIdentity	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status SetToIdentity(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
SetWrapMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status SetWrapMode(WrapMode wrap, const Color& color = Color(),$/;"	f	class:ImageAttributes
__GDIPLUS_IMAGEATTRIBUTES_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	24;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	mutable Status lastStatus;$/;"	m	class:ImageAttributes
nativeImageAttributes	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	GpImageAttributes *nativeImageAttributes;$/;"	m	class:ImageAttributes
updateStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:ImageAttributes
~ImageAttributes	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimageattributes.h	/^	~ImageAttributes()$/;"	f	class:ImageAttributes
GetImageDecoders	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimagecodec.h	/^static __inline__ GpStatus GetImageDecoders(UINT numDecoders, UINT size,$/;"	f
GetImageDecodersSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimagecodec.h	/^static __inline__ GpStatus GetImageDecodersSize(UINT *numDecoders, UINT *size)$/;"	f
GetImageEncoders	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimagecodec.h	/^static __inline__ GpStatus GetImageEncoders(UINT numEncoders, UINT size,$/;"	f
GetImageEncodersSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimagecodec.h	/^static __inline__ GpStatus GetImageEncodersSize(UINT *numEncoders, UINT *size)$/;"	f
__GDIPLUS_IMAGECODEC_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimagecodec.h	24;"	d
BitmapData	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^typedef struct BitmapData {$/;"	s
BitmapData	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^} BitmapData;$/;"	t	typeref:struct:BitmapData
Clsid	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	CLSID Clsid;$/;"	m	struct:ImageCodecInfo
CodecName	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	WCHAR *CodecName;$/;"	m	struct:ImageCodecInfo
Cookie	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	UINT Cookie;$/;"	m	struct:ImageItemData
Count	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	UINT Count;$/;"	m	struct:EncoderParameters
Data	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	UINT *Data;$/;"	m	struct:ImageItemData
DataSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	UINT DataSize;$/;"	m	struct:ImageItemData
Desc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	VOID *Desc;$/;"	m	struct:ImageItemData
DescSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	UINT DescSize;$/;"	m	struct:ImageItemData
DllName	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	WCHAR *DllName;$/;"	m	struct:ImageCodecInfo
EncoderParameter	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^typedef struct EncoderParameter {$/;"	s
EncoderParameter	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^} EncoderParameter;$/;"	t	typeref:struct:EncoderParameter
EncoderParameters	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^typedef struct EncoderParameters {$/;"	s
EncoderParameters	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^} EncoderParameters;$/;"	t	typeref:struct:EncoderParameters
FilenameExtension	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	WCHAR *FilenameExtension;$/;"	m	struct:ImageCodecInfo
Flags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	DWORD Flags;$/;"	m	struct:ImageCodecInfo
FormatDescription	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	WCHAR *FormatDescription;$/;"	m	struct:ImageCodecInfo
FormatID	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	GUID FormatID;$/;"	m	struct:ImageCodecInfo
Guid	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	GUID Guid;$/;"	m	struct:EncoderParameter
Height	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	UINT Height;$/;"	m	struct:BitmapData
ImageCodecFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^typedef enum ImageCodecFlags {$/;"	g
ImageCodecFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^} ImageCodecFlags;$/;"	t	typeref:enum:ImageCodecFlags
ImageCodecFlagsBlockingDecode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageCodecFlagsBlockingDecode = 0x00000020,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsBuiltin	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageCodecFlagsBuiltin = 0x00010000,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsDecoder	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageCodecFlagsDecoder = 0x00000002,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsEncoder	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageCodecFlagsEncoder = 0x00000001,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsSeekableEncode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageCodecFlagsSeekableEncode = 0x00000010,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsSupportBitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageCodecFlagsSupportBitmap = 0x00000004,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsSupportVector	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageCodecFlagsSupportVector = 0x00000008,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsSystem	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageCodecFlagsSystem = 0x00020000,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsUser	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageCodecFlagsUser = 0x00040000$/;"	e	enum:ImageCodecFlags
ImageCodecInfo	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^typedef struct ImageCodecInfo {$/;"	s
ImageCodecInfo	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^} ImageCodecInfo;$/;"	t	typeref:struct:ImageCodecInfo
ImageFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^typedef enum ImageFlags {$/;"	g
ImageFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^} ImageFlags;$/;"	t	typeref:enum:ImageFlags
ImageFlagsCaching	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageFlagsCaching = 0x00020000$/;"	e	enum:ImageFlags
ImageFlagsColorSpaceCMYK	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageFlagsColorSpaceCMYK = 0x00000020,$/;"	e	enum:ImageFlags
ImageFlagsColorSpaceGRAY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageFlagsColorSpaceGRAY = 0x00000040,$/;"	e	enum:ImageFlags
ImageFlagsColorSpaceRGB	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageFlagsColorSpaceRGB = 0x00000010,$/;"	e	enum:ImageFlags
ImageFlagsColorSpaceYCBCR	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageFlagsColorSpaceYCBCR = 0x00000080,$/;"	e	enum:ImageFlags
ImageFlagsColorSpaceYCCK	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageFlagsColorSpaceYCCK = 0x00000100,$/;"	e	enum:ImageFlags
ImageFlagsHasAlpha	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageFlagsHasAlpha = 0x00000002,$/;"	e	enum:ImageFlags
ImageFlagsHasRealDPI	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageFlagsHasRealDPI = 0x00001000,$/;"	e	enum:ImageFlags
ImageFlagsHasRealPixelSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageFlagsHasRealPixelSize = 0x00002000,$/;"	e	enum:ImageFlags
ImageFlagsHasTranslucent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageFlagsHasTranslucent = 0x00000004,$/;"	e	enum:ImageFlags
ImageFlagsNone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageFlagsNone = 0,$/;"	e	enum:ImageFlags
ImageFlagsPartiallyScalable	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageFlagsPartiallyScalable = 0x00000008,$/;"	e	enum:ImageFlags
ImageFlagsReadOnly	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageFlagsReadOnly = 0x00010000,$/;"	e	enum:ImageFlags
ImageFlagsScalable	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageFlagsScalable = 0x00000001,$/;"	e	enum:ImageFlags
ImageItemData	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^typedef struct ImageItemData {$/;"	s
ImageItemData	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^} ImageItemData;$/;"	t	typeref:struct:ImageItemData
ImageLockMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^typedef enum ImageLockMode {$/;"	g
ImageLockMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^} ImageLockMode;$/;"	t	typeref:enum:ImageLockMode
ImageLockModeRead	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageLockModeRead = 1,$/;"	e	enum:ImageLockMode
ImageLockModeUserInputBuf	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageLockModeUserInputBuf = 4$/;"	e	enum:ImageLockMode
ImageLockModeWrite	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ImageLockModeWrite = 2,$/;"	e	enum:ImageLockMode
ItemDataPosition	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^typedef enum ItemDataPosition {$/;"	g
ItemDataPosition	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^} ItemDataPosition;$/;"	t	typeref:enum:ItemDataPosition
ItemDataPositionAfterBits	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ItemDataPositionAfterBits = 2$/;"	e	enum:ItemDataPosition
ItemDataPositionAfterHeader	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ItemDataPositionAfterHeader = 0,$/;"	e	enum:ItemDataPosition
ItemDataPositionAfterPalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ItemDataPositionAfterPalette = 1,$/;"	e	enum:ItemDataPosition
MimeType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	WCHAR *MimeType;$/;"	m	struct:ImageCodecInfo
NumberOfValues	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ULONG NumberOfValues;$/;"	m	struct:EncoderParameter
Parameter	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	EncoderParameter Parameter[1];$/;"	m	struct:EncoderParameters
PixelFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	INT PixelFormat;  \/* MSDN: "PixelFormat PixelFormat;" *\/$/;"	m	struct:BitmapData
Position	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	UINT Position;$/;"	m	struct:ImageItemData
PropertyItem	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^typedef struct PropertyItem {$/;"	s
PropertyItem	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^} PropertyItem;$/;"	t	typeref:struct:PropertyItem
PropertyTagArtist	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	212;"	d
PropertyTagBitsPerSample	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	177;"	d
PropertyTagCellHeight	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	182;"	d
PropertyTagCellWidth	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	181;"	d
PropertyTagChrominanceTable	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	306;"	d
PropertyTagColorMap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	217;"	d
PropertyTagColorTransferFunction	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	275;"	d
PropertyTagCompression	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	178;"	d
PropertyTagCopyright	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	316;"	d
PropertyTagDateTime	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	211;"	d
PropertyTagDocumentName	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	184;"	d
PropertyTagDotRange	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	226;"	d
PropertyTagEquipMake	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	186;"	d
PropertyTagEquipModel	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	187;"	d
PropertyTagExifAperture	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	332;"	d
PropertyTagExifBrightness	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	333;"	d
PropertyTagExifCfaPattern	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	362;"	d
PropertyTagExifColorSpace	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	347;"	d
PropertyTagExifCompBPP	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	330;"	d
PropertyTagExifCompConfig	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	329;"	d
PropertyTagExifDTDigSS	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	345;"	d
PropertyTagExifDTDigitized	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	328;"	d
PropertyTagExifDTOrig	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	327;"	d
PropertyTagExifDTOrigSS	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	344;"	d
PropertyTagExifDTSubsec	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	343;"	d
PropertyTagExifExposureBias	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	334;"	d
PropertyTagExifExposureIndex	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	358;"	d
PropertyTagExifExposureProg	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	321;"	d
PropertyTagExifExposureTime	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	317;"	d
PropertyTagExifFNumber	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	318;"	d
PropertyTagExifFPXVer	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	346;"	d
PropertyTagExifFileSource	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	360;"	d
PropertyTagExifFlash	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	339;"	d
PropertyTagExifFlashEnergy	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	352;"	d
PropertyTagExifFocalLength	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	340;"	d
PropertyTagExifFocalResUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	356;"	d
PropertyTagExifFocalXRes	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	354;"	d
PropertyTagExifFocalYRes	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	355;"	d
PropertyTagExifIFD	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	319;"	d
PropertyTagExifISOSpeed	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	324;"	d
PropertyTagExifInterop	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	351;"	d
PropertyTagExifLightSource	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	338;"	d
PropertyTagExifMakerNote	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	341;"	d
PropertyTagExifMaxAperture	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	335;"	d
PropertyTagExifMeteringMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	337;"	d
PropertyTagExifOECF	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	325;"	d
PropertyTagExifPixXDim	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	348;"	d
PropertyTagExifPixYDim	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	349;"	d
PropertyTagExifRelatedWav	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	350;"	d
PropertyTagExifSceneType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	361;"	d
PropertyTagExifSensingMethod	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	359;"	d
PropertyTagExifShutterSpeed	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	331;"	d
PropertyTagExifSpatialFR	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	353;"	d
PropertyTagExifSpectralSense	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	322;"	d
PropertyTagExifSubjectDist	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	336;"	d
PropertyTagExifSubjectLoc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	357;"	d
PropertyTagExifUserComment	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	342;"	d
PropertyTagExifVer	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	326;"	d
PropertyTagExtraSamples	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	228;"	d
PropertyTagFillOrder	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	183;"	d
PropertyTagFrameDelay	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	307;"	d
PropertyTagFreeByteCounts	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	202;"	d
PropertyTagFreeOffset	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	201;"	d
PropertyTagGamma	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	246;"	d
PropertyTagGlobalPalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	309;"	d
PropertyTagGpsAltitude	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	152;"	d
PropertyTagGpsAltitudeRef	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	151;"	d
PropertyTagGpsDestBear	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	170;"	d
PropertyTagGpsDestBearRef	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	169;"	d
PropertyTagGpsDestDist	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	172;"	d
PropertyTagGpsDestDistRef	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	171;"	d
PropertyTagGpsDestLat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	166;"	d
PropertyTagGpsDestLatRef	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	165;"	d
PropertyTagGpsDestLong	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	168;"	d
PropertyTagGpsDestLongRef	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	167;"	d
PropertyTagGpsGpsDop	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	157;"	d
PropertyTagGpsGpsMeasureMode	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	156;"	d
PropertyTagGpsGpsSatellites	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	154;"	d
PropertyTagGpsGpsStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	155;"	d
PropertyTagGpsGpsTime	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	153;"	d
PropertyTagGpsIFD	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	323;"	d
PropertyTagGpsImgDir	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	163;"	d
PropertyTagGpsImgDirRef	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	162;"	d
PropertyTagGpsLatitude	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	148;"	d
PropertyTagGpsLatitudeRef	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	147;"	d
PropertyTagGpsLongitude	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	150;"	d
PropertyTagGpsLongitudeRef	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	149;"	d
PropertyTagGpsMapDatum	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	164;"	d
PropertyTagGpsSpeed	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	159;"	d
PropertyTagGpsSpeedRef	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	158;"	d
PropertyTagGpsTrack	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	161;"	d
PropertyTagGpsTrackRef	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	160;"	d
PropertyTagGpsVer	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	146;"	d
PropertyTagGrayResponseCurve	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	204;"	d
PropertyTagGrayResponseUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	203;"	d
PropertyTagGridSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	266;"	d
PropertyTagHalftoneDegree	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	261;"	d
PropertyTagHalftoneHints	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	218;"	d
PropertyTagHalftoneLPI	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	259;"	d
PropertyTagHalftoneLPIUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	260;"	d
PropertyTagHalftoneMisc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	263;"	d
PropertyTagHalftoneScreen	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	264;"	d
PropertyTagHalftoneShape	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	262;"	d
PropertyTagHostComputer	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	213;"	d
PropertyTagICCProfile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	320;"	d
PropertyTagICCProfileDescriptor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	247;"	d
PropertyTagImageDescription	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	185;"	d
PropertyTagImageHeight	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	176;"	d
PropertyTagImageTitle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	249;"	d
PropertyTagImageWidth	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	175;"	d
PropertyTagIndexBackground	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	310;"	d
PropertyTagIndexTransparent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	311;"	d
PropertyTagInkNames	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	224;"	d
PropertyTagInkSet	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	223;"	d
PropertyTagJPEGACTables	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	241;"	d
PropertyTagJPEGDCTables	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	240;"	d
PropertyTagJPEGInterFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	234;"	d
PropertyTagJPEGInterLength	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	235;"	d
PropertyTagJPEGLosslessPredictors	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	237;"	d
PropertyTagJPEGPointTransforms	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	238;"	d
PropertyTagJPEGProc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	233;"	d
PropertyTagJPEGQTables	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	239;"	d
PropertyTagJPEGQuality	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	265;"	d
PropertyTagJPEGRestartInterval	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	236;"	d
PropertyTagLoopCount	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	308;"	d
PropertyTagLuminanceTable	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	305;"	d
PropertyTagMaxSampleValue	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	194;"	d
PropertyTagMinSampleValue	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	193;"	d
PropertyTagNewSubfileType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	173;"	d
PropertyTagNumberOfInks	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	225;"	d
PropertyTagOrientation	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	189;"	d
PropertyTagPageName	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	198;"	d
PropertyTagPageNumber	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	208;"	d
PropertyTagPaletteHistogram	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	315;"	d
PropertyTagPhotometricInterp	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	179;"	d
PropertyTagPixelPerUnitX	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	313;"	d
PropertyTagPixelPerUnitY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	314;"	d
PropertyTagPixelUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	312;"	d
PropertyTagPlanarConfig	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	197;"	d
PropertyTagPredictor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	214;"	d
PropertyTagPrimaryChromaticities	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	216;"	d
PropertyTagPrintFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	254;"	d
PropertyTagPrintFlagsBleedWidth	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	257;"	d
PropertyTagPrintFlagsBleedWidthScale	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	258;"	d
PropertyTagPrintFlagsCrop	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	256;"	d
PropertyTagPrintFlagsVersion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	255;"	d
PropertyTagREFBlackWhite	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	245;"	d
PropertyTagResolutionUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	207;"	d
PropertyTagResolutionXLengthUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	252;"	d
PropertyTagResolutionXUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	250;"	d
PropertyTagResolutionYLengthUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	253;"	d
PropertyTagResolutionYUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	251;"	d
PropertyTagRowsPerStrip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	191;"	d
PropertyTagSMaxSampleValue	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	231;"	d
PropertyTagSMinSampleValue	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	230;"	d
PropertyTagSRGBRenderingIntent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	248;"	d
PropertyTagSampleFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	229;"	d
PropertyTagSamplesPerPixel	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	190;"	d
PropertyTagSoftwareUsed	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	210;"	d
PropertyTagStripBytesCount	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	192;"	d
PropertyTagStripOffsets	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	188;"	d
PropertyTagSubfileType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	174;"	d
PropertyTagT4Option	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	205;"	d
PropertyTagT6Option	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	206;"	d
PropertyTagTargetPrinter	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	227;"	d
PropertyTagThreshHolding	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	180;"	d
PropertyTagThumbnailArtist	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	297;"	d
PropertyTagThumbnailBitsPerSample	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	279;"	d
PropertyTagThumbnailColorDepth	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	270;"	d
PropertyTagThumbnailCompressedSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	274;"	d
PropertyTagThumbnailCompression	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	280;"	d
PropertyTagThumbnailCopyRight	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	304;"	d
PropertyTagThumbnailData	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	276;"	d
PropertyTagThumbnailDateTime	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	296;"	d
PropertyTagThumbnailEquipMake	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	283;"	d
PropertyTagThumbnailEquipModel	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	284;"	d
PropertyTagThumbnailFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	267;"	d
PropertyTagThumbnailHeight	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	269;"	d
PropertyTagThumbnailImageDescription	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	282;"	d
PropertyTagThumbnailImageHeight	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	278;"	d
PropertyTagThumbnailImageWidth	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	277;"	d
PropertyTagThumbnailOrientation	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	286;"	d
PropertyTagThumbnailPhotometricInterp	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	281;"	d
PropertyTagThumbnailPlanarConfig	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	292;"	d
PropertyTagThumbnailPlanes	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	271;"	d
PropertyTagThumbnailPrimaryChromaticities	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	299;"	d
PropertyTagThumbnailRawBytes	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	272;"	d
PropertyTagThumbnailRefBlackWhite	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	303;"	d
PropertyTagThumbnailResolutionUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	293;"	d
PropertyTagThumbnailResolutionX	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	290;"	d
PropertyTagThumbnailResolutionY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	291;"	d
PropertyTagThumbnailRowsPerStrip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	288;"	d
PropertyTagThumbnailSamplesPerPixel	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	287;"	d
PropertyTagThumbnailSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	273;"	d
PropertyTagThumbnailSoftwareUsed	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	295;"	d
PropertyTagThumbnailStripBytesCount	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	289;"	d
PropertyTagThumbnailStripOffsets	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	285;"	d
PropertyTagThumbnailTransferFunction	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	294;"	d
PropertyTagThumbnailWhitePoint	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	298;"	d
PropertyTagThumbnailWidth	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	268;"	d
PropertyTagThumbnailYCbCrCoefficients	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	300;"	d
PropertyTagThumbnailYCbCrPositioning	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	302;"	d
PropertyTagThumbnailYCbCrSubsampling	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	301;"	d
PropertyTagTileByteCounts	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	222;"	d
PropertyTagTileLength	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	220;"	d
PropertyTagTileOffset	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	221;"	d
PropertyTagTileWidth	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	219;"	d
PropertyTagTransferFunction	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	209;"	d
PropertyTagTransferRange	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	232;"	d
PropertyTagTypeASCII	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	365;"	d
PropertyTagTypeByte	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	364;"	d
PropertyTagTypeLong	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	367;"	d
PropertyTagTypeRational	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	368;"	d
PropertyTagTypeSLONG	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	370;"	d
PropertyTagTypeSRational	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	371;"	d
PropertyTagTypeShort	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	366;"	d
PropertyTagTypeUndefined	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	369;"	d
PropertyTagWhitePoint	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	215;"	d
PropertyTagXPosition	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	199;"	d
PropertyTagXResolution	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	195;"	d
PropertyTagYCbCrCoefficients	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	242;"	d
PropertyTagYCbCrPositioning	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	244;"	d
PropertyTagYCbCrSubsampling	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	243;"	d
PropertyTagYPosition	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	200;"	d
PropertyTagYResolution	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	196;"	d
Reserved	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	UINT_PTR Reserved;$/;"	m	struct:BitmapData
Rotate180FlipNone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	Rotate180FlipNone = 2,$/;"	e	enum:RotateFlipType
Rotate180FlipX	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	Rotate180FlipX = 6,$/;"	e	enum:RotateFlipType
Rotate180FlipXY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	Rotate180FlipXY = 0,$/;"	e	enum:RotateFlipType
Rotate180FlipY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	Rotate180FlipY = 4,$/;"	e	enum:RotateFlipType
Rotate270FlipNone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	Rotate270FlipNone = 3,$/;"	e	enum:RotateFlipType
Rotate270FlipX	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	Rotate270FlipX = 7,$/;"	e	enum:RotateFlipType
Rotate270FlipXY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	Rotate270FlipXY = 1, $/;"	e	enum:RotateFlipType
Rotate270FlipY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	Rotate270FlipY = 5,$/;"	e	enum:RotateFlipType
Rotate90FlipNone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	Rotate90FlipNone = 1,$/;"	e	enum:RotateFlipType
Rotate90FlipX	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	Rotate90FlipX = 5,$/;"	e	enum:RotateFlipType
Rotate90FlipXY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	Rotate90FlipXY = 3,$/;"	e	enum:RotateFlipType
Rotate90FlipY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	Rotate90FlipY = 7$/;"	e	enum:RotateFlipType
RotateFlipType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^typedef enum RotateFlipType {$/;"	g
RotateFlipType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^} RotateFlipType;$/;"	t	typeref:enum:RotateFlipType
RotateNoneFlipNone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	RotateNoneFlipNone = 0,$/;"	e	enum:RotateFlipType
RotateNoneFlipX	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	RotateNoneFlipX = 4,$/;"	e	enum:RotateFlipType
RotateNoneFlipXY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	RotateNoneFlipXY = 2,$/;"	e	enum:RotateFlipType
RotateNoneFlipY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	RotateNoneFlipY = 6,$/;"	e	enum:RotateFlipType
Scan0	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	VOID *Scan0;$/;"	m	struct:BitmapData
SigCount	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	DWORD SigCount;$/;"	m	struct:ImageCodecInfo
SigMask	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	BYTE *SigMask;$/;"	m	struct:ImageCodecInfo
SigPattern	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	BYTE *SigPattern;$/;"	m	struct:ImageCodecInfo
SigSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	DWORD SigSize;$/;"	m	struct:ImageCodecInfo
Size	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	UINT Size;$/;"	m	struct:ImageItemData
Stride	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	INT Stride;$/;"	m	struct:BitmapData
Type	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ULONG Type;$/;"	m	struct:EncoderParameter
Value	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	VOID *Value;$/;"	m	struct:EncoderParameter
Version	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	DWORD Version;$/;"	m	struct:ImageCodecInfo
Width	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	UINT Width;$/;"	m	struct:BitmapData
__GDIPLUS_IMAGING_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	24;"	d
id	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	PROPID id;$/;"	m	struct:PropertyItem
length	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	ULONG length;$/;"	m	struct:PropertyItem
type	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	WORD type;$/;"	m	struct:PropertyItem
value	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimaging.h	/^	VOID *value;$/;"	m	struct:PropertyItem
AddFontFile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status PrivateFontCollection::AddFontFile(const WCHAR *filename)$/;"	f	class:PrivateFontCollection
AddMemoryFont	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status PrivateFontCollection::AddMemoryFont($/;"	f	class:PrivateFontCollection
AllocateArrays	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status PathData::AllocateArrays(INT capacity)$/;"	f	class:PathData
Bitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(HBITMAP hbm, HPALETTE hpal):$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(HICON hicon):$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(HINSTANCE hInstance, const WCHAR *bitmapName):$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(IDirectDrawSurface7 *surface): Image(NULL, Ok)$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(INT width, INT height, Graphics *target):$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(INT width, INT height, INT stride,$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(INT width, INT height, PixelFormat format):$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(IStream *stream, BOOL useEmbeddedColorManagement):$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(const BITMAPINFO *gdiBitmapInfo, VOID *gdiBitmapData):$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(const WCHAR *filename,$/;"	f	class:Bitmap
CachedBitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ CachedBitmap::CachedBitmap(Bitmap *bitmap, Graphics *graphics):$/;"	f	class:CachedBitmap
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::Clone(INT x, INT y, INT width, INT height,$/;"	f	class:Bitmap
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::Clone(REAL x, REAL y, REAL width, REAL height,$/;"	f	class:Bitmap
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::Clone(const Rect& rect, PixelFormat format) const$/;"	f	class:Bitmap
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::Clone(const RectF& rect, PixelFormat format) const$/;"	f	class:Bitmap
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Font* Font::Clone() const$/;"	f	class:Font
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ FontFamily* FontFamily::Clone() const$/;"	f	class:FontFamily
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Region* Region::Clone() const$/;"	f	class:Region
Complement	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Complement(const GraphicsPath *path)$/;"	f	class:Region
Complement	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Complement(const Rect& rect)$/;"	f	class:Region
Complement	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Complement(const RectF& rect)$/;"	f	class:Region
Complement	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Complement(const Region *region)$/;"	f	class:Region
ConvertFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Bitmap::ConvertFormat(PixelFormat format,$/;"	f	class:Bitmap
CustomLineCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ CustomLineCap::CustomLineCap($/;"	f	class:CustomLineCap
Equals	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL Region::Equals(const Region *region, const Graphics *graphics)$/;"	f	class:Region
Exclude	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Exclude(const GraphicsPath *path)$/;"	f	class:Region
Exclude	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Exclude(const Rect& rect)$/;"	f	class:Region
Exclude	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Exclude(const RectF& rect)$/;"	f	class:Region
Exclude	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Exclude(const Region *region)$/;"	f	class:Region
FindFirstItem	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::FindFirstItem(ImageItemData *item)$/;"	f	class:Image
FindNextItem	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::FindNextItem(ImageItemData *item)$/;"	f	class:Image
Font	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Font::Font(HDC hdc):$/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Font::Font(HDC hdc, HFONT hfont):$/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Font::Font(HDC hdc, const LOGFONTA *logfont):$/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Font::Font(HDC hdc, const LOGFONTW *logfont):$/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Font::Font(const FontFamily *family,$/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Font::Font(const WCHAR *familyName, REAL emSize, INT style,$/;"	f	class:Font
FontCollection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ FontCollection::FontCollection():$/;"	f	class:FontCollection
FontFamily	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ FontFamily::FontFamily():$/;"	f	class:FontFamily
FontFamily	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ FontFamily::FontFamily(const WCHAR *name,$/;"	f	class:FontFamily
FreeArrays	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ VOID PathData::FreeArrays()$/;"	f	class:PathData
FromBITMAPINFO	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromBITMAPINFO(const BITMAPINFO *gdiBitmapInfo,$/;"	f	class:Bitmap
FromDirectDrawSurface7	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromDirectDrawSurface7(IDirectDrawSurface7 *surface)$/;"	f	class:Bitmap
FromFile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromFile(const WCHAR *filename,$/;"	f	class:Bitmap
FromFile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Image* Image::FromFile(const WCHAR *filename,$/;"	f	class:Image
FromHBITMAP	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromHBITMAP(HBITMAP hbm, HPALETTE hpal)$/;"	f	class:Bitmap
FromHICON	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromHICON(HICON icon)$/;"	f	class:Bitmap
FromHRGN	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Region* Region::FromHRGN(HRGN hrgn)$/;"	f	class:Region
FromResource	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromResource($/;"	f	class:Bitmap
FromStream	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromStream(IStream *stream,$/;"	f	class:Bitmap
FromStream	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Image* Image::FromStream(IStream *stream,$/;"	f	class:Image
GenericMonospace	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ const FontFamily* FontFamily::GenericMonospace()$/;"	f	class:FontFamily
GenericSansSerif	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ const FontFamily* FontFamily::GenericSansSerif()$/;"	f	class:FontFamily
GenericSerif	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ const FontFamily* FontFamily::GenericSerif()$/;"	f	class:FontFamily
GetAllPropertyItems	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::GetAllPropertyItems(UINT totalBufferSize,$/;"	f	class:Image
GetBaseCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ LineCap CustomLineCap::GetBaseCap() const$/;"	f	class:CustomLineCap
GetBaseInset	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ REAL CustomLineCap::GetBaseInset() const$/;"	f	class:CustomLineCap
GetBounds	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::GetBounds(RectF *srcRect, Unit *srcUnit)$/;"	f	class:Image
GetBounds	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::GetBounds(Rect *rect, const Graphics *graphics) const$/;"	f	class:Region
GetBounds	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::GetBounds(RectF *rect, const Graphics *graphics) const$/;"	f	class:Region
GetCellAscent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ UINT16 FontFamily::GetCellAscent(INT style) const$/;"	f	class:FontFamily
GetCellDescent	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ UINT16 FontFamily::GetCellDescent(INT style) const$/;"	f	class:FontFamily
GetData	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::GetData(BYTE *buffer, UINT bufferSize,$/;"	f	class:Region
GetDataSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ UINT Region::GetDataSize() const$/;"	f	class:Region
GetEmHeight	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ UINT16 FontFamily::GetEmHeight(INT style) const$/;"	f	class:FontFamily
GetEncoderParameterList	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::GetEncoderParameterList(const CLSID *clsidEncoder,$/;"	f	class:Image
GetEncoderParameterListSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ UINT Image::GetEncoderParameterListSize(const CLSID *clsidEncoder)$/;"	f	class:Image
GetFamilies	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status FontCollection::GetFamilies(INT numSought,$/;"	f	class:FontCollection
GetFamily	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Font::GetFamily(FontFamily *family) const$/;"	f	class:Font
GetFamilyCount	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ INT FontCollection::GetFamilyCount() const$/;"	f	class:FontCollection
GetFamilyName	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status FontFamily::GetFamilyName(WCHAR name[LF_FACESIZE],$/;"	f	class:FontFamily
GetFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ UINT Image::GetFlags()$/;"	f	class:Image
GetFrameCount	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ UINT Image::GetFrameCount(const GUID *dimensionID)$/;"	f	class:Image
GetFrameDimensionsCount	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ UINT Image::GetFrameDimensionsCount()$/;"	f	class:Image
GetFrameDimensionsList	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::GetFrameDimensionsList(GUID *dimensionIDs, UINT count)$/;"	f	class:Image
GetHBITMAP	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Bitmap::GetHBITMAP($/;"	f	class:Bitmap
GetHICON	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Bitmap::GetHICON(HICON *icon) const$/;"	f	class:Bitmap
GetHRGN	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ HRGN Region::GetHRGN(const Graphics *graphics) const$/;"	f	class:Region
GetHeight	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ REAL Font::GetHeight(REAL dpi) const$/;"	f	class:Font
GetHeight	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ REAL Font::GetHeight(const Graphics *graphics) const$/;"	f	class:Font
GetHeight	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ UINT Image::GetHeight()$/;"	f	class:Image
GetHistogram	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Bitmap::GetHistogram(HistogramFormat format,$/;"	f	class:Bitmap
GetHistogramSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Bitmap::GetHistogramSize(HistogramFormat format,$/;"	f	class:Bitmap
GetHorizontalResolution	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ REAL Image::GetHorizontalResolution()$/;"	f	class:Image
GetItemData	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::GetItemData(ImageItemData *item)$/;"	f	class:Image
GetLineSpacing	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ UINT16 FontFamily::GetLineSpacing(INT style) const$/;"	f	class:FontFamily
GetLogFontA	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Font::GetLogFontA(const Graphics *graphics, LOGFONTA *logfontA)$/;"	f	class:Font
GetLogFontW	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Font::GetLogFontW(const Graphics *graphics, LOGFONTW *logfontW)$/;"	f	class:Font
GetPalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::GetPalette(ColorPalette *palette, INT size)$/;"	f	class:Image
GetPaletteSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ INT Image::GetPaletteSize()$/;"	f	class:Image
GetPhysicalDimension	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::GetPhysicalDimension(SizeF *size)$/;"	f	class:Image
GetPixel	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Bitmap::GetPixel(INT x, INT y, Color *color) const$/;"	f	class:Bitmap
GetPixelFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ PixelFormat Image::GetPixelFormat()$/;"	f	class:Image
GetPropertyCount	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ UINT Image::GetPropertyCount()$/;"	f	class:Image
GetPropertyIdList	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::GetPropertyIdList(UINT numOfProperty, PROPID *list)$/;"	f	class:Image
GetPropertyItem	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::GetPropertyItem(PROPID propId, UINT propSize,$/;"	f	class:Image
GetPropertyItemSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ UINT Image::GetPropertyItemSize(PROPID propId)$/;"	f	class:Image
GetPropertySize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::GetPropertySize($/;"	f	class:Image
GetRawFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::GetRawFormat(GUID *format)$/;"	f	class:Image
GetRegionScans	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::GetRegionScans(const Matrix *matrix,$/;"	f	class:Region
GetRegionScansCount	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ UINT Region::GetRegionScansCount(const Matrix *matrix) const$/;"	f	class:Region
GetSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ REAL Font::GetSize() const$/;"	f	class:Font
GetStrokeCaps	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status CustomLineCap::GetStrokeCaps(LineCap *startCap,$/;"	f	class:CustomLineCap
GetStrokeJoin	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ LineJoin CustomLineCap::GetStrokeJoin() const$/;"	f	class:CustomLineCap
GetStyle	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ INT Font::GetStyle() const$/;"	f	class:Font
GetThumbnailImage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Image* Image::GetThumbnailImage(UINT thumbWidth, UINT thumbHeight,$/;"	f	class:Image
GetType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ ImageType Image::GetType() const$/;"	f	class:Image
GetUnit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Unit Font::GetUnit() const$/;"	f	class:Font
GetVerticalResolution	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ REAL Image::GetVerticalResolution()$/;"	f	class:Image
GetWidth	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ UINT Image::GetWidth()$/;"	f	class:Image
GetWidthScale	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ REAL CustomLineCap::GetWidthScale() const$/;"	f	class:CustomLineCap
Image	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Image::Image(IStream *stream, BOOL useEmbeddedColorManagement):$/;"	f	class:Image
Image	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Image::Image(const WCHAR *filename, BOOL useEmbeddedColorManagement):$/;"	f	class:Image
InitializePalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Bitmap::InitializePalette(ColorPalette *palette,$/;"	f	class:Bitmap
InstalledFontCollection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ InstalledFontCollection::InstalledFontCollection()$/;"	f	class:InstalledFontCollection
Intersect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Intersect(const GraphicsPath *path)$/;"	f	class:Region
Intersect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Intersect(const Rect& rect)$/;"	f	class:Region
Intersect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Intersect(const RectF& rect)$/;"	f	class:Region
Intersect	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Intersect(const Region *region)$/;"	f	class:Region
IsEmpty	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL Region::IsEmpty(const Graphics *graphics) const$/;"	f	class:Region
IsInfinite	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL Region::IsInfinite(const Graphics *graphics) const$/;"	f	class:Region
IsOutlineVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsOutlineVisible(INT x, INT y, const Pen *pen,$/;"	f	class:GraphicsPath
IsOutlineVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsOutlineVisible(REAL x, REAL y, const Pen *pen,$/;"	f	class:GraphicsPath
IsOutlineVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsOutlineVisible(const Point& point, const Pen *pen,$/;"	f	class:GraphicsPath
IsOutlineVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsOutlineVisible(const PointF& point, const Pen *pen,$/;"	f	class:GraphicsPath
IsStyleAvailable	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL FontFamily::IsStyleAvailable(INT style) const$/;"	f	class:FontFamily
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsVisible(INT x, INT y, const Graphics *g) const$/;"	f	class:GraphicsPath
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsVisible(REAL x, REAL y, const Graphics *g) const$/;"	f	class:GraphicsPath
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsVisible(const Point& point, const Graphics *g) const$/;"	f	class:GraphicsPath
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsVisible(const PointF& point,$/;"	f	class:GraphicsPath
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(INT x, INT y, INT width, INT height,$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(INT x, INT y,$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(REAL x, REAL y, REAL width, REAL height,$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(REAL x, REAL y,$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(const Point& point,$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(const PointF& point,$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(const Rect& rect,$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(const RectF& rect,$/;"	f	class:Region
LockBits	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Bitmap::LockBits(const Rect *rect, UINT flags,$/;"	f	class:Bitmap
MakeEmpty	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::MakeEmpty()$/;"	f	class:Region
MakeInfinite	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::MakeInfinite()$/;"	f	class:Region
PrivateFontCollection	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ PrivateFontCollection::PrivateFontCollection()$/;"	f	class:PrivateFontCollection
Region	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Region::Region(): nativeRegion(NULL), lastStatus(Ok)$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Region::Region(HRGN hrgn): nativeRegion(NULL), lastStatus(Ok)$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Region::Region(const BYTE *regionData, INT size):$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Region::Region(const GraphicsPath *path):$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Region::Region(const Rect& rect): nativeRegion(NULL), lastStatus(Ok)$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Region::Region(const RectF& rect): nativeRegion(NULL), lastStatus(Ok)$/;"	f	class:Region
RemovePropertyItem	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::RemovePropertyItem(PROPID propId)$/;"	f	class:Image
RotateFlip	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::RotateFlip(RotateFlipType rotateFlipType)$/;"	f	class:Image
Save	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::Save(IStream *stream, const CLSID *clsidEncoder,$/;"	f	class:Image
Save	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::Save(const WCHAR *filename, const CLSID *clsidEncoder,$/;"	f	class:Image
SaveAdd	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::SaveAdd(Image *newImage,$/;"	f	class:Image
SaveAdd	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::SaveAdd(const EncoderParameters *encoderParams)$/;"	f	class:Image
SelectActiveFrame	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::SelectActiveFrame($/;"	f	class:Image
SetAbort	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::SetAbort(GdiplusAbort *pIAbort)$/;"	f	class:Image
SetBaseCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetBaseCap(LineCap baseCap)$/;"	f	class:CustomLineCap
SetBaseInset	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetBaseInset(REAL inset)$/;"	f	class:CustomLineCap
SetPalette	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::SetPalette(const ColorPalette *palette)$/;"	f	class:Image
SetPixel	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Bitmap::SetPixel(INT x, INT y, const Color& color)$/;"	f	class:Bitmap
SetPropertyItem	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Image::SetPropertyItem(const PropertyItem *item)$/;"	f	class:Image
SetResolution	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Bitmap::SetResolution(REAL xdpi, REAL ydpi)$/;"	f	class:Bitmap
SetStrokeCap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetStrokeCap(LineCap strokeCap)$/;"	f	class:CustomLineCap
SetStrokeCaps	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetStrokeCaps(LineCap startCap, LineCap endCap)$/;"	f	class:CustomLineCap
SetStrokeJoin	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetStrokeJoin(LineJoin lineJoin)$/;"	f	class:CustomLineCap
SetWidthScale	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetWidthScale(REAL widthScale)$/;"	f	class:CustomLineCap
Transform	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Transform(const Matrix *matrix)$/;"	f	class:Region
Translate	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Translate(INT dx, INT dy)$/;"	f	class:Region
Translate	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Translate(REAL dx, REAL dy)$/;"	f	class:Region
Union	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Union(const GraphicsPath *path)$/;"	f	class:Region
Union	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Union(const Rect& rect)$/;"	f	class:Region
Union	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Union(const RectF& rect)$/;"	f	class:Region
Union	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Union(const Region *region)$/;"	f	class:Region
UnlockBits	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Bitmap::UnlockBits(BitmapData *lockedBitmapData)$/;"	f	class:Bitmap
Xor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Xor(const GraphicsPath *path)$/;"	f	class:Region
Xor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Xor(const Rect& rect)$/;"	f	class:Region
Xor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Xor(const RectF& rect)$/;"	f	class:Region
Xor	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Status Region::Xor(const Region *region)$/;"	f	class:Region
_GdipFontFamilyCachedGenericMonospace	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^extern "C" void *_GdipFontFamilyCachedGenericMonospace;$/;"	v
_GdipFontFamilyCachedGenericSansSerif	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^extern "C" void *_GdipFontFamilyCachedGenericSansSerif;$/;"	v
_GdipFontFamilyCachedGenericSerif	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^extern "C" void *_GdipFontFamilyCachedGenericSerif;$/;"	v
__GDIPLUS_IMPL_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	26;"	d
~CachedBitmap	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ CachedBitmap::~CachedBitmap()$/;"	f	class:CachedBitmap
~Font	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Font::~Font()$/;"	f	class:Font
~FontFamily	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ FontFamily::~FontFamily()$/;"	f	class:FontFamily
~Region	C++\ege-13.04.02-full\src\gdiplus3\gdiplusimpl.h	/^__inline__ Region::~Region()$/;"	f	class:Region
DebugEventCallback	C++\ege-13.04.02-full\src\gdiplus3\gdiplusinit.h	/^	DebugEventProc DebugEventCallback;$/;"	m	struct:GdiplusStartupInput
GdiplusStartupInput	C++\ege-13.04.02-full\src\gdiplus3\gdiplusinit.h	/^	GdiplusStartupInput(DebugEventProc debugEventCallback = NULL,$/;"	f	struct:GdiplusStartupInput
GdiplusStartupInput	C++\ege-13.04.02-full\src\gdiplus3\gdiplusinit.h	/^typedef struct GdiplusStartupInput {$/;"	s
GdiplusStartupInput	C++\ege-13.04.02-full\src\gdiplus3\gdiplusinit.h	/^} GdiplusStartupInput;$/;"	t	typeref:struct:GdiplusStartupInput
GdiplusStartupOutput	C++\ege-13.04.02-full\src\gdiplus3\gdiplusinit.h	/^	GdiplusStartupOutput():$/;"	f	struct:GdiplusStartupOutput
GdiplusStartupOutput	C++\ege-13.04.02-full\src\gdiplus3\gdiplusinit.h	/^typedef struct GdiplusStartupOutput {$/;"	s
GdiplusStartupOutput	C++\ege-13.04.02-full\src\gdiplus3\gdiplusinit.h	/^} GdiplusStartupOutput;$/;"	t	typeref:struct:GdiplusStartupOutput
GdiplusVersion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusinit.h	/^	UINT32 GdiplusVersion;$/;"	m	struct:GdiplusStartupInput
NotificationHook	C++\ege-13.04.02-full\src\gdiplus3\gdiplusinit.h	/^	NotificationHookProc NotificationHook;$/;"	m	struct:GdiplusStartupOutput
NotificationHookProc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusinit.h	/^typedef GpStatus WINGDIPAPI (*NotificationHookProc)(ULONG_PTR *token);$/;"	t
NotificationUnhook	C++\ege-13.04.02-full\src\gdiplus3\gdiplusinit.h	/^	NotificationUnhookProc NotificationUnhook;$/;"	m	struct:GdiplusStartupOutput
NotificationUnhookProc	C++\ege-13.04.02-full\src\gdiplus3\gdiplusinit.h	/^typedef VOID WINGDIPAPI (*NotificationUnhookProc)(ULONG_PTR token);$/;"	t
SuppressBackgroundThread	C++\ege-13.04.02-full\src\gdiplus3\gdiplusinit.h	/^	BOOL SuppressBackgroundThread;$/;"	m	struct:GdiplusStartupInput
SuppressExternalCodecs	C++\ege-13.04.02-full\src\gdiplus3\gdiplusinit.h	/^	BOOL SuppressExternalCodecs;$/;"	m	struct:GdiplusStartupInput
__GDIPLUS_INIT_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusinit.h	24;"	d
AdjustableArrowCap	C++\ege-13.04.02-full\src\gdiplus3\gdipluslinecaps.h	/^	AdjustableArrowCap(GpCustomLineCap *customLineCap, Status status):$/;"	f	class:AdjustableArrowCap
AdjustableArrowCap	C++\ege-13.04.02-full\src\gdiplus3\gdipluslinecaps.h	/^	AdjustableArrowCap(REAL height, REAL width, BOOL isFilled):$/;"	f	class:AdjustableArrowCap
AdjustableArrowCap	C++\ege-13.04.02-full\src\gdiplus3\gdipluslinecaps.h	/^class AdjustableArrowCap: public CustomLineCap$/;"	c
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdipluslinecaps.h	/^	virtual AdjustableArrowCap* Clone() const$/;"	f	class:AdjustableArrowCap
GetHeight	C++\ege-13.04.02-full\src\gdiplus3\gdipluslinecaps.h	/^	REAL GetHeight() const$/;"	f	class:AdjustableArrowCap
GetMiddleInset	C++\ege-13.04.02-full\src\gdiplus3\gdipluslinecaps.h	/^	REAL GetMiddleInset() const$/;"	f	class:AdjustableArrowCap
GetWidth	C++\ege-13.04.02-full\src\gdiplus3\gdipluslinecaps.h	/^	REAL GetWidth() const$/;"	f	class:AdjustableArrowCap
IsFilled	C++\ege-13.04.02-full\src\gdiplus3\gdipluslinecaps.h	/^	BOOL IsFilled() const$/;"	f	class:AdjustableArrowCap
SetFillState	C++\ege-13.04.02-full\src\gdiplus3\gdipluslinecaps.h	/^	Status SetFillState(BOOL isFilled)$/;"	f	class:AdjustableArrowCap
SetHeight	C++\ege-13.04.02-full\src\gdiplus3\gdipluslinecaps.h	/^	Status SetHeight(REAL height)$/;"	f	class:AdjustableArrowCap
SetMiddleInset	C++\ege-13.04.02-full\src\gdiplus3\gdipluslinecaps.h	/^	Status SetMiddleInset(REAL middleInset)$/;"	f	class:AdjustableArrowCap
SetWidth	C++\ege-13.04.02-full\src\gdiplus3\gdipluslinecaps.h	/^	Status SetWidth(REAL width)$/;"	f	class:AdjustableArrowCap
__GDIPLUS_LINECAPS_H	C++\ege-13.04.02-full\src\gdiplus3\gdipluslinecaps.h	24;"	d
~AdjustableArrowCap	C++\ege-13.04.02-full\src\gdiplus3\gdipluslinecaps.h	/^	virtual ~AdjustableArrowCap()$/;"	f	class:AdjustableArrowCap
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Matrix* Clone() const$/;"	f	class:Matrix
Equals	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	BOOL Equals(const Matrix *matrix) const$/;"	f	class:Matrix
GDIP_MATRIX_PI	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	238;"	d
GDIP_MATRIX_PI	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	33;"	d
GetElements	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status GetElements(REAL *m) const$/;"	f	class:Matrix
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status GetLastStatus() const$/;"	f	class:Matrix
Invert	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status Invert()$/;"	f	class:Matrix
IsIdentity	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	BOOL IsIdentity() const$/;"	f	class:Matrix
IsInvertible	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	BOOL IsInvertible() const$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Matrix(): nativeMatrix(NULL), lastStatus(Ok)$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Matrix(GpMatrix *matrix, Status status):$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Matrix(REAL m11, REAL m12, REAL m21, REAL m22, REAL dx, REAL dy):$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Matrix(const Rect& rect, const Point *dstplg):$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Matrix(const RectF& rect, const PointF *dstplg):$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^class Matrix: public GdiplusBase$/;"	c
Multiply	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status Multiply(const Matrix *matrix,$/;"	f	class:Matrix
OffsetX	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	REAL OffsetX() const$/;"	f	class:Matrix
OffsetY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	REAL OffsetY() const$/;"	f	class:Matrix
Reset	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status Reset()$/;"	f	class:Matrix
Rotate	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status Rotate(REAL angle, MatrixOrder order = MatrixOrderPrepend)$/;"	f	class:Matrix
RotateAt	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status RotateAt(REAL angle, const PointF& center,$/;"	f	class:Matrix
Scale	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status Scale(REAL scaleX, REAL scaleY,$/;"	f	class:Matrix
SetElements	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status SetElements(REAL m11, REAL m12, REAL m21, REAL m22,$/;"	f	class:Matrix
Shear	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status Shear(REAL shearX, REAL shearY,$/;"	f	class:Matrix
TransformPoints	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status TransformPoints(Point *pts, INT count = 1) const$/;"	f	class:Matrix
TransformPoints	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status TransformPoints(PointF *pts, INT count = 1) const$/;"	f	class:Matrix
TransformVectors	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status TransformVectors(Point *pts, INT count = 1) const$/;"	f	class:Matrix
TransformVectors	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status TransformVectors(PointF *pts, INT count = 1) const$/;"	f	class:Matrix
Translate	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status Translate(REAL offsetX, REAL offsetY,$/;"	f	class:Matrix
__GDIPLUS_MATRIX_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	24;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	mutable Status lastStatus;$/;"	m	class:Matrix
nativeMatrix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	GpMatrix *nativeMatrix;$/;"	m	class:Matrix
updateStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Matrix
~Matrix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmatrix.h	/^	~Matrix()$/;"	f	class:Matrix
DllExports	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmem.h	/^namespace DllExports {$/;"	n
__GDIPLUS_MEM_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmem.h	24;"	d
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	virtual Metafile* Clone() const$/;"	f	class:Metafile
EmfToWmfBits	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	static UINT EmfToWmfBits(HENHMETAFILE hEmf,$/;"	f	class:Metafile
GetDownLevelRasterizationLimit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	UINT GetDownLevelRasterizationLimit() const$/;"	f	class:Metafile
GetHENHMETAFILE	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	HENHMETAFILE GetHENHMETAFILE()$/;"	f	class:Metafile
GetMetafileHeader	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Status GetMetafileHeader(MetafileHeader *header) const$/;"	f	class:Metafile
GetMetafileHeader	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	static Status GetMetafileHeader(HENHMETAFILE hEmf,$/;"	f	class:Metafile
GetMetafileHeader	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	static Status GetMetafileHeader(IStream *stream, MetafileHeader *header)$/;"	f	class:Metafile
GetMetafileHeader	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	static Status GetMetafileHeader(const WCHAR *filename,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Metafile(GpImage *image, Status status): Image(image, status) {}$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Metafile(HDC referenceHdc, EmfType type = EmfTypeEmfPlusDual,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Metafile(HDC referenceHdc, const Rect& frameRect,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Metafile(HDC referenceHdc, const RectF& frameRect,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Metafile(HENHMETAFILE hEmf, BOOL deleteEmf = FALSE): Image(NULL, Ok)$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Metafile(HMETAFILE hWmf,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Metafile(IStream *stream): Image(NULL, Ok)$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Metafile(IStream *stream, HDC referenceHdc, const Rect& frameRect,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Metafile(IStream *stream, HDC referenceHdc, const RectF& frameRect,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Metafile(IStream *stream, HDC referenceHdc,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Metafile(const WCHAR *filename): Image(NULL, Ok)$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Metafile(const WCHAR *filename, HDC referenceHdc,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Metafile(const WCHAR *filename,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^class Metafile: public Image$/;"	c
PlayRecord	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Status PlayRecord(EmfPlusRecordType recordType, UINT flags,$/;"	f	class:Metafile
SetDownLevelRasterizationLimit	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	Status SetDownLevelRasterizationLimit(UINT limitDpi)$/;"	f	class:Metafile
__GDIPLUS_METAFILE_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	24;"	d
~Metafile	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetafile.h	/^	virtual ~Metafile()$/;"	f	class:Metafile
Bottom	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	INT16 Bottom;$/;"	m	struct:PWMFRect16
BoundingBox	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	PWMFRect16 BoundingBox;$/;"	m	struct:WmfPlaceableFileHeader
Checksum	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	INT16 Checksum;$/;"	m	struct:WmfPlaceableFileHeader
DpiX	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	REAL DpiX;$/;"	m	struct:MetafileHeader
DpiY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	REAL DpiY;$/;"	m	struct:MetafileHeader
ENHMETAHEADER3	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^} ENHMETAHEADER3,*LPENHMETAHEADER3;$/;"	t	typeref:struct:tagENHMETAHEADER3
EmfHeader	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^		ENHMETAHEADER3 EmfHeader;$/;"	m	union:MetafileHeader::__anon13
EmfPlusFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	UINT EmfPlusFlags;$/;"	m	struct:MetafileHeader
EmfPlusHeaderSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	INT EmfPlusHeaderSize;$/;"	m	struct:MetafileHeader
GDIP_EMFPLUSFLAGS_DISPLAY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^const UINT GDIP_EMFPLUSFLAGS_DISPLAY = 1;$/;"	v
GDIP_EMFPLUSFLAGS_DISPLAY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	38;"	d
GetBounds	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	void GetBounds(Rect *rect) const$/;"	f	struct:MetafileHeader
GetDpiX	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	REAL GetDpiX() const$/;"	f	struct:MetafileHeader
GetDpiY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	REAL GetDpiY() const$/;"	f	struct:MetafileHeader
GetEmfHeader	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	const ENHMETAHEADER3* GetEmfHeader() const$/;"	f	struct:MetafileHeader
GetEmfPlusFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	UINT GetEmfPlusFlags() const$/;"	f	struct:MetafileHeader
GetMetafileSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	UINT GetMetafileSize() const$/;"	f	struct:MetafileHeader
GetType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	MetafileType GetType() const$/;"	f	struct:MetafileHeader
GetVersion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	UINT GetVersion() const$/;"	f	struct:MetafileHeader
GetWmfHeader	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	const METAHEADER* GetWmfHeader() const$/;"	f	struct:MetafileHeader
Height	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	INT Height;$/;"	m	struct:MetafileHeader
Hmf	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	INT16 Hmf;$/;"	m	struct:WmfPlaceableFileHeader
Inch	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	INT16 Inch;$/;"	m	struct:WmfPlaceableFileHeader
IsDisplay	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	BOOL IsDisplay() const$/;"	f	struct:MetafileHeader
IsEmf	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	BOOL IsEmf() const$/;"	f	struct:MetafileHeader
IsEmfOrEmfPlus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	BOOL IsEmfOrEmfPlus() const$/;"	f	struct:MetafileHeader
IsEmfPlus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	BOOL IsEmfPlus() const$/;"	f	struct:MetafileHeader
IsEmfPlusDual	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	BOOL IsEmfPlusDual() const$/;"	f	struct:MetafileHeader
IsEmfPlusOnly	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	BOOL IsEmfPlusOnly() const$/;"	f	struct:MetafileHeader
IsWmf	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	BOOL IsWmf() const$/;"	f	struct:MetafileHeader
IsWmfPlaceable	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	BOOL IsWmfPlaceable() const$/;"	f	struct:MetafileHeader
Key	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	UINT32 Key;$/;"	m	struct:WmfPlaceableFileHeader
LPENHMETAHEADER3	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^} ENHMETAHEADER3,*LPENHMETAHEADER3;$/;"	t	typeref:struct:tagENHMETAHEADER3
Left	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	INT16 Left;$/;"	m	struct:PWMFRect16
LogicalDpiX	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	INT LogicalDpiX;$/;"	m	struct:MetafileHeader
LogicalDpiY	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	INT LogicalDpiY;$/;"	m	struct:MetafileHeader
MetafileHeader	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^typedef struct MetafileHeader {$/;"	s
MetafileHeader	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^} MetafileHeader;$/;"	t	typeref:struct:MetafileHeader
PWMFRect16	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^typedef struct PWMFRect16 {$/;"	s
PWMFRect16	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^} PWMFRect16;$/;"	t	typeref:struct:PWMFRect16
Reserved	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	UINT32 Reserved;$/;"	m	struct:WmfPlaceableFileHeader
Right	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	INT16 Right;$/;"	m	struct:PWMFRect16
Size	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	UINT Size;$/;"	m	struct:MetafileHeader
Top	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	INT16 Top;$/;"	m	struct:PWMFRect16
Type	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	MetafileType Type;$/;"	m	struct:MetafileHeader
Version	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	UINT Version;$/;"	m	struct:MetafileHeader
Width	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	INT Width;$/;"	m	struct:MetafileHeader
WmfHeader	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^		METAHEADER WmfHeader;$/;"	m	union:MetafileHeader::__anon13
WmfPlaceableFileHeader	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^typedef struct WmfPlaceableFileHeader {$/;"	s
WmfPlaceableFileHeader	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^} WmfPlaceableFileHeader;$/;"	t	typeref:struct:WmfPlaceableFileHeader
X	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	INT X;$/;"	m	struct:MetafileHeader
Y	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	INT Y;$/;"	m	struct:MetafileHeader
__GDIPLUS_METAHEADER_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	24;"	d
dSignature	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	DWORD dSignature;$/;"	m	struct:tagENHMETAHEADER3
iType	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	DWORD iType;$/;"	m	struct:tagENHMETAHEADER3
nBytes	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	DWORD nBytes;$/;"	m	struct:tagENHMETAHEADER3
nDescription	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	DWORD nDescription;$/;"	m	struct:tagENHMETAHEADER3
nHandles	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	WORD nHandles;$/;"	m	struct:tagENHMETAHEADER3
nPalEntries	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	DWORD nPalEntries;$/;"	m	struct:tagENHMETAHEADER3
nRecords	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	DWORD nRecords;$/;"	m	struct:tagENHMETAHEADER3
nSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	DWORD nSize;$/;"	m	struct:tagENHMETAHEADER3
nVersion	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	DWORD nVersion;$/;"	m	struct:tagENHMETAHEADER3
offDescription	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	DWORD offDescription;$/;"	m	struct:tagENHMETAHEADER3
rclBounds	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	RECTL rclBounds;$/;"	m	struct:tagENHMETAHEADER3
rclFrame	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	RECTL rclFrame;$/;"	m	struct:tagENHMETAHEADER3
sReserved	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	WORD sReserved;$/;"	m	struct:tagENHMETAHEADER3
szlDevice	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	SIZEL szlDevice;$/;"	m	struct:tagENHMETAHEADER3
szlMillimeters	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^	SIZEL szlMillimeters;$/;"	m	struct:tagENHMETAHEADER3
tagENHMETAHEADER3	C++\ege-13.04.02-full\src\gdiplus3\gdiplusmetaheader.h	/^typedef struct tagENHMETAHEADER3 {$/;"	s
AddArc	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddArc(INT x, INT y, INT width, INT height,$/;"	f	class:GraphicsPath
AddArc	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddArc(REAL x, REAL y, REAL width, REAL height,$/;"	f	class:GraphicsPath
AddArc	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddArc(const Rect& rect, REAL startAngle, REAL sweepAngle)$/;"	f	class:GraphicsPath
AddArc	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddArc(const RectF& rect, REAL startAngle, REAL sweepAngle)$/;"	f	class:GraphicsPath
AddBezier	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddBezier(INT x1, INT y1, INT x2, INT y2,$/;"	f	class:GraphicsPath
AddBezier	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddBezier(REAL x1, REAL y1, REAL x2, REAL y2,$/;"	f	class:GraphicsPath
AddBezier	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddBezier(const Point& pt1, const Point& pt2,$/;"	f	class:GraphicsPath
AddBezier	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddBezier(const PointF& pt1, const PointF& pt2,$/;"	f	class:GraphicsPath
AddBeziers	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddBeziers(const Point *points, INT count)$/;"	f	class:GraphicsPath
AddBeziers	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddBeziers(const PointF *points, INT count)$/;"	f	class:GraphicsPath
AddClosedCurve	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddClosedCurve(const Point *points, INT count)$/;"	f	class:GraphicsPath
AddClosedCurve	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddClosedCurve(const Point *points, INT count, REAL tension)$/;"	f	class:GraphicsPath
AddClosedCurve	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddClosedCurve(const PointF *points, INT count)$/;"	f	class:GraphicsPath
AddClosedCurve	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddClosedCurve(const PointF *points, INT count, REAL tension)$/;"	f	class:GraphicsPath
AddCurve	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddCurve(const Point *points, INT count)$/;"	f	class:GraphicsPath
AddCurve	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddCurve(const Point *points, INT count, INT offset,$/;"	f	class:GraphicsPath
AddCurve	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddCurve(const Point *points, INT count, REAL tension)$/;"	f	class:GraphicsPath
AddCurve	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddCurve(const PointF *points, INT count)$/;"	f	class:GraphicsPath
AddCurve	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddCurve(const PointF *points, INT count, INT offset,$/;"	f	class:GraphicsPath
AddCurve	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddCurve(const PointF *points, INT count, REAL tension)$/;"	f	class:GraphicsPath
AddEllipse	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddEllipse(INT x, INT y, INT width, INT height)$/;"	f	class:GraphicsPath
AddEllipse	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddEllipse(REAL x, REAL y, REAL width, REAL height)$/;"	f	class:GraphicsPath
AddEllipse	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddEllipse(const Rect& rect)$/;"	f	class:GraphicsPath
AddEllipse	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddEllipse(const RectF& rect)$/;"	f	class:GraphicsPath
AddLine	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddLine(INT x1, INT y1, INT x2, INT y2)$/;"	f	class:GraphicsPath
AddLine	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddLine(REAL x1, REAL y1, REAL x2, REAL y2)$/;"	f	class:GraphicsPath
AddLine	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddLine(const Point& pt1, const Point& pt2)$/;"	f	class:GraphicsPath
AddLine	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddLine(const PointF& pt1, const PointF& pt2)$/;"	f	class:GraphicsPath
AddLines	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddLines(const Point *points, INT count)$/;"	f	class:GraphicsPath
AddLines	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddLines(const PointF *points, INT count)$/;"	f	class:GraphicsPath
AddPath	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddPath(const GraphicsPath *addingPath, BOOL connect)$/;"	f	class:GraphicsPath
AddPie	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddPie(INT x, INT y, INT width, INT height,$/;"	f	class:GraphicsPath
AddPie	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddPie(REAL x, REAL y, REAL width, REAL height,$/;"	f	class:GraphicsPath
AddPie	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddPie(const Rect& rect, REAL startAngle, REAL sweepAngle)$/;"	f	class:GraphicsPath
AddPie	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddPie(const RectF& rect, REAL startAngle, REAL sweepAngle)$/;"	f	class:GraphicsPath
AddPolygon	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddPolygon(const Point *points, INT count)$/;"	f	class:GraphicsPath
AddPolygon	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddPolygon(const PointF *points, INT count)$/;"	f	class:GraphicsPath
AddRectangle	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddRectangle(const Rect& rect)$/;"	f	class:GraphicsPath
AddRectangle	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddRectangle(const RectF& rect)$/;"	f	class:GraphicsPath
AddRectangles	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddRectangles(const Rect *rects, INT count)$/;"	f	class:GraphicsPath
AddRectangles	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddRectangles(const RectF *rects, INT count)$/;"	f	class:GraphicsPath
AddString	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status AddString(const WCHAR *string, INT length,$/;"	f	class:GraphicsPath
ClearMarkers	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status ClearMarkers()$/;"	f	class:GraphicsPath
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	GraphicsPath* Clone() const$/;"	f	class:GraphicsPath
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	virtual PathGradientBrush *Clone() const$/;"	f	class:PathGradientBrush
CloseAllFigures	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status CloseAllFigures()$/;"	f	class:GraphicsPath
CloseFigure	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status CloseFigure()$/;"	f	class:GraphicsPath
CopyData	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	INT CopyData(PointF *points, BYTE *types, INT startIndex, INT endIndex)$/;"	f	class:GraphicsPathIterator
Enumerate	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	INT Enumerate(PointF *points, BYTE *types, INT count)$/;"	f	class:GraphicsPathIterator
Flatten	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status Flatten(const Matrix *matrix = NULL,$/;"	f	class:GraphicsPath
GetBlend	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetBlend(REAL *blendFactors, REAL *blendPositions,$/;"	f	class:PathGradientBrush
GetBlendCount	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	INT GetBlendCount() const$/;"	f	class:PathGradientBrush
GetBounds	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetBounds(Rect *bounds, const Matrix *matrix = NULL,$/;"	f	class:GraphicsPath
GetBounds	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetBounds(RectF *bounds, const Matrix *matrix = NULL,$/;"	f	class:GraphicsPath
GetCenterColor	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetCenterColor(Color *color) const$/;"	f	class:PathGradientBrush
GetCenterPoint	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetCenterPoint(Point *point) const$/;"	f	class:PathGradientBrush
GetCenterPoint	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetCenterPoint(PointF *point) const$/;"	f	class:PathGradientBrush
GetCount	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	INT GetCount() const$/;"	f	class:GraphicsPathIterator
GetFillMode	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	FillMode GetFillMode() const$/;"	f	class:GraphicsPath
GetFocusScales	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetFocusScales(REAL *xScale, REAL *yScale) const$/;"	f	class:PathGradientBrush
GetGammaCorrection	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	BOOL GetGammaCorrection() const$/;"	f	class:PathGradientBrush
GetInterpolationColorCount	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	INT GetInterpolationColorCount() const$/;"	f	class:PathGradientBrush
GetInterpolationColors	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetInterpolationColors(Color *presetColors,$/;"	f	class:PathGradientBrush
GetLastPoint	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetLastPoint(PointF *lastPoint) const$/;"	f	class:GraphicsPath
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetLastStatus() const$/;"	f	class:GraphicsPath
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetLastStatus() const$/;"	f	class:GraphicsPathIterator
GetPathData	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetPathData(PathData *pathData) const$/;"	f	class:GraphicsPath
GetPathPoints	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetPathPoints(Point *points, INT count) const$/;"	f	class:GraphicsPath
GetPathPoints	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetPathPoints(PointF *points, INT count) const$/;"	f	class:GraphicsPath
GetPathTypes	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetPathTypes(BYTE *types, INT count) const$/;"	f	class:GraphicsPath
GetPointCount	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	INT GetPointCount() const$/;"	f	class:GraphicsPath
GetPointCount	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	INT GetPointCount() const$/;"	f	class:PathGradientBrush
GetRectangle	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetRectangle(Rect *rect) const$/;"	f	class:PathGradientBrush
GetRectangle	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetRectangle(RectF *rect) const$/;"	f	class:PathGradientBrush
GetSubpathCount	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	INT GetSubpathCount() const$/;"	f	class:GraphicsPathIterator
GetSurroundColorCount	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	INT GetSurroundColorCount() const$/;"	f	class:PathGradientBrush
GetSurroundColors	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetSurroundColors(Color *colors, INT *count)$/;"	f	class:PathGradientBrush
GetTransform	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status GetTransform(Matrix *matrix) const$/;"	f	class:PathGradientBrush
GetWrapMode	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	WrapMode GetWrapMode() const$/;"	f	class:PathGradientBrush
GraphicsPath	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	GraphicsPath(FillMode fillMode = FillModeAlternate):$/;"	f	class:GraphicsPath
GraphicsPath	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	GraphicsPath(GpPath *path, Status status):$/;"	f	class:GraphicsPath
GraphicsPath	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	GraphicsPath(const Point *points, const BYTE *types, INT count,$/;"	f	class:GraphicsPath
GraphicsPath	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	GraphicsPath(const PointF *points, const BYTE *types, INT count,$/;"	f	class:GraphicsPath
GraphicsPath	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^class GraphicsPath: public GdiplusBase$/;"	c
GraphicsPathIterator	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	GraphicsPathIterator(GpPathIterator *pathIterator, Status status):$/;"	f	class:GraphicsPathIterator
GraphicsPathIterator	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	GraphicsPathIterator(GraphicsPath *path):$/;"	f	class:GraphicsPathIterator
GraphicsPathIterator	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^class GraphicsPathIterator: public GdiplusBase$/;"	c
HasCurve	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	BOOL HasCurve() const$/;"	f	class:GraphicsPathIterator
MultiplyTransform	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status MultiplyTransform(const Matrix *matrix,$/;"	f	class:PathGradientBrush
NextMarker	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	INT NextMarker(GraphicsPath *path)$/;"	f	class:GraphicsPathIterator
NextMarker	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	INT NextMarker(INT *startIndex, INT *endIndex)$/;"	f	class:GraphicsPathIterator
NextPathType	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	INT NextPathType(BYTE *pathType, INT *startIndex, INT *endIndex)$/;"	f	class:GraphicsPathIterator
NextSubpath	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	INT NextSubpath(GraphicsPath *path, BOOL *isClosed)$/;"	f	class:GraphicsPathIterator
NextSubpath	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	INT NextSubpath(INT *startIndex, INT *endIndex, BOOL *isClosed)$/;"	f	class:GraphicsPathIterator
Outline	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status Outline(const Matrix *matrix = NULL,$/;"	f	class:GraphicsPath
PathGradientBrush	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	PathGradientBrush(GpBrush *brush, Status status): Brush(brush, status) {}$/;"	f	class:PathGradientBrush
PathGradientBrush	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	PathGradientBrush(const GraphicsPath *path)$/;"	f	class:PathGradientBrush
PathGradientBrush	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	PathGradientBrush(const Point *points, INT count,$/;"	f	class:PathGradientBrush
PathGradientBrush	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	PathGradientBrush(const PointF *points, INT count,$/;"	f	class:PathGradientBrush
PathGradientBrush	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^class PathGradientBrush: public Brush$/;"	c
Reset	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status Reset()$/;"	f	class:GraphicsPath
ResetTransform	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status ResetTransform()$/;"	f	class:PathGradientBrush
Reverse	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status Reverse()$/;"	f	class:GraphicsPath
Rewind	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	VOID Rewind()$/;"	f	class:GraphicsPathIterator
RotateTransform	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status RotateTransform(REAL angle,$/;"	f	class:PathGradientBrush
ScaleTransform	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status ScaleTransform(REAL sx, REAL sy,$/;"	f	class:PathGradientBrush
SetBlend	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status SetBlend(REAL *blendFactors, REAL *blendPositions, INT count)$/;"	f	class:PathGradientBrush
SetBlendBellShape	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status SetBlendBellShape(REAL focus, REAL scale = 1.0f)$/;"	f	class:PathGradientBrush
SetBlendTriangularShape	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status SetBlendTriangularShape(REAL focus, REAL scale = 1.0f)$/;"	f	class:PathGradientBrush
SetCenterColor	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status SetCenterColor(const Color& color)$/;"	f	class:PathGradientBrush
SetCenterPoint	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status SetCenterPoint(const Point& point)$/;"	f	class:PathGradientBrush
SetCenterPoint	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status SetCenterPoint(const PointF& point)$/;"	f	class:PathGradientBrush
SetFillMode	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status SetFillMode(FillMode fillMode)$/;"	f	class:GraphicsPath
SetFocusScales	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status SetFocusScales(REAL xScale, REAL yScale)$/;"	f	class:PathGradientBrush
SetGammaCorrection	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status SetGammaCorrection(BOOL useGammaCorrection)$/;"	f	class:PathGradientBrush
SetInterpolationColors	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status SetInterpolationColors(const Color *presetColors,$/;"	f	class:PathGradientBrush
SetMarker	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status SetMarker()$/;"	f	class:GraphicsPath
SetSurroundColors	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status SetSurroundColors(const Color *colors, INT *count)$/;"	f	class:PathGradientBrush
SetTransform	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status SetTransform(const Matrix *matrix)$/;"	f	class:PathGradientBrush
SetWrapMode	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status SetWrapMode(WrapMode wrapMode)$/;"	f	class:PathGradientBrush
StartFigure	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status StartFigure()$/;"	f	class:GraphicsPath
Transform	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status Transform(const Matrix *matrix)$/;"	f	class:GraphicsPath
TranslateTransform	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status TranslateTransform(REAL dx, REAL dy,$/;"	f	class:PathGradientBrush
Warp	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status Warp(const PointF *destPoints, INT count, const RectF& srcRect,$/;"	f	class:GraphicsPath
Widen	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status Widen(const Pen *pen, const Matrix *matrix = NULL,$/;"	f	class:GraphicsPath
__GDIPLUS_PATH_H	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	24;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	mutable Status lastStatus;$/;"	m	class:GraphicsPath
lastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	mutable Status lastStatus;$/;"	m	class:GraphicsPathIterator
nativePath	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	GpPath *nativePath;$/;"	m	class:GraphicsPath
nativePathIterator	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	GpPathIterator *nativePathIterator;$/;"	m	class:GraphicsPathIterator
updateStatus	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:GraphicsPath
updateStatus	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:GraphicsPathIterator
~GraphicsPath	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	~GraphicsPath()$/;"	f	class:GraphicsPath
~GraphicsPathIterator	C++\ege-13.04.02-full\src\gdiplus3\gdipluspath.h	/^	~GraphicsPathIterator()$/;"	f	class:GraphicsPathIterator
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Pen* Clone() const$/;"	f	class:Pen
GetAlignment	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	PenAlignment GetAlignment() const$/;"	f	class:Pen
GetColor	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status GetColor(Color *color) const$/;"	f	class:Pen
GetCompoundArray	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status GetCompoundArray(REAL *compoundArray, INT count) const$/;"	f	class:Pen
GetCompoundArrayCount	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	INT GetCompoundArrayCount() const$/;"	f	class:Pen
GetCustomEndCap	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status GetCustomEndCap(CustomLineCap *customCap) const$/;"	f	class:Pen
GetCustomStartCap	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status GetCustomStartCap(CustomLineCap *customCap) const$/;"	f	class:Pen
GetDashCap	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	DashCap GetDashCap() const$/;"	f	class:Pen
GetDashOffset	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	REAL GetDashOffset() const$/;"	f	class:Pen
GetDashPattern	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status GetDashPattern(REAL *dashArray, INT count) const$/;"	f	class:Pen
GetDashPatternCount	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	INT GetDashPatternCount() const$/;"	f	class:Pen
GetDashStyle	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	DashStyle GetDashStyle() const$/;"	f	class:Pen
GetEndCap	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	LineCap GetEndCap() const$/;"	f	class:Pen
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status GetLastStatus() const$/;"	f	class:Pen
GetLineJoin	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	LineJoin GetLineJoin() const$/;"	f	class:Pen
GetMiterLimit	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	REAL GetMiterLimit() const$/;"	f	class:Pen
GetPenType	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	PenType GetPenType() const$/;"	f	class:Pen
GetStartCap	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	LineCap GetStartCap() const$/;"	f	class:Pen
GetTransform	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status GetTransform(Matrix *matrix) const$/;"	f	class:Pen
GetWidth	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	REAL GetWidth() const$/;"	f	class:Pen
MultiplyTransform	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status MultiplyTransform(const Matrix *matrix,$/;"	f	class:Pen
Pen	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Pen(GpPen *pen, Status status): nativePen(pen), lastStatus(status) {}$/;"	f	class:Pen
Pen	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Pen(const Brush *brush, REAL width = 1.0f):$/;"	f	class:Pen
Pen	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Pen(const Color& color, REAL width = 1.0f):$/;"	f	class:Pen
Pen	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^class Pen: public GdiplusBase$/;"	c
ResetTransform	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status ResetTransform()$/;"	f	class:Pen
RotateTransform	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status RotateTransform(REAL angle,$/;"	f	class:Pen
ScaleTransform	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status ScaleTransform(REAL sx, REAL sy,$/;"	f	class:Pen
SetAlignment	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetAlignment(PenAlignment penAlignment)$/;"	f	class:Pen
SetBrush	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetBrush(const Brush *brush)$/;"	f	class:Pen
SetColor	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetColor(const Color& color)$/;"	f	class:Pen
SetCompoundArray	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetCompoundArray(const REAL *compoundArray, INT count)$/;"	f	class:Pen
SetCustomEndCap	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetCustomEndCap(const CustomLineCap *customCap)$/;"	f	class:Pen
SetCustomStartCap	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetCustomStartCap(const CustomLineCap *customCap)$/;"	f	class:Pen
SetDashCap	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetDashCap(DashCap dashCap)$/;"	f	class:Pen
SetDashOffset	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetDashOffset(REAL dashOffset)$/;"	f	class:Pen
SetDashPattern	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetDashPattern(const REAL *dashArray, INT count)$/;"	f	class:Pen
SetDashStyle	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetDashStyle(DashStyle dashStyle)$/;"	f	class:Pen
SetEndCap	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetEndCap(LineCap endCap)$/;"	f	class:Pen
SetLineCap	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetLineCap(LineCap startCap, LineCap endCap, DashCap dashCap)$/;"	f	class:Pen
SetLineJoin	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetLineJoin(LineJoin lineJoin)$/;"	f	class:Pen
SetMiterLimit	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetMiterLimit(REAL miterLimit)$/;"	f	class:Pen
SetStartCap	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetStartCap(LineCap startCap)$/;"	f	class:Pen
SetTransform	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetTransform(const Matrix *matrix)$/;"	f	class:Pen
SetWidth	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status SetWidth(REAL width)$/;"	f	class:Pen
TranslateTransform	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status TranslateTransform(REAL dx, REAL dy,$/;"	f	class:Pen
__GDIPLUS_PEN_H	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	24;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	mutable Status lastStatus;$/;"	m	class:Pen
nativePen	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	GpPen *nativePen;$/;"	m	class:Pen
updateStatus	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Pen
~Pen	C++\ege-13.04.02-full\src\gdiplus3\gdipluspen.h	/^	~Pen()$/;"	f	class:Pen
ARGB	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^typedef DWORD ARGB;$/;"	t
ColorPalette	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^typedef struct ColorPalette {$/;"	s
ColorPalette	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^} ColorPalette;$/;"	t	typeref:struct:ColorPalette
Count	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	UINT Count;$/;"	m	struct:ColorPalette
Entries	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	ARGB Entries[1];$/;"	m	struct:ColorPalette
Flags	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	UINT Flags;$/;"	m	struct:ColorPalette
GetPixelFormatSize	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^static __inline__ UINT GetPixelFormatSize(PixelFormat pixfmt)$/;"	f
IsAlphaPixelFormat	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^static __inline__ BOOL IsAlphaPixelFormat(PixelFormat pixfmt)$/;"	f
IsCanonicalPixelFormat	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^static __inline__ BOOL IsCanonicalPixelFormat(PixelFormat pixfmt)$/;"	f
IsExtendedPixelFormat	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^static __inline__ BOOL IsExtendedPixelFormat(PixelFormat pixfmt)$/;"	f
IsIndexedPixelFormat	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^static __inline__ BOOL IsIndexedPixelFormat(PixelFormat pixfmt)$/;"	f
PaletteFlags	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^typedef enum PaletteFlags {$/;"	g
PaletteFlags	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^} PaletteFlags;$/;"	t	typeref:enum:PaletteFlags
PaletteFlagsGrayScale	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	PaletteFlagsGrayScale = 2,$/;"	e	enum:PaletteFlags
PaletteFlagsHalftone	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	PaletteFlagsHalftone = 4$/;"	e	enum:PaletteFlags
PaletteFlagsHasAlpha	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	PaletteFlagsHasAlpha = 1,$/;"	e	enum:PaletteFlags
PaletteType	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^typedef enum PaletteType {$/;"	g
PaletteType	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^} PaletteType;$/;"	t	typeref:enum:PaletteType
PaletteTypeCustom	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	PaletteTypeCustom = 0,$/;"	e	enum:PaletteType
PaletteTypeFixedBW	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	PaletteTypeFixedBW = 2,$/;"	e	enum:PaletteType
PaletteTypeFixedHalftone125	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	PaletteTypeFixedHalftone125 = 6,$/;"	e	enum:PaletteType
PaletteTypeFixedHalftone216	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	PaletteTypeFixedHalftone216 = 7,$/;"	e	enum:PaletteType
PaletteTypeFixedHalftone252	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	PaletteTypeFixedHalftone252 = 8,$/;"	e	enum:PaletteType
PaletteTypeFixedHalftone256	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	PaletteTypeFixedHalftone256 = 9 $/;"	e	enum:PaletteType
PaletteTypeFixedHalftone27	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	PaletteTypeFixedHalftone27 = 4,$/;"	e	enum:PaletteType
PaletteTypeFixedHalftone64	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	PaletteTypeFixedHalftone64 = 5,$/;"	e	enum:PaletteType
PaletteTypeFixedHalftone8	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	PaletteTypeFixedHalftone8 = 3,$/;"	e	enum:PaletteType
PaletteTypeOptimal	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^	PaletteTypeOptimal = 1,$/;"	e	enum:PaletteType
PixelFormat	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	/^typedef INT PixelFormat;$/;"	t
PixelFormat16bppARGB1555	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	52;"	d
PixelFormat16bppGrayScale	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	46;"	d
PixelFormat16bppRGB555	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	48;"	d
PixelFormat16bppRGB565	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	50;"	d
PixelFormat1bppIndexed	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	40;"	d
PixelFormat24bppRGB	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	54;"	d
PixelFormat32bppARGB	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	58;"	d
PixelFormat32bppPARGB	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	60;"	d
PixelFormat32bppRGB	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	56;"	d
PixelFormat48bppRGB	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	62;"	d
PixelFormat4bppIndexed	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	42;"	d
PixelFormat64bppARGB	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	64;"	d
PixelFormat64bppPARGB	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	66;"	d
PixelFormat8bppIndexed	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	44;"	d
PixelFormatAlpha	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	34;"	d
PixelFormatCanonical	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	37;"	d
PixelFormatDontCare	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	39;"	d
PixelFormatExtended	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	36;"	d
PixelFormatGDI	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	33;"	d
PixelFormatIndexed	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	32;"	d
PixelFormatMax	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	68;"	d
PixelFormatPAlpha	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	35;"	d
PixelFormatUndefined	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	38;"	d
__GDIPLUS_PIXELFORMATS_H	C++\ege-13.04.02-full\src\gdiplus3\gdipluspixelformats.h	24;"	d
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	StringFormat* Clone() const$/;"	f	class:StringFormat
GenericDefault	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^__inline__ const StringFormat* StringFormat::GenericDefault()$/;"	f	class:StringFormat
GenericTypographic	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^__inline__ const StringFormat* StringFormat::GenericTypographic()$/;"	f	class:StringFormat
GetAlignment	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	StringAlignment GetAlignment() const$/;"	f	class:StringFormat
GetDigitSubstitutionLanguage	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	LANGID GetDigitSubstitutionLanguage() const$/;"	f	class:StringFormat
GetDigitSubstitutionMethod	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	StringDigitSubstitute GetDigitSubstitutionMethod() const$/;"	f	class:StringFormat
GetFormatFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	INT GetFormatFlags() const$/;"	f	class:StringFormat
GetHotkeyPrefix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	HotkeyPrefix GetHotkeyPrefix() const$/;"	f	class:StringFormat
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	Status GetLastStatus() const$/;"	f	class:StringFormat
GetLineAlignment	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	StringAlignment GetLineAlignment() const$/;"	f	class:StringFormat
GetMeasurableCharacterRangeCount	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	INT GetMeasurableCharacterRangeCount() const$/;"	f	class:StringFormat
GetTabStopCount	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	INT GetTabStopCount() const$/;"	f	class:StringFormat
GetTabStops	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	Status GetTabStops(INT count, REAL *firstTabOffset, REAL *tabStops)$/;"	f	class:StringFormat
GetTrimming	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	StringTrimming GetTrimming() const$/;"	f	class:StringFormat
SetAlignment	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	Status SetAlignment(StringAlignment align)$/;"	f	class:StringFormat
SetDigitSubstitution	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	Status SetDigitSubstitution(LANGID language,$/;"	f	class:StringFormat
SetFormatFlags	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	Status SetFormatFlags(INT flags)$/;"	f	class:StringFormat
SetHotkeyPrefix	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	Status SetHotkeyPrefix(HotkeyPrefix hotkeyPrefix)$/;"	f	class:StringFormat
SetLineAlignment	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	Status SetLineAlignment(StringAlignment align)$/;"	f	class:StringFormat
SetMeasurableCharacterRanges	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	Status SetMeasurableCharacterRanges(INT rangeCount,$/;"	f	class:StringFormat
SetTabStops	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	Status SetTabStops(REAL firstTabOffset, INT count, const REAL *tabStops)$/;"	f	class:StringFormat
SetTrimming	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	Status SetTrimming(StringTrimming trimming)$/;"	f	class:StringFormat
StringFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	StringFormat(GpStringFormat *stringFormat, Status status):$/;"	f	class:StringFormat
StringFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	StringFormat(INT formatFlags = 0, LANGID language = LANG_NEUTRAL):$/;"	f	class:StringFormat
StringFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	StringFormat(const StringFormat *format):$/;"	f	class:StringFormat
StringFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^class StringFormat: public GdiplusBase$/;"	c
_GdipStringFormatCachedGenericDefault	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^extern "C" void *_GdipStringFormatCachedGenericDefault;$/;"	v
_GdipStringFormatCachedGenericTypographic	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^extern "C" void *_GdipStringFormatCachedGenericTypographic;$/;"	v
__GDIPLUS_STRINGFORMAT_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	24;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	mutable Status lastStatus;$/;"	m	class:StringFormat
nativeStringFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	GpStringFormat *nativeStringFormat;$/;"	m	class:StringFormat
updateStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:StringFormat
~StringFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplusstringformat.h	/^	~StringFormat()$/;"	f	class:StringFormat
Abort	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	virtual HRESULT __stdcall Abort(void) {}$/;"	f	struct:GdiplusAbort
Aborted	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Aborted = 9,$/;"	e	enum:GpStatus
AccessDenied	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	AccessDenied = 12,$/;"	e	enum:GpStatus
CharacterRange	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	CharacterRange(): First(0), Length(0) {}$/;"	f	struct:CharacterRange
CharacterRange	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	CharacterRange(INT first, INT length): First(first), Length(length) {}$/;"	f	struct:CharacterRange
CharacterRange	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^typedef struct CharacterRange {$/;"	s
CharacterRange	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^} CharacterRange;$/;"	t	typeref:struct:CharacterRange
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Rect* Clone() const {$/;"	f	struct:Rect
Clone	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	RectF* Clone() const {$/;"	f	struct:RectF
Contains	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Contains(INT x, INT y) const {$/;"	f	struct:Rect
Contains	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Contains(REAL x, REAL y) const {$/;"	f	struct:RectF
Contains	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Contains(const Point& point) const {$/;"	f	struct:Rect
Contains	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Contains(const PointF& point) const {$/;"	f	struct:RectF
Contains	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Contains(const Rect& rect) const {$/;"	f	struct:Rect
Contains	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Contains(const RectF& rect) const {$/;"	f	struct:RectF
Count	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	INT Count;$/;"	m	struct:PathData
DebugEventProc	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^typedef void *DebugEventProc;$/;"	t
DrawImageAbort	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^typedef void *DrawImageAbort;$/;"	t
Empty	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Empty() const {$/;"	f	struct:Size
Empty	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Empty() const {$/;"	f	struct:SizeF
EnumerateMetafileProc	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^typedef BOOL CALLBACK (*EnumerateMetafileProc)(EmfPlusRecordType,UINT,UINT,const BYTE*,VOID*);$/;"	t
Equals	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Equals(const Point& point) const {$/;"	f	struct:Point
Equals	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Equals(const PointF& point) const {$/;"	f	struct:PointF
Equals	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Equals(const Rect& rect) const {$/;"	f	struct:Rect
Equals	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Equals(const RectF& rect) const {$/;"	f	struct:RectF
Equals	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Equals(const Size& size) const {$/;"	f	struct:Size
Equals	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Equals(const SizeF& size) const {$/;"	f	struct:SizeF
FileNotFound	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	FileNotFound = 10,$/;"	e	enum:GpStatus
First	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	INT First;$/;"	m	struct:CharacterRange
FontFamilyNotFound	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	FontFamilyNotFound = 14,$/;"	e	enum:GpStatus
FontStyleNotFound	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	FontStyleNotFound = 15,$/;"	e	enum:GpStatus
GDIPCONST	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	30;"	d
GdiplusAbort	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^struct GdiplusAbort {$/;"	s
GdiplusAbort	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^typedef struct GdiplusAbort GdiplusAbort;  \/* incomplete type *\/$/;"	t	typeref:struct:GdiplusAbort
GdiplusNotInitialized	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	GdiplusNotInitialized = 18,$/;"	e	enum:GpStatus
GenericError	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	GenericError = 1,$/;"	e	enum:GpStatus
GetBottom	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	INT GetBottom() const {$/;"	f	struct:Rect
GetBottom	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	REAL GetBottom() const {$/;"	f	struct:RectF
GetBounds	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	VOID GetBounds(Rect *rect) const {$/;"	f	struct:Rect
GetBounds	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	VOID GetBounds(RectF *rect) const {$/;"	f	struct:RectF
GetLeft	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	INT GetLeft() const {$/;"	f	struct:Rect
GetLeft	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	REAL GetLeft() const {$/;"	f	struct:RectF
GetLocation	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	VOID GetLocation(Point *point) const {$/;"	f	struct:Rect
GetLocation	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	VOID GetLocation(PointF *point) const {$/;"	f	struct:RectF
GetRight	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	INT GetRight() const {$/;"	f	struct:Rect
GetRight	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	REAL GetRight() const {$/;"	f	struct:RectF
GetSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	VOID GetSize(Size *size) const {$/;"	f	struct:Rect
GetSize	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	VOID GetSize(SizeF *size) const {$/;"	f	struct:RectF
GetThumbnailImageAbort	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^typedef void *GetThumbnailImageAbort;$/;"	t
GetTop	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	INT GetTop() const {$/;"	f	struct:Rect
GetTop	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	REAL GetTop() const {$/;"	f	struct:RectF
GpStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^typedef enum GpStatus {$/;"	g
GpStatus	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^} GpStatus;$/;"	t	typeref:enum:GpStatus
Height	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	INT Height;$/;"	m	struct:Rect
Height	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	INT Height;$/;"	m	struct:Size
Height	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	REAL Height;$/;"	m	struct:RectF
Height	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	REAL Height;$/;"	m	struct:SizeF
Inflate	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	VOID Inflate(INT dx, INT dy) {$/;"	f	struct:Rect
Inflate	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	VOID Inflate(REAL dx, REAL dy) {$/;"	f	struct:RectF
Inflate	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	VOID Inflate(const Point& point) {$/;"	f	struct:Rect
Inflate	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	VOID Inflate(const PointF& point) {$/;"	f	struct:RectF
InsufficientBuffer	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	InsufficientBuffer = 5,$/;"	e	enum:GpStatus
Intersect	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Intersect(const Rect& rect) {$/;"	f	struct:Rect
Intersect	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL Intersect(const RectF& rect) {$/;"	f	struct:RectF
Intersect	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	static BOOL Intersect(Rect& c, const Rect& a, const Rect& b) {$/;"	f	struct:Rect
Intersect	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	static BOOL Intersect(RectF& c, const RectF& a, const RectF& b) {$/;"	f	struct:RectF
IntersectsWith	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL IntersectsWith(const Rect& rc) const {$/;"	f	struct:Rect
IntersectsWith	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL IntersectsWith(const RectF& rc) const {$/;"	f	struct:RectF
InvalidParameter	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	InvalidParameter = 2,$/;"	e	enum:GpStatus
IsEmptyArea	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL IsEmptyArea() const {$/;"	f	struct:Rect
IsEmptyArea	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BOOL IsEmptyArea() const {$/;"	f	struct:RectF
Length	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	INT Length;$/;"	m	struct:CharacterRange
NotImplemented	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	NotImplemented = 6,$/;"	e	enum:GpStatus
NotTrueTypeFont	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	NotTrueTypeFont = 16,$/;"	e	enum:GpStatus
ObjectBusy	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	ObjectBusy = 4,$/;"	e	enum:GpStatus
Offset	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	VOID Offset(INT dx, INT dy) {$/;"	f	struct:Rect
Offset	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	VOID Offset(REAL dx, REAL dy) {$/;"	f	struct:RectF
Offset	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	VOID Offset(const Point& point) {$/;"	f	struct:Rect
Offset	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	VOID Offset(const PointF& point) {$/;"	f	struct:RectF
Ok	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Ok = 0,$/;"	e	enum:GpStatus
OutOfMemory	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	OutOfMemory = 3,$/;"	e	enum:GpStatus
PathData	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	PathData(): Count(0), Points(NULL), Types(NULL) {}$/;"	f	struct:PathData
PathData	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^typedef struct PathData {$/;"	s
PathData	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^} PathData;$/;"	t	typeref:struct:PathData
Point	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Point(): X(0), Y(0) {}$/;"	f	struct:Point
Point	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Point(INT x, INT y): X(x), Y(y) {}$/;"	f	struct:Point
Point	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Point(const Point& point): X(point.X), Y(point.Y) {}$/;"	f	struct:Point
Point	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Point(const Size& size): X(size.Width), Y(size.Height) {}$/;"	f	struct:Point
Point	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^typedef struct Point {$/;"	s
Point	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^} Point;$/;"	t	typeref:struct:Point
PointF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	PointF(): X(0.0f), Y(0.0f) {}$/;"	f	struct:PointF
PointF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	PointF(REAL x, REAL y): X(x), Y(y) {}$/;"	f	struct:PointF
PointF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	PointF(const PointF& point): X(point.X), Y(point.Y) {}$/;"	f	struct:PointF
PointF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	PointF(const SizeF& size): X(size.Width), Y(size.Height) {}$/;"	f	struct:PointF
PointF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^typedef struct PointF {$/;"	s
PointF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^} PointF;$/;"	t	typeref:struct:PointF
Points	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	PointF *Points;$/;"	m	struct:PathData
ProfileNotFound	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	ProfileNotFound = 21$/;"	e	enum:GpStatus
PropertyNotFound	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	PropertyNotFound = 19,$/;"	e	enum:GpStatus
PropertyNotSupported	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	PropertyNotSupported = 20,$/;"	e	enum:GpStatus
Rect	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Rect(): X(0), Y(0), Width(0), Height(0) {}$/;"	f	struct:Rect
Rect	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Rect(INT x, INT y, INT width, INT height):$/;"	f	struct:Rect
Rect	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Rect(const Point& location, const Size& size):$/;"	f	struct:Rect
Rect	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^typedef struct Rect {$/;"	s
Rect	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^} Rect;$/;"	t	typeref:struct:Rect
RectF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	RectF(): X(0.0f), Y(0.0f), Width(0.0f), Height(0.0f) {}$/;"	f	struct:RectF
RectF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	RectF(REAL x, REAL y, REAL width, REAL height):$/;"	f	struct:RectF
RectF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	RectF(const PointF& location, const SizeF& size):$/;"	f	struct:RectF
RectF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^typedef struct RectF {$/;"	s
RectF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^} RectF;$/;"	t	typeref:struct:RectF
Size	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Size(): Width(0), Height(0) {}$/;"	f	struct:Size
Size	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Size(INT width, INT height): Width(width), Height(height) {}$/;"	f	struct:Size
Size	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Size(const Size& size): Width(size.Width), Height(size.Height) {}$/;"	f	struct:Size
Size	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^typedef struct Size {$/;"	s
Size	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^} Size;$/;"	t	typeref:struct:Size
SizeF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	SizeF(): Width(0.0f), Height(0.0f) {}$/;"	f	struct:SizeF
SizeF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	SizeF(REAL width, REAL height): Width(width), Height(height) {}$/;"	f	struct:SizeF
SizeF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	SizeF(const SizeF& size): Width(size.Width), Height(size.Height) {}$/;"	f	struct:SizeF
SizeF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^typedef struct SizeF {$/;"	s
SizeF	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^} SizeF;$/;"	t	typeref:struct:SizeF
Status	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^typedef GpStatus Status;$/;"	t
Types	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	BYTE *Types;$/;"	m	struct:PathData
Union	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	static BOOL Union(Rect& c, const Rect& a, const Rect& b) {$/;"	f	struct:Rect
Union	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	static BOOL Union(RectF& c, const RectF& a, const RectF& b) {$/;"	f	struct:RectF
UnknownImageFormat	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	UnknownImageFormat = 13,$/;"	e	enum:GpStatus
UnsupportedGdiplusVersion	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	UnsupportedGdiplusVersion = 17,$/;"	e	enum:GpStatus
ValueOverflow	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	ValueOverflow = 11,$/;"	e	enum:GpStatus
WINGDIPAPI	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	29;"	d
Width	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	INT Width;$/;"	m	struct:Rect
Width	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	INT Width;$/;"	m	struct:Size
Width	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	REAL Width;$/;"	m	struct:RectF
Width	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	REAL Width;$/;"	m	struct:SizeF
Win32Error	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Win32Error = 7,$/;"	e	enum:GpStatus
WrongState	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	WrongState = 8,$/;"	e	enum:GpStatus
X	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	INT X;$/;"	m	struct:Point
X	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	INT X;$/;"	m	struct:Rect
X	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	REAL X;$/;"	m	struct:PointF
X	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	REAL X;$/;"	m	struct:RectF
Y	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	INT Y;$/;"	m	struct:Point
Y	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	INT Y;$/;"	m	struct:Rect
Y	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	REAL Y;$/;"	m	struct:PointF
Y	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	REAL Y;$/;"	m	struct:RectF
__GDIPLUS_TYPES_H	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	24;"	d
operator +	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Point operator+(const Point& point) const {$/;"	f	struct:Point
operator +	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	PointF operator+(const PointF& point) const {$/;"	f	struct:PointF
operator +	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Size operator+(const Size& size) const {$/;"	f	struct:Size
operator +	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	SizeF operator+(const SizeF& size) const {$/;"	f	struct:SizeF
operator -	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Point operator-(const Point& point) const {$/;"	f	struct:Point
operator -	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	PointF operator-(const PointF& point) const {$/;"	f	struct:PointF
operator -	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	Size operator-(const Size& size) const {$/;"	f	struct:Size
operator -	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	SizeF operator-(const SizeF& size) const {$/;"	f	struct:SizeF
operator =	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	CharacterRange& operator=(const CharacterRange& rhs) {$/;"	f	struct:CharacterRange
~PathData	C++\ege-13.04.02-full\src\gdiplus3\gdiplustypes.h	/^	~PathData() {$/;"	f	struct:PathData
Gdiplus	C++\ege-13.04.02-full\src\gdiplus4\gdiplus.h	/^namespace Gdiplus {$/;"	n
IDirectDrawSurface7	C++\ege-13.04.02-full\src\gdiplus4\gdiplus.h	/^typedef _COM_interface IDirectDrawSurface7 IDirectDrawSurface7;$/;"	t
INT16	C++\ege-13.04.02-full\src\gdiplus4\gdiplus.h	/^typedef SHORT INT16;$/;"	t	namespace:Gdiplus
IStream	C++\ege-13.04.02-full\src\gdiplus4\gdiplus.h	/^typedef _COM_interface IStream IStream;$/;"	t
REAL	C++\ege-13.04.02-full\src\gdiplus4\gdiplus.h	/^typedef float REAL;$/;"	t	namespace:Gdiplus
UINT16	C++\ege-13.04.02-full\src\gdiplus4\gdiplus.h	/^typedef WORD UINT16;$/;"	t	namespace:Gdiplus
_COM_interface	C++\ege-13.04.02-full\src\gdiplus4\gdiplus.h	39;"	d
__GDIPLUS_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplus.h	24;"	d
GdiplusBase	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbase.h	/^class GdiplusBase$/;"	c
__GDIPLUS_BASE_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbase.h	24;"	d
operator delete	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbase.h	/^	static void operator delete(void *in_pVoid)$/;"	f	class:GdiplusBase
operator delete[]	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbase.h	/^	static void operator delete[](void *in_pVoid)$/;"	f	class:GdiplusBase
operator new	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbase.h	/^	static void* operator new(size_t in_size)$/;"	f	class:GdiplusBase
operator new[]	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbase.h	/^	static void* operator new[](size_t in_size)$/;"	f	class:GdiplusBase
Brush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Brush(): nativeBrush(NULL), lastStatus(Ok) {}$/;"	f	class:Brush
Brush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Brush(GpBrush *brush, Status status):$/;"	f	class:Brush
Brush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^class Brush: public GdiplusBase$/;"	c
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	virtual Brush* Clone() const  \/\/ each subclass must implement this$/;"	f	class:Brush
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	virtual HatchBrush* Clone() const$/;"	f	class:HatchBrush
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	virtual LinearGradientBrush* Clone() const$/;"	f	class:LinearGradientBrush
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	virtual SolidBrush* Clone() const$/;"	f	class:SolidBrush
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	virtual TextureBrush* Clone() const$/;"	f	class:TextureBrush
GetBackgroundColor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status GetBackgroundColor(Color *color) const$/;"	f	class:HatchBrush
GetBlend	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status GetBlend(REAL *blendFactors, REAL *blendPositions,$/;"	f	class:LinearGradientBrush
GetBlendCount	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	INT GetBlendCount() const$/;"	f	class:LinearGradientBrush
GetColor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status GetColor(Color *color) const$/;"	f	class:SolidBrush
GetForegroundColor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status GetForegroundColor(Color *color) const$/;"	f	class:HatchBrush
GetGammaCorrection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	BOOL GetGammaCorrection() const$/;"	f	class:LinearGradientBrush
GetHatchStyle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	HatchStyle GetHatchStyle() const$/;"	f	class:HatchBrush
GetInterpolationColorCount	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	INT GetInterpolationColorCount() const$/;"	f	class:LinearGradientBrush
GetInterpolationColors	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status GetInterpolationColors(Color *presetColors,$/;"	f	class:LinearGradientBrush
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status GetLastStatus() const$/;"	f	class:Brush
GetLinearColors	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status GetLinearColors(Color *colors) const$/;"	f	class:LinearGradientBrush
GetRectangle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status GetRectangle(Rect *rect) const$/;"	f	class:LinearGradientBrush
GetRectangle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status GetRectangle(RectF *rect) const$/;"	f	class:LinearGradientBrush
GetTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status GetTransform(Matrix *matrix) const$/;"	f	class:LinearGradientBrush
GetTransfrom	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status GetTransfrom(Matrix *matrix) const$/;"	f	class:TextureBrush
GetType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	BrushType GetType() const$/;"	f	class:Brush
GetWrapMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	WrapMode GetWrapMode() const$/;"	f	class:LinearGradientBrush
GetWrapMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	WrapMode GetWrapMode() const$/;"	f	class:TextureBrush
HatchBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	HatchBrush(GpBrush *brush, Status status): Brush(brush, status) {}$/;"	f	class:HatchBrush
HatchBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	HatchBrush(HatchStyle hatchStyle,$/;"	f	class:HatchBrush
HatchBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^class HatchBrush: public Brush$/;"	c
LinearGradientBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	LinearGradientBrush(GpBrush *brush, Status status): Brush(brush, status) {}$/;"	f	class:LinearGradientBrush
LinearGradientBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	LinearGradientBrush(const Point& point1, const Point& point2,$/;"	f	class:LinearGradientBrush
LinearGradientBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	LinearGradientBrush(const PointF& point1, const PointF& point2,$/;"	f	class:LinearGradientBrush
LinearGradientBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	LinearGradientBrush(const Rect& rect, const Color& color1,$/;"	f	class:LinearGradientBrush
LinearGradientBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	LinearGradientBrush(const RectF& rect, const Color& color1,$/;"	f	class:LinearGradientBrush
LinearGradientBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^class LinearGradientBrush: public Brush$/;"	c
MultiplyTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status MultiplyTransform(const Matrix *matrix,$/;"	f	class:LinearGradientBrush
MultiplyTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status MultiplyTransform(const Matrix *matrix,$/;"	f	class:TextureBrush
ResetTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status ResetTransform()$/;"	f	class:LinearGradientBrush
ResetTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status ResetTransform()$/;"	f	class:TextureBrush
RotateTranform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status RotateTranform(REAL angle, MatrixOrder order = MatrixOrderPrepend)$/;"	f	class:LinearGradientBrush
RotateTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status RotateTransform(REAL angle,$/;"	f	class:TextureBrush
ScaleTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status ScaleTransform(REAL sx, REAL sy,$/;"	f	class:LinearGradientBrush
ScaleTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status ScaleTransform(REAL sx, REAL sy,$/;"	f	class:TextureBrush
SetBlend	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status SetBlend(const REAL *blendFactors,$/;"	f	class:LinearGradientBrush
SetBlendBellShape	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status SetBlendBellShape(REAL focus, REAL scale = 1.0f)$/;"	f	class:LinearGradientBrush
SetBlendTriangularShape	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status SetBlendTriangularShape(REAL focus, REAL scale = 1.0f)$/;"	f	class:LinearGradientBrush
SetColor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status SetColor(const Color& color)$/;"	f	class:SolidBrush
SetGammaCorrection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status SetGammaCorrection(BOOL useGammaCorrection)$/;"	f	class:LinearGradientBrush
SetInterpolationColors	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status SetInterpolationColors(const Color *presetColors,$/;"	f	class:LinearGradientBrush
SetLinearColors	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status SetLinearColors(const Color& color1, const Color& color2)$/;"	f	class:LinearGradientBrush
SetTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status SetTransform(const Matrix *matrix)$/;"	f	class:LinearGradientBrush
SetTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status SetTransform(const Matrix *matrix)$/;"	f	class:TextureBrush
SetWrapMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status SetWrapMode(WrapMode wrapMode)$/;"	f	class:LinearGradientBrush
SetWrapMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status SetWrapMode(WrapMode wrapMode)$/;"	f	class:TextureBrush
SolidBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	SolidBrush(GpBrush *brush, Status status): Brush(brush, status) {}$/;"	f	class:SolidBrush
SolidBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	SolidBrush(const Color& color)$/;"	f	class:SolidBrush
SolidBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^class SolidBrush: public Brush$/;"	c
TextureBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	TextureBrush(GpBrush *brush, Status status): Brush(brush, status) {}$/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	TextureBrush(Image *image, WrapMode wrapMode = WrapModeTile)$/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	TextureBrush(Image *image, WrapMode wrapMode, const Rect& dstRect)$/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	TextureBrush(Image *image, WrapMode wrapMode, const RectF& dstRect)$/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	TextureBrush(Image *image, WrapMode wrapMode,$/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	TextureBrush(Image *image, const Rect& dstRect,$/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	TextureBrush(Image *image, const RectF& dstRect,$/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^class TextureBrush: public Brush$/;"	c
TranslateTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status TranslateTransform(REAL dx, REAL dy,$/;"	f	class:LinearGradientBrush
TranslateTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status TranslateTransform(REAL dx, REAL dy,$/;"	f	class:TextureBrush
__GDIPLUS_BRUSH_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	24;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	mutable Status lastStatus;$/;"	m	class:Brush
nativeBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	GpBrush *nativeBrush;$/;"	m	class:Brush
updateStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Brush
~Brush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusbrush.h	/^	virtual ~Brush()$/;"	f	class:Brush
AliceBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB AliceBlue            = 0xFFF0F8FFUL;$/;"	m	struct:Color
AlphaMask	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB AlphaMask            = 0xFF000000UL;$/;"	m	struct:Color
AntiqueWhite	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB AntiqueWhite         = 0xFFFAEBD7UL;$/;"	m	struct:Color
Aqua	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Aqua                 = 0xFF00FFFFUL;$/;"	m	struct:Color
Aquamarine	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Aquamarine           = 0xFF7FFFD4UL;$/;"	m	struct:Color
Azure	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Azure                = 0xFFF0FFFFUL;$/;"	m	struct:Color
Beige	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Beige                = 0xFFF5F5DCUL;$/;"	m	struct:Color
Bisque	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Bisque               = 0xFFFFE4C4UL;$/;"	m	struct:Color
Black	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Black                = 0xFF000000UL;$/;"	m	struct:Color
BlanchedAlmond	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB BlanchedAlmond       = 0xFFFFEBCDUL;$/;"	m	struct:Color
Blue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Blue                 = 0xFF0000FFUL;$/;"	m	struct:Color
BlueViolet	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB BlueViolet           = 0xFF8A2BE2UL;$/;"	m	struct:Color
Brown	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Brown                = 0xFFA52A2AUL;$/;"	m	struct:Color
BurlyWood	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB BurlyWood            = 0xFFDEB887UL;$/;"	m	struct:Color
CadetBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB CadetBlue            = 0xFF5F9EA0UL;$/;"	m	struct:Color
Chartreuse	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Chartreuse           = 0xFF7FFF00UL;$/;"	m	struct:Color
Chocolate	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Chocolate            = 0xFFD2691EUL;$/;"	m	struct:Color
Color	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	Color(): Value(0xFF000000) {}$/;"	f	struct:Color
Color	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	Color(ARGB argb): Value(argb) {}$/;"	f	struct:Color
Color	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	Color(BYTE a, BYTE r, BYTE g, BYTE b): Value(MakeARGB(a, r, g, b)) {}$/;"	f	struct:Color
Color	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	Color(BYTE r, BYTE g, BYTE b): Value(MakeARGB(0xFF, r, g, b)) {}$/;"	f	struct:Color
Color	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^typedef struct Color$/;"	s
Color	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^} Color;$/;"	t	typeref:struct:Color
ColorChannelFlags	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^typedef enum ColorChannelFlags {$/;"	g
ColorChannelFlags	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^} ColorChannelFlags;$/;"	t	typeref:enum:ColorChannelFlags
ColorChannelFlagsC	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	ColorChannelFlagsC = 0,$/;"	e	enum:ColorChannelFlags
ColorChannelFlagsK	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	ColorChannelFlagsK = 3,$/;"	e	enum:ColorChannelFlags
ColorChannelFlagsLast	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	ColorChannelFlagsLast = 4$/;"	e	enum:ColorChannelFlags
ColorChannelFlagsM	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	ColorChannelFlagsM = 1,$/;"	e	enum:ColorChannelFlags
ColorChannelFlagsY	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	ColorChannelFlagsY = 2,$/;"	e	enum:ColorChannelFlags
Coral	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Coral                = 0xFFFF7F50UL;$/;"	m	struct:Color
CornflowerBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB CornflowerBlue       = 0xFF6495EDUL;$/;"	m	struct:Color
Cornsilk	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Cornsilk             = 0xFFFFF8DCUL;$/;"	m	struct:Color
Crimson	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Crimson              = 0xFFDC143CUL;$/;"	m	struct:Color
Cyan	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Cyan                 = 0xFF00FFFFUL;$/;"	m	struct:Color
DarkBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkBlue             = 0xFF00008BUL;$/;"	m	struct:Color
DarkCyan	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkCyan             = 0xFF008B8BUL;$/;"	m	struct:Color
DarkGoldenrod	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkGoldenrod        = 0xFFB8860BUL;$/;"	m	struct:Color
DarkGray	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkGray             = 0xFFA9A9A9UL;$/;"	m	struct:Color
DarkGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkGreen            = 0xFF006400UL;$/;"	m	struct:Color
DarkKhaki	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkKhaki            = 0xFFBDB76BUL;$/;"	m	struct:Color
DarkMagenta	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkMagenta          = 0xFF8B008BUL;$/;"	m	struct:Color
DarkOliveGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkOliveGreen       = 0xFF556B2FUL;$/;"	m	struct:Color
DarkOrange	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkOrange           = 0xFFFF8C00UL;$/;"	m	struct:Color
DarkOrchid	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkOrchid           = 0xFF9932CCUL;$/;"	m	struct:Color
DarkRed	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkRed              = 0xFF8B0000UL;$/;"	m	struct:Color
DarkSalmon	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkSalmon           = 0xFFE9967AUL;$/;"	m	struct:Color
DarkSeaGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkSeaGreen         = 0xFF8FBC8FUL;$/;"	m	struct:Color
DarkSlateBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkSlateBlue        = 0xFF483D8BUL;$/;"	m	struct:Color
DarkSlateGray	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkSlateGray        = 0xFF2F4F4FUL;$/;"	m	struct:Color
DarkTurquoise	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkTurquoise        = 0xFF00CED1UL;$/;"	m	struct:Color
DarkViolet	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DarkViolet           = 0xFF9400D3UL;$/;"	m	struct:Color
DeepPink	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DeepPink             = 0xFFFF1493UL;$/;"	m	struct:Color
DeepSkyBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DeepSkyBlue          = 0xFF00BFFFUL;$/;"	m	struct:Color
DimGray	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DimGray              = 0xFF696969UL;$/;"	m	struct:Color
DodgerBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB DodgerBlue           = 0xFF1E90FFUL;$/;"	m	struct:Color
Firebrick	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Firebrick            = 0xFFB22222UL;$/;"	m	struct:Color
FloralWhite	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB FloralWhite          = 0xFFFFFAF0UL;$/;"	m	struct:Color
ForestGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB ForestGreen          = 0xFF228B22UL;$/;"	m	struct:Color
Fuchsia	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Fuchsia              = 0xFFFF00FFUL;$/;"	m	struct:Color
Gainsboro	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Gainsboro            = 0xFFDCDCDCUL;$/;"	m	struct:Color
GetA	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	BYTE GetA() const$/;"	f	struct:Color
GetAlpha	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	BYTE GetAlpha() const$/;"	f	struct:Color
GetB	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	BYTE GetB() const$/;"	f	struct:Color
GetBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	BYTE GetBlue() const$/;"	f	struct:Color
GetG	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	BYTE GetG() const$/;"	f	struct:Color
GetGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	BYTE GetGreen() const$/;"	f	struct:Color
GetR	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	BYTE GetR() const$/;"	f	struct:Color
GetRed	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	BYTE GetRed() const$/;"	f	struct:Color
GetValue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	ARGB GetValue() const$/;"	f	struct:Color
GhostWhite	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB GhostWhite           = 0xFFF8F8FFUL;$/;"	m	struct:Color
Gold	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Gold                 = 0xFFFFD700UL;$/;"	m	struct:Color
Goldenrod	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Goldenrod            = 0xFFDAA520UL;$/;"	m	struct:Color
Gray	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Gray                 = 0xFF808080UL;$/;"	m	struct:Color
Green	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Green                = 0xFF008000UL;$/;"	m	struct:Color
GreenYellow	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB GreenYellow          = 0xFFADFF2FUL;$/;"	m	struct:Color
Honeydew	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Honeydew             = 0xFFF0FFF0UL;$/;"	m	struct:Color
HotPink	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB HotPink              = 0xFFFF69B4UL;$/;"	m	struct:Color
IndianRed	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB IndianRed            = 0xFFCD5C5CUL;$/;"	m	struct:Color
Indigo	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Indigo               = 0xFF4B0082UL;$/;"	m	struct:Color
Ivory	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Ivory                = 0xFFFFFFF0UL;$/;"	m	struct:Color
Khaki	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Khaki                = 0xFFF0E68CUL;$/;"	m	struct:Color
Lavender	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Lavender             = 0xFFE6E6FAUL;$/;"	m	struct:Color
LavenderBlush	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LavenderBlush        = 0xFFFFF0F5UL;$/;"	m	struct:Color
LawnGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LawnGreen            = 0xFF7CFC00UL;$/;"	m	struct:Color
LemonChiffon	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LemonChiffon         = 0xFFFFFACDUL;$/;"	m	struct:Color
LightBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LightBlue            = 0xFFADD8E6UL;$/;"	m	struct:Color
LightCoral	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LightCoral           = 0xFFF08080UL;$/;"	m	struct:Color
LightCyan	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LightCyan            = 0xFFE0FFFFUL;$/;"	m	struct:Color
LightGoldenrodYellow	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LightGoldenrodYellow = 0xFFFAFAD2UL;$/;"	m	struct:Color
LightGray	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LightGray            = 0xFFD3D3D3UL;$/;"	m	struct:Color
LightGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LightGreen           = 0xFF90EE90UL;$/;"	m	struct:Color
LightPink	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LightPink            = 0xFFFFB6C1UL;$/;"	m	struct:Color
LightSalmon	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LightSalmon          = 0xFFFFA07AUL;$/;"	m	struct:Color
LightSeaGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LightSeaGreen        = 0xFF20B2AAUL;$/;"	m	struct:Color
LightSkyBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LightSkyBlue         = 0xFF87CEFAUL;$/;"	m	struct:Color
LightSlateGray	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LightSlateGray       = 0xFF778899UL;$/;"	m	struct:Color
LightSteelBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LightSteelBlue       = 0xFFB0C4DEUL;$/;"	m	struct:Color
LightYellow	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LightYellow          = 0xFFFFFFE0UL;$/;"	m	struct:Color
Lime	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Lime                 = 0xFF00FF00UL;$/;"	m	struct:Color
LimeGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB LimeGreen            = 0xFF32CD32UL;$/;"	m	struct:Color
Linen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Linen                = 0xFFFAF0E6UL;$/;"	m	struct:Color
Magenta	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Magenta              = 0xFFFF00FFUL;$/;"	m	struct:Color
MakeARGB	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static ARGB MakeARGB(BYTE a, BYTE r, BYTE g, BYTE b)$/;"	f	struct:Color
Maroon	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Maroon               = 0xFF800000UL;$/;"	m	struct:Color
MediumAquamarine	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB MediumAquamarine     = 0xFF66CDAAUL;$/;"	m	struct:Color
MediumBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB MediumBlue           = 0xFF0000CDUL;$/;"	m	struct:Color
MediumOrchid	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB MediumOrchid         = 0xFFBA55D3UL;$/;"	m	struct:Color
MediumPurple	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB MediumPurple         = 0xFF9370DBUL;$/;"	m	struct:Color
MediumSeaGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB MediumSeaGreen       = 0xFF3CB371UL;$/;"	m	struct:Color
MediumSlateBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB MediumSlateBlue      = 0xFF7B68EEUL;$/;"	m	struct:Color
MediumSpringGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB MediumSpringGreen    = 0xFF00FA9AUL;$/;"	m	struct:Color
MediumTurquoise	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB MediumTurquoise      = 0xFF48D1CCUL;$/;"	m	struct:Color
MediumVioletRed	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB MediumVioletRed      = 0xFFC71585UL;$/;"	m	struct:Color
MidnightBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB MidnightBlue         = 0xFF191970UL;$/;"	m	struct:Color
MintCream	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB MintCream            = 0xFFF5FFFAUL;$/;"	m	struct:Color
MistyRose	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB MistyRose            = 0xFFFFE4E1UL;$/;"	m	struct:Color
Moccasin	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Moccasin             = 0xFFFFE4B5UL;$/;"	m	struct:Color
NavajoWhite	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB NavajoWhite          = 0xFFFFDEADUL;$/;"	m	struct:Color
Navy	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Navy                 = 0xFF000080UL;$/;"	m	struct:Color
OldLace	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB OldLace              = 0xFFFDF5E6UL;$/;"	m	struct:Color
Olive	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Olive                = 0xFF808000UL;$/;"	m	struct:Color
OliveDrab	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB OliveDrab            = 0xFF6B8E23UL;$/;"	m	struct:Color
Orange	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Orange               = 0xFFFFA500UL;$/;"	m	struct:Color
OrangeRed	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB OrangeRed            = 0xFFFF4500UL;$/;"	m	struct:Color
Orchid	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Orchid               = 0xFFDA70D6UL;$/;"	m	struct:Color
PaleGoldenrod	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB PaleGoldenrod        = 0xFFEEE8AAUL;$/;"	m	struct:Color
PaleGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB PaleGreen            = 0xFF98FB98UL;$/;"	m	struct:Color
PaleTurquoise	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB PaleTurquoise        = 0xFFAFEEEEUL;$/;"	m	struct:Color
PaleVioletRed	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB PaleVioletRed        = 0xFFDB7093UL;$/;"	m	struct:Color
PapayaWhip	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB PapayaWhip           = 0xFFFFEFD5UL;$/;"	m	struct:Color
PeachPuff	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB PeachPuff            = 0xFFFFDAB9UL;$/;"	m	struct:Color
Peru	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Peru                 = 0xFFCD853FUL;$/;"	m	struct:Color
Pink	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Pink                 = 0xFFFFC0CBUL;$/;"	m	struct:Color
Plum	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Plum                 = 0xFFDDA0DDUL;$/;"	m	struct:Color
PowderBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB PowderBlue           = 0xFFB0E0E6UL;$/;"	m	struct:Color
Purple	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Purple               = 0xFF800080UL;$/;"	m	struct:Color
Red	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Red                  = 0xFFFF0000UL;$/;"	m	struct:Color
RosyBrown	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB RosyBrown            = 0xFFBC8F8FUL;$/;"	m	struct:Color
RoyalBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB RoyalBlue            = 0xFF4169E1UL;$/;"	m	struct:Color
SaddleBrown	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB SaddleBrown          = 0xFF8B4513UL;$/;"	m	struct:Color
Salmon	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Salmon               = 0xFFFA8072UL;$/;"	m	struct:Color
SandyBrown	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB SandyBrown           = 0xFFF4A460UL;$/;"	m	struct:Color
SeaGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB SeaGreen             = 0xFF2E8B57UL;$/;"	m	struct:Color
SeaShell	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB SeaShell             = 0xFFFFF5EEUL;$/;"	m	struct:Color
SetFromCOLORREF	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	VOID SetFromCOLORREF(COLORREF rgb)$/;"	f	struct:Color
SetValue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	VOID SetValue(ARGB argb)$/;"	f	struct:Color
Sienna	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Sienna               = 0xFFA0522DUL;$/;"	m	struct:Color
Silver	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Silver               = 0xFFC0C0C0UL;$/;"	m	struct:Color
SkyBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB SkyBlue              = 0xFF87CEEBUL;$/;"	m	struct:Color
SlateBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB SlateBlue            = 0xFF6A5ACDUL;$/;"	m	struct:Color
SlateGray	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB SlateGray            = 0xFF708090UL;$/;"	m	struct:Color
Snow	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Snow                 = 0xFFFFFAFAUL;$/;"	m	struct:Color
SpringGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB SpringGreen          = 0xFF00FF7FUL;$/;"	m	struct:Color
SteelBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB SteelBlue            = 0xFF4682B4UL;$/;"	m	struct:Color
Tan	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Tan                  = 0xFFD2B48CUL;$/;"	m	struct:Color
Teal	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Teal                 = 0xFF008080UL;$/;"	m	struct:Color
Thistle	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Thistle              = 0xFFD8BFD8UL;$/;"	m	struct:Color
ToCOLORREF	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	COLORREF ToCOLORREF() const$/;"	f	struct:Color
Tomato	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Tomato               = 0xFFFF6347UL;$/;"	m	struct:Color
Transparent	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Transparent          = 0x00FFFFFFUL;$/;"	m	struct:Color
Turquoise	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Turquoise            = 0xFF40E0D0UL;$/;"	m	struct:Color
Value	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	ARGB Value;$/;"	m	struct:Color
Violet	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Violet               = 0xFFEE82EEUL;$/;"	m	struct:Color
Wheat	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Wheat                = 0xFFF5DEB3UL;$/;"	m	struct:Color
White	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB White                = 0xFFFFFFFFUL;$/;"	m	struct:Color
WhiteSmoke	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB WhiteSmoke           = 0xFFF5F5F5UL;$/;"	m	struct:Color
Yellow	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB Yellow               = 0xFFFFFF00UL;$/;"	m	struct:Color
YellowGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	/^	static const ARGB YellowGreen          = 0xFF9ACD32UL;$/;"	m	struct:Color
__GDIPLUS_COLOR_H	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolor.h	24;"	d
ColorAdjustType	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^typedef enum ColorAdjustType {$/;"	g
ColorAdjustType	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^} ColorAdjustType;$/;"	t	typeref:enum:ColorAdjustType
ColorAdjustTypeAny	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	ColorAdjustTypeAny = 6$/;"	e	enum:ColorAdjustType
ColorAdjustTypeBitmap	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	ColorAdjustTypeBitmap = 1,$/;"	e	enum:ColorAdjustType
ColorAdjustTypeBrush	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	ColorAdjustTypeBrush = 2,$/;"	e	enum:ColorAdjustType
ColorAdjustTypeCount	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	ColorAdjustTypeCount = 5,$/;"	e	enum:ColorAdjustType
ColorAdjustTypeDefault	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	ColorAdjustTypeDefault = 0,$/;"	e	enum:ColorAdjustType
ColorAdjustTypePen	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	ColorAdjustTypePen = 3,$/;"	e	enum:ColorAdjustType
ColorAdjustTypeText	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	ColorAdjustTypeText = 4,$/;"	e	enum:ColorAdjustType
ColorChannelLUT	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^typedef BYTE ColorChannelLUT[256];$/;"	t
ColorMap	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^typedef struct ColorMap {$/;"	s
ColorMap	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^} ColorMap;$/;"	t	typeref:struct:ColorMap
ColorMatrix	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^typedef struct ColorMatrix {$/;"	s
ColorMatrix	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^} ColorMatrix;$/;"	t	typeref:struct:ColorMatrix
ColorMatrixFlags	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^typedef enum ColorMatrixFlags {$/;"	g
ColorMatrixFlags	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^} ColorMatrixFlags;$/;"	t	typeref:enum:ColorMatrixFlags
ColorMatrixFlagsAltGray	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	ColorMatrixFlagsAltGray = 2$/;"	e	enum:ColorMatrixFlags
ColorMatrixFlagsDefault	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	ColorMatrixFlagsDefault = 0,$/;"	e	enum:ColorMatrixFlags
ColorMatrixFlagsSkipGrays	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	ColorMatrixFlagsSkipGrays = 1,$/;"	e	enum:ColorMatrixFlags
HistogramFormat	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^typedef enum HistogramFormat {$/;"	g
HistogramFormat	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^} HistogramFormat;$/;"	t	typeref:enum:HistogramFormat
HistogramFormatA	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	HistogramFormatA = 7$/;"	e	enum:HistogramFormat
HistogramFormatARGB	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	HistogramFormatARGB = 0,$/;"	e	enum:HistogramFormat
HistogramFormatB	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	HistogramFormatB = 4,$/;"	e	enum:HistogramFormat
HistogramFormatG	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	HistogramFormatG = 5,$/;"	e	enum:HistogramFormat
HistogramFormatGray	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	HistogramFormatGray = 3,$/;"	e	enum:HistogramFormat
HistogramFormatPARGB	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	HistogramFormatPARGB = 1,$/;"	e	enum:HistogramFormat
HistogramFormatR	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	HistogramFormatR = 6,$/;"	e	enum:HistogramFormat
HistogramFormatRGB	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	HistogramFormatRGB = 2,$/;"	e	enum:HistogramFormat
__GDIPLUS_COLORMATRIX_H	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	24;"	d
m	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	REAL m[5][5];$/;"	m	struct:ColorMatrix
newColor	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	Color newColor;$/;"	m	struct:ColorMap
oldColor	C++\ege-13.04.02-full\src\gdiplus4\gdipluscolormatrix.h	/^	Color oldColor;$/;"	m	struct:ColorMap
AdjustBlackSaturation	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	AdjustBlackSaturation = 7$/;"	e	enum:CurveAdjustments
AdjustContrast	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	AdjustContrast = 2,$/;"	e	enum:CurveAdjustments
AdjustDensity	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	AdjustDensity = 1,$/;"	e	enum:CurveAdjustments
AdjustExposure	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	AdjustExposure = 0,$/;"	e	enum:CurveAdjustments
AdjustHighlight	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	AdjustHighlight = 3,$/;"	e	enum:CurveAdjustments
AdjustMidtone	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	AdjustMidtone = 5,$/;"	e	enum:CurveAdjustments
AdjustShadow	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	AdjustShadow = 4,$/;"	e	enum:CurveAdjustments
AdjustWhiteSaturation	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	AdjustWhiteSaturation = 6,$/;"	e	enum:CurveAdjustments
BlurParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^typedef struct BlurParams {$/;"	s
BlurParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^} BlurParams;$/;"	t	typeref:struct:BlurParams
BrightnessContrastParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^typedef struct BrightnessContrastParams {$/;"	s
BrightnessContrastParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^} BrightnessContrastParams;$/;"	t	typeref:struct:BrightnessContrastParams
ColorBalanceParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^typedef struct ColorBalanceParams {$/;"	s
ColorBalanceParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^} ColorBalanceParams;$/;"	t	typeref:struct:ColorBalanceParams
ColorCurveParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^typedef struct ColorCurveParams {$/;"	s
ColorCurveParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^} ColorCurveParams;$/;"	t	typeref:struct:ColorCurveParams
ColorLUTParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^typedef struct ColorLUTParams {$/;"	s
ColorLUTParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^} ColorLUTParams;$/;"	t	typeref:struct:ColorLUTParams
CurveAdjustments	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^typedef enum CurveAdjustments {$/;"	g
CurveAdjustments	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^} CurveAdjustments;$/;"	t	typeref:enum:CurveAdjustments
CurveChannel	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^typedef enum CurveChannel {$/;"	g
CurveChannel	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^} CurveChannel;$/;"	t	typeref:enum:CurveChannel
CurveChannelAll	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	CurveChannelAll = 0,$/;"	e	enum:CurveChannel
CurveChannelBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	CurveChannelBlue = 3$/;"	e	enum:CurveChannel
CurveChannelGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	CurveChannelGreen = 2,$/;"	e	enum:CurveChannel
CurveChannelRed	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	CurveChannelRed = 1,$/;"	e	enum:CurveChannel
HueSaturationLightnessParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^typedef struct HueSaturationLightnessParams {$/;"	s
HueSaturationLightnessParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^} HueSaturationLightnessParams;$/;"	t	typeref:struct:HueSaturationLightnessParams
LevelsParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^typedef struct LevelsParams {$/;"	s
LevelsParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^} LevelsParams;$/;"	t	typeref:struct:LevelsParams
RedEyeCorrectionParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^typedef struct RedEyeCorrectionParams {$/;"	s
RedEyeCorrectionParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^} RedEyeCorrectionParams;$/;"	t	typeref:struct:RedEyeCorrectionParams
SharpenParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^typedef struct SharpenParams {$/;"	s
SharpenParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^} SharpenParams;$/;"	t	typeref:struct:SharpenParams
TintParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^typedef struct TintParams {$/;"	s
TintParams	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^} TintParams;$/;"	t	typeref:struct:TintParams
__GDIPLUS_EFFECTS_H	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	24;"	d
adjustValue	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	INT adjustValue;$/;"	m	struct:ColorCurveParams
adjustment	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	CurveAdjustments adjustment;$/;"	m	struct:ColorCurveParams
amount	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	INT amount;$/;"	m	struct:TintParams
amount	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	REAL amount;$/;"	m	struct:SharpenParams
areas	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	RECT *areas;$/;"	m	struct:RedEyeCorrectionParams
brightnessLevel	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	INT brightnessLevel;$/;"	m	struct:BrightnessContrastParams
channel	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	CurveChannel channel;$/;"	m	struct:ColorCurveParams
contrastLevel	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	INT contrastLevel;$/;"	m	struct:BrightnessContrastParams
cyanRed	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	INT cyanRed;$/;"	m	struct:ColorBalanceParams
expandEdge	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	BOOL expandEdge;$/;"	m	struct:BlurParams
highlight	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	INT highlight;$/;"	m	struct:LevelsParams
hue	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	INT hue;$/;"	m	struct:TintParams
hueLevel	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	INT hueLevel;$/;"	m	struct:HueSaturationLightnessParams
lightnessLevel	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	INT lightnessLevel;$/;"	m	struct:HueSaturationLightnessParams
lutA	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	ColorChannelLUT lutA;$/;"	m	struct:ColorLUTParams
lutB	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	ColorChannelLUT lutB;$/;"	m	struct:ColorLUTParams
lutG	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	ColorChannelLUT lutG;$/;"	m	struct:ColorLUTParams
lutR	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	ColorChannelLUT lutR;$/;"	m	struct:ColorLUTParams
magentaGreen	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	INT magentaGreen;$/;"	m	struct:ColorBalanceParams
midtone	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	INT midtone;$/;"	m	struct:LevelsParams
numberOfAreas	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	UINT numberOfAreas;$/;"	m	struct:RedEyeCorrectionParams
radius	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	REAL radius;$/;"	m	struct:BlurParams
radius	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	REAL radius;$/;"	m	struct:SharpenParams
saturationLevel	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	INT saturationLevel;$/;"	m	struct:HueSaturationLightnessParams
shadow	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	INT shadow;$/;"	m	struct:LevelsParams
yellowBlue	C++\ege-13.04.02-full\src\gdiplus4\gdipluseffects.h	/^	INT yellowBlue;$/;"	m	struct:ColorBalanceParams
BrushType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum BrushType {$/;"	g
BrushType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} BrushType;$/;"	t	typeref:enum:BrushType
BrushTypeHatchFill	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	BrushTypeHatchFill = 1,$/;"	e	enum:BrushType
BrushTypeLinearGradient	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	BrushTypeLinearGradient = 4$/;"	e	enum:BrushType
BrushTypePathGradient	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	BrushTypePathGradient = 3,$/;"	e	enum:BrushType
BrushTypeSolidColor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	BrushTypeSolidColor = 0,$/;"	e	enum:BrushType
BrushTypeTextureFill	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	BrushTypeTextureFill = 2,$/;"	e	enum:BrushType
CombineMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum CombineMode {$/;"	g
CombineMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} CombineMode;$/;"	t	typeref:enum:CombineMode
CombineModeComplement	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CombineModeComplement = 5$/;"	e	enum:CombineMode
CombineModeExclude	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CombineModeExclude = 4,$/;"	e	enum:CombineMode
CombineModeIntersect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CombineModeIntersect = 1,$/;"	e	enum:CombineMode
CombineModeReplace	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CombineModeReplace = 0,$/;"	e	enum:CombineMode
CombineModeUnion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CombineModeUnion = 2,$/;"	e	enum:CombineMode
CombineModeXor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CombineModeXor = 3,$/;"	e	enum:CombineMode
CompositingMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum CompositingMode {$/;"	g
CompositingMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} CompositingMode;$/;"	t	typeref:enum:CompositingMode
CompositingModeSourceCopy	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CompositingModeSourceCopy = 1$/;"	e	enum:CompositingMode
CompositingModeSourceOver	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CompositingModeSourceOver = 0,$/;"	e	enum:CompositingMode
CompositingQuality	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum CompositingQuality {$/;"	g
CompositingQuality	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} CompositingQuality;$/;"	t	typeref:enum:CompositingQuality
CompositingQualityAssumeLinear	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CompositingQualityAssumeLinear = 4$/;"	e	enum:CompositingQuality
CompositingQualityDefault	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CompositingQualityDefault = 0,$/;"	e	enum:CompositingQuality
CompositingQualityGammaCorrected	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CompositingQualityGammaCorrected = 3,$/;"	e	enum:CompositingQuality
CompositingQualityHighQuality	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CompositingQualityHighQuality = 2,$/;"	e	enum:CompositingQuality
CompositingQualityHighSpeed	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CompositingQualityHighSpeed = 1,$/;"	e	enum:CompositingQuality
CoordinateSpace	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum CoordinateSpace {$/;"	g
CoordinateSpace	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} CoordinateSpace;$/;"	t	typeref:enum:CoordinateSpace
CoordinateSpaceDevice	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CoordinateSpaceDevice = 2$/;"	e	enum:CoordinateSpace
CoordinateSpacePage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CoordinateSpacePage = 1,$/;"	e	enum:CoordinateSpace
CoordinateSpaceWorld	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CoordinateSpaceWorld = 0,$/;"	e	enum:CoordinateSpace
CustomLineCapType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum CustomLineCapType {$/;"	g
CustomLineCapType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} CustomLineCapType;$/;"	t	typeref:enum:CustomLineCapType
CustomLineCapTypeAdjustableArrow	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CustomLineCapTypeAdjustableArrow = 1$/;"	e	enum:CustomLineCapType
CustomLineCapTypeDefault	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	CustomLineCapTypeDefault = 0,$/;"	e	enum:CustomLineCapType
DashCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum DashCap {$/;"	g
DashCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} DashCap;$/;"	t	typeref:enum:DashCap
DashCapFlat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DashCapFlat = 0,$/;"	e	enum:DashCap
DashCapRound	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DashCapRound = 2,$/;"	e	enum:DashCap
DashCapTriangle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DashCapTriangle = 3$/;"	e	enum:DashCap
DashStyle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum DashStyle {$/;"	g
DashStyle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} DashStyle;$/;"	t	typeref:enum:DashStyle
DashStyleCustom	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DashStyleCustom = 5$/;"	e	enum:DashStyle
DashStyleDash	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DashStyleDash = 1,$/;"	e	enum:DashStyle
DashStyleDashDot	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DashStyleDashDot = 3,$/;"	e	enum:DashStyle
DashStyleDashDotDot	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DashStyleDashDotDot = 4,$/;"	e	enum:DashStyle
DashStyleDot	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DashStyleDot = 2,$/;"	e	enum:DashStyle
DashStyleSolid	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DashStyleSolid = 0,$/;"	e	enum:DashStyle
DitherType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum DitherType {$/;"	g
DitherType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} DitherType;$/;"	t	typeref:enum:DitherType
DitherTypeDualSpiral4x4	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DitherTypeDualSpiral4x4 = 8,$/;"	e	enum:DitherType
DitherTypeDualSpiral8x8	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DitherTypeDualSpiral8x8 = 9,$/;"	e	enum:DitherType
DitherTypeErrorDiffusion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DitherTypeErrorDiffusion = 10$/;"	e	enum:DitherType
DitherTypeNone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DitherTypeNone = 0,$/;"	e	enum:DitherType
DitherTypeOrdered16x16	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DitherTypeOrdered16x16 = 4,$/;"	e	enum:DitherType
DitherTypeOrdered4x4	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DitherTypeOrdered4x4 = 2,$/;"	e	enum:DitherType
DitherTypeOrdered8x8	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DitherTypeOrdered8x8 = 3,$/;"	e	enum:DitherType
DitherTypeOrdered91x91	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DitherTypeOrdered91x91 = 5,$/;"	e	enum:DitherType
DitherTypeSolid	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DitherTypeSolid = 1,$/;"	e	enum:DitherType
DitherTypeSpiral4x4	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DitherTypeSpiral4x4 = 6,$/;"	e	enum:DitherType
DitherTypeSpiral8x8	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DitherTypeSpiral8x8 = 7,$/;"	e	enum:DitherType
DriverStringOptions	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum DriverStringOptions {$/;"	g
DriverStringOptions	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} DriverStringOptions;$/;"	t	typeref:enum:DriverStringOptions
DriverStringOptionsCmapLookup	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DriverStringOptionsCmapLookup = 1,$/;"	e	enum:DriverStringOptions
DriverStringOptionsLimitSubpixel	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DriverStringOptionsLimitSubpixel = 8$/;"	e	enum:DriverStringOptions
DriverStringOptionsRealizedAdvance	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DriverStringOptionsRealizedAdvance = 4,$/;"	e	enum:DriverStringOptions
DriverStringOptionsVertical	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	DriverStringOptionsVertical = 2,$/;"	e	enum:DriverStringOptions
EmfPlusRecordTotal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTotal,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum EmfPlusRecordType {$/;"	g
EmfPlusRecordType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} EmfPlusRecordType;$/;"	t	typeref:enum:EmfPlusRecordType
EmfPlusRecordTypeBeginContainer	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeBeginContainer,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeBeginContainerNoParams	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeBeginContainerNoParams,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeClear	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeClear,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeComment	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeComment,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawArc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeDrawArc,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawBeziers	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeDrawBeziers,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawClosedCurve	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeDrawClosedCurve,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawCurve	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeDrawCurve,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawDriverString	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeDrawDriverString,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawEllipse	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeDrawEllipse,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeDrawImage,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawImagePoints	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeDrawImagePoints,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawLines	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeDrawLines,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeDrawPath,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawPie	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeDrawPie,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawRects	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeDrawRects,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawString	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeDrawString,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeEndContainer	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeEndContainer,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeEndOfFile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeEndOfFile,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillClosedCurve	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeFillClosedCurve,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillEllipse	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeFillEllipse,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeFillPath,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillPie	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeFillPie,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillPolygon	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeFillPolygon,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillRects	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeFillRects,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillRegion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeFillRegion,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeGetDC	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeGetDC,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeHeader	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeHeader,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeInvalid	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeInvalid                   = GDIP_EMFPLUS_RECORD_BASE,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMax	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeMax = EmfPlusRecordTotal-1,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMin	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeMin = EmfPlusRecordTypeHeader$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMultiFormatEnd	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeMultiFormatEnd,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMultiFormatSection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeMultiFormatSection,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMultiFormatStart	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeMultiFormatStart,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMultiplyWorldTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeMultiplyWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeObject	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeObject,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeOffsetClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeOffsetClip,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeResetClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeResetClip,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeResetWorldTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeResetWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeRestore	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeRestore,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeRotateWorldTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeRotateWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSave	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSave,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeScaleWorldTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeScaleWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSerializableObject	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSerializableObject,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetAntiAliasMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetAntiAliasMode,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetClipPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetClipPath,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetClipRect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetClipRect,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetClipRegion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetClipRegion,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetCompositingMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetCompositingMode,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetCompositingQuality	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetCompositingQuality,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetGammaValue	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetGammaValue,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetInterpolationMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetInterpolationMode,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetPageTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetPageTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetPixelOffsetMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetPixelOffsetMode,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetRenderingOrigin	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetRenderingOrigin,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetTSClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetTSClip,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetTSGraphics	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetTSGraphics,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetTextContrast	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetTextContrast,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetTextRenderingHint	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetTextRenderingHint,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetWorldTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeSetWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeStrokeFillPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeStrokeFillPath,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeTranslateWorldTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfPlusRecordTypeTranslateWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeAbortPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeAbortPath                     = EMR_ABORTPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeAlphaBlend	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeAlphaBlend                    = 114,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeAngleArc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeAngleArc                      = EMR_ANGLEARC,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeArc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeArc                           = EMR_ARC,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeArcTo	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeArcTo                         = EMR_ARCTO,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeBeginPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeBeginPath                     = EMR_BEGINPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeBitBlt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeBitBlt                        = EMR_BITBLT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeChord	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeChord                         = EMR_CHORD,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCloseFigure	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeCloseFigure                   = EMR_CLOSEFIGURE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeColorCorrectPalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeColorCorrectPalette           = 111,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeColorMatchToTargetW	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeColorMatchToTargetW           = 121,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreateBrushIndirect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeCreateBrushIndirect           = EMR_CREATEBRUSHINDIRECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreateColorSpace	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeCreateColorSpace              = 99,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreateColorSpaceW	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeCreateColorSpaceW             = 122,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreateDIBPatternBrushPt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeCreateDIBPatternBrushPt       = EMR_CREATEDIBPATTERNBRUSHPT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreateMonoBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeCreateMonoBrush               = EMR_CREATEMONOBRUSH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreatePalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeCreatePalette                 = EMR_CREATEPALETTE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreatePen	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeCreatePen                     = EMR_CREATEPEN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeDeleteColorSpace	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeDeleteColorSpace              = 101,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeDeleteObject	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeDeleteObject                  = EMR_DELETEOBJECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeDrawEscape	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeDrawEscape                    = 105,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeEOF	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeEOF                           = EMR_EOF,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeEllipse	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeEllipse                       = EMR_ELLIPSE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeEndPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeEndPath                       = EMR_ENDPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExcludeClipRect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeExcludeClipRect               = EMR_EXCLUDECLIPRECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtCreateFontIndirect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeExtCreateFontIndirect         = EMR_EXTCREATEFONTINDIRECTW,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtCreatePen	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeExtCreatePen                  = EMR_EXTCREATEPEN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtEscape	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeExtEscape                     = 106,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtFloodFill	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeExtFloodFill                  = EMR_EXTFLOODFILL,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtSelectClipRgn	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeExtSelectClipRgn              = EMR_EXTSELECTCLIPRGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtTextOutA	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeExtTextOutA                   = EMR_EXTTEXTOUTA,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtTextOutW	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeExtTextOutW                   = EMR_EXTTEXTOUTW,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeFillPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeFillPath                      = EMR_FILLPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeFillRgn	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeFillRgn                       = EMR_FILLRGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeFlattenPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeFlattenPath                   = EMR_FLATTENPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeForceUFIMapping	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeForceUFIMapping               = 109,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeFrameRgn	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeFrameRgn                      = EMR_FRAMERGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeGLSBoundedRecord	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeGLSBoundedRecord              = 103,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeGLSRecord	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeGLSRecord                     = 102,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeGdiComment	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeGdiComment                    = EMR_GDICOMMENT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeGradientFill	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeGradientFill                  = 118,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeHeader	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeHeader                        = EMR_HEADER,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeIntersectClipRect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeIntersectClipRect             = EMR_INTERSECTCLIPRECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeInvertRgn	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeInvertRgn                     = EMR_INVERTRGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeLineTo	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeLineTo                        = EMR_LINETO,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeMaskBlt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeMaskBlt                       = EMR_MASKBLT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeMax	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeMax                           = 122,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeMin	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeMin                           = 1,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeModifyWorldTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeModifyWorldTransform          = EMR_MODIFYWORLDTRANSFORM,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeMoveToEx	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeMoveToEx                      = EMR_MOVETOEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeNamedEscape	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeNamedEscape                   = 110,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeOffsetClipRgn	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeOffsetClipRgn                 = EMR_OFFSETCLIPRGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePaintRgn	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePaintRgn                      = EMR_PAINTRGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePie	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePie                           = EMR_PIE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePixelFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePixelFormat                   = 104,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePlgBlt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePlgBlt                        = EMR_PLGBLT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyBezier	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolyBezier                    = EMR_POLYBEZIER,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyBezier16	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolyBezier16                  = EMR_POLYBEZIER16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyBezierTo	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolyBezierTo                  = EMR_POLYBEZIERTO,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyBezierTo16	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolyBezierTo16                = EMR_POLYBEZIERTO16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyDraw	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolyDraw                      = EMR_POLYDRAW,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyDraw16	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolyDraw16                    = EMR_POLYDRAW16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyLineTo	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolyLineTo                    = EMR_POLYLINETO,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyPolygon	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolyPolygon                   = EMR_POLYPOLYGON,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyPolygon16	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolyPolygon16                 = EMR_POLYPOLYGON16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyPolyline	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolyPolyline                  = EMR_POLYPOLYLINE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyPolyline16	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolyPolyline16                = EMR_POLYPOLYLINE16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyTextOutA	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolyTextOutA                  = EMR_POLYTEXTOUTA,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyTextOutW	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolyTextOutW                  = EMR_POLYTEXTOUTW,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolygon	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolygon                       = EMR_POLYGON,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolygon16	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolygon16                     = EMR_POLYGON16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyline	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolyline                      = EMR_POLYLINE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyline16	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolyline16                    = EMR_POLYLINE16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolylineTo16	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypePolylineTo16                  = EMR_POLYLINETO16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeRealizePalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeRealizePalette                = EMR_REALIZEPALETTE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeRectangle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeRectangle                     = EMR_RECTANGLE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeReserved_069	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeReserved_069                  = 69,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeReserved_117	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeReserved_117                  = 117,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeResizePalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeResizePalette                 = EMR_RESIZEPALETTE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeRestoreDC	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeRestoreDC                     = EMR_RESTOREDC,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeRoundRect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeRoundRect                     = EMR_ROUNDRECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSaveDC	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSaveDC                        = EMR_SAVEDC,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeScaleViewportExtEx	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeScaleViewportExtEx            = EMR_SCALEVIEWPORTEXTEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeScaleWindowExtEx	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeScaleWindowExtEx              = EMR_SCALEWINDOWEXTEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSelectClipPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSelectClipPath                = EMR_SELECTCLIPPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSelectObject	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSelectObject                  = EMR_SELECTOBJECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSelectPalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSelectPalette                 = EMR_SELECTPALETTE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetArcDirection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetArcDirection               = EMR_SETARCDIRECTION,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetBkColor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetBkColor                    = EMR_SETBKCOLOR,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetBkMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetBkMode                     = EMR_SETBKMODE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetBrushOrgEx	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetBrushOrgEx                 = EMR_SETBRUSHORGEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetColorAdjustment	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetColorAdjustment            = EMR_SETCOLORADJUSTMENT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetColorSpace	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetColorSpace                 = 100,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetDIBitsToDevice	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetDIBitsToDevice             = EMR_SETDIBITSTODEVICE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetICMMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetICMMode                    = 98,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetICMProfileA	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetICMProfileA                = 112,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetICMProfileW	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetICMProfileW                = 113,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetLayout	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetLayout                     = 115,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetLinkedUFIs	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetLinkedUFIs                 = 119,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetMapMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetMapMode                    = EMR_SETMAPMODE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetMapperFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetMapperFlags                = EMR_SETMAPPERFLAGS,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetMetaRgn	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetMetaRgn                    = EMR_SETMETARGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetMiterLimit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetMiterLimit                 = EMR_SETMITERLIMIT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetPaletteEntries	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetPaletteEntries             = EMR_SETPALETTEENTRIES,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetPixelV	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetPixelV                     = EMR_SETPIXELV,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetPolyFillMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetPolyFillMode               = EMR_SETPOLYFILLMODE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetROP2	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetROP2                       = EMR_SETROP2,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetStretchBltMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetStretchBltMode             = EMR_SETSTRETCHBLTMODE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetTextAlign	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetTextAlign                  = EMR_SETTEXTALIGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetTextColor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetTextColor                  = EMR_SETTEXTCOLOR,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetTextJustification	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetTextJustification          = 120,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetViewportExtEx	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetViewportExtEx              = EMR_SETVIEWPORTEXTEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetViewportOrgEx	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetViewportOrgEx              = EMR_SETVIEWPORTORGEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetWindowExtEx	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetWindowExtEx                = EMR_SETWINDOWEXTEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetWindowOrgEx	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetWindowOrgEx                = EMR_SETWINDOWORGEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetWorldTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSetWorldTransform             = EMR_SETWORLDTRANSFORM,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSmallTextOut	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeSmallTextOut                  = 108,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeStartDoc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeStartDoc                      = 107,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeStretchBlt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeStretchBlt                    = EMR_STRETCHBLT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeStretchDIBits	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeStretchDIBits                 = EMR_STRETCHDIBITS,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeStrokeAndFillPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeStrokeAndFillPath             = EMR_STROKEANDFILLPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeStrokePath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeStrokePath                    = EMR_STROKEPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeTransparentBlt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeTransparentBlt                = 116,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeWidenPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfRecordTypeWidenPath                     = EMR_WIDENPATH,$/;"	e	enum:EmfPlusRecordType
EmfToWmfBitsFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum EmfToWmfBitsFlags {$/;"	g
EmfToWmfBitsFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} EmfToWmfBitsFlags;$/;"	t	typeref:enum:EmfToWmfBitsFlags
EmfToWmfBitsFlagsDefault	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfToWmfBitsFlagsDefault = 0,$/;"	e	enum:EmfToWmfBitsFlags
EmfToWmfBitsFlagsEmbedEmf	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfToWmfBitsFlagsEmbedEmf = 1,$/;"	e	enum:EmfToWmfBitsFlags
EmfToWmfBitsFlagsIncludePlaceable	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfToWmfBitsFlagsIncludePlaceable = 2,$/;"	e	enum:EmfToWmfBitsFlags
EmfToWmfBitsFlagsNoXORClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfToWmfBitsFlagsNoXORClip = 4$/;"	e	enum:EmfToWmfBitsFlags
EmfType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum EmfType {$/;"	g
EmfType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} EmfType;$/;"	t	typeref:enum:EmfType
EmfTypeEmfOnly	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfTypeEmfOnly = 3,$/;"	e	enum:EmfType
EmfTypeEmfPlusDual	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfTypeEmfPlusDual = 5$/;"	e	enum:EmfType
EmfTypeEmfPlusOnly	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EmfTypeEmfPlusOnly = 4,$/;"	e	enum:EmfType
EncoderParameterValueType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum EncoderParameterValueType {$/;"	g
EncoderParameterValueType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} EncoderParameterValueType;$/;"	t	typeref:enum:EncoderParameterValueType
EncoderParameterValueTypeASCII	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderParameterValueTypeASCII = 2,$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeByte	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderParameterValueTypeByte = 1,$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeLong	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderParameterValueTypeLong = 4,$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeLongRange	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderParameterValueTypeLongRange = 6,$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypePointer	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderParameterValueTypePointer = 9$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeRational	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderParameterValueTypeRational = 5,$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeRationalRange	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderParameterValueTypeRationalRange = 8,$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeShort	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderParameterValueTypeShort = 3,$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeUndefined	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderParameterValueTypeUndefined = 7,$/;"	e	enum:EncoderParameterValueType
EncoderValue	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum EncoderValue {$/;"	g
EncoderValue	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} EncoderValue;$/;"	t	typeref:enum:EncoderValue
EncoderValueColorTypeCMYK	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueColorTypeCMYK = 0,$/;"	e	enum:EncoderValue
EncoderValueColorTypeYCCK	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueColorTypeYCCK = 1,$/;"	e	enum:EncoderValue
EncoderValueCompressionCCITT3	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueCompressionCCITT3 = 3,$/;"	e	enum:EncoderValue
EncoderValueCompressionCCITT4	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueCompressionCCITT4 = 4,$/;"	e	enum:EncoderValue
EncoderValueCompressionLZW	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueCompressionLZW = 2,$/;"	e	enum:EncoderValue
EncoderValueCompressionNone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueCompressionNone = 6,$/;"	e	enum:EncoderValue
EncoderValueCompressionRle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueCompressionRle = 5,$/;"	e	enum:EncoderValue
EncoderValueFlush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueFlush = 20,$/;"	e	enum:EncoderValue
EncoderValueFrameDimensionPage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueFrameDimensionPage = 23$/;"	e	enum:EncoderValue
EncoderValueFrameDimensionResolution	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueFrameDimensionResolution = 22,$/;"	e	enum:EncoderValue
EncoderValueFrameDimensionTime	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueFrameDimensionTime = 21,$/;"	e	enum:EncoderValue
EncoderValueLastFrame	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueLastFrame = 19,$/;"	e	enum:EncoderValue
EncoderValueMultiFrame	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueMultiFrame = 18,$/;"	e	enum:EncoderValue
EncoderValueRenderNonProgressive	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueRenderNonProgressive = 12,$/;"	e	enum:EncoderValue
EncoderValueRenderProgressive	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueRenderProgressive = 11,$/;"	e	enum:EncoderValue
EncoderValueScanMethodInterlaced	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueScanMethodInterlaced = 7,$/;"	e	enum:EncoderValue
EncoderValueScanMethodNonInterlaced	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueScanMethodNonInterlaced = 8,$/;"	e	enum:EncoderValue
EncoderValueTransformFlipHorizontal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueTransformFlipHorizontal = 16,$/;"	e	enum:EncoderValue
EncoderValueTransformFlipVertical	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueTransformFlipVertical = 17,$/;"	e	enum:EncoderValue
EncoderValueTransformRotate180	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueTransformRotate180 = 14,$/;"	e	enum:EncoderValue
EncoderValueTransformRotate270	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueTransformRotate270 = 15,$/;"	e	enum:EncoderValue
EncoderValueTransformRotate90	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueTransformRotate90 = 13,$/;"	e	enum:EncoderValue
EncoderValueVersionGif87	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueVersionGif87 = 9,$/;"	e	enum:EncoderValue
EncoderValueVersionGif89	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	EncoderValueVersionGif89 = 10,$/;"	e	enum:EncoderValue
FillMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum FillMode {$/;"	g
FillMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} FillMode;$/;"	t	typeref:enum:FillMode
FillModeAlternate	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	FillModeAlternate = 0,$/;"	e	enum:FillMode
FillModeWinding	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	FillModeWinding = 1$/;"	e	enum:FillMode
FlatnessDefault	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^const REAL FlatnessDefault = 0.25f;$/;"	v
FlatnessDefault	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	734;"	d
FlushIntention	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum FlushIntention {$/;"	g
FlushIntention	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} FlushIntention;$/;"	t	typeref:enum:FlushIntention
FlushIntentionFlush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	FlushIntentionFlush = 0,$/;"	e	enum:FlushIntention
FlushIntentionSync	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	FlushIntentionSync = 1$/;"	e	enum:FlushIntention
FontStyle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum FontStyle {$/;"	g
FontStyle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} FontStyle;$/;"	t	typeref:enum:FontStyle
FontStyleBold	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	FontStyleBold = 1,$/;"	e	enum:FontStyle
FontStyleBoldItalic	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	FontStyleBoldItalic = 3,$/;"	e	enum:FontStyle
FontStyleItalic	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	FontStyleItalic = 2,$/;"	e	enum:FontStyle
FontStyleRegular	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	FontStyleRegular = 0,$/;"	e	enum:FontStyle
FontStyleStrikeout	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	FontStyleStrikeout = 8$/;"	e	enum:FontStyle
FontStyleUnderline	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	FontStyleUnderline = 4,$/;"	e	enum:FontStyle
GDIP_EMFPLUS_RECORD_BASE	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	107;"	d
GDIP_WMF_RECORD_TO_EMFPLUS	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	106;"	d
GpTestControlEnum	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum GpTestControlEnum {$/;"	g
GpTestControlEnum	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} GpTestControlEnum;$/;"	t	typeref:enum:GpTestControlEnum
GraphicsContainer	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef DWORD GraphicsContainer;$/;"	t
GraphicsState	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef DWORD GraphicsState;$/;"	t
HatchStyle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum HatchStyle {$/;"	g
HatchStyle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} HatchStyle;$/;"	t	typeref:enum:HatchStyle
HatchStyle05Percent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyle05Percent = 6,$/;"	e	enum:HatchStyle
HatchStyle10Percent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyle10Percent = 7,$/;"	e	enum:HatchStyle
HatchStyle20Percent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyle20Percent = 8,$/;"	e	enum:HatchStyle
HatchStyle25Percent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyle25Percent = 9,$/;"	e	enum:HatchStyle
HatchStyle30Percent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyle30Percent = 10,$/;"	e	enum:HatchStyle
HatchStyle40Percent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyle40Percent = 11,$/;"	e	enum:HatchStyle
HatchStyle50Percent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyle50Percent = 12,$/;"	e	enum:HatchStyle
HatchStyle60Percent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyle60Percent = 13,$/;"	e	enum:HatchStyle
HatchStyle70Percent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyle70Percent = 14,$/;"	e	enum:HatchStyle
HatchStyle75Percent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyle75Percent = 15,$/;"	e	enum:HatchStyle
HatchStyle80Percent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyle80Percent = 16,$/;"	e	enum:HatchStyle
HatchStyle90Percent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyle90Percent = 17,$/;"	e	enum:HatchStyle
HatchStyleBackwardDiagonal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleBackwardDiagonal = 3,$/;"	e	enum:HatchStyle
HatchStyleCross	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleCross = 4,$/;"	e	enum:HatchStyle
HatchStyleDarkDownwardDiagonal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleDarkDownwardDiagonal = 20,$/;"	e	enum:HatchStyle
HatchStyleDarkHorizontal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleDarkHorizontal = 29,$/;"	e	enum:HatchStyle
HatchStyleDarkUpwardDiagonal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleDarkUpwardDiagonal = 21,$/;"	e	enum:HatchStyle
HatchStyleDarkVertical	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleDarkVertical = 28,$/;"	e	enum:HatchStyle
HatchStyleDashedDownwardDiagonal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleDashedDownwardDiagonal = 30,$/;"	e	enum:HatchStyle
HatchStyleDashedHorizontal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleDashedHorizontal = 32,$/;"	e	enum:HatchStyle
HatchStyleDashedUpwardDiagonal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleDashedUpwardDiagonal = 31,$/;"	e	enum:HatchStyle
HatchStyleDashedVertical	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleDashedVertical = 33,$/;"	e	enum:HatchStyle
HatchStyleDiagonalBrick	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleDiagonalBrick = 38,$/;"	e	enum:HatchStyle
HatchStyleDiagonalCross	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleDiagonalCross = 5,$/;"	e	enum:HatchStyle
HatchStyleDivot	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleDivot = 42,$/;"	e	enum:HatchStyle
HatchStyleDottedDiamond	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleDottedDiamond = 44,$/;"	e	enum:HatchStyle
HatchStyleDottedGrid	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleDottedGrid = 43,$/;"	e	enum:HatchStyle
HatchStyleForwardDiagonal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleForwardDiagonal = 2,$/;"	e	enum:HatchStyle
HatchStyleHorizontal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleHorizontal = 0,$/;"	e	enum:HatchStyle
HatchStyleHorizontalBrick	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleHorizontalBrick = 39,$/;"	e	enum:HatchStyle
HatchStyleLargeCheckerBoard	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleLargeCheckerBoard = 50,$/;"	e	enum:HatchStyle
HatchStyleLargeConfetti	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleLargeConfetti = 35,$/;"	e	enum:HatchStyle
HatchStyleLargeGrid	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleLargeGrid = 4,$/;"	e	enum:HatchStyle
HatchStyleLightDownwardDiagonal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleLightDownwardDiagonal = 18,$/;"	e	enum:HatchStyle
HatchStyleLightHorizontal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleLightHorizontal = 25,$/;"	e	enum:HatchStyle
HatchStyleLightUpwardDiagonal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleLightUpwardDiagonal = 19,$/;"	e	enum:HatchStyle
HatchStyleLightVertical	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleLightVertical = 24,$/;"	e	enum:HatchStyle
HatchStyleMax	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleMax = HatchStyleTotal - 1$/;"	e	enum:HatchStyle
HatchStyleMin	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleMin = HatchStyleHorizontal,$/;"	e	enum:HatchStyle
HatchStyleNarrowHorizontal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleNarrowHorizontal = 27,$/;"	e	enum:HatchStyle
HatchStyleNarrowVertical	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleNarrowVertical = 26,$/;"	e	enum:HatchStyle
HatchStyleOutlinedDiamond	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleOutlinedDiamond = 51,$/;"	e	enum:HatchStyle
HatchStylePlaid	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStylePlaid = 41,$/;"	e	enum:HatchStyle
HatchStyleShingle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleShingle = 45,$/;"	e	enum:HatchStyle
HatchStyleSmallCheckerBoard	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleSmallCheckerBoard = 49,$/;"	e	enum:HatchStyle
HatchStyleSmallConfetti	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleSmallConfetti = 34,$/;"	e	enum:HatchStyle
HatchStyleSmallGrid	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleSmallGrid = 48,$/;"	e	enum:HatchStyle
HatchStyleSolidDiamond	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleSolidDiamond = 52,$/;"	e	enum:HatchStyle
HatchStyleSphere	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleSphere = 47,$/;"	e	enum:HatchStyle
HatchStyleTotal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleTotal = 53,$/;"	e	enum:HatchStyle
HatchStyleTrellis	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleTrellis = 46,$/;"	e	enum:HatchStyle
HatchStyleVertical	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleVertical = 1,$/;"	e	enum:HatchStyle
HatchStyleWave	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleWave = 37,$/;"	e	enum:HatchStyle
HatchStyleWeave	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleWeave = 40,$/;"	e	enum:HatchStyle
HatchStyleWideDownwardDiagonal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleWideDownwardDiagonal = 22,$/;"	e	enum:HatchStyle
HatchStyleWideUpwardDiagonal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleWideUpwardDiagonal = 23,$/;"	e	enum:HatchStyle
HatchStyleZigZag	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HatchStyleZigZag = 36,$/;"	e	enum:HatchStyle
HotkeyPrefix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum HotkeyPrefix {$/;"	g
HotkeyPrefix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} HotkeyPrefix;$/;"	t	typeref:enum:HotkeyPrefix
HotkeyPrefixHide	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HotkeyPrefixHide = 2$/;"	e	enum:HotkeyPrefix
HotkeyPrefixNone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HotkeyPrefixNone = 0,$/;"	e	enum:HotkeyPrefix
HotkeyPrefixShow	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	HotkeyPrefixShow = 1,$/;"	e	enum:HotkeyPrefix
ImageType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum ImageType {$/;"	g
ImageType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} ImageType;$/;"	t	typeref:enum:ImageType
ImageTypeBitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	ImageTypeBitmap = 1,$/;"	e	enum:ImageType
ImageTypeMetafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	ImageTypeMetafile = 2$/;"	e	enum:ImageType
ImageTypeUnknown	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	ImageTypeUnknown = 0,$/;"	e	enum:ImageType
InterpolationMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum InterpolationMode {$/;"	g
InterpolationMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} InterpolationMode;$/;"	t	typeref:enum:InterpolationMode
InterpolationModeBicubic	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	InterpolationModeBicubic = 4,$/;"	e	enum:InterpolationMode
InterpolationModeBilinear	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	InterpolationModeBilinear = 3,$/;"	e	enum:InterpolationMode
InterpolationModeDefault	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	InterpolationModeDefault = 0,$/;"	e	enum:InterpolationMode
InterpolationModeHighQuality	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	InterpolationModeHighQuality = 2,$/;"	e	enum:InterpolationMode
InterpolationModeHighQualityBicubic	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	InterpolationModeHighQualityBicubic = 7$/;"	e	enum:InterpolationMode
InterpolationModeHighQualityBilinear	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	InterpolationModeHighQualityBilinear = 6,$/;"	e	enum:InterpolationMode
InterpolationModeLowQuality	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	InterpolationModeLowQuality = 1,$/;"	e	enum:InterpolationMode
InterpolationModeNearestNeighbor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	InterpolationModeNearestNeighbor = 5,$/;"	e	enum:InterpolationMode
LineCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum LineCap {$/;"	g
LineCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} LineCap;$/;"	t	typeref:enum:LineCap
LineCapArrowAnchor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LineCapArrowAnchor = 20,$/;"	e	enum:LineCap
LineCapCustom	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LineCapCustom = 255$/;"	e	enum:LineCap
LineCapDiamondAnchor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LineCapDiamondAnchor = 19,$/;"	e	enum:LineCap
LineCapFlat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LineCapFlat = 0,$/;"	e	enum:LineCap
LineCapNoAnchor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LineCapNoAnchor = 16,$/;"	e	enum:LineCap
LineCapRound	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LineCapRound = 2,$/;"	e	enum:LineCap
LineCapRoundAnchor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LineCapRoundAnchor = 18,$/;"	e	enum:LineCap
LineCapSquare	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LineCapSquare = 1,$/;"	e	enum:LineCap
LineCapSquareAnchor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LineCapSquareAnchor = 17,$/;"	e	enum:LineCap
LineCapTriangle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LineCapTriangle = 3,$/;"	e	enum:LineCap
LineJoin	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum LineJoin {$/;"	g
LineJoin	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} LineJoin;$/;"	t	typeref:enum:LineJoin
LineJoinBevel	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LineJoinBevel = 1,$/;"	e	enum:LineJoin
LineJoinMiter	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LineJoinMiter = 0,$/;"	e	enum:LineJoin
LineJoinMiterClipped	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LineJoinMiterClipped = 3$/;"	e	enum:LineJoin
LineJoinRound	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LineJoinRound = 2,$/;"	e	enum:LineJoin
LinearGradientMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum LinearGradientMode {$/;"	g
LinearGradientMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} LinearGradientMode;$/;"	t	typeref:enum:LinearGradientMode
LinearGradientModeBackwardDiagonal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LinearGradientModeBackwardDiagonal = 3 $/;"	e	enum:LinearGradientMode
LinearGradientModeForwardDiagonal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LinearGradientModeForwardDiagonal = 2,$/;"	e	enum:LinearGradientMode
LinearGradientModeHorizontal	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LinearGradientModeHorizontal = 0,$/;"	e	enum:LinearGradientMode
LinearGradientModeVertical	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	LinearGradientModeVertical = 1,$/;"	e	enum:LinearGradientMode
MatrixOrder	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum MatrixOrder {$/;"	g
MatrixOrder	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} MatrixOrder;$/;"	t	typeref:enum:MatrixOrder
MatrixOrderAppend	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	MatrixOrderAppend = 1$/;"	e	enum:MatrixOrder
MatrixOrderPrepend	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	MatrixOrderPrepend = 0,$/;"	e	enum:MatrixOrder
MetafileFrameUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum MetafileFrameUnit {$/;"	g
MetafileFrameUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} MetafileFrameUnit;$/;"	t	typeref:enum:MetafileFrameUnit
MetafileFrameUnitDocument	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	MetafileFrameUnitDocument = 5,$/;"	e	enum:MetafileFrameUnit
MetafileFrameUnitGdi	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	MetafileFrameUnitGdi = 7$/;"	e	enum:MetafileFrameUnit
MetafileFrameUnitInch	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	MetafileFrameUnitInch = 4,$/;"	e	enum:MetafileFrameUnit
MetafileFrameUnitMillimeter	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	MetafileFrameUnitMillimeter = 6,$/;"	e	enum:MetafileFrameUnit
MetafileFrameUnitPixel	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	MetafileFrameUnitPixel = 2,$/;"	e	enum:MetafileFrameUnit
MetafileFrameUnitPoint	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	MetafileFrameUnitPoint = 3,$/;"	e	enum:MetafileFrameUnit
MetafileType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum MetafileType {$/;"	g
MetafileType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} MetafileType;$/;"	t	typeref:enum:MetafileType
MetafileTypeEmf	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	MetafileTypeEmf = 3,$/;"	e	enum:MetafileType
MetafileTypeEmfPlusDual	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	MetafileTypeEmfPlusDual = 5$/;"	e	enum:MetafileType
MetafileTypeEmfPlusOnly	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	MetafileTypeEmfPlusOnly = 4,$/;"	e	enum:MetafileType
MetafileTypeInvalid	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	MetafileTypeInvalid = 0,$/;"	e	enum:MetafileType
MetafileTypeWmf	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	MetafileTypeWmf = 1,$/;"	e	enum:MetafileType
MetafileTypeWmfPlaceable	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	MetafileTypeWmfPlaceable = 2,$/;"	e	enum:MetafileType
ObjectType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum ObjectType {$/;"	g
ObjectType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} ObjectType;$/;"	t	typeref:enum:ObjectType
ObjectTypeBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	ObjectTypeBrush = 1,$/;"	e	enum:ObjectType
ObjectTypeCustomLineCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	ObjectTypeCustomLineCap = 8,$/;"	e	enum:ObjectType
ObjectTypeFont	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	ObjectTypeFont = 5,$/;"	e	enum:ObjectType
ObjectTypeGraphics	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	ObjectTypeGraphics = 9,$/;"	e	enum:ObjectType
ObjectTypeImageAttributes	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	ObjectTypeImageAttributes = 7,$/;"	e	enum:ObjectType
ObjectTypeInvalid	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	ObjectTypeInvalid = 0,$/;"	e	enum:ObjectType
ObjectTypeIsValid	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^static __inline__ BOOL ObjectTypeIsValid(ObjectType type)$/;"	f
ObjectTypeMax	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	ObjectTypeMax = ObjectTypeGraphics$/;"	e	enum:ObjectType
ObjectTypeMin	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	ObjectTypeMin = ObjectTypeBrush,$/;"	e	enum:ObjectType
ObjectTypePath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	ObjectTypePath = 3,$/;"	e	enum:ObjectType
ObjectTypePen	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	ObjectTypePen = 2,$/;"	e	enum:ObjectType
ObjectTypeRegion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	ObjectTypeRegion = 4,$/;"	e	enum:ObjectType
ObjectTypeStringFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	ObjectTypeStringFormat = 6,$/;"	e	enum:ObjectType
PathPointType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum PathPointType {$/;"	g
PathPointType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} PathPointType;$/;"	t	typeref:enum:PathPointType
PathPointTypeBezier	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PathPointTypeBezier = 0x03,$/;"	e	enum:PathPointType
PathPointTypeBezier3	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PathPointTypeBezier3 = 0x03,$/;"	e	enum:PathPointType
PathPointTypeCloseSubpath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PathPointTypeCloseSubpath = 0x80$/;"	e	enum:PathPointType
PathPointTypeLine	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PathPointTypeLine = 0x01,$/;"	e	enum:PathPointType
PathPointTypePathDashMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PathPointTypePathDashMode = 0x10,$/;"	e	enum:PathPointType
PathPointTypePathMarker	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PathPointTypePathMarker = 0x20,$/;"	e	enum:PathPointType
PathPointTypePathTypeMask	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PathPointTypePathTypeMask = 0x07,$/;"	e	enum:PathPointType
PathPointTypeStart	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PathPointTypeStart = 0x00,$/;"	e	enum:PathPointType
PenAlignment	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum PenAlignment {$/;"	g
PenAlignment	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} PenAlignment;$/;"	t	typeref:enum:PenAlignment
PenAlignmentCenter	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PenAlignmentCenter = 0,$/;"	e	enum:PenAlignment
PenAlignmentInset	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PenAlignmentInset = 1$/;"	e	enum:PenAlignment
PenType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum PenType {$/;"	g
PenType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} PenType;$/;"	t	typeref:enum:PenType
PenTypeHatchFill	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PenTypeHatchFill = 1,$/;"	e	enum:PenType
PenTypeLinearGradient	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PenTypeLinearGradient = 4$/;"	e	enum:PenType
PenTypePathGradient	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PenTypePathGradient = 3,$/;"	e	enum:PenType
PenTypeSolidColor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PenTypeSolidColor = 0,$/;"	e	enum:PenType
PenTypeTextureFill	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PenTypeTextureFill = 2,$/;"	e	enum:PenType
PenTypeUnknown	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PenTypeUnknown = -1, $/;"	e	enum:PenType
PixelOffsetMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum PixelOffsetMode {$/;"	g
PixelOffsetMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} PixelOffsetMode;$/;"	t	typeref:enum:PixelOffsetMode
PixelOffsetModeDefault	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PixelOffsetModeDefault = 0,$/;"	e	enum:PixelOffsetMode
PixelOffsetModeHalf	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PixelOffsetModeHalf = 4$/;"	e	enum:PixelOffsetMode
PixelOffsetModeHighQuality	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PixelOffsetModeHighQuality = 2,$/;"	e	enum:PixelOffsetMode
PixelOffsetModeHighSpeed	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PixelOffsetModeHighSpeed = 1,$/;"	e	enum:PixelOffsetMode
PixelOffsetModeNone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	PixelOffsetModeNone = 3,$/;"	e	enum:PixelOffsetMode
QualityMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum QualityMode {$/;"	g
QualityMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} QualityMode;$/;"	t	typeref:enum:QualityMode
QualityModeDefault	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	QualityModeDefault = 0,$/;"	e	enum:QualityMode
QualityModeHigh	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	QualityModeHigh = 2$/;"	e	enum:QualityMode
QualityModeLow	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	QualityModeLow = 1,$/;"	e	enum:QualityMode
SmoothingMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum SmoothingMode {$/;"	g
SmoothingMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} SmoothingMode;$/;"	t	typeref:enum:SmoothingMode
SmoothingModeAntiAlias	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	SmoothingModeAntiAlias = 4,$/;"	e	enum:SmoothingMode
SmoothingModeAntiAlias8x4	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	SmoothingModeAntiAlias8x4 = 4,$/;"	e	enum:SmoothingMode
SmoothingModeAntiAlias8x8	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	SmoothingModeAntiAlias8x8 = 5$/;"	e	enum:SmoothingMode
SmoothingModeDefault	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	SmoothingModeDefault = 0,$/;"	e	enum:SmoothingMode
SmoothingModeHighQuality	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	SmoothingModeHighQuality = 2,$/;"	e	enum:SmoothingMode
SmoothingModeHighSpeed	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	SmoothingModeHighSpeed = 1,$/;"	e	enum:SmoothingMode
SmoothingModeNone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	SmoothingModeNone = 3,$/;"	e	enum:SmoothingMode
StringAlignment	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum StringAlignment {$/;"	g
StringAlignment	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} StringAlignment;$/;"	t	typeref:enum:StringAlignment
StringAlignmentCenter	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringAlignmentCenter = 1,$/;"	e	enum:StringAlignment
StringAlignmentFar	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringAlignmentFar = 2$/;"	e	enum:StringAlignment
StringAlignmentNear	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringAlignmentNear = 0,$/;"	e	enum:StringAlignment
StringDigitSubstitute	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum StringDigitSubstitute {$/;"	g
StringDigitSubstitute	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} StringDigitSubstitute;$/;"	t	typeref:enum:StringDigitSubstitute
StringDigitSubstituteNational	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringDigitSubstituteNational = 2,$/;"	e	enum:StringDigitSubstitute
StringDigitSubstituteNone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringDigitSubstituteNone = 1,$/;"	e	enum:StringDigitSubstitute
StringDigitSubstituteTraditional	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringDigitSubstituteTraditional = 3$/;"	e	enum:StringDigitSubstitute
StringDigitSubstituteUser	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringDigitSubstituteUser = 0,$/;"	e	enum:StringDigitSubstitute
StringFormatFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum StringFormatFlags {$/;"	g
StringFormatFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} StringFormatFlags;$/;"	t	typeref:enum:StringFormatFlags
StringFormatFlagsDirectionRightToLeft	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringFormatFlagsDirectionRightToLeft = 0x00000001,$/;"	e	enum:StringFormatFlags
StringFormatFlagsDirectionVertical	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringFormatFlagsDirectionVertical = 0x00000002,$/;"	e	enum:StringFormatFlags
StringFormatFlagsDisplayFormatControl	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringFormatFlagsDisplayFormatControl = 0x00000020,$/;"	e	enum:StringFormatFlags
StringFormatFlagsLineLimit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringFormatFlagsLineLimit = 0x00002000,$/;"	e	enum:StringFormatFlags
StringFormatFlagsMeasureTrailingSpaces	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringFormatFlagsMeasureTrailingSpaces = 0x00000800,$/;"	e	enum:StringFormatFlags
StringFormatFlagsNoClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringFormatFlagsNoClip = 0x00004000$/;"	e	enum:StringFormatFlags
StringFormatFlagsNoFitBlackBox	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringFormatFlagsNoFitBlackBox = 0x00000004,$/;"	e	enum:StringFormatFlags
StringFormatFlagsNoFontFallback	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringFormatFlagsNoFontFallback = 0x00000400,$/;"	e	enum:StringFormatFlags
StringFormatFlagsNoWrap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringFormatFlagsNoWrap = 0x00001000,$/;"	e	enum:StringFormatFlags
StringTrimming	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum StringTrimming {$/;"	g
StringTrimming	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} StringTrimming;$/;"	t	typeref:enum:StringTrimming
StringTrimmingCharacter	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringTrimmingCharacter = 1,$/;"	e	enum:StringTrimming
StringTrimmingEllipsisCharacter	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringTrimmingEllipsisCharacter = 3,$/;"	e	enum:StringTrimming
StringTrimmingEllipsisPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringTrimmingEllipsisPath = 5$/;"	e	enum:StringTrimming
StringTrimmingEllipsisWord	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringTrimmingEllipsisWord = 4,$/;"	e	enum:StringTrimming
StringTrimmingNone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringTrimmingNone = 0,$/;"	e	enum:StringTrimming
StringTrimmingWord	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	StringTrimmingWord = 2,$/;"	e	enum:StringTrimming
TestControlForceBilinear	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	TestControlForceBilinear = 0,$/;"	e	enum:GpTestControlEnum
TestControlForceNoICM	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	TestControlForceNoICM = 1,$/;"	e	enum:GpTestControlEnum
TestControlGetBuildNumber	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	TestControlGetBuildNumber = 2$/;"	e	enum:GpTestControlEnum
TextRenderingHint	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum TextRenderingHint {$/;"	g
TextRenderingHint	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} TextRenderingHint;$/;"	t	typeref:enum:TextRenderingHint
TextRenderingHintAntiAlias	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	TextRenderingHintAntiAlias = 4,$/;"	e	enum:TextRenderingHint
TextRenderingHintAntiAliasGridFit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	TextRenderingHintAntiAliasGridFit = 3,$/;"	e	enum:TextRenderingHint
TextRenderingHintClearTypeGridFit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	TextRenderingHintClearTypeGridFit = 5$/;"	e	enum:TextRenderingHint
TextRenderingHintSingleBitPerPixel	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	TextRenderingHintSingleBitPerPixel = 2,$/;"	e	enum:TextRenderingHint
TextRenderingHintSingleBitPerPixelGridFit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	TextRenderingHintSingleBitPerPixelGridFit = 1,$/;"	e	enum:TextRenderingHint
TextRenderingHintSystemDefault	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	TextRenderingHintSystemDefault = 0,$/;"	e	enum:TextRenderingHint
Unit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum Unit {$/;"	g
Unit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} Unit;$/;"	t	typeref:enum:Unit
UnitDisplay	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	UnitDisplay = 1,$/;"	e	enum:Unit
UnitDocument	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	UnitDocument = 5,$/;"	e	enum:Unit
UnitInch	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	UnitInch = 4,$/;"	e	enum:Unit
UnitMillimeter	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	UnitMillimeter = 6$/;"	e	enum:Unit
UnitPixel	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	UnitPixel = 2,$/;"	e	enum:Unit
UnitPoint	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	UnitPoint = 3,$/;"	e	enum:Unit
UnitWorld	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	UnitWorld = 0,$/;"	e	enum:Unit
WarpMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum WarpMode {$/;"	g
WarpMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} WarpMode;$/;"	t	typeref:enum:WarpMode
WarpModeBilinear	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WarpModeBilinear = 1$/;"	e	enum:WarpMode
WarpModePerspective	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WarpModePerspective = 0,$/;"	e	enum:WarpMode
WmfRecordTypeAbortDoc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeAbortDoc                      = GDIP_WMF_RECORD_TO_EMFPLUS(0x0052),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeAnimatePalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeAnimatePalette                = GDIP_WMF_RECORD_TO_EMFPLUS(META_ANIMATEPALETTE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeArc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeArc                           = GDIP_WMF_RECORD_TO_EMFPLUS(META_ARC),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeBitBlt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeBitBlt                        = GDIP_WMF_RECORD_TO_EMFPLUS(META_BITBLT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeChord	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeChord                         = GDIP_WMF_RECORD_TO_EMFPLUS(META_CHORD),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateBitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeCreateBitmap                  = GDIP_WMF_RECORD_TO_EMFPLUS(0x06FE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateBitmapIndirect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeCreateBitmapIndirect          = GDIP_WMF_RECORD_TO_EMFPLUS(0x02FD),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeCreateBrush                   = GDIP_WMF_RECORD_TO_EMFPLUS(0x00F8),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateBrushIndirect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeCreateBrushIndirect           = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEBRUSHINDIRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateFontIndirect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeCreateFontIndirect            = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEFONTINDIRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreatePalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeCreatePalette                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEPALETTE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreatePatternBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeCreatePatternBrush            = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEPATTERNBRUSH),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreatePenIndirect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeCreatePenIndirect             = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEPENINDIRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateRegion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeCreateRegion                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeDIBBitBlt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeDIBBitBlt                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_DIBBITBLT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeDIBCreatePatternBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeDIBCreatePatternBrush         = GDIP_WMF_RECORD_TO_EMFPLUS(META_DIBCREATEPATTERNBRUSH),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeDIBStretchBlt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeDIBStretchBlt                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_DIBSTRETCHBLT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeDeleteObject	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeDeleteObject                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_DELETEOBJECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeDrawText	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeDrawText                      = GDIP_WMF_RECORD_TO_EMFPLUS(0x062F),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeEllipse	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeEllipse                       = GDIP_WMF_RECORD_TO_EMFPLUS(META_ELLIPSE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeEndDoc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeEndDoc                        = GDIP_WMF_RECORD_TO_EMFPLUS(0x005E),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeEndPage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeEndPage                       = GDIP_WMF_RECORD_TO_EMFPLUS(0x0050),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeEscape	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeEscape                        = GDIP_WMF_RECORD_TO_EMFPLUS(META_ESCAPE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeExcludeClipRect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeExcludeClipRect               = GDIP_WMF_RECORD_TO_EMFPLUS(META_EXCLUDECLIPRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeExtFloodFill	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeExtFloodFill                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_EXTFLOODFILL),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeExtTextOut	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeExtTextOut                    = GDIP_WMF_RECORD_TO_EMFPLUS(META_EXTTEXTOUT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeFillRegion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeFillRegion                    = GDIP_WMF_RECORD_TO_EMFPLUS(META_FILLREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeFloodFill	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeFloodFill                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_FLOODFILL),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeFrameRegion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeFrameRegion                   = GDIP_WMF_RECORD_TO_EMFPLUS(META_FRAMEREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeIntersectClipRect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeIntersectClipRect             = GDIP_WMF_RECORD_TO_EMFPLUS(META_INTERSECTCLIPRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeInvertRegion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeInvertRegion                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_INVERTREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeLineTo	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeLineTo                        = GDIP_WMF_RECORD_TO_EMFPLUS(META_LINETO),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeMoveTo	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeMoveTo                        = GDIP_WMF_RECORD_TO_EMFPLUS(META_MOVETO),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeOffsetClipRgn	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeOffsetClipRgn                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_OFFSETCLIPRGN),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeOffsetViewportOrg	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeOffsetViewportOrg             = GDIP_WMF_RECORD_TO_EMFPLUS(META_OFFSETVIEWPORTORG),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeOffsetWindowOrg	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeOffsetWindowOrg               = GDIP_WMF_RECORD_TO_EMFPLUS(META_OFFSETWINDOWORG),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePaintRegion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypePaintRegion                   = GDIP_WMF_RECORD_TO_EMFPLUS(META_PAINTREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePatBlt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypePatBlt                        = GDIP_WMF_RECORD_TO_EMFPLUS(META_PATBLT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePie	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypePie                           = GDIP_WMF_RECORD_TO_EMFPLUS(META_PIE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePolyPolygon	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypePolyPolygon                   = GDIP_WMF_RECORD_TO_EMFPLUS(META_POLYPOLYGON),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePolygon	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypePolygon                       = GDIP_WMF_RECORD_TO_EMFPLUS(META_POLYGON),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePolyline	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypePolyline                      = GDIP_WMF_RECORD_TO_EMFPLUS(META_POLYLINE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeRealizePalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeRealizePalette                = GDIP_WMF_RECORD_TO_EMFPLUS(META_REALIZEPALETTE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeRectangle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeRectangle                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_RECTANGLE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeResetDC	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeResetDC                       = GDIP_WMF_RECORD_TO_EMFPLUS(0x014C),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeResizePalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeResizePalette                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_RESIZEPALETTE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeRestoreDC	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeRestoreDC                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_RESTOREDC),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeRoundRect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeRoundRect                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_ROUNDRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSaveDC	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSaveDC                        = GDIP_WMF_RECORD_TO_EMFPLUS(META_SAVEDC),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeScaleViewportExt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeScaleViewportExt              = GDIP_WMF_RECORD_TO_EMFPLUS(META_SCALEVIEWPORTEXT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeScaleWindowExt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeScaleWindowExt                = GDIP_WMF_RECORD_TO_EMFPLUS(META_SCALEWINDOWEXT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSelectClipRegion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSelectClipRegion              = GDIP_WMF_RECORD_TO_EMFPLUS(META_SELECTCLIPREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSelectObject	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSelectObject                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_SELECTOBJECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSelectPalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSelectPalette                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_SELECTPALETTE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetBkColor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetBkColor                    = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETBKCOLOR),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetBkMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetBkMode                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETBKMODE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetDIBToDev	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetDIBToDev                   = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETDIBTODEV),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetLayout	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetLayout                     = GDIP_WMF_RECORD_TO_EMFPLUS(0x0149),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetMapMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetMapMode                    = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETMAPMODE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetMapperFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetMapperFlags                = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETMAPPERFLAGS),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetPalEntries	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetPalEntries                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETPALENTRIES),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetPixel	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetPixel                      = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETPIXEL),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetPolyFillMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetPolyFillMode               = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETPOLYFILLMODE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetROP2	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetROP2                       = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETROP2),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetRelAbs	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetRelAbs                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETRELABS),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetStretchBltMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetStretchBltMode             = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETSTRETCHBLTMODE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetTextAlign	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetTextAlign                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETTEXTALIGN),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetTextCharExtra	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetTextCharExtra              = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETTEXTCHAREXTRA),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetTextColor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetTextColor                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETTEXTCOLOR),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetTextJustification	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetTextJustification          = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETTEXTJUSTIFICATION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetViewportExt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetViewportExt                = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETVIEWPORTEXT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetViewportOrg	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetViewportOrg                = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETVIEWPORTORG),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetWindowExt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetWindowExt                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETWINDOWEXT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetWindowOrg	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeSetWindowOrg                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETWINDOWORG),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeStartDoc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeStartDoc                      = GDIP_WMF_RECORD_TO_EMFPLUS(0x014D),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeStartPage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeStartPage                     = GDIP_WMF_RECORD_TO_EMFPLUS(0x004F),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeStretchBlt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeStretchBlt                    = GDIP_WMF_RECORD_TO_EMFPLUS(META_STRETCHBLT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeStretchDIB	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeStretchDIB                    = GDIP_WMF_RECORD_TO_EMFPLUS(META_STRETCHDIB),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeTextOut	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WmfRecordTypeTextOut                       = GDIP_WMF_RECORD_TO_EMFPLUS(META_TEXTOUT),$/;"	e	enum:EmfPlusRecordType
WrapMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^typedef enum WrapMode {$/;"	g
WrapMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^} WrapMode;$/;"	t	typeref:enum:WrapMode
WrapModeClamp	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WrapModeClamp = 4$/;"	e	enum:WrapMode
WrapModeTile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WrapModeTile = 0,$/;"	e	enum:WrapMode
WrapModeTileFlipX	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WrapModeTileFlipX = 1,$/;"	e	enum:WrapMode
WrapModeTileFlipXY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WrapModeTileFlipXY = 3,$/;"	e	enum:WrapMode
WrapModeTileFlipY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	/^	WrapModeTileFlipY = 2,$/;"	e	enum:WrapMode
__GDIPLUS_ENUMS_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusenums.h	24;"	d
DllExports	C++\ege-13.04.02-full\src\gdiplus4\gdiplusflat.h	/^namespace DllExports {$/;"	n
__GDIPLUS_FLAT_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusflat.h	24;"	d
CGpEffect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class CGpEffect {}; $/;"	c
CGpEffect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void CGpEffect;$/;"	t
GpAdjustableArrowCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpAdjustableArrowCap: public GpCustomLineCap {};$/;"	c
GpAdjustableArrowCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpAdjustableArrowCap;$/;"	t
GpBitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpBitmap: public GpImage {};$/;"	c
GpBitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpBitmap;$/;"	t
GpBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpBrush {};$/;"	c
GpBrush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpBrush;$/;"	t
GpBrushType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum BrushType GpBrushType;$/;"	t	typeref:enum:BrushType
GpCachedBitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpCachedBitmap {};$/;"	c
GpCachedBitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpCachedBitmap;$/;"	t
GpCombineMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum CombineMode GpCombineMode;$/;"	t	typeref:enum:CombineMode
GpCompositingMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum CompositingMode GpCompositingMode;$/;"	t	typeref:enum:CompositingMode
GpCompositingQuality	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum CompositingQuality GpCompositingQuality;$/;"	t	typeref:enum:CompositingQuality
GpCoordinateSpace	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum CoordinateSpace GpCoordinateSpace;$/;"	t	typeref:enum:CoordinateSpace
GpCustomLineCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpCustomLineCap {};$/;"	c
GpCustomLineCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpCustomLineCap;$/;"	t
GpCustomLineCapType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum CustomLineCapType GpCustomLineCapType;$/;"	t	typeref:enum:CustomLineCapType
GpDashCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum DashCap GpDashCap;$/;"	t	typeref:enum:DashCap
GpDashStyle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum DashStyle GpDashStyle;$/;"	t	typeref:enum:DashStyle
GpDitherType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum DitherType GpDitherType;$/;"	t	typeref:enum:DitherType
GpDriverStringOptions	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum DriverStringOptions GpDriverStringOptions;$/;"	t	typeref:enum:DriverStringOptions
GpEmfPlusRecordType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum EmfPlusRecordType GpEmfPlusRecordType;$/;"	t	typeref:enum:EmfPlusRecordType
GpEmfToWmfBitsFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum EmfToWmfBitsFlags GpEmfToWmfBitsFlags;$/;"	t	typeref:enum:EmfToWmfBitsFlags
GpEmfType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum EmfType GpEmfType;$/;"	t	typeref:enum:EmfType
GpEncoderParameterValueType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum EncoderParameterValueType GpEncoderParameterValueType;$/;"	t	typeref:enum:EncoderParameterValueType
GpEncoderValue	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum EncoderValue GpEncoderValue;$/;"	t	typeref:enum:EncoderValue
GpFillMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum FillMode GpFillMode;$/;"	t	typeref:enum:FillMode
GpFlushIntention	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum FlushIntention GpFlushIntention;$/;"	t	typeref:enum:FlushIntention
GpFont	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpFont {};$/;"	c
GpFont	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpFont;$/;"	t
GpFontCollection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpFontCollection {};$/;"	c
GpFontCollection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpFontCollection;$/;"	t
GpFontFamily	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpFontFamily {};$/;"	c
GpFontFamily	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpFontFamily;$/;"	t
GpFontStyle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum FontStyle GpFontStyle;$/;"	t	typeref:enum:FontStyle
GpGraphics	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpGraphics {};$/;"	c
GpGraphics	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpGraphics;$/;"	t
GpHatch	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpHatch: public GpBrush {};         \/* HatchBrush *\/$/;"	c
GpHatch	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpHatch;$/;"	t
GpHatchStyle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum HatchStyle GpHatchStyle;$/;"	t	typeref:enum:HatchStyle
GpHotkeyPrefix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum HotkeyPrefix GpHotkeyPrefix;$/;"	t	typeref:enum:HotkeyPrefix
GpImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpImage {};$/;"	c
GpImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpImage;$/;"	t
GpImageAttributes	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpImageAttributes {};$/;"	c
GpImageAttributes	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpImageAttributes;$/;"	t
GpImageType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum ImageType GpImageType;$/;"	t	typeref:enum:ImageType
GpInterpolationMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum InterpolationMode GpInterpolationMode;$/;"	t	typeref:enum:InterpolationMode
GpLineCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum LineCap GpLineCap;$/;"	t	typeref:enum:LineCap
GpLineGradient	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpLineGradient: public GpBrush {};  \/* LinearGradientBrush *\/$/;"	c
GpLineGradient	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpLineGradient;$/;"	t
GpLineJoin	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum LineJoin GpLineJoin;$/;"	t	typeref:enum:LineJoin
GpLinearGradientMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum LinearGradientMode GpLinearGradientMode;$/;"	t	typeref:enum:LinearGradientMode
GpMatrix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpMatrix {};$/;"	c
GpMatrix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpMatrix;$/;"	t
GpMatrixOrder	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum MatrixOrder GpMatrixOrder;$/;"	t	typeref:enum:MatrixOrder
GpMetafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpMetafile: public GpImage {};$/;"	c
GpMetafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpMetafile;$/;"	t
GpMetafileFrameUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum MetafileFrameUnit GpMetafileFrameUnit;$/;"	t	typeref:enum:MetafileFrameUnit
GpMetafileType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum MetafileType GpMetafileType;$/;"	t	typeref:enum:MetafileType
GpObjectType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum ObjectType GpObjectType;$/;"	t	typeref:enum:ObjectType
GpPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpPath {};                          \/* GraphicsPath *\/$/;"	c
GpPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpPath;$/;"	t
GpPathData	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpPathData {};$/;"	c
GpPathData	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpPathData;$/;"	t
GpPathGradient	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpPathGradient: public GpBrush {};  \/* PathGradientBrush *\/$/;"	c
GpPathGradient	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpPathGradient;$/;"	t
GpPathIterator	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpPathIterator {};                  \/* GraphicsPathIterator *\/$/;"	c
GpPathIterator	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpPathIterator;$/;"	t
GpPathPointType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum PathPointType GpPathPointType;$/;"	t	typeref:enum:PathPointType
GpPen	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpPen {};$/;"	c
GpPen	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpPen;$/;"	t
GpPenAlignment	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum PenAlignment GpPenAlignment;$/;"	t	typeref:enum:PenAlignment
GpPenType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum PenType GpPenType;$/;"	t	typeref:enum:PenType
GpPixelOffsetMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum PixelOffsetMode GpPixelOffsetMode;$/;"	t	typeref:enum:PixelOffsetMode
GpPoint	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef Point GpPoint;$/;"	t
GpPointF	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef PointF GpPointF;$/;"	t
GpQualityMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum QualityMode GpQualityMode;$/;"	t	typeref:enum:QualityMode
GpRect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef Rect GpRect;$/;"	t
GpRectF	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef RectF GpRectF;$/;"	t
GpRegion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpRegion {};$/;"	c
GpRegion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpRegion;$/;"	t
GpSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef Size GpSize;$/;"	t
GpSizeF	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef SizeF GpSizeF;$/;"	t
GpSmoothingMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum SmoothingMode GpSmoothingMode;$/;"	t	typeref:enum:SmoothingMode
GpSolidFill	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpSolidFill: public GpBrush {};     \/* SolidBrush *\/$/;"	c
GpSolidFill	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpSolidFill;$/;"	t
GpStringAlignment	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum StringAlignment GpStringAlignment;$/;"	t	typeref:enum:StringAlignment
GpStringDigitSubstitute	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum StringDigitSubstitute GpStringDigitSubstitute;$/;"	t	typeref:enum:StringDigitSubstitute
GpStringFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpStringFormat {};$/;"	c
GpStringFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpStringFormat;$/;"	t
GpStringFormatFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum StringFormatFlags GpStringFormatFlags;$/;"	t	typeref:enum:StringFormatFlags
GpStringTrimming	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum StringTrimming GpStringTrimming;$/;"	t	typeref:enum:StringTrimming
GpTextRenderingHint	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum TextRenderingHint GpTextRenderingHint;$/;"	t	typeref:enum:TextRenderingHint
GpTexture	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^class GpTexture: public GpBrush {};       \/* TextureBrush *\/$/;"	c
GpTexture	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef void GpTexture;$/;"	t
GpUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum Unit GpUnit;$/;"	t	typeref:enum:Unit
GpWarpMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum WarpMode GpWarpMode;$/;"	t	typeref:enum:WarpMode
GpWrapMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	/^typedef enum WrapMode GpWrapMode;$/;"	t	typeref:enum:WrapMode
__GDIPLUS_GPSTUBS_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgpstubs.h	24;"	d
AddMetafileComment	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status AddMetafileComment(const BYTE *data, UINT sizeData)$/;"	f	class:Graphics
BeginContainer	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	GraphicsContainer BeginContainer()$/;"	f	class:Graphics
BeginContainer	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	GraphicsContainer BeginContainer(const Rect& dstrect,$/;"	f	class:Graphics
BeginContainer	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	GraphicsContainer BeginContainer(const RectF& dstrect,$/;"	f	class:Graphics
Clear	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status Clear(const Color& color)$/;"	f	class:Graphics
DrawArc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawArc(const Pen *pen, INT x, INT y, INT width, INT height,$/;"	f	class:Graphics
DrawArc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawArc(const Pen *pen, REAL x, REAL y, REAL width, REAL height,$/;"	f	class:Graphics
DrawArc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawArc(const Pen *pen, const Rect& rect,$/;"	f	class:Graphics
DrawArc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawArc(const Pen *pen, const RectF& rect,$/;"	f	class:Graphics
DrawBezier	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawBezier(const Pen *pen,$/;"	f	class:Graphics
DrawBeziers	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawBeziers(const Pen *pen, const Point *points, INT count)$/;"	f	class:Graphics
DrawBeziers	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawBeziers(const Pen *pen, const PointF *points, INT count)$/;"	f	class:Graphics
DrawCachedBitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawCachedBitmap(CachedBitmap *cb, INT x, INT y)$/;"	f	class:Graphics
DrawClosedCurve	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawClosedCurve(const Pen *pen, const Point *points, INT count)$/;"	f	class:Graphics
DrawClosedCurve	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawClosedCurve(const Pen *pen, const Point *points, INT count,$/;"	f	class:Graphics
DrawClosedCurve	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawClosedCurve(const Pen *pen, const PointF *points, INT count)$/;"	f	class:Graphics
DrawClosedCurve	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawClosedCurve(const Pen *pen, const PointF *points, INT count,$/;"	f	class:Graphics
DrawCurve	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawCurve(const Pen *pen, const Point *points, INT count)$/;"	f	class:Graphics
DrawCurve	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawCurve(const Pen *pen, const Point *points, INT count,$/;"	f	class:Graphics
DrawCurve	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawCurve(const Pen *pen, const PointF *points, INT count)$/;"	f	class:Graphics
DrawCurve	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawCurve(const Pen *pen, const PointF *points, INT count,$/;"	f	class:Graphics
DrawDriverString	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawDriverString(const UINT16 *text, INT length,$/;"	f	class:Graphics
DrawEllipse	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawEllipse(const Pen *pen, INT x, INT y, INT width, INT height)$/;"	f	class:Graphics
DrawEllipse	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawEllipse(const Pen *pen, const Rect& rect)$/;"	f	class:Graphics
DrawEllipse	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawEllipse(const Pen *pen, const RectF& rect)$/;"	f	class:Graphics
DrawEllipse	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawEllipse(const Pen *pen,$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, INT x, INT y)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, INT x, INT y, INT srcx, INT srcy,$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, INT x, INT y, INT width, INT height)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, REAL x, REAL y)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, REAL x, REAL y, REAL srcx, REAL srcy,$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, REAL x, REAL y, REAL width, REAL height)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const Point *destPoints, INT count)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const Point *destPoints, INT count,$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const Point& point)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const PointF *destPoints, INT count)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const PointF *destPoints, INT count,$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const PointF& point)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const Rect& destRect,$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const Rect& rect)$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const RectF& destRect,$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const RectF& rect)$/;"	f	class:Graphics
DrawLine	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawLine(const Pen *pen, INT x1, INT y1, INT x2, INT y2)$/;"	f	class:Graphics
DrawLine	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawLine(const Pen *pen, REAL x1, REAL y1, REAL x2, REAL y2)$/;"	f	class:Graphics
DrawLine	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawLine(const Pen *pen, const Point& pt1, const Point& pt2)$/;"	f	class:Graphics
DrawLine	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawLine(const Pen *pen, const PointF& pt1, const PointF& pt2)$/;"	f	class:Graphics
DrawLines	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawLines(const Pen *pen, const Point *points, INT count)$/;"	f	class:Graphics
DrawLines	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawLines(const Pen *pen, const PointF *points, INT count)$/;"	f	class:Graphics
DrawPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawPath(const Pen *pen, const GraphicsPath *path)$/;"	f	class:Graphics
DrawPie	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawPie(const Pen *pen, INT x, INT y, INT width, INT height,$/;"	f	class:Graphics
DrawPie	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawPie(const Pen *pen, REAL x, REAL y, REAL width, REAL height,$/;"	f	class:Graphics
DrawPie	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawPie(const Pen *pen, const Rect& rect,$/;"	f	class:Graphics
DrawPie	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawPie(const Pen *pen, const RectF& rect,$/;"	f	class:Graphics
DrawPolygon	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawPolygon(const Pen *pen, const Point *points, INT count)$/;"	f	class:Graphics
DrawPolygon	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawPolygon(const Pen *pen, const PointF *points, INT count)$/;"	f	class:Graphics
DrawRectangle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawRectangle(const Pen *pen, const Rect& rect)$/;"	f	class:Graphics
DrawRectangle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawRectangle(const Pen *pen, const RectF& rect)$/;"	f	class:Graphics
DrawRectangle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawRectangle(const Pen *pen,$/;"	f	class:Graphics
DrawRectangles	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawRectangles(const Pen *pen, const Rect *rects, INT count)$/;"	f	class:Graphics
DrawRectangles	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawRectangles(const Pen *pen, const RectF *rects, INT count)$/;"	f	class:Graphics
DrawString	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawString(const WCHAR *string, INT length, const Font *font,$/;"	f	class:Graphics
DrawString	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status DrawString(const WCHAR *string, INT length,$/;"	f	class:Graphics
EndContainer	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status EndContainer(GraphicsContainer state)$/;"	f	class:Graphics
EnumerateMetafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status EnumerateMetafile(const Metafile *metafile,$/;"	f	class:Graphics
ExcludeClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status ExcludeClip(const Rect& rect)$/;"	f	class:Graphics
ExcludeClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status ExcludeClip(const RectF& rect)$/;"	f	class:Graphics
ExcludeClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status ExcludeClip(const Region *region)$/;"	f	class:Graphics
FillClosedCurve	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillClosedCurve(const Brush *brush,$/;"	f	class:Graphics
FillEllipse	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillEllipse(const Brush *brush, const Rect& rect)$/;"	f	class:Graphics
FillEllipse	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillEllipse(const Brush *brush, const RectF& rect)$/;"	f	class:Graphics
FillEllipse	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillEllipse(const Brush *brush,$/;"	f	class:Graphics
FillPath	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillPath(const Brush *brush, const GraphicsPath *path)$/;"	f	class:Graphics
FillPie	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillPie(const Brush *brush, INT x, INT y, INT width, INT height,$/;"	f	class:Graphics
FillPie	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillPie(const Brush *brush, const Rect& rect,$/;"	f	class:Graphics
FillPie	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillPie(const Brush *brush, const RectF& rect,$/;"	f	class:Graphics
FillPie	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillPie(const Brush *brush,$/;"	f	class:Graphics
FillPolygon	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillPolygon(const Brush *brush, const Point *points, INT count)$/;"	f	class:Graphics
FillPolygon	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillPolygon(const Brush *brush, const Point *points, INT count,$/;"	f	class:Graphics
FillPolygon	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillPolygon(const Brush *brush, const PointF *points, INT count)$/;"	f	class:Graphics
FillPolygon	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillPolygon(const Brush *brush, const PointF *points, INT count,$/;"	f	class:Graphics
FillRectangle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillRectangle(const Brush *brush, const Rect& rect)$/;"	f	class:Graphics
FillRectangle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillRectangle(const Brush *brush, const RectF& rect)$/;"	f	class:Graphics
FillRectangle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillRectangle(const Brush *brush,$/;"	f	class:Graphics
FillRectangles	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillRectangles(const Brush *brush, const Rect *rects, INT count)$/;"	f	class:Graphics
FillRectangles	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillRectangles(const Brush *brush, const RectF *rects, INT count)$/;"	f	class:Graphics
FillRegion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status FillRegion(const Brush *brush, const Region *region)$/;"	f	class:Graphics
Flush	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	VOID Flush(FlushIntention intention = FlushIntentionFlush)$/;"	f	class:Graphics
FromHDC	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	static Graphics* FromHDC(HDC hdc)$/;"	f	class:Graphics
FromHDC	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	static Graphics* FromHDC(HDC hdc, HANDLE hdevice)$/;"	f	class:Graphics
FromHWND	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	static Graphics* FromHWND(HWND hwnd, BOOL icm = FALSE)$/;"	f	class:Graphics
FromImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	static Graphics* FromImage(Image *image)$/;"	f	class:Graphics
GetClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status GetClip(Region *region) const$/;"	f	class:Graphics
GetClipBounds	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status GetClipBounds(Rect *rect) const$/;"	f	class:Graphics
GetClipBounds	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status GetClipBounds(RectF *rect) const$/;"	f	class:Graphics
GetCompositingMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	CompositingMode GetCompositingMode() const$/;"	f	class:Graphics
GetCompositingQuality	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	CompositingQuality GetCompositingQuality() const$/;"	f	class:Graphics
GetDpiX	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	REAL GetDpiX() const$/;"	f	class:Graphics
GetDpiY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	REAL GetDpiY() const$/;"	f	class:Graphics
GetHDC	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	HDC GetHDC()$/;"	f	class:Graphics
GetHalftonePalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	static HPALETTE GetHalftonePalette()$/;"	f	class:Graphics
GetInterpolationMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	InterpolationMode GetInterpolationMode() const$/;"	f	class:Graphics
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status GetLastStatus() const$/;"	f	class:Graphics
GetNearestColor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status GetNearestColor(Color *color) const$/;"	f	class:Graphics
GetPageScale	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	REAL GetPageScale() const$/;"	f	class:Graphics
GetPageUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Unit GetPageUnit() const$/;"	f	class:Graphics
GetPixelOffsetMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	PixelOffsetMode GetPixelOffsetMode() const$/;"	f	class:Graphics
GetRenderingOrigin	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status GetRenderingOrigin(INT *x, INT *y) const$/;"	f	class:Graphics
GetSmoothingMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	SmoothingMode GetSmoothingMode() const$/;"	f	class:Graphics
GetTextContrast	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	UINT GetTextContrast() const$/;"	f	class:Graphics
GetTextRenderingHint	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	TextRenderingHint GetTextRenderingHint() const$/;"	f	class:Graphics
GetTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status GetTransform(Matrix *matrix) const$/;"	f	class:Graphics
GetVisibleClipBounds	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status GetVisibleClipBounds(Rect *rect) const$/;"	f	class:Graphics
GetVisibleClipBounds	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status GetVisibleClipBounds(RectF *rect) const$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Graphics(HDC hdc): nativeGraphics(NULL), lastStatus(Ok)$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Graphics(HDC hdc, HANDLE hdevice): nativeGraphics(NULL), lastStatus(Ok)$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Graphics(HWND hwnd, BOOL icm = FALSE):$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Graphics(Image *image): nativeGraphics(NULL), lastStatus(Ok)$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^class Graphics: public GdiplusBase$/;"	c
IntersectClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status IntersectClip(const Rect& rect)$/;"	f	class:Graphics
IntersectClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status IntersectClip(const RectF& rect)$/;"	f	class:Graphics
IntersectClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status IntersectClip(const Region *region)$/;"	f	class:Graphics
IsClipEmpty	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	BOOL IsClipEmpty() const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	BOOL IsVisible(INT x, INT y) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	BOOL IsVisible(INT x, INT y, INT width, INT height) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	BOOL IsVisible(REAL x, REAL y) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	BOOL IsVisible(REAL x, REAL y, REAL width, REAL height) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	BOOL IsVisible(const Point& point) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	BOOL IsVisible(const PointF& point) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	BOOL IsVisible(const Rect& rect) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	BOOL IsVisible(const RectF& rect) const$/;"	f	class:Graphics
IsVisibleClipEmpty	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	BOOL IsVisibleClipEmpty() const$/;"	f	class:Graphics
MeasureCharacterRanges	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status MeasureCharacterRanges(const WCHAR *string, INT length,$/;"	f	class:Graphics
MeasureDriverString	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status MeasureDriverString(const UINT16 *text, INT length,$/;"	f	class:Graphics
MeasureString	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status MeasureString(const WCHAR *string, INT length,$/;"	f	class:Graphics
MultiplyTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status MultiplyTransform(const Matrix *matrix,$/;"	f	class:Graphics
ReleaseHDC	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	VOID ReleaseHDC(HDC hdc)$/;"	f	class:Graphics
ResetClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status ResetClip()$/;"	f	class:Graphics
ResetTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status ResetTransform()$/;"	f	class:Graphics
Restore	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status Restore(GraphicsState state)$/;"	f	class:Graphics
RotateTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status RotateTransform(REAL angle,$/;"	f	class:Graphics
Save	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	GraphicsState Save() const$/;"	f	class:Graphics
ScaleTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status ScaleTransform(REAL sx, REAL sy,$/;"	f	class:Graphics
SetAbort	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	VOID SetAbort()$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetClip(HRGN hRgn, CombineMode combineMode = CombineModeReplace)$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetClip(const Graphics *g,$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetClip(const GraphicsPath *path,$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetClip(const Rect& rect,$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetClip(const RectF& rect,$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetClip(const Region *region,$/;"	f	class:Graphics
SetCompositingMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetCompositingMode(CompositingMode compositingMode)$/;"	f	class:Graphics
SetCompositingQuality	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetCompositingQuality(CompositingQuality compositingQuality)$/;"	f	class:Graphics
SetInterpolationMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetInterpolationMode(InterpolationMode interpolationMode)$/;"	f	class:Graphics
SetPageScale	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetPageScale(REAL scale)$/;"	f	class:Graphics
SetPageUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetPageUnit(Unit unit)$/;"	f	class:Graphics
SetPixelOffsetMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetPixelOffsetMode(PixelOffsetMode pixelOffsetMode)$/;"	f	class:Graphics
SetRenderingOrigin	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetRenderingOrigin(INT x, INT y)$/;"	f	class:Graphics
SetSmoothingMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetSmoothingMode(SmoothingMode smoothingMode)$/;"	f	class:Graphics
SetTextContrast	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetTextContrast(UINT contrast)$/;"	f	class:Graphics
SetTextRenderingHint	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetTextRenderingHint(TextRenderingHint textRenderingHint)$/;"	f	class:Graphics
SetTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status SetTransform(const Matrix *matrix)$/;"	f	class:Graphics
TransformPoints	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status TransformPoints(CoordinateSpace destSpace,$/;"	f	class:Graphics
TranslateClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status TranslateClip(INT dx, INT dy)$/;"	f	class:Graphics
TranslateClip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status TranslateClip(REAL dx, REAL dy)$/;"	f	class:Graphics
TranslateTransform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status TranslateTransform(REAL dx, REAL dy,$/;"	f	class:Graphics
__GDIPLUS_GRAPHICS_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	24;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	mutable Status lastStatus;$/;"	m	class:Graphics
nativeGraphics	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	GpGraphics *nativeGraphics;$/;"	m	class:Graphics
updateStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Graphics
~Graphics	C++\ege-13.04.02-full\src\gdiplus4\gdiplusgraphics.h	/^	~Graphics()$/;"	f	class:Graphics
Bitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Bitmap(GpImage *image, Status status): Image(image, status) {}$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^class Bitmap: public Image$/;"	c
CachedBitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^class CachedBitmap: public GdiplusBase$/;"	c
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	virtual Bitmap* Clone() const$/;"	f	class:Bitmap
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	virtual CustomLineCap* Clone() const$/;"	f	class:CustomLineCap
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	virtual Image* Clone() const$/;"	f	class:Image
CustomLineCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	CustomLineCap(GpCustomLineCap *customLineCap, Status status):$/;"	f	class:CustomLineCap
CustomLineCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^class CustomLineCap: public GdiplusBase$/;"	c
Font	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Font(GpFont *font, Status status):$/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^class Font: public GdiplusBase$/;"	c
FontCollection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^class FontCollection: public GdiplusBase$/;"	c
FontFamily	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	FontFamily(GpFontFamily *fontFamily, Status status):$/;"	f	class:FontFamily
FontFamily	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^class FontFamily: public GdiplusBase$/;"	c
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:CachedBitmap
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:CustomLineCap
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:Font
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:FontCollection
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:FontFamily
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:Image
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:Region
Image	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Image(GpImage *image, Status status):$/;"	f	class:Image
Image	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^class Image: public GdiplusBase$/;"	c
InstalledFontCollection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^class InstalledFontCollection: public FontCollection$/;"	c
IsAvailable	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	BOOL IsAvailable() const$/;"	f	class:Font
IsAvailable	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	BOOL IsAvailable() const$/;"	f	class:FontFamily
PrivateFontCollection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^class PrivateFontCollection: public FontCollection$/;"	c
Region	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Region(GpRegion *region, Status status):$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^class Region: public GdiplusBase$/;"	c
__GDIPLUS_HEADERS_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	27;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Status lastStatus;$/;"	m	class:CachedBitmap
lastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	mutable Status lastStatus;$/;"	m	class:CustomLineCap
lastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	mutable Status lastStatus;$/;"	m	class:Font
lastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	mutable Status lastStatus;$/;"	m	class:FontCollection
lastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	mutable Status lastStatus;$/;"	m	class:FontFamily
lastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	mutable Status lastStatus;$/;"	m	class:Image
lastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	mutable Status lastStatus;$/;"	m	class:Region
nativeCachedBitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	GpCachedBitmap *nativeCachedBitmap;$/;"	m	class:CachedBitmap
nativeCustomLineCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	GpCustomLineCap *nativeCustomLineCap;$/;"	m	class:CustomLineCap
nativeFont	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	GpFont *nativeFont;$/;"	m	class:Font
nativeFontCollection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	GpFontCollection *nativeFontCollection;$/;"	m	class:FontCollection
nativeFontFamily	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	GpFontFamily *nativeFontFamily;$/;"	m	class:FontFamily
nativeImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	GpImage *nativeImage;$/;"	m	class:Image
nativeRegion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	GpRegion *nativeRegion;$/;"	m	class:Region
updateStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:CustomLineCap
updateStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Font
updateStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:FontCollection
updateStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:FontFamily
updateStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Image
updateStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Region
~Bitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	virtual ~Bitmap()$/;"	f	class:Bitmap
~CustomLineCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	virtual ~CustomLineCap()$/;"	f	class:CustomLineCap
~FontCollection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	virtual ~FontCollection() {}$/;"	f	class:FontCollection
~Image	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	virtual ~Image()$/;"	f	class:Image
~InstalledFontCollection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	virtual ~InstalledFontCollection() {}$/;"	f	class:InstalledFontCollection
~PrivateFontCollection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusheaders.h	/^	virtual ~PrivateFontCollection()$/;"	f	class:PrivateFontCollection
ClearBrushRemapTable	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status ClearBrushRemapTable()$/;"	f	class:ImageAttributes
ClearColorKey	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status ClearColorKey(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearColorMatrices	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status ClearColorMatrices(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearColorMatrix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status ClearColorMatrix(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearGamma	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status ClearGamma(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearNoOp	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status ClearNoOp(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearOutputChannel	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status ClearOutputChannel(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearOutputChannelColorProfile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status ClearOutputChannelColorProfile($/;"	f	class:ImageAttributes
ClearRemapTable	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status ClearRemapTable(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearThreshold	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status ClearThreshold(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	ImageAttributes* Clone() const$/;"	f	class:ImageAttributes
GetAdjustedPalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status GetAdjustedPalette(ColorPalette *colorPalette,$/;"	f	class:ImageAttributes
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status GetLastStatus() const$/;"	f	class:ImageAttributes
ImageAttributes	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	ImageAttributes(): nativeImageAttributes(NULL), lastStatus(Ok)$/;"	f	class:ImageAttributes
ImageAttributes	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	ImageAttributes(GpImageAttributes *imageAttributes, Status status):$/;"	f	class:ImageAttributes
ImageAttributes	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^class ImageAttributes: public GdiplusBase$/;"	c
Reset	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status Reset(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
SetBrushRemapTable	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status SetBrushRemapTable(UINT mapSize, ColorMap *map)$/;"	f	class:ImageAttributes
SetColorKey	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status SetColorKey(const Color& colorLow, const Color& colorHigh,$/;"	f	class:ImageAttributes
SetColorMatrices	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status SetColorMatrices(const ColorMatrix *colorMatrix,$/;"	f	class:ImageAttributes
SetColorMatrix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status SetColorMatrix(const ColorMatrix *colorMatrix,$/;"	f	class:ImageAttributes
SetGamma	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status SetGamma(REAL gamma,$/;"	f	class:ImageAttributes
SetNoOp	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status SetNoOp(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
SetOutputChannel	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status SetOutputChannel(ColorChannelFlags channelFlags,$/;"	f	class:ImageAttributes
SetOutputChannelColorProfile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status SetOutputChannelColorProfile(const WCHAR *colorProfileFilename,$/;"	f	class:ImageAttributes
SetRemapTable	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status SetRemapTable(UINT mapSize, const ColorMap *map,$/;"	f	class:ImageAttributes
SetThreshold	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status SetThreshold(REAL threshold,$/;"	f	class:ImageAttributes
SetToIdentity	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status SetToIdentity(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
SetWrapMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status SetWrapMode(WrapMode wrap, const Color& color = Color(),$/;"	f	class:ImageAttributes
__GDIPLUS_IMAGEATTRIBUTES_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	24;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	mutable Status lastStatus;$/;"	m	class:ImageAttributes
nativeImageAttributes	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	GpImageAttributes *nativeImageAttributes;$/;"	m	class:ImageAttributes
updateStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:ImageAttributes
~ImageAttributes	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimageattributes.h	/^	~ImageAttributes()$/;"	f	class:ImageAttributes
GetImageDecoders	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimagecodec.h	/^static __inline__ GpStatus GetImageDecoders(UINT numDecoders, UINT size,$/;"	f
GetImageDecodersSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimagecodec.h	/^static __inline__ GpStatus GetImageDecodersSize(UINT *numDecoders, UINT *size)$/;"	f
GetImageEncoders	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimagecodec.h	/^static __inline__ GpStatus GetImageEncoders(UINT numEncoders, UINT size,$/;"	f
GetImageEncodersSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimagecodec.h	/^static __inline__ GpStatus GetImageEncodersSize(UINT *numEncoders, UINT *size)$/;"	f
__GDIPLUS_IMAGECODEC_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimagecodec.h	24;"	d
BitmapData	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^typedef struct BitmapData {$/;"	s
BitmapData	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^} BitmapData;$/;"	t	typeref:struct:BitmapData
Clsid	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	CLSID Clsid;$/;"	m	struct:ImageCodecInfo
CodecName	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	WCHAR *CodecName;$/;"	m	struct:ImageCodecInfo
Cookie	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	UINT Cookie;$/;"	m	struct:ImageItemData
Count	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	UINT Count;$/;"	m	struct:EncoderParameters
Data	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	UINT *Data;$/;"	m	struct:ImageItemData
DataSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	UINT DataSize;$/;"	m	struct:ImageItemData
Desc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	VOID *Desc;$/;"	m	struct:ImageItemData
DescSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	UINT DescSize;$/;"	m	struct:ImageItemData
DllName	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	WCHAR *DllName;$/;"	m	struct:ImageCodecInfo
EncoderParameter	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^typedef struct EncoderParameter {$/;"	s
EncoderParameter	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^} EncoderParameter;$/;"	t	typeref:struct:EncoderParameter
EncoderParameters	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^typedef struct EncoderParameters {$/;"	s
EncoderParameters	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^} EncoderParameters;$/;"	t	typeref:struct:EncoderParameters
FilenameExtension	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	WCHAR *FilenameExtension;$/;"	m	struct:ImageCodecInfo
Flags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	DWORD Flags;$/;"	m	struct:ImageCodecInfo
FormatDescription	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	WCHAR *FormatDescription;$/;"	m	struct:ImageCodecInfo
FormatID	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	GUID FormatID;$/;"	m	struct:ImageCodecInfo
Guid	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	GUID Guid;$/;"	m	struct:EncoderParameter
Height	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	UINT Height;$/;"	m	struct:BitmapData
ImageCodecFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^typedef enum ImageCodecFlags {$/;"	g
ImageCodecFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^} ImageCodecFlags;$/;"	t	typeref:enum:ImageCodecFlags
ImageCodecFlagsBlockingDecode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageCodecFlagsBlockingDecode = 0x00000020,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsBuiltin	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageCodecFlagsBuiltin = 0x00010000,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsDecoder	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageCodecFlagsDecoder = 0x00000002,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsEncoder	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageCodecFlagsEncoder = 0x00000001,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsSeekableEncode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageCodecFlagsSeekableEncode = 0x00000010,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsSupportBitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageCodecFlagsSupportBitmap = 0x00000004,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsSupportVector	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageCodecFlagsSupportVector = 0x00000008,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsSystem	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageCodecFlagsSystem = 0x00020000,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsUser	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageCodecFlagsUser = 0x00040000$/;"	e	enum:ImageCodecFlags
ImageCodecInfo	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^typedef struct ImageCodecInfo {$/;"	s
ImageCodecInfo	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^} ImageCodecInfo;$/;"	t	typeref:struct:ImageCodecInfo
ImageFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^typedef enum ImageFlags {$/;"	g
ImageFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^} ImageFlags;$/;"	t	typeref:enum:ImageFlags
ImageFlagsCaching	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageFlagsCaching = 0x00020000$/;"	e	enum:ImageFlags
ImageFlagsColorSpaceCMYK	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageFlagsColorSpaceCMYK = 0x00000020,$/;"	e	enum:ImageFlags
ImageFlagsColorSpaceGRAY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageFlagsColorSpaceGRAY = 0x00000040,$/;"	e	enum:ImageFlags
ImageFlagsColorSpaceRGB	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageFlagsColorSpaceRGB = 0x00000010,$/;"	e	enum:ImageFlags
ImageFlagsColorSpaceYCBCR	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageFlagsColorSpaceYCBCR = 0x00000080,$/;"	e	enum:ImageFlags
ImageFlagsColorSpaceYCCK	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageFlagsColorSpaceYCCK = 0x00000100,$/;"	e	enum:ImageFlags
ImageFlagsHasAlpha	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageFlagsHasAlpha = 0x00000002,$/;"	e	enum:ImageFlags
ImageFlagsHasRealDPI	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageFlagsHasRealDPI = 0x00001000,$/;"	e	enum:ImageFlags
ImageFlagsHasRealPixelSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageFlagsHasRealPixelSize = 0x00002000,$/;"	e	enum:ImageFlags
ImageFlagsHasTranslucent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageFlagsHasTranslucent = 0x00000004,$/;"	e	enum:ImageFlags
ImageFlagsNone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageFlagsNone = 0,$/;"	e	enum:ImageFlags
ImageFlagsPartiallyScalable	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageFlagsPartiallyScalable = 0x00000008,$/;"	e	enum:ImageFlags
ImageFlagsReadOnly	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageFlagsReadOnly = 0x00010000,$/;"	e	enum:ImageFlags
ImageFlagsScalable	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageFlagsScalable = 0x00000001,$/;"	e	enum:ImageFlags
ImageItemData	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^typedef struct ImageItemData {$/;"	s
ImageItemData	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^} ImageItemData;$/;"	t	typeref:struct:ImageItemData
ImageLockMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^typedef enum ImageLockMode {$/;"	g
ImageLockMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^} ImageLockMode;$/;"	t	typeref:enum:ImageLockMode
ImageLockModeRead	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageLockModeRead = 1,$/;"	e	enum:ImageLockMode
ImageLockModeUserInputBuf	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageLockModeUserInputBuf = 4$/;"	e	enum:ImageLockMode
ImageLockModeWrite	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ImageLockModeWrite = 2,$/;"	e	enum:ImageLockMode
ItemDataPosition	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^typedef enum ItemDataPosition {$/;"	g
ItemDataPosition	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^} ItemDataPosition;$/;"	t	typeref:enum:ItemDataPosition
ItemDataPositionAfterBits	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ItemDataPositionAfterBits = 2$/;"	e	enum:ItemDataPosition
ItemDataPositionAfterHeader	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ItemDataPositionAfterHeader = 0,$/;"	e	enum:ItemDataPosition
ItemDataPositionAfterPalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ItemDataPositionAfterPalette = 1,$/;"	e	enum:ItemDataPosition
MimeType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	WCHAR *MimeType;$/;"	m	struct:ImageCodecInfo
NumberOfValues	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ULONG NumberOfValues;$/;"	m	struct:EncoderParameter
Parameter	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	EncoderParameter Parameter[1];$/;"	m	struct:EncoderParameters
PixelFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	INT PixelFormat;  \/* MSDN: "PixelFormat PixelFormat;" *\/$/;"	m	struct:BitmapData
Position	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	UINT Position;$/;"	m	struct:ImageItemData
PropertyItem	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^typedef struct PropertyItem {$/;"	s
PropertyItem	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^} PropertyItem;$/;"	t	typeref:struct:PropertyItem
PropertyTagArtist	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	212;"	d
PropertyTagBitsPerSample	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	177;"	d
PropertyTagCellHeight	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	182;"	d
PropertyTagCellWidth	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	181;"	d
PropertyTagChrominanceTable	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	306;"	d
PropertyTagColorMap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	217;"	d
PropertyTagColorTransferFunction	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	275;"	d
PropertyTagCompression	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	178;"	d
PropertyTagCopyright	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	316;"	d
PropertyTagDateTime	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	211;"	d
PropertyTagDocumentName	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	184;"	d
PropertyTagDotRange	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	226;"	d
PropertyTagEquipMake	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	186;"	d
PropertyTagEquipModel	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	187;"	d
PropertyTagExifAperture	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	332;"	d
PropertyTagExifBrightness	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	333;"	d
PropertyTagExifCfaPattern	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	362;"	d
PropertyTagExifColorSpace	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	347;"	d
PropertyTagExifCompBPP	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	330;"	d
PropertyTagExifCompConfig	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	329;"	d
PropertyTagExifDTDigSS	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	345;"	d
PropertyTagExifDTDigitized	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	328;"	d
PropertyTagExifDTOrig	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	327;"	d
PropertyTagExifDTOrigSS	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	344;"	d
PropertyTagExifDTSubsec	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	343;"	d
PropertyTagExifExposureBias	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	334;"	d
PropertyTagExifExposureIndex	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	358;"	d
PropertyTagExifExposureProg	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	321;"	d
PropertyTagExifExposureTime	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	317;"	d
PropertyTagExifFNumber	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	318;"	d
PropertyTagExifFPXVer	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	346;"	d
PropertyTagExifFileSource	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	360;"	d
PropertyTagExifFlash	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	339;"	d
PropertyTagExifFlashEnergy	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	352;"	d
PropertyTagExifFocalLength	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	340;"	d
PropertyTagExifFocalResUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	356;"	d
PropertyTagExifFocalXRes	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	354;"	d
PropertyTagExifFocalYRes	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	355;"	d
PropertyTagExifIFD	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	319;"	d
PropertyTagExifISOSpeed	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	324;"	d
PropertyTagExifInterop	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	351;"	d
PropertyTagExifLightSource	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	338;"	d
PropertyTagExifMakerNote	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	341;"	d
PropertyTagExifMaxAperture	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	335;"	d
PropertyTagExifMeteringMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	337;"	d
PropertyTagExifOECF	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	325;"	d
PropertyTagExifPixXDim	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	348;"	d
PropertyTagExifPixYDim	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	349;"	d
PropertyTagExifRelatedWav	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	350;"	d
PropertyTagExifSceneType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	361;"	d
PropertyTagExifSensingMethod	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	359;"	d
PropertyTagExifShutterSpeed	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	331;"	d
PropertyTagExifSpatialFR	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	353;"	d
PropertyTagExifSpectralSense	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	322;"	d
PropertyTagExifSubjectDist	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	336;"	d
PropertyTagExifSubjectLoc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	357;"	d
PropertyTagExifUserComment	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	342;"	d
PropertyTagExifVer	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	326;"	d
PropertyTagExtraSamples	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	228;"	d
PropertyTagFillOrder	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	183;"	d
PropertyTagFrameDelay	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	307;"	d
PropertyTagFreeByteCounts	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	202;"	d
PropertyTagFreeOffset	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	201;"	d
PropertyTagGamma	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	246;"	d
PropertyTagGlobalPalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	309;"	d
PropertyTagGpsAltitude	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	152;"	d
PropertyTagGpsAltitudeRef	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	151;"	d
PropertyTagGpsDestBear	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	170;"	d
PropertyTagGpsDestBearRef	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	169;"	d
PropertyTagGpsDestDist	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	172;"	d
PropertyTagGpsDestDistRef	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	171;"	d
PropertyTagGpsDestLat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	166;"	d
PropertyTagGpsDestLatRef	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	165;"	d
PropertyTagGpsDestLong	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	168;"	d
PropertyTagGpsDestLongRef	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	167;"	d
PropertyTagGpsGpsDop	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	157;"	d
PropertyTagGpsGpsMeasureMode	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	156;"	d
PropertyTagGpsGpsSatellites	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	154;"	d
PropertyTagGpsGpsStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	155;"	d
PropertyTagGpsGpsTime	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	153;"	d
PropertyTagGpsIFD	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	323;"	d
PropertyTagGpsImgDir	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	163;"	d
PropertyTagGpsImgDirRef	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	162;"	d
PropertyTagGpsLatitude	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	148;"	d
PropertyTagGpsLatitudeRef	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	147;"	d
PropertyTagGpsLongitude	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	150;"	d
PropertyTagGpsLongitudeRef	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	149;"	d
PropertyTagGpsMapDatum	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	164;"	d
PropertyTagGpsSpeed	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	159;"	d
PropertyTagGpsSpeedRef	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	158;"	d
PropertyTagGpsTrack	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	161;"	d
PropertyTagGpsTrackRef	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	160;"	d
PropertyTagGpsVer	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	146;"	d
PropertyTagGrayResponseCurve	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	204;"	d
PropertyTagGrayResponseUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	203;"	d
PropertyTagGridSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	266;"	d
PropertyTagHalftoneDegree	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	261;"	d
PropertyTagHalftoneHints	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	218;"	d
PropertyTagHalftoneLPI	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	259;"	d
PropertyTagHalftoneLPIUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	260;"	d
PropertyTagHalftoneMisc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	263;"	d
PropertyTagHalftoneScreen	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	264;"	d
PropertyTagHalftoneShape	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	262;"	d
PropertyTagHostComputer	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	213;"	d
PropertyTagICCProfile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	320;"	d
PropertyTagICCProfileDescriptor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	247;"	d
PropertyTagImageDescription	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	185;"	d
PropertyTagImageHeight	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	176;"	d
PropertyTagImageTitle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	249;"	d
PropertyTagImageWidth	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	175;"	d
PropertyTagIndexBackground	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	310;"	d
PropertyTagIndexTransparent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	311;"	d
PropertyTagInkNames	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	224;"	d
PropertyTagInkSet	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	223;"	d
PropertyTagJPEGACTables	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	241;"	d
PropertyTagJPEGDCTables	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	240;"	d
PropertyTagJPEGInterFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	234;"	d
PropertyTagJPEGInterLength	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	235;"	d
PropertyTagJPEGLosslessPredictors	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	237;"	d
PropertyTagJPEGPointTransforms	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	238;"	d
PropertyTagJPEGProc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	233;"	d
PropertyTagJPEGQTables	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	239;"	d
PropertyTagJPEGQuality	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	265;"	d
PropertyTagJPEGRestartInterval	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	236;"	d
PropertyTagLoopCount	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	308;"	d
PropertyTagLuminanceTable	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	305;"	d
PropertyTagMaxSampleValue	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	194;"	d
PropertyTagMinSampleValue	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	193;"	d
PropertyTagNewSubfileType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	173;"	d
PropertyTagNumberOfInks	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	225;"	d
PropertyTagOrientation	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	189;"	d
PropertyTagPageName	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	198;"	d
PropertyTagPageNumber	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	208;"	d
PropertyTagPaletteHistogram	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	315;"	d
PropertyTagPhotometricInterp	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	179;"	d
PropertyTagPixelPerUnitX	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	313;"	d
PropertyTagPixelPerUnitY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	314;"	d
PropertyTagPixelUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	312;"	d
PropertyTagPlanarConfig	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	197;"	d
PropertyTagPredictor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	214;"	d
PropertyTagPrimaryChromaticities	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	216;"	d
PropertyTagPrintFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	254;"	d
PropertyTagPrintFlagsBleedWidth	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	257;"	d
PropertyTagPrintFlagsBleedWidthScale	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	258;"	d
PropertyTagPrintFlagsCrop	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	256;"	d
PropertyTagPrintFlagsVersion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	255;"	d
PropertyTagREFBlackWhite	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	245;"	d
PropertyTagResolutionUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	207;"	d
PropertyTagResolutionXLengthUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	252;"	d
PropertyTagResolutionXUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	250;"	d
PropertyTagResolutionYLengthUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	253;"	d
PropertyTagResolutionYUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	251;"	d
PropertyTagRowsPerStrip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	191;"	d
PropertyTagSMaxSampleValue	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	231;"	d
PropertyTagSMinSampleValue	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	230;"	d
PropertyTagSRGBRenderingIntent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	248;"	d
PropertyTagSampleFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	229;"	d
PropertyTagSamplesPerPixel	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	190;"	d
PropertyTagSoftwareUsed	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	210;"	d
PropertyTagStripBytesCount	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	192;"	d
PropertyTagStripOffsets	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	188;"	d
PropertyTagSubfileType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	174;"	d
PropertyTagT4Option	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	205;"	d
PropertyTagT6Option	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	206;"	d
PropertyTagTargetPrinter	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	227;"	d
PropertyTagThreshHolding	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	180;"	d
PropertyTagThumbnailArtist	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	297;"	d
PropertyTagThumbnailBitsPerSample	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	279;"	d
PropertyTagThumbnailColorDepth	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	270;"	d
PropertyTagThumbnailCompressedSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	274;"	d
PropertyTagThumbnailCompression	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	280;"	d
PropertyTagThumbnailCopyRight	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	304;"	d
PropertyTagThumbnailData	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	276;"	d
PropertyTagThumbnailDateTime	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	296;"	d
PropertyTagThumbnailEquipMake	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	283;"	d
PropertyTagThumbnailEquipModel	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	284;"	d
PropertyTagThumbnailFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	267;"	d
PropertyTagThumbnailHeight	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	269;"	d
PropertyTagThumbnailImageDescription	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	282;"	d
PropertyTagThumbnailImageHeight	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	278;"	d
PropertyTagThumbnailImageWidth	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	277;"	d
PropertyTagThumbnailOrientation	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	286;"	d
PropertyTagThumbnailPhotometricInterp	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	281;"	d
PropertyTagThumbnailPlanarConfig	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	292;"	d
PropertyTagThumbnailPlanes	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	271;"	d
PropertyTagThumbnailPrimaryChromaticities	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	299;"	d
PropertyTagThumbnailRawBytes	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	272;"	d
PropertyTagThumbnailRefBlackWhite	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	303;"	d
PropertyTagThumbnailResolutionUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	293;"	d
PropertyTagThumbnailResolutionX	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	290;"	d
PropertyTagThumbnailResolutionY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	291;"	d
PropertyTagThumbnailRowsPerStrip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	288;"	d
PropertyTagThumbnailSamplesPerPixel	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	287;"	d
PropertyTagThumbnailSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	273;"	d
PropertyTagThumbnailSoftwareUsed	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	295;"	d
PropertyTagThumbnailStripBytesCount	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	289;"	d
PropertyTagThumbnailStripOffsets	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	285;"	d
PropertyTagThumbnailTransferFunction	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	294;"	d
PropertyTagThumbnailWhitePoint	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	298;"	d
PropertyTagThumbnailWidth	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	268;"	d
PropertyTagThumbnailYCbCrCoefficients	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	300;"	d
PropertyTagThumbnailYCbCrPositioning	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	302;"	d
PropertyTagThumbnailYCbCrSubsampling	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	301;"	d
PropertyTagTileByteCounts	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	222;"	d
PropertyTagTileLength	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	220;"	d
PropertyTagTileOffset	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	221;"	d
PropertyTagTileWidth	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	219;"	d
PropertyTagTransferFunction	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	209;"	d
PropertyTagTransferRange	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	232;"	d
PropertyTagTypeASCII	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	365;"	d
PropertyTagTypeByte	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	364;"	d
PropertyTagTypeLong	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	367;"	d
PropertyTagTypeRational	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	368;"	d
PropertyTagTypeSLONG	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	370;"	d
PropertyTagTypeSRational	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	371;"	d
PropertyTagTypeShort	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	366;"	d
PropertyTagTypeUndefined	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	369;"	d
PropertyTagWhitePoint	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	215;"	d
PropertyTagXPosition	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	199;"	d
PropertyTagXResolution	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	195;"	d
PropertyTagYCbCrCoefficients	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	242;"	d
PropertyTagYCbCrPositioning	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	244;"	d
PropertyTagYCbCrSubsampling	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	243;"	d
PropertyTagYPosition	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	200;"	d
PropertyTagYResolution	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	196;"	d
Reserved	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	UINT_PTR Reserved;$/;"	m	struct:BitmapData
Rotate180FlipNone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	Rotate180FlipNone = 2,$/;"	e	enum:RotateFlipType
Rotate180FlipX	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	Rotate180FlipX = 6,$/;"	e	enum:RotateFlipType
Rotate180FlipXY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	Rotate180FlipXY = 0,$/;"	e	enum:RotateFlipType
Rotate180FlipY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	Rotate180FlipY = 4,$/;"	e	enum:RotateFlipType
Rotate270FlipNone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	Rotate270FlipNone = 3,$/;"	e	enum:RotateFlipType
Rotate270FlipX	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	Rotate270FlipX = 7,$/;"	e	enum:RotateFlipType
Rotate270FlipXY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	Rotate270FlipXY = 1, $/;"	e	enum:RotateFlipType
Rotate270FlipY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	Rotate270FlipY = 5,$/;"	e	enum:RotateFlipType
Rotate90FlipNone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	Rotate90FlipNone = 1,$/;"	e	enum:RotateFlipType
Rotate90FlipX	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	Rotate90FlipX = 5,$/;"	e	enum:RotateFlipType
Rotate90FlipXY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	Rotate90FlipXY = 3,$/;"	e	enum:RotateFlipType
Rotate90FlipY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	Rotate90FlipY = 7$/;"	e	enum:RotateFlipType
RotateFlipType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^typedef enum RotateFlipType {$/;"	g
RotateFlipType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^} RotateFlipType;$/;"	t	typeref:enum:RotateFlipType
RotateNoneFlipNone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	RotateNoneFlipNone = 0,$/;"	e	enum:RotateFlipType
RotateNoneFlipX	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	RotateNoneFlipX = 4,$/;"	e	enum:RotateFlipType
RotateNoneFlipXY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	RotateNoneFlipXY = 2,$/;"	e	enum:RotateFlipType
RotateNoneFlipY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	RotateNoneFlipY = 6,$/;"	e	enum:RotateFlipType
Scan0	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	VOID *Scan0;$/;"	m	struct:BitmapData
SigCount	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	DWORD SigCount;$/;"	m	struct:ImageCodecInfo
SigMask	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	BYTE *SigMask;$/;"	m	struct:ImageCodecInfo
SigPattern	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	BYTE *SigPattern;$/;"	m	struct:ImageCodecInfo
SigSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	DWORD SigSize;$/;"	m	struct:ImageCodecInfo
Size	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	UINT Size;$/;"	m	struct:ImageItemData
Stride	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	INT Stride;$/;"	m	struct:BitmapData
Type	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ULONG Type;$/;"	m	struct:EncoderParameter
Value	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	VOID *Value;$/;"	m	struct:EncoderParameter
Version	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	DWORD Version;$/;"	m	struct:ImageCodecInfo
Width	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	UINT Width;$/;"	m	struct:BitmapData
__GDIPLUS_IMAGING_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	24;"	d
id	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	PROPID id;$/;"	m	struct:PropertyItem
length	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	ULONG length;$/;"	m	struct:PropertyItem
type	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	WORD type;$/;"	m	struct:PropertyItem
value	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimaging.h	/^	VOID *value;$/;"	m	struct:PropertyItem
AddFontFile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status PrivateFontCollection::AddFontFile(const WCHAR *filename)$/;"	f	class:PrivateFontCollection
AddMemoryFont	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status PrivateFontCollection::AddMemoryFont($/;"	f	class:PrivateFontCollection
AllocateArrays	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status PathData::AllocateArrays(INT capacity)$/;"	f	class:PathData
Bitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(HBITMAP hbm, HPALETTE hpal):$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(HICON hicon):$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(HINSTANCE hInstance, const WCHAR *bitmapName):$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(IDirectDrawSurface7 *surface): Image(NULL, Ok)$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(INT width, INT height, Graphics *target):$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(INT width, INT height, INT stride,$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(INT width, INT height, PixelFormat format):$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(IStream *stream, BOOL useEmbeddedColorManagement):$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(const BITMAPINFO *gdiBitmapInfo, VOID *gdiBitmapData):$/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(const WCHAR *filename,$/;"	f	class:Bitmap
CachedBitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ CachedBitmap::CachedBitmap(Bitmap *bitmap, Graphics *graphics):$/;"	f	class:CachedBitmap
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::Clone(INT x, INT y, INT width, INT height,$/;"	f	class:Bitmap
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::Clone(REAL x, REAL y, REAL width, REAL height,$/;"	f	class:Bitmap
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::Clone(const Rect& rect, PixelFormat format) const$/;"	f	class:Bitmap
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::Clone(const RectF& rect, PixelFormat format) const$/;"	f	class:Bitmap
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Font* Font::Clone() const$/;"	f	class:Font
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ FontFamily* FontFamily::Clone() const$/;"	f	class:FontFamily
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Region* Region::Clone() const$/;"	f	class:Region
Complement	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Complement(const GraphicsPath *path)$/;"	f	class:Region
Complement	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Complement(const Rect& rect)$/;"	f	class:Region
Complement	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Complement(const RectF& rect)$/;"	f	class:Region
Complement	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Complement(const Region *region)$/;"	f	class:Region
ConvertFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Bitmap::ConvertFormat(PixelFormat format,$/;"	f	class:Bitmap
CustomLineCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ CustomLineCap::CustomLineCap($/;"	f	class:CustomLineCap
Equals	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL Region::Equals(const Region *region, const Graphics *graphics)$/;"	f	class:Region
Exclude	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Exclude(const GraphicsPath *path)$/;"	f	class:Region
Exclude	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Exclude(const Rect& rect)$/;"	f	class:Region
Exclude	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Exclude(const RectF& rect)$/;"	f	class:Region
Exclude	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Exclude(const Region *region)$/;"	f	class:Region
FindFirstItem	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::FindFirstItem(ImageItemData *item)$/;"	f	class:Image
FindNextItem	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::FindNextItem(ImageItemData *item)$/;"	f	class:Image
Font	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Font::Font(HDC hdc):$/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Font::Font(HDC hdc, HFONT hfont):$/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Font::Font(HDC hdc, const LOGFONTA *logfont):$/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Font::Font(HDC hdc, const LOGFONTW *logfont):$/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Font::Font(const FontFamily *family,$/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Font::Font(const WCHAR *familyName, REAL emSize, INT style,$/;"	f	class:Font
FontCollection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ FontCollection::FontCollection():$/;"	f	class:FontCollection
FontFamily	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ FontFamily::FontFamily():$/;"	f	class:FontFamily
FontFamily	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ FontFamily::FontFamily(const WCHAR *name,$/;"	f	class:FontFamily
FreeArrays	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ VOID PathData::FreeArrays()$/;"	f	class:PathData
FromBITMAPINFO	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromBITMAPINFO(const BITMAPINFO *gdiBitmapInfo,$/;"	f	class:Bitmap
FromDirectDrawSurface7	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromDirectDrawSurface7(IDirectDrawSurface7 *surface)$/;"	f	class:Bitmap
FromFile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromFile(const WCHAR *filename,$/;"	f	class:Bitmap
FromFile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Image* Image::FromFile(const WCHAR *filename,$/;"	f	class:Image
FromHBITMAP	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromHBITMAP(HBITMAP hbm, HPALETTE hpal)$/;"	f	class:Bitmap
FromHICON	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromHICON(HICON icon)$/;"	f	class:Bitmap
FromHRGN	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Region* Region::FromHRGN(HRGN hrgn)$/;"	f	class:Region
FromResource	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromResource($/;"	f	class:Bitmap
FromStream	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromStream(IStream *stream,$/;"	f	class:Bitmap
FromStream	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Image* Image::FromStream(IStream *stream,$/;"	f	class:Image
GenericMonospace	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ const FontFamily* FontFamily::GenericMonospace()$/;"	f	class:FontFamily
GenericSansSerif	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ const FontFamily* FontFamily::GenericSansSerif()$/;"	f	class:FontFamily
GenericSerif	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ const FontFamily* FontFamily::GenericSerif()$/;"	f	class:FontFamily
GetAllPropertyItems	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::GetAllPropertyItems(UINT totalBufferSize,$/;"	f	class:Image
GetBaseCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ LineCap CustomLineCap::GetBaseCap() const$/;"	f	class:CustomLineCap
GetBaseInset	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ REAL CustomLineCap::GetBaseInset() const$/;"	f	class:CustomLineCap
GetBounds	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::GetBounds(RectF *srcRect, Unit *srcUnit)$/;"	f	class:Image
GetBounds	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::GetBounds(Rect *rect, const Graphics *graphics) const$/;"	f	class:Region
GetBounds	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::GetBounds(RectF *rect, const Graphics *graphics) const$/;"	f	class:Region
GetCellAscent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ UINT16 FontFamily::GetCellAscent(INT style) const$/;"	f	class:FontFamily
GetCellDescent	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ UINT16 FontFamily::GetCellDescent(INT style) const$/;"	f	class:FontFamily
GetData	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::GetData(BYTE *buffer, UINT bufferSize,$/;"	f	class:Region
GetDataSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ UINT Region::GetDataSize() const$/;"	f	class:Region
GetEmHeight	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ UINT16 FontFamily::GetEmHeight(INT style) const$/;"	f	class:FontFamily
GetEncoderParameterList	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::GetEncoderParameterList(const CLSID *clsidEncoder,$/;"	f	class:Image
GetEncoderParameterListSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ UINT Image::GetEncoderParameterListSize(const CLSID *clsidEncoder)$/;"	f	class:Image
GetFamilies	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status FontCollection::GetFamilies(INT numSought,$/;"	f	class:FontCollection
GetFamily	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Font::GetFamily(FontFamily *family) const$/;"	f	class:Font
GetFamilyCount	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ INT FontCollection::GetFamilyCount() const$/;"	f	class:FontCollection
GetFamilyName	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status FontFamily::GetFamilyName(WCHAR name[LF_FACESIZE],$/;"	f	class:FontFamily
GetFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ UINT Image::GetFlags()$/;"	f	class:Image
GetFrameCount	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ UINT Image::GetFrameCount(const GUID *dimensionID)$/;"	f	class:Image
GetFrameDimensionsCount	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ UINT Image::GetFrameDimensionsCount()$/;"	f	class:Image
GetFrameDimensionsList	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::GetFrameDimensionsList(GUID *dimensionIDs, UINT count)$/;"	f	class:Image
GetHBITMAP	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Bitmap::GetHBITMAP($/;"	f	class:Bitmap
GetHICON	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Bitmap::GetHICON(HICON *icon) const$/;"	f	class:Bitmap
GetHRGN	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ HRGN Region::GetHRGN(const Graphics *graphics) const$/;"	f	class:Region
GetHeight	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ REAL Font::GetHeight(REAL dpi) const$/;"	f	class:Font
GetHeight	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ REAL Font::GetHeight(const Graphics *graphics) const$/;"	f	class:Font
GetHeight	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ UINT Image::GetHeight()$/;"	f	class:Image
GetHistogram	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Bitmap::GetHistogram(HistogramFormat format,$/;"	f	class:Bitmap
GetHistogramSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Bitmap::GetHistogramSize(HistogramFormat format,$/;"	f	class:Bitmap
GetHorizontalResolution	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ REAL Image::GetHorizontalResolution()$/;"	f	class:Image
GetItemData	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::GetItemData(ImageItemData *item)$/;"	f	class:Image
GetLineSpacing	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ UINT16 FontFamily::GetLineSpacing(INT style) const$/;"	f	class:FontFamily
GetLogFontA	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Font::GetLogFontA(const Graphics *graphics, LOGFONTA *logfontA)$/;"	f	class:Font
GetLogFontW	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Font::GetLogFontW(const Graphics *graphics, LOGFONTW *logfontW)$/;"	f	class:Font
GetPalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::GetPalette(ColorPalette *palette, INT size)$/;"	f	class:Image
GetPaletteSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ INT Image::GetPaletteSize()$/;"	f	class:Image
GetPhysicalDimension	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::GetPhysicalDimension(SizeF *size)$/;"	f	class:Image
GetPixel	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Bitmap::GetPixel(INT x, INT y, Color *color) const$/;"	f	class:Bitmap
GetPixelFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ PixelFormat Image::GetPixelFormat()$/;"	f	class:Image
GetPropertyCount	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ UINT Image::GetPropertyCount()$/;"	f	class:Image
GetPropertyIdList	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::GetPropertyIdList(UINT numOfProperty, PROPID *list)$/;"	f	class:Image
GetPropertyItem	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::GetPropertyItem(PROPID propId, UINT propSize,$/;"	f	class:Image
GetPropertyItemSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ UINT Image::GetPropertyItemSize(PROPID propId)$/;"	f	class:Image
GetPropertySize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::GetPropertySize($/;"	f	class:Image
GetRawFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::GetRawFormat(GUID *format)$/;"	f	class:Image
GetRegionScans	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::GetRegionScans(const Matrix *matrix,$/;"	f	class:Region
GetRegionScansCount	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ UINT Region::GetRegionScansCount(const Matrix *matrix) const$/;"	f	class:Region
GetSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ REAL Font::GetSize() const$/;"	f	class:Font
GetStrokeCaps	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status CustomLineCap::GetStrokeCaps(LineCap *startCap,$/;"	f	class:CustomLineCap
GetStrokeJoin	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ LineJoin CustomLineCap::GetStrokeJoin() const$/;"	f	class:CustomLineCap
GetStyle	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ INT Font::GetStyle() const$/;"	f	class:Font
GetThumbnailImage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Image* Image::GetThumbnailImage(UINT thumbWidth, UINT thumbHeight,$/;"	f	class:Image
GetType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ ImageType Image::GetType() const$/;"	f	class:Image
GetUnit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Unit Font::GetUnit() const$/;"	f	class:Font
GetVerticalResolution	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ REAL Image::GetVerticalResolution()$/;"	f	class:Image
GetWidth	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ UINT Image::GetWidth()$/;"	f	class:Image
GetWidthScale	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ REAL CustomLineCap::GetWidthScale() const$/;"	f	class:CustomLineCap
Image	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Image::Image(IStream *stream, BOOL useEmbeddedColorManagement):$/;"	f	class:Image
Image	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Image::Image(const WCHAR *filename, BOOL useEmbeddedColorManagement):$/;"	f	class:Image
InitializePalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Bitmap::InitializePalette(ColorPalette *palette,$/;"	f	class:Bitmap
InstalledFontCollection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ InstalledFontCollection::InstalledFontCollection()$/;"	f	class:InstalledFontCollection
Intersect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Intersect(const GraphicsPath *path)$/;"	f	class:Region
Intersect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Intersect(const Rect& rect)$/;"	f	class:Region
Intersect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Intersect(const RectF& rect)$/;"	f	class:Region
Intersect	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Intersect(const Region *region)$/;"	f	class:Region
IsEmpty	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL Region::IsEmpty(const Graphics *graphics) const$/;"	f	class:Region
IsInfinite	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL Region::IsInfinite(const Graphics *graphics) const$/;"	f	class:Region
IsOutlineVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsOutlineVisible(INT x, INT y, const Pen *pen,$/;"	f	class:GraphicsPath
IsOutlineVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsOutlineVisible(REAL x, REAL y, const Pen *pen,$/;"	f	class:GraphicsPath
IsOutlineVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsOutlineVisible(const Point& point, const Pen *pen,$/;"	f	class:GraphicsPath
IsOutlineVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsOutlineVisible(const PointF& point, const Pen *pen,$/;"	f	class:GraphicsPath
IsStyleAvailable	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL FontFamily::IsStyleAvailable(INT style) const$/;"	f	class:FontFamily
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsVisible(INT x, INT y, const Graphics *g) const$/;"	f	class:GraphicsPath
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsVisible(REAL x, REAL y, const Graphics *g) const$/;"	f	class:GraphicsPath
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsVisible(const Point& point, const Graphics *g) const$/;"	f	class:GraphicsPath
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsVisible(const PointF& point,$/;"	f	class:GraphicsPath
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(INT x, INT y, INT width, INT height,$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(INT x, INT y,$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(REAL x, REAL y, REAL width, REAL height,$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(REAL x, REAL y,$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(const Point& point,$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(const PointF& point,$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(const Rect& rect,$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(const RectF& rect,$/;"	f	class:Region
LockBits	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Bitmap::LockBits(const Rect *rect, UINT flags,$/;"	f	class:Bitmap
MakeEmpty	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::MakeEmpty()$/;"	f	class:Region
MakeInfinite	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::MakeInfinite()$/;"	f	class:Region
PrivateFontCollection	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ PrivateFontCollection::PrivateFontCollection()$/;"	f	class:PrivateFontCollection
Region	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Region::Region(): nativeRegion(NULL), lastStatus(Ok)$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Region::Region(HRGN hrgn): nativeRegion(NULL), lastStatus(Ok)$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Region::Region(const BYTE *regionData, INT size):$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Region::Region(const GraphicsPath *path):$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Region::Region(const Rect& rect): nativeRegion(NULL), lastStatus(Ok)$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Region::Region(const RectF& rect): nativeRegion(NULL), lastStatus(Ok)$/;"	f	class:Region
RemovePropertyItem	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::RemovePropertyItem(PROPID propId)$/;"	f	class:Image
RotateFlip	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::RotateFlip(RotateFlipType rotateFlipType)$/;"	f	class:Image
Save	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::Save(IStream *stream, const CLSID *clsidEncoder,$/;"	f	class:Image
Save	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::Save(const WCHAR *filename, const CLSID *clsidEncoder,$/;"	f	class:Image
SaveAdd	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::SaveAdd(Image *newImage,$/;"	f	class:Image
SaveAdd	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::SaveAdd(const EncoderParameters *encoderParams)$/;"	f	class:Image
SelectActiveFrame	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::SelectActiveFrame($/;"	f	class:Image
SetAbort	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::SetAbort(GdiplusAbort *pIAbort)$/;"	f	class:Image
SetBaseCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetBaseCap(LineCap baseCap)$/;"	f	class:CustomLineCap
SetBaseInset	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetBaseInset(REAL inset)$/;"	f	class:CustomLineCap
SetPalette	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::SetPalette(const ColorPalette *palette)$/;"	f	class:Image
SetPixel	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Bitmap::SetPixel(INT x, INT y, const Color& color)$/;"	f	class:Bitmap
SetPropertyItem	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Image::SetPropertyItem(const PropertyItem *item)$/;"	f	class:Image
SetResolution	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Bitmap::SetResolution(REAL xdpi, REAL ydpi)$/;"	f	class:Bitmap
SetStrokeCap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetStrokeCap(LineCap strokeCap)$/;"	f	class:CustomLineCap
SetStrokeCaps	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetStrokeCaps(LineCap startCap, LineCap endCap)$/;"	f	class:CustomLineCap
SetStrokeJoin	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetStrokeJoin(LineJoin lineJoin)$/;"	f	class:CustomLineCap
SetWidthScale	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetWidthScale(REAL widthScale)$/;"	f	class:CustomLineCap
Transform	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Transform(const Matrix *matrix)$/;"	f	class:Region
Translate	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Translate(INT dx, INT dy)$/;"	f	class:Region
Translate	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Translate(REAL dx, REAL dy)$/;"	f	class:Region
Union	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Union(const GraphicsPath *path)$/;"	f	class:Region
Union	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Union(const Rect& rect)$/;"	f	class:Region
Union	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Union(const RectF& rect)$/;"	f	class:Region
Union	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Union(const Region *region)$/;"	f	class:Region
UnlockBits	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Bitmap::UnlockBits(BitmapData *lockedBitmapData)$/;"	f	class:Bitmap
Xor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Xor(const GraphicsPath *path)$/;"	f	class:Region
Xor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Xor(const Rect& rect)$/;"	f	class:Region
Xor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Xor(const RectF& rect)$/;"	f	class:Region
Xor	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Status Region::Xor(const Region *region)$/;"	f	class:Region
_GdipFontFamilyCachedGenericMonospace	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^extern "C" void *_GdipFontFamilyCachedGenericMonospace;$/;"	v
_GdipFontFamilyCachedGenericSansSerif	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^extern "C" void *_GdipFontFamilyCachedGenericSansSerif;$/;"	v
_GdipFontFamilyCachedGenericSerif	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^extern "C" void *_GdipFontFamilyCachedGenericSerif;$/;"	v
__GDIPLUS_IMPL_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	26;"	d
~CachedBitmap	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ CachedBitmap::~CachedBitmap()$/;"	f	class:CachedBitmap
~Font	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Font::~Font()$/;"	f	class:Font
~FontFamily	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ FontFamily::~FontFamily()$/;"	f	class:FontFamily
~Region	C++\ege-13.04.02-full\src\gdiplus4\gdiplusimpl.h	/^__inline__ Region::~Region()$/;"	f	class:Region
DebugEventCallback	C++\ege-13.04.02-full\src\gdiplus4\gdiplusinit.h	/^	DebugEventProc DebugEventCallback;$/;"	m	struct:GdiplusStartupInput
GdiplusStartupInput	C++\ege-13.04.02-full\src\gdiplus4\gdiplusinit.h	/^	GdiplusStartupInput(DebugEventProc debugEventCallback = NULL,$/;"	f	struct:GdiplusStartupInput
GdiplusStartupInput	C++\ege-13.04.02-full\src\gdiplus4\gdiplusinit.h	/^typedef struct GdiplusStartupInput {$/;"	s
GdiplusStartupInput	C++\ege-13.04.02-full\src\gdiplus4\gdiplusinit.h	/^} GdiplusStartupInput;$/;"	t	typeref:struct:GdiplusStartupInput
GdiplusStartupOutput	C++\ege-13.04.02-full\src\gdiplus4\gdiplusinit.h	/^	GdiplusStartupOutput():$/;"	f	struct:GdiplusStartupOutput
GdiplusStartupOutput	C++\ege-13.04.02-full\src\gdiplus4\gdiplusinit.h	/^typedef struct GdiplusStartupOutput {$/;"	s
GdiplusStartupOutput	C++\ege-13.04.02-full\src\gdiplus4\gdiplusinit.h	/^} GdiplusStartupOutput;$/;"	t	typeref:struct:GdiplusStartupOutput
GdiplusVersion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusinit.h	/^	UINT32 GdiplusVersion;$/;"	m	struct:GdiplusStartupInput
NotificationHook	C++\ege-13.04.02-full\src\gdiplus4\gdiplusinit.h	/^	NotificationHookProc NotificationHook;$/;"	m	struct:GdiplusStartupOutput
NotificationHookProc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusinit.h	/^typedef GpStatus WINGDIPAPI (*NotificationHookProc)(ULONG_PTR *token);$/;"	t
NotificationUnhook	C++\ege-13.04.02-full\src\gdiplus4\gdiplusinit.h	/^	NotificationUnhookProc NotificationUnhook;$/;"	m	struct:GdiplusStartupOutput
NotificationUnhookProc	C++\ege-13.04.02-full\src\gdiplus4\gdiplusinit.h	/^typedef VOID WINGDIPAPI (*NotificationUnhookProc)(ULONG_PTR token);$/;"	t
SuppressBackgroundThread	C++\ege-13.04.02-full\src\gdiplus4\gdiplusinit.h	/^	BOOL SuppressBackgroundThread;$/;"	m	struct:GdiplusStartupInput
SuppressExternalCodecs	C++\ege-13.04.02-full\src\gdiplus4\gdiplusinit.h	/^	BOOL SuppressExternalCodecs;$/;"	m	struct:GdiplusStartupInput
__GDIPLUS_INIT_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusinit.h	24;"	d
AdjustableArrowCap	C++\ege-13.04.02-full\src\gdiplus4\gdipluslinecaps.h	/^	AdjustableArrowCap(GpCustomLineCap *customLineCap, Status status):$/;"	f	class:AdjustableArrowCap
AdjustableArrowCap	C++\ege-13.04.02-full\src\gdiplus4\gdipluslinecaps.h	/^	AdjustableArrowCap(REAL height, REAL width, BOOL isFilled):$/;"	f	class:AdjustableArrowCap
AdjustableArrowCap	C++\ege-13.04.02-full\src\gdiplus4\gdipluslinecaps.h	/^class AdjustableArrowCap: public CustomLineCap$/;"	c
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdipluslinecaps.h	/^	virtual AdjustableArrowCap* Clone() const$/;"	f	class:AdjustableArrowCap
GetHeight	C++\ege-13.04.02-full\src\gdiplus4\gdipluslinecaps.h	/^	REAL GetHeight() const$/;"	f	class:AdjustableArrowCap
GetMiddleInset	C++\ege-13.04.02-full\src\gdiplus4\gdipluslinecaps.h	/^	REAL GetMiddleInset() const$/;"	f	class:AdjustableArrowCap
GetWidth	C++\ege-13.04.02-full\src\gdiplus4\gdipluslinecaps.h	/^	REAL GetWidth() const$/;"	f	class:AdjustableArrowCap
IsFilled	C++\ege-13.04.02-full\src\gdiplus4\gdipluslinecaps.h	/^	BOOL IsFilled() const$/;"	f	class:AdjustableArrowCap
SetFillState	C++\ege-13.04.02-full\src\gdiplus4\gdipluslinecaps.h	/^	Status SetFillState(BOOL isFilled)$/;"	f	class:AdjustableArrowCap
SetHeight	C++\ege-13.04.02-full\src\gdiplus4\gdipluslinecaps.h	/^	Status SetHeight(REAL height)$/;"	f	class:AdjustableArrowCap
SetMiddleInset	C++\ege-13.04.02-full\src\gdiplus4\gdipluslinecaps.h	/^	Status SetMiddleInset(REAL middleInset)$/;"	f	class:AdjustableArrowCap
SetWidth	C++\ege-13.04.02-full\src\gdiplus4\gdipluslinecaps.h	/^	Status SetWidth(REAL width)$/;"	f	class:AdjustableArrowCap
__GDIPLUS_LINECAPS_H	C++\ege-13.04.02-full\src\gdiplus4\gdipluslinecaps.h	24;"	d
~AdjustableArrowCap	C++\ege-13.04.02-full\src\gdiplus4\gdipluslinecaps.h	/^	virtual ~AdjustableArrowCap()$/;"	f	class:AdjustableArrowCap
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Matrix* Clone() const$/;"	f	class:Matrix
Equals	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	BOOL Equals(const Matrix *matrix) const$/;"	f	class:Matrix
GDIP_MATRIX_PI	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	238;"	d
GDIP_MATRIX_PI	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	33;"	d
GetElements	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status GetElements(REAL *m) const$/;"	f	class:Matrix
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status GetLastStatus() const$/;"	f	class:Matrix
Invert	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status Invert()$/;"	f	class:Matrix
IsIdentity	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	BOOL IsIdentity() const$/;"	f	class:Matrix
IsInvertible	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	BOOL IsInvertible() const$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Matrix(): nativeMatrix(NULL), lastStatus(Ok)$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Matrix(GpMatrix *matrix, Status status):$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Matrix(REAL m11, REAL m12, REAL m21, REAL m22, REAL dx, REAL dy):$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Matrix(const Rect& rect, const Point *dstplg):$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Matrix(const RectF& rect, const PointF *dstplg):$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^class Matrix: public GdiplusBase$/;"	c
Multiply	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status Multiply(const Matrix *matrix,$/;"	f	class:Matrix
OffsetX	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	REAL OffsetX() const$/;"	f	class:Matrix
OffsetY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	REAL OffsetY() const$/;"	f	class:Matrix
Reset	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status Reset()$/;"	f	class:Matrix
Rotate	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status Rotate(REAL angle, MatrixOrder order = MatrixOrderPrepend)$/;"	f	class:Matrix
RotateAt	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status RotateAt(REAL angle, const PointF& center,$/;"	f	class:Matrix
Scale	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status Scale(REAL scaleX, REAL scaleY,$/;"	f	class:Matrix
SetElements	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status SetElements(REAL m11, REAL m12, REAL m21, REAL m22,$/;"	f	class:Matrix
Shear	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status Shear(REAL shearX, REAL shearY,$/;"	f	class:Matrix
TransformPoints	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status TransformPoints(Point *pts, INT count = 1) const$/;"	f	class:Matrix
TransformPoints	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status TransformPoints(PointF *pts, INT count = 1) const$/;"	f	class:Matrix
TransformVectors	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status TransformVectors(Point *pts, INT count = 1) const$/;"	f	class:Matrix
TransformVectors	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status TransformVectors(PointF *pts, INT count = 1) const$/;"	f	class:Matrix
Translate	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status Translate(REAL offsetX, REAL offsetY,$/;"	f	class:Matrix
__GDIPLUS_MATRIX_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	24;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	mutable Status lastStatus;$/;"	m	class:Matrix
nativeMatrix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	GpMatrix *nativeMatrix;$/;"	m	class:Matrix
updateStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Matrix
~Matrix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmatrix.h	/^	~Matrix()$/;"	f	class:Matrix
DllExports	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmem.h	/^namespace DllExports {$/;"	n
__GDIPLUS_MEM_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmem.h	24;"	d
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	virtual Metafile* Clone() const$/;"	f	class:Metafile
EmfToWmfBits	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	static UINT EmfToWmfBits(HENHMETAFILE hEmf,$/;"	f	class:Metafile
GetDownLevelRasterizationLimit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	UINT GetDownLevelRasterizationLimit() const$/;"	f	class:Metafile
GetHENHMETAFILE	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	HENHMETAFILE GetHENHMETAFILE()$/;"	f	class:Metafile
GetMetafileHeader	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Status GetMetafileHeader(MetafileHeader *header) const$/;"	f	class:Metafile
GetMetafileHeader	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	static Status GetMetafileHeader(HENHMETAFILE hEmf,$/;"	f	class:Metafile
GetMetafileHeader	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	static Status GetMetafileHeader(IStream *stream, MetafileHeader *header)$/;"	f	class:Metafile
GetMetafileHeader	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	static Status GetMetafileHeader(const WCHAR *filename,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Metafile(GpImage *image, Status status): Image(image, status) {}$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Metafile(HDC referenceHdc, EmfType type = EmfTypeEmfPlusDual,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Metafile(HDC referenceHdc, const Rect& frameRect,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Metafile(HDC referenceHdc, const RectF& frameRect,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Metafile(HENHMETAFILE hEmf, BOOL deleteEmf = FALSE): Image(NULL, Ok)$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Metafile(HMETAFILE hWmf,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Metafile(IStream *stream): Image(NULL, Ok)$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Metafile(IStream *stream, HDC referenceHdc, const Rect& frameRect,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Metafile(IStream *stream, HDC referenceHdc, const RectF& frameRect,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Metafile(IStream *stream, HDC referenceHdc,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Metafile(const WCHAR *filename): Image(NULL, Ok)$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Metafile(const WCHAR *filename, HDC referenceHdc,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Metafile(const WCHAR *filename,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^class Metafile: public Image$/;"	c
PlayRecord	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Status PlayRecord(EmfPlusRecordType recordType, UINT flags,$/;"	f	class:Metafile
SetDownLevelRasterizationLimit	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	Status SetDownLevelRasterizationLimit(UINT limitDpi)$/;"	f	class:Metafile
__GDIPLUS_METAFILE_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	24;"	d
~Metafile	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetafile.h	/^	virtual ~Metafile()$/;"	f	class:Metafile
Bottom	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	INT16 Bottom;$/;"	m	struct:PWMFRect16
BoundingBox	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	PWMFRect16 BoundingBox;$/;"	m	struct:WmfPlaceableFileHeader
Checksum	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	INT16 Checksum;$/;"	m	struct:WmfPlaceableFileHeader
DpiX	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	REAL DpiX;$/;"	m	struct:MetafileHeader
DpiY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	REAL DpiY;$/;"	m	struct:MetafileHeader
ENHMETAHEADER3	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^} ENHMETAHEADER3,*LPENHMETAHEADER3;$/;"	t	typeref:struct:tagENHMETAHEADER3
EmfHeader	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^		ENHMETAHEADER3 EmfHeader;$/;"	m	union:MetafileHeader::__anon14
EmfPlusFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	UINT EmfPlusFlags;$/;"	m	struct:MetafileHeader
EmfPlusHeaderSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	INT EmfPlusHeaderSize;$/;"	m	struct:MetafileHeader
GDIP_EMFPLUSFLAGS_DISPLAY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^const UINT GDIP_EMFPLUSFLAGS_DISPLAY = 1;$/;"	v
GDIP_EMFPLUSFLAGS_DISPLAY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	38;"	d
GetBounds	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	void GetBounds(Rect *rect) const$/;"	f	struct:MetafileHeader
GetDpiX	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	REAL GetDpiX() const$/;"	f	struct:MetafileHeader
GetDpiY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	REAL GetDpiY() const$/;"	f	struct:MetafileHeader
GetEmfHeader	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	const ENHMETAHEADER3* GetEmfHeader() const$/;"	f	struct:MetafileHeader
GetEmfPlusFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	UINT GetEmfPlusFlags() const$/;"	f	struct:MetafileHeader
GetMetafileSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	UINT GetMetafileSize() const$/;"	f	struct:MetafileHeader
GetType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	MetafileType GetType() const$/;"	f	struct:MetafileHeader
GetVersion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	UINT GetVersion() const$/;"	f	struct:MetafileHeader
GetWmfHeader	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	const METAHEADER* GetWmfHeader() const$/;"	f	struct:MetafileHeader
Height	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	INT Height;$/;"	m	struct:MetafileHeader
Hmf	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	INT16 Hmf;$/;"	m	struct:WmfPlaceableFileHeader
Inch	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	INT16 Inch;$/;"	m	struct:WmfPlaceableFileHeader
IsDisplay	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	BOOL IsDisplay() const$/;"	f	struct:MetafileHeader
IsEmf	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	BOOL IsEmf() const$/;"	f	struct:MetafileHeader
IsEmfOrEmfPlus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	BOOL IsEmfOrEmfPlus() const$/;"	f	struct:MetafileHeader
IsEmfPlus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	BOOL IsEmfPlus() const$/;"	f	struct:MetafileHeader
IsEmfPlusDual	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	BOOL IsEmfPlusDual() const$/;"	f	struct:MetafileHeader
IsEmfPlusOnly	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	BOOL IsEmfPlusOnly() const$/;"	f	struct:MetafileHeader
IsWmf	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	BOOL IsWmf() const$/;"	f	struct:MetafileHeader
IsWmfPlaceable	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	BOOL IsWmfPlaceable() const$/;"	f	struct:MetafileHeader
Key	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	UINT32 Key;$/;"	m	struct:WmfPlaceableFileHeader
LPENHMETAHEADER3	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^} ENHMETAHEADER3,*LPENHMETAHEADER3;$/;"	t	typeref:struct:tagENHMETAHEADER3
Left	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	INT16 Left;$/;"	m	struct:PWMFRect16
LogicalDpiX	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	INT LogicalDpiX;$/;"	m	struct:MetafileHeader
LogicalDpiY	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	INT LogicalDpiY;$/;"	m	struct:MetafileHeader
MetafileHeader	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^typedef struct MetafileHeader {$/;"	s
MetafileHeader	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^} MetafileHeader;$/;"	t	typeref:struct:MetafileHeader
PWMFRect16	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^typedef struct PWMFRect16 {$/;"	s
PWMFRect16	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^} PWMFRect16;$/;"	t	typeref:struct:PWMFRect16
Reserved	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	UINT32 Reserved;$/;"	m	struct:WmfPlaceableFileHeader
Right	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	INT16 Right;$/;"	m	struct:PWMFRect16
Size	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	UINT Size;$/;"	m	struct:MetafileHeader
Top	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	INT16 Top;$/;"	m	struct:PWMFRect16
Type	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	MetafileType Type;$/;"	m	struct:MetafileHeader
Version	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	UINT Version;$/;"	m	struct:MetafileHeader
Width	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	INT Width;$/;"	m	struct:MetafileHeader
WmfHeader	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^		METAHEADER WmfHeader;$/;"	m	union:MetafileHeader::__anon14
WmfPlaceableFileHeader	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^typedef struct WmfPlaceableFileHeader {$/;"	s
WmfPlaceableFileHeader	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^} WmfPlaceableFileHeader;$/;"	t	typeref:struct:WmfPlaceableFileHeader
X	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	INT X;$/;"	m	struct:MetafileHeader
Y	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	INT Y;$/;"	m	struct:MetafileHeader
__GDIPLUS_METAHEADER_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	24;"	d
dSignature	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	DWORD dSignature;$/;"	m	struct:tagENHMETAHEADER3
iType	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	DWORD iType;$/;"	m	struct:tagENHMETAHEADER3
nBytes	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	DWORD nBytes;$/;"	m	struct:tagENHMETAHEADER3
nDescription	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	DWORD nDescription;$/;"	m	struct:tagENHMETAHEADER3
nHandles	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	WORD nHandles;$/;"	m	struct:tagENHMETAHEADER3
nPalEntries	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	DWORD nPalEntries;$/;"	m	struct:tagENHMETAHEADER3
nRecords	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	DWORD nRecords;$/;"	m	struct:tagENHMETAHEADER3
nSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	DWORD nSize;$/;"	m	struct:tagENHMETAHEADER3
nVersion	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	DWORD nVersion;$/;"	m	struct:tagENHMETAHEADER3
offDescription	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	DWORD offDescription;$/;"	m	struct:tagENHMETAHEADER3
rclBounds	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	RECTL rclBounds;$/;"	m	struct:tagENHMETAHEADER3
rclFrame	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	RECTL rclFrame;$/;"	m	struct:tagENHMETAHEADER3
sReserved	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	WORD sReserved;$/;"	m	struct:tagENHMETAHEADER3
szlDevice	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	SIZEL szlDevice;$/;"	m	struct:tagENHMETAHEADER3
szlMillimeters	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^	SIZEL szlMillimeters;$/;"	m	struct:tagENHMETAHEADER3
tagENHMETAHEADER3	C++\ege-13.04.02-full\src\gdiplus4\gdiplusmetaheader.h	/^typedef struct tagENHMETAHEADER3 {$/;"	s
AddArc	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddArc(INT x, INT y, INT width, INT height,$/;"	f	class:GraphicsPath
AddArc	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddArc(REAL x, REAL y, REAL width, REAL height,$/;"	f	class:GraphicsPath
AddArc	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddArc(const Rect& rect, REAL startAngle, REAL sweepAngle)$/;"	f	class:GraphicsPath
AddArc	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddArc(const RectF& rect, REAL startAngle, REAL sweepAngle)$/;"	f	class:GraphicsPath
AddBezier	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddBezier(INT x1, INT y1, INT x2, INT y2,$/;"	f	class:GraphicsPath
AddBezier	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddBezier(REAL x1, REAL y1, REAL x2, REAL y2,$/;"	f	class:GraphicsPath
AddBezier	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddBezier(const Point& pt1, const Point& pt2,$/;"	f	class:GraphicsPath
AddBezier	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddBezier(const PointF& pt1, const PointF& pt2,$/;"	f	class:GraphicsPath
AddBeziers	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddBeziers(const Point *points, INT count)$/;"	f	class:GraphicsPath
AddBeziers	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddBeziers(const PointF *points, INT count)$/;"	f	class:GraphicsPath
AddClosedCurve	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddClosedCurve(const Point *points, INT count)$/;"	f	class:GraphicsPath
AddClosedCurve	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddClosedCurve(const Point *points, INT count, REAL tension)$/;"	f	class:GraphicsPath
AddClosedCurve	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddClosedCurve(const PointF *points, INT count)$/;"	f	class:GraphicsPath
AddClosedCurve	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddClosedCurve(const PointF *points, INT count, REAL tension)$/;"	f	class:GraphicsPath
AddCurve	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddCurve(const Point *points, INT count)$/;"	f	class:GraphicsPath
AddCurve	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddCurve(const Point *points, INT count, INT offset,$/;"	f	class:GraphicsPath
AddCurve	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddCurve(const Point *points, INT count, REAL tension)$/;"	f	class:GraphicsPath
AddCurve	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddCurve(const PointF *points, INT count)$/;"	f	class:GraphicsPath
AddCurve	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddCurve(const PointF *points, INT count, INT offset,$/;"	f	class:GraphicsPath
AddCurve	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddCurve(const PointF *points, INT count, REAL tension)$/;"	f	class:GraphicsPath
AddEllipse	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddEllipse(INT x, INT y, INT width, INT height)$/;"	f	class:GraphicsPath
AddEllipse	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddEllipse(REAL x, REAL y, REAL width, REAL height)$/;"	f	class:GraphicsPath
AddEllipse	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddEllipse(const Rect& rect)$/;"	f	class:GraphicsPath
AddEllipse	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddEllipse(const RectF& rect)$/;"	f	class:GraphicsPath
AddLine	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddLine(INT x1, INT y1, INT x2, INT y2)$/;"	f	class:GraphicsPath
AddLine	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddLine(REAL x1, REAL y1, REAL x2, REAL y2)$/;"	f	class:GraphicsPath
AddLine	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddLine(const Point& pt1, const Point& pt2)$/;"	f	class:GraphicsPath
AddLine	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddLine(const PointF& pt1, const PointF& pt2)$/;"	f	class:GraphicsPath
AddLines	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddLines(const Point *points, INT count)$/;"	f	class:GraphicsPath
AddLines	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddLines(const PointF *points, INT count)$/;"	f	class:GraphicsPath
AddPath	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddPath(const GraphicsPath *addingPath, BOOL connect)$/;"	f	class:GraphicsPath
AddPie	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddPie(INT x, INT y, INT width, INT height,$/;"	f	class:GraphicsPath
AddPie	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddPie(REAL x, REAL y, REAL width, REAL height,$/;"	f	class:GraphicsPath
AddPie	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddPie(const Rect& rect, REAL startAngle, REAL sweepAngle)$/;"	f	class:GraphicsPath
AddPie	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddPie(const RectF& rect, REAL startAngle, REAL sweepAngle)$/;"	f	class:GraphicsPath
AddPolygon	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddPolygon(const Point *points, INT count)$/;"	f	class:GraphicsPath
AddPolygon	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddPolygon(const PointF *points, INT count)$/;"	f	class:GraphicsPath
AddRectangle	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddRectangle(const Rect& rect)$/;"	f	class:GraphicsPath
AddRectangle	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddRectangle(const RectF& rect)$/;"	f	class:GraphicsPath
AddRectangles	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddRectangles(const Rect *rects, INT count)$/;"	f	class:GraphicsPath
AddRectangles	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddRectangles(const RectF *rects, INT count)$/;"	f	class:GraphicsPath
AddString	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status AddString(const WCHAR *string, INT length,$/;"	f	class:GraphicsPath
ClearMarkers	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status ClearMarkers()$/;"	f	class:GraphicsPath
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	GraphicsPath* Clone() const$/;"	f	class:GraphicsPath
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	virtual PathGradientBrush *Clone() const$/;"	f	class:PathGradientBrush
CloseAllFigures	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status CloseAllFigures()$/;"	f	class:GraphicsPath
CloseFigure	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status CloseFigure()$/;"	f	class:GraphicsPath
CopyData	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	INT CopyData(PointF *points, BYTE *types, INT startIndex, INT endIndex)$/;"	f	class:GraphicsPathIterator
Enumerate	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	INT Enumerate(PointF *points, BYTE *types, INT count)$/;"	f	class:GraphicsPathIterator
Flatten	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status Flatten(const Matrix *matrix = NULL,$/;"	f	class:GraphicsPath
GetBlend	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetBlend(REAL *blendFactors, REAL *blendPositions,$/;"	f	class:PathGradientBrush
GetBlendCount	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	INT GetBlendCount() const$/;"	f	class:PathGradientBrush
GetBounds	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetBounds(Rect *bounds, const Matrix *matrix = NULL,$/;"	f	class:GraphicsPath
GetBounds	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetBounds(RectF *bounds, const Matrix *matrix = NULL,$/;"	f	class:GraphicsPath
GetCenterColor	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetCenterColor(Color *color) const$/;"	f	class:PathGradientBrush
GetCenterPoint	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetCenterPoint(Point *point) const$/;"	f	class:PathGradientBrush
GetCenterPoint	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetCenterPoint(PointF *point) const$/;"	f	class:PathGradientBrush
GetCount	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	INT GetCount() const$/;"	f	class:GraphicsPathIterator
GetFillMode	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	FillMode GetFillMode() const$/;"	f	class:GraphicsPath
GetFocusScales	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetFocusScales(REAL *xScale, REAL *yScale) const$/;"	f	class:PathGradientBrush
GetGammaCorrection	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	BOOL GetGammaCorrection() const$/;"	f	class:PathGradientBrush
GetInterpolationColorCount	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	INT GetInterpolationColorCount() const$/;"	f	class:PathGradientBrush
GetInterpolationColors	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetInterpolationColors(Color *presetColors,$/;"	f	class:PathGradientBrush
GetLastPoint	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetLastPoint(PointF *lastPoint) const$/;"	f	class:GraphicsPath
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetLastStatus() const$/;"	f	class:GraphicsPath
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetLastStatus() const$/;"	f	class:GraphicsPathIterator
GetPathData	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetPathData(PathData *pathData) const$/;"	f	class:GraphicsPath
GetPathPoints	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetPathPoints(Point *points, INT count) const$/;"	f	class:GraphicsPath
GetPathPoints	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetPathPoints(PointF *points, INT count) const$/;"	f	class:GraphicsPath
GetPathTypes	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetPathTypes(BYTE *types, INT count) const$/;"	f	class:GraphicsPath
GetPointCount	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	INT GetPointCount() const$/;"	f	class:GraphicsPath
GetPointCount	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	INT GetPointCount() const$/;"	f	class:PathGradientBrush
GetRectangle	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetRectangle(Rect *rect) const$/;"	f	class:PathGradientBrush
GetRectangle	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetRectangle(RectF *rect) const$/;"	f	class:PathGradientBrush
GetSubpathCount	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	INT GetSubpathCount() const$/;"	f	class:GraphicsPathIterator
GetSurroundColorCount	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	INT GetSurroundColorCount() const$/;"	f	class:PathGradientBrush
GetSurroundColors	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetSurroundColors(Color *colors, INT *count)$/;"	f	class:PathGradientBrush
GetTransform	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status GetTransform(Matrix *matrix) const$/;"	f	class:PathGradientBrush
GetWrapMode	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	WrapMode GetWrapMode() const$/;"	f	class:PathGradientBrush
GraphicsPath	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	GraphicsPath(FillMode fillMode = FillModeAlternate):$/;"	f	class:GraphicsPath
GraphicsPath	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	GraphicsPath(GpPath *path, Status status):$/;"	f	class:GraphicsPath
GraphicsPath	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	GraphicsPath(const Point *points, const BYTE *types, INT count,$/;"	f	class:GraphicsPath
GraphicsPath	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	GraphicsPath(const PointF *points, const BYTE *types, INT count,$/;"	f	class:GraphicsPath
GraphicsPath	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^class GraphicsPath: public GdiplusBase$/;"	c
GraphicsPathIterator	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	GraphicsPathIterator(GpPathIterator *pathIterator, Status status):$/;"	f	class:GraphicsPathIterator
GraphicsPathIterator	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	GraphicsPathIterator(GraphicsPath *path):$/;"	f	class:GraphicsPathIterator
GraphicsPathIterator	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^class GraphicsPathIterator: public GdiplusBase$/;"	c
HasCurve	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	BOOL HasCurve() const$/;"	f	class:GraphicsPathIterator
MultiplyTransform	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status MultiplyTransform(const Matrix *matrix,$/;"	f	class:PathGradientBrush
NextMarker	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	INT NextMarker(GraphicsPath *path)$/;"	f	class:GraphicsPathIterator
NextMarker	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	INT NextMarker(INT *startIndex, INT *endIndex)$/;"	f	class:GraphicsPathIterator
NextPathType	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	INT NextPathType(BYTE *pathType, INT *startIndex, INT *endIndex)$/;"	f	class:GraphicsPathIterator
NextSubpath	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	INT NextSubpath(GraphicsPath *path, BOOL *isClosed)$/;"	f	class:GraphicsPathIterator
NextSubpath	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	INT NextSubpath(INT *startIndex, INT *endIndex, BOOL *isClosed)$/;"	f	class:GraphicsPathIterator
Outline	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status Outline(const Matrix *matrix = NULL,$/;"	f	class:GraphicsPath
PathGradientBrush	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	PathGradientBrush(GpBrush *brush, Status status): Brush(brush, status) {}$/;"	f	class:PathGradientBrush
PathGradientBrush	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	PathGradientBrush(const GraphicsPath *path)$/;"	f	class:PathGradientBrush
PathGradientBrush	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	PathGradientBrush(const Point *points, INT count,$/;"	f	class:PathGradientBrush
PathGradientBrush	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	PathGradientBrush(const PointF *points, INT count,$/;"	f	class:PathGradientBrush
PathGradientBrush	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^class PathGradientBrush: public Brush$/;"	c
Reset	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status Reset()$/;"	f	class:GraphicsPath
ResetTransform	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status ResetTransform()$/;"	f	class:PathGradientBrush
Reverse	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status Reverse()$/;"	f	class:GraphicsPath
Rewind	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	VOID Rewind()$/;"	f	class:GraphicsPathIterator
RotateTransform	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status RotateTransform(REAL angle,$/;"	f	class:PathGradientBrush
ScaleTransform	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status ScaleTransform(REAL sx, REAL sy,$/;"	f	class:PathGradientBrush
SetBlend	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status SetBlend(REAL *blendFactors, REAL *blendPositions, INT count)$/;"	f	class:PathGradientBrush
SetBlendBellShape	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status SetBlendBellShape(REAL focus, REAL scale = 1.0f)$/;"	f	class:PathGradientBrush
SetBlendTriangularShape	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status SetBlendTriangularShape(REAL focus, REAL scale = 1.0f)$/;"	f	class:PathGradientBrush
SetCenterColor	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status SetCenterColor(const Color& color)$/;"	f	class:PathGradientBrush
SetCenterPoint	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status SetCenterPoint(const Point& point)$/;"	f	class:PathGradientBrush
SetCenterPoint	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status SetCenterPoint(const PointF& point)$/;"	f	class:PathGradientBrush
SetFillMode	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status SetFillMode(FillMode fillMode)$/;"	f	class:GraphicsPath
SetFocusScales	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status SetFocusScales(REAL xScale, REAL yScale)$/;"	f	class:PathGradientBrush
SetGammaCorrection	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status SetGammaCorrection(BOOL useGammaCorrection)$/;"	f	class:PathGradientBrush
SetInterpolationColors	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status SetInterpolationColors(const Color *presetColors,$/;"	f	class:PathGradientBrush
SetMarker	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status SetMarker()$/;"	f	class:GraphicsPath
SetSurroundColors	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status SetSurroundColors(const Color *colors, INT *count)$/;"	f	class:PathGradientBrush
SetTransform	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status SetTransform(const Matrix *matrix)$/;"	f	class:PathGradientBrush
SetWrapMode	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status SetWrapMode(WrapMode wrapMode)$/;"	f	class:PathGradientBrush
StartFigure	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status StartFigure()$/;"	f	class:GraphicsPath
Transform	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status Transform(const Matrix *matrix)$/;"	f	class:GraphicsPath
TranslateTransform	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status TranslateTransform(REAL dx, REAL dy,$/;"	f	class:PathGradientBrush
Warp	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status Warp(const PointF *destPoints, INT count, const RectF& srcRect,$/;"	f	class:GraphicsPath
Widen	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status Widen(const Pen *pen, const Matrix *matrix = NULL,$/;"	f	class:GraphicsPath
__GDIPLUS_PATH_H	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	24;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	mutable Status lastStatus;$/;"	m	class:GraphicsPath
lastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	mutable Status lastStatus;$/;"	m	class:GraphicsPathIterator
nativePath	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	GpPath *nativePath;$/;"	m	class:GraphicsPath
nativePathIterator	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	GpPathIterator *nativePathIterator;$/;"	m	class:GraphicsPathIterator
updateStatus	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:GraphicsPath
updateStatus	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:GraphicsPathIterator
~GraphicsPath	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	~GraphicsPath()$/;"	f	class:GraphicsPath
~GraphicsPathIterator	C++\ege-13.04.02-full\src\gdiplus4\gdipluspath.h	/^	~GraphicsPathIterator()$/;"	f	class:GraphicsPathIterator
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Pen* Clone() const$/;"	f	class:Pen
GetAlignment	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	PenAlignment GetAlignment() const$/;"	f	class:Pen
GetColor	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status GetColor(Color *color) const$/;"	f	class:Pen
GetCompoundArray	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status GetCompoundArray(REAL *compoundArray, INT count) const$/;"	f	class:Pen
GetCompoundArrayCount	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	INT GetCompoundArrayCount() const$/;"	f	class:Pen
GetCustomEndCap	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status GetCustomEndCap(CustomLineCap *customCap) const$/;"	f	class:Pen
GetCustomStartCap	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status GetCustomStartCap(CustomLineCap *customCap) const$/;"	f	class:Pen
GetDashCap	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	DashCap GetDashCap() const$/;"	f	class:Pen
GetDashOffset	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	REAL GetDashOffset() const$/;"	f	class:Pen
GetDashPattern	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status GetDashPattern(REAL *dashArray, INT count) const$/;"	f	class:Pen
GetDashPatternCount	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	INT GetDashPatternCount() const$/;"	f	class:Pen
GetDashStyle	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	DashStyle GetDashStyle() const$/;"	f	class:Pen
GetEndCap	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	LineCap GetEndCap() const$/;"	f	class:Pen
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status GetLastStatus() const$/;"	f	class:Pen
GetLineJoin	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	LineJoin GetLineJoin() const$/;"	f	class:Pen
GetMiterLimit	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	REAL GetMiterLimit() const$/;"	f	class:Pen
GetPenType	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	PenType GetPenType() const$/;"	f	class:Pen
GetStartCap	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	LineCap GetStartCap() const$/;"	f	class:Pen
GetTransform	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status GetTransform(Matrix *matrix) const$/;"	f	class:Pen
GetWidth	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	REAL GetWidth() const$/;"	f	class:Pen
MultiplyTransform	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status MultiplyTransform(const Matrix *matrix,$/;"	f	class:Pen
Pen	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Pen(GpPen *pen, Status status): nativePen(pen), lastStatus(status) {}$/;"	f	class:Pen
Pen	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Pen(const Brush *brush, REAL width = 1.0f):$/;"	f	class:Pen
Pen	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Pen(const Color& color, REAL width = 1.0f):$/;"	f	class:Pen
Pen	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^class Pen: public GdiplusBase$/;"	c
ResetTransform	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status ResetTransform()$/;"	f	class:Pen
RotateTransform	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status RotateTransform(REAL angle,$/;"	f	class:Pen
ScaleTransform	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status ScaleTransform(REAL sx, REAL sy,$/;"	f	class:Pen
SetAlignment	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetAlignment(PenAlignment penAlignment)$/;"	f	class:Pen
SetBrush	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetBrush(const Brush *brush)$/;"	f	class:Pen
SetColor	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetColor(const Color& color)$/;"	f	class:Pen
SetCompoundArray	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetCompoundArray(const REAL *compoundArray, INT count)$/;"	f	class:Pen
SetCustomEndCap	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetCustomEndCap(const CustomLineCap *customCap)$/;"	f	class:Pen
SetCustomStartCap	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetCustomStartCap(const CustomLineCap *customCap)$/;"	f	class:Pen
SetDashCap	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetDashCap(DashCap dashCap)$/;"	f	class:Pen
SetDashOffset	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetDashOffset(REAL dashOffset)$/;"	f	class:Pen
SetDashPattern	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetDashPattern(const REAL *dashArray, INT count)$/;"	f	class:Pen
SetDashStyle	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetDashStyle(DashStyle dashStyle)$/;"	f	class:Pen
SetEndCap	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetEndCap(LineCap endCap)$/;"	f	class:Pen
SetLineCap	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetLineCap(LineCap startCap, LineCap endCap, DashCap dashCap)$/;"	f	class:Pen
SetLineJoin	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetLineJoin(LineJoin lineJoin)$/;"	f	class:Pen
SetMiterLimit	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetMiterLimit(REAL miterLimit)$/;"	f	class:Pen
SetStartCap	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetStartCap(LineCap startCap)$/;"	f	class:Pen
SetTransform	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetTransform(const Matrix *matrix)$/;"	f	class:Pen
SetWidth	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status SetWidth(REAL width)$/;"	f	class:Pen
TranslateTransform	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status TranslateTransform(REAL dx, REAL dy,$/;"	f	class:Pen
__GDIPLUS_PEN_H	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	24;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	mutable Status lastStatus;$/;"	m	class:Pen
nativePen	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	GpPen *nativePen;$/;"	m	class:Pen
updateStatus	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Pen
~Pen	C++\ege-13.04.02-full\src\gdiplus4\gdipluspen.h	/^	~Pen()$/;"	f	class:Pen
ARGB	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^typedef DWORD ARGB;$/;"	t
ColorPalette	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^typedef struct ColorPalette {$/;"	s
ColorPalette	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^} ColorPalette;$/;"	t	typeref:struct:ColorPalette
Count	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	UINT Count;$/;"	m	struct:ColorPalette
Entries	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	ARGB Entries[1];$/;"	m	struct:ColorPalette
Flags	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	UINT Flags;$/;"	m	struct:ColorPalette
GetPixelFormatSize	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^static __inline__ UINT GetPixelFormatSize(PixelFormat pixfmt)$/;"	f
IsAlphaPixelFormat	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^static __inline__ BOOL IsAlphaPixelFormat(PixelFormat pixfmt)$/;"	f
IsCanonicalPixelFormat	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^static __inline__ BOOL IsCanonicalPixelFormat(PixelFormat pixfmt)$/;"	f
IsExtendedPixelFormat	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^static __inline__ BOOL IsExtendedPixelFormat(PixelFormat pixfmt)$/;"	f
IsIndexedPixelFormat	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^static __inline__ BOOL IsIndexedPixelFormat(PixelFormat pixfmt)$/;"	f
PaletteFlags	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^typedef enum PaletteFlags {$/;"	g
PaletteFlags	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^} PaletteFlags;$/;"	t	typeref:enum:PaletteFlags
PaletteFlagsGrayScale	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	PaletteFlagsGrayScale = 2,$/;"	e	enum:PaletteFlags
PaletteFlagsHalftone	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	PaletteFlagsHalftone = 4$/;"	e	enum:PaletteFlags
PaletteFlagsHasAlpha	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	PaletteFlagsHasAlpha = 1,$/;"	e	enum:PaletteFlags
PaletteType	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^typedef enum PaletteType {$/;"	g
PaletteType	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^} PaletteType;$/;"	t	typeref:enum:PaletteType
PaletteTypeCustom	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	PaletteTypeCustom = 0,$/;"	e	enum:PaletteType
PaletteTypeFixedBW	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	PaletteTypeFixedBW = 2,$/;"	e	enum:PaletteType
PaletteTypeFixedHalftone125	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	PaletteTypeFixedHalftone125 = 6,$/;"	e	enum:PaletteType
PaletteTypeFixedHalftone216	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	PaletteTypeFixedHalftone216 = 7,$/;"	e	enum:PaletteType
PaletteTypeFixedHalftone252	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	PaletteTypeFixedHalftone252 = 8,$/;"	e	enum:PaletteType
PaletteTypeFixedHalftone256	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	PaletteTypeFixedHalftone256 = 9 $/;"	e	enum:PaletteType
PaletteTypeFixedHalftone27	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	PaletteTypeFixedHalftone27 = 4,$/;"	e	enum:PaletteType
PaletteTypeFixedHalftone64	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	PaletteTypeFixedHalftone64 = 5,$/;"	e	enum:PaletteType
PaletteTypeFixedHalftone8	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	PaletteTypeFixedHalftone8 = 3,$/;"	e	enum:PaletteType
PaletteTypeOptimal	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^	PaletteTypeOptimal = 1,$/;"	e	enum:PaletteType
PixelFormat	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	/^typedef INT PixelFormat;$/;"	t
PixelFormat16bppARGB1555	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	52;"	d
PixelFormat16bppGrayScale	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	46;"	d
PixelFormat16bppRGB555	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	48;"	d
PixelFormat16bppRGB565	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	50;"	d
PixelFormat1bppIndexed	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	40;"	d
PixelFormat24bppRGB	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	54;"	d
PixelFormat32bppARGB	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	58;"	d
PixelFormat32bppPARGB	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	60;"	d
PixelFormat32bppRGB	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	56;"	d
PixelFormat48bppRGB	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	62;"	d
PixelFormat4bppIndexed	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	42;"	d
PixelFormat64bppARGB	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	64;"	d
PixelFormat64bppPARGB	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	66;"	d
PixelFormat8bppIndexed	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	44;"	d
PixelFormatAlpha	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	34;"	d
PixelFormatCanonical	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	37;"	d
PixelFormatDontCare	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	39;"	d
PixelFormatExtended	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	36;"	d
PixelFormatGDI	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	33;"	d
PixelFormatIndexed	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	32;"	d
PixelFormatMax	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	68;"	d
PixelFormatPAlpha	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	35;"	d
PixelFormatUndefined	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	38;"	d
__GDIPLUS_PIXELFORMATS_H	C++\ege-13.04.02-full\src\gdiplus4\gdipluspixelformats.h	24;"	d
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	StringFormat* Clone() const$/;"	f	class:StringFormat
GenericDefault	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^__inline__ const StringFormat* StringFormat::GenericDefault()$/;"	f	class:StringFormat
GenericTypographic	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^__inline__ const StringFormat* StringFormat::GenericTypographic()$/;"	f	class:StringFormat
GetAlignment	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	StringAlignment GetAlignment() const$/;"	f	class:StringFormat
GetDigitSubstitutionLanguage	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	LANGID GetDigitSubstitutionLanguage() const$/;"	f	class:StringFormat
GetDigitSubstitutionMethod	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	StringDigitSubstitute GetDigitSubstitutionMethod() const$/;"	f	class:StringFormat
GetFormatFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	INT GetFormatFlags() const$/;"	f	class:StringFormat
GetHotkeyPrefix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	HotkeyPrefix GetHotkeyPrefix() const$/;"	f	class:StringFormat
GetLastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	Status GetLastStatus() const$/;"	f	class:StringFormat
GetLineAlignment	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	StringAlignment GetLineAlignment() const$/;"	f	class:StringFormat
GetMeasurableCharacterRangeCount	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	INT GetMeasurableCharacterRangeCount() const$/;"	f	class:StringFormat
GetTabStopCount	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	INT GetTabStopCount() const$/;"	f	class:StringFormat
GetTabStops	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	Status GetTabStops(INT count, REAL *firstTabOffset, REAL *tabStops)$/;"	f	class:StringFormat
GetTrimming	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	StringTrimming GetTrimming() const$/;"	f	class:StringFormat
SetAlignment	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	Status SetAlignment(StringAlignment align)$/;"	f	class:StringFormat
SetDigitSubstitution	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	Status SetDigitSubstitution(LANGID language,$/;"	f	class:StringFormat
SetFormatFlags	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	Status SetFormatFlags(INT flags)$/;"	f	class:StringFormat
SetHotkeyPrefix	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	Status SetHotkeyPrefix(HotkeyPrefix hotkeyPrefix)$/;"	f	class:StringFormat
SetLineAlignment	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	Status SetLineAlignment(StringAlignment align)$/;"	f	class:StringFormat
SetMeasurableCharacterRanges	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	Status SetMeasurableCharacterRanges(INT rangeCount,$/;"	f	class:StringFormat
SetTabStops	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	Status SetTabStops(REAL firstTabOffset, INT count, const REAL *tabStops)$/;"	f	class:StringFormat
SetTrimming	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	Status SetTrimming(StringTrimming trimming)$/;"	f	class:StringFormat
StringFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	StringFormat(GpStringFormat *stringFormat, Status status):$/;"	f	class:StringFormat
StringFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	StringFormat(INT formatFlags = 0, LANGID language = LANG_NEUTRAL):$/;"	f	class:StringFormat
StringFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	StringFormat(const StringFormat *format):$/;"	f	class:StringFormat
StringFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^class StringFormat: public GdiplusBase$/;"	c
_GdipStringFormatCachedGenericDefault	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^extern "C" void *_GdipStringFormatCachedGenericDefault;$/;"	v
_GdipStringFormatCachedGenericTypographic	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^extern "C" void *_GdipStringFormatCachedGenericTypographic;$/;"	v
__GDIPLUS_STRINGFORMAT_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	24;"	d
lastStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	mutable Status lastStatus;$/;"	m	class:StringFormat
nativeStringFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	GpStringFormat *nativeStringFormat;$/;"	m	class:StringFormat
updateStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:StringFormat
~StringFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplusstringformat.h	/^	~StringFormat()$/;"	f	class:StringFormat
Abort	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	virtual HRESULT __stdcall Abort(void) {}$/;"	f	struct:GdiplusAbort
Aborted	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Aborted = 9,$/;"	e	enum:GpStatus
AccessDenied	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	AccessDenied = 12,$/;"	e	enum:GpStatus
CharacterRange	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	CharacterRange(): First(0), Length(0) {}$/;"	f	struct:CharacterRange
CharacterRange	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	CharacterRange(INT first, INT length): First(first), Length(length) {}$/;"	f	struct:CharacterRange
CharacterRange	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^typedef struct CharacterRange {$/;"	s
CharacterRange	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^} CharacterRange;$/;"	t	typeref:struct:CharacterRange
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Rect* Clone() const {$/;"	f	struct:Rect
Clone	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	RectF* Clone() const {$/;"	f	struct:RectF
Contains	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Contains(INT x, INT y) const {$/;"	f	struct:Rect
Contains	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Contains(REAL x, REAL y) const {$/;"	f	struct:RectF
Contains	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Contains(const Point& point) const {$/;"	f	struct:Rect
Contains	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Contains(const PointF& point) const {$/;"	f	struct:RectF
Contains	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Contains(const Rect& rect) const {$/;"	f	struct:Rect
Contains	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Contains(const RectF& rect) const {$/;"	f	struct:RectF
Count	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	INT Count;$/;"	m	struct:PathData
DebugEventProc	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^typedef void *DebugEventProc;$/;"	t
DrawImageAbort	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^typedef void *DrawImageAbort;$/;"	t
Empty	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Empty() const {$/;"	f	struct:Size
Empty	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Empty() const {$/;"	f	struct:SizeF
EnumerateMetafileProc	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^typedef BOOL CALLBACK (*EnumerateMetafileProc)(EmfPlusRecordType,UINT,UINT,const BYTE*,VOID*);$/;"	t
Equals	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Equals(const Point& point) const {$/;"	f	struct:Point
Equals	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Equals(const PointF& point) const {$/;"	f	struct:PointF
Equals	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Equals(const Rect& rect) const {$/;"	f	struct:Rect
Equals	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Equals(const RectF& rect) const {$/;"	f	struct:RectF
Equals	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Equals(const Size& size) const {$/;"	f	struct:Size
Equals	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Equals(const SizeF& size) const {$/;"	f	struct:SizeF
FileNotFound	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	FileNotFound = 10,$/;"	e	enum:GpStatus
First	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	INT First;$/;"	m	struct:CharacterRange
FontFamilyNotFound	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	FontFamilyNotFound = 14,$/;"	e	enum:GpStatus
FontStyleNotFound	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	FontStyleNotFound = 15,$/;"	e	enum:GpStatus
GDIPCONST	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	30;"	d
GdiplusAbort	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^struct GdiplusAbort {$/;"	s
GdiplusAbort	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^typedef struct GdiplusAbort GdiplusAbort;  \/* incomplete type *\/$/;"	t	typeref:struct:GdiplusAbort
GdiplusNotInitialized	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	GdiplusNotInitialized = 18,$/;"	e	enum:GpStatus
GenericError	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	GenericError = 1,$/;"	e	enum:GpStatus
GetBottom	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	INT GetBottom() const {$/;"	f	struct:Rect
GetBottom	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	REAL GetBottom() const {$/;"	f	struct:RectF
GetBounds	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	VOID GetBounds(Rect *rect) const {$/;"	f	struct:Rect
GetBounds	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	VOID GetBounds(RectF *rect) const {$/;"	f	struct:RectF
GetLeft	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	INT GetLeft() const {$/;"	f	struct:Rect
GetLeft	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	REAL GetLeft() const {$/;"	f	struct:RectF
GetLocation	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	VOID GetLocation(Point *point) const {$/;"	f	struct:Rect
GetLocation	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	VOID GetLocation(PointF *point) const {$/;"	f	struct:RectF
GetRight	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	INT GetRight() const {$/;"	f	struct:Rect
GetRight	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	REAL GetRight() const {$/;"	f	struct:RectF
GetSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	VOID GetSize(Size *size) const {$/;"	f	struct:Rect
GetSize	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	VOID GetSize(SizeF *size) const {$/;"	f	struct:RectF
GetThumbnailImageAbort	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^typedef void *GetThumbnailImageAbort;$/;"	t
GetTop	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	INT GetTop() const {$/;"	f	struct:Rect
GetTop	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	REAL GetTop() const {$/;"	f	struct:RectF
GpStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^typedef enum GpStatus {$/;"	g
GpStatus	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^} GpStatus;$/;"	t	typeref:enum:GpStatus
Height	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	INT Height;$/;"	m	struct:Rect
Height	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	INT Height;$/;"	m	struct:Size
Height	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	REAL Height;$/;"	m	struct:RectF
Height	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	REAL Height;$/;"	m	struct:SizeF
Inflate	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	VOID Inflate(INT dx, INT dy) {$/;"	f	struct:Rect
Inflate	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	VOID Inflate(REAL dx, REAL dy) {$/;"	f	struct:RectF
Inflate	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	VOID Inflate(const Point& point) {$/;"	f	struct:Rect
Inflate	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	VOID Inflate(const PointF& point) {$/;"	f	struct:RectF
InsufficientBuffer	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	InsufficientBuffer = 5,$/;"	e	enum:GpStatus
Intersect	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Intersect(const Rect& rect) {$/;"	f	struct:Rect
Intersect	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL Intersect(const RectF& rect) {$/;"	f	struct:RectF
Intersect	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	static BOOL Intersect(Rect& c, const Rect& a, const Rect& b) {$/;"	f	struct:Rect
Intersect	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	static BOOL Intersect(RectF& c, const RectF& a, const RectF& b) {$/;"	f	struct:RectF
IntersectsWith	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL IntersectsWith(const Rect& rc) const {$/;"	f	struct:Rect
IntersectsWith	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL IntersectsWith(const RectF& rc) const {$/;"	f	struct:RectF
InvalidParameter	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	InvalidParameter = 2,$/;"	e	enum:GpStatus
IsEmptyArea	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL IsEmptyArea() const {$/;"	f	struct:Rect
IsEmptyArea	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BOOL IsEmptyArea() const {$/;"	f	struct:RectF
Length	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	INT Length;$/;"	m	struct:CharacterRange
NotImplemented	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	NotImplemented = 6,$/;"	e	enum:GpStatus
NotTrueTypeFont	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	NotTrueTypeFont = 16,$/;"	e	enum:GpStatus
ObjectBusy	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	ObjectBusy = 4,$/;"	e	enum:GpStatus
Offset	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	VOID Offset(INT dx, INT dy) {$/;"	f	struct:Rect
Offset	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	VOID Offset(REAL dx, REAL dy) {$/;"	f	struct:RectF
Offset	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	VOID Offset(const Point& point) {$/;"	f	struct:Rect
Offset	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	VOID Offset(const PointF& point) {$/;"	f	struct:RectF
Ok	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Ok = 0,$/;"	e	enum:GpStatus
OutOfMemory	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	OutOfMemory = 3,$/;"	e	enum:GpStatus
PathData	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	PathData(): Count(0), Points(NULL), Types(NULL) {}$/;"	f	struct:PathData
PathData	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^typedef struct PathData {$/;"	s
PathData	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^} PathData;$/;"	t	typeref:struct:PathData
Point	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Point(): X(0), Y(0) {}$/;"	f	struct:Point
Point	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Point(INT x, INT y): X(x), Y(y) {}$/;"	f	struct:Point
Point	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Point(const Point& point): X(point.X), Y(point.Y) {}$/;"	f	struct:Point
Point	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Point(const Size& size): X(size.Width), Y(size.Height) {}$/;"	f	struct:Point
Point	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^typedef struct Point {$/;"	s
Point	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^} Point;$/;"	t	typeref:struct:Point
PointF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	PointF(): X(0.0f), Y(0.0f) {}$/;"	f	struct:PointF
PointF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	PointF(REAL x, REAL y): X(x), Y(y) {}$/;"	f	struct:PointF
PointF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	PointF(const PointF& point): X(point.X), Y(point.Y) {}$/;"	f	struct:PointF
PointF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	PointF(const SizeF& size): X(size.Width), Y(size.Height) {}$/;"	f	struct:PointF
PointF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^typedef struct PointF {$/;"	s
PointF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^} PointF;$/;"	t	typeref:struct:PointF
Points	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	PointF *Points;$/;"	m	struct:PathData
ProfileNotFound	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	ProfileNotFound = 21$/;"	e	enum:GpStatus
PropertyNotFound	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	PropertyNotFound = 19,$/;"	e	enum:GpStatus
PropertyNotSupported	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	PropertyNotSupported = 20,$/;"	e	enum:GpStatus
Rect	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Rect(): X(0), Y(0), Width(0), Height(0) {}$/;"	f	struct:Rect
Rect	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Rect(INT x, INT y, INT width, INT height):$/;"	f	struct:Rect
Rect	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Rect(const Point& location, const Size& size):$/;"	f	struct:Rect
Rect	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^typedef struct Rect {$/;"	s
Rect	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^} Rect;$/;"	t	typeref:struct:Rect
RectF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	RectF(): X(0.0f), Y(0.0f), Width(0.0f), Height(0.0f) {}$/;"	f	struct:RectF
RectF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	RectF(REAL x, REAL y, REAL width, REAL height):$/;"	f	struct:RectF
RectF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	RectF(const PointF& location, const SizeF& size):$/;"	f	struct:RectF
RectF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^typedef struct RectF {$/;"	s
RectF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^} RectF;$/;"	t	typeref:struct:RectF
Size	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Size(): Width(0), Height(0) {}$/;"	f	struct:Size
Size	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Size(INT width, INT height): Width(width), Height(height) {}$/;"	f	struct:Size
Size	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Size(const Size& size): Width(size.Width), Height(size.Height) {}$/;"	f	struct:Size
Size	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^typedef struct Size {$/;"	s
Size	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^} Size;$/;"	t	typeref:struct:Size
SizeF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	SizeF(): Width(0.0f), Height(0.0f) {}$/;"	f	struct:SizeF
SizeF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	SizeF(REAL width, REAL height): Width(width), Height(height) {}$/;"	f	struct:SizeF
SizeF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	SizeF(const SizeF& size): Width(size.Width), Height(size.Height) {}$/;"	f	struct:SizeF
SizeF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^typedef struct SizeF {$/;"	s
SizeF	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^} SizeF;$/;"	t	typeref:struct:SizeF
Status	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^typedef GpStatus Status;$/;"	t
Types	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	BYTE *Types;$/;"	m	struct:PathData
Union	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	static BOOL Union(Rect& c, const Rect& a, const Rect& b) {$/;"	f	struct:Rect
Union	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	static BOOL Union(RectF& c, const RectF& a, const RectF& b) {$/;"	f	struct:RectF
UnknownImageFormat	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	UnknownImageFormat = 13,$/;"	e	enum:GpStatus
UnsupportedGdiplusVersion	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	UnsupportedGdiplusVersion = 17,$/;"	e	enum:GpStatus
ValueOverflow	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	ValueOverflow = 11,$/;"	e	enum:GpStatus
WINGDIPAPI	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	29;"	d
Width	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	INT Width;$/;"	m	struct:Rect
Width	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	INT Width;$/;"	m	struct:Size
Width	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	REAL Width;$/;"	m	struct:RectF
Width	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	REAL Width;$/;"	m	struct:SizeF
Win32Error	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Win32Error = 7,$/;"	e	enum:GpStatus
WrongState	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	WrongState = 8,$/;"	e	enum:GpStatus
X	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	INT X;$/;"	m	struct:Point
X	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	INT X;$/;"	m	struct:Rect
X	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	REAL X;$/;"	m	struct:PointF
X	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	REAL X;$/;"	m	struct:RectF
Y	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	INT Y;$/;"	m	struct:Point
Y	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	INT Y;$/;"	m	struct:Rect
Y	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	REAL Y;$/;"	m	struct:PointF
Y	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	REAL Y;$/;"	m	struct:RectF
__GDIPLUS_TYPES_H	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	24;"	d
operator +	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Point operator+(const Point& point) const {$/;"	f	struct:Point
operator +	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	PointF operator+(const PointF& point) const {$/;"	f	struct:PointF
operator +	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Size operator+(const Size& size) const {$/;"	f	struct:Size
operator +	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	SizeF operator+(const SizeF& size) const {$/;"	f	struct:SizeF
operator -	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Point operator-(const Point& point) const {$/;"	f	struct:Point
operator -	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	PointF operator-(const PointF& point) const {$/;"	f	struct:PointF
operator -	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	Size operator-(const Size& size) const {$/;"	f	struct:Size
operator -	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	SizeF operator-(const SizeF& size) const {$/;"	f	struct:SizeF
operator =	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	CharacterRange& operator=(const CharacterRange& rhs) {$/;"	f	struct:CharacterRange
~PathData	C++\ege-13.04.02-full\src\gdiplus4\gdiplustypes.h	/^	~PathData() {$/;"	f	struct:PathData
DefCloseHandler	C++\ege-13.04.02-full\src\graphics.cpp	/^DefCloseHandler() {$/;"	f	namespace:ege
EnumResNameProc	C++\ege-13.04.02-full\src\graphics.cpp	/^EnumResNameProc($/;"	f	namespace:ege
GetMouseMsg	C++\ege-13.04.02-full\src\graphics.cpp	/^GetMouseMsg() {$/;"	f	namespace:ege
_ALLOW_ITERATOR_DEBUG_LEVEL_MISMATCH	C++\ege-13.04.02-full\src\graphics.cpp	27;"	d	file:
_ALLOW_RUNTIME_LIBRARY_MISMATCH	C++\ege-13.04.02-full\src\graphics.cpp	30;"	d	file:
_CRT_NON_CONFORMING_SWPRINTFS	C++\ege-13.04.02-full\src\graphics.cpp	42;"	d	file:
_CRT_SECURE_NO_DEPRECATE	C++\ege-13.04.02-full\src\graphics.cpp	38;"	d	file:
_CRT_SECURE_NO_WARNINGS	C++\ege-13.04.02-full\src\graphics.cpp	34;"	d	file:
_ITERATOR_DEBUG_LEVEL	C++\ege-13.04.02-full\src\graphics.cpp	53;"	d	file:
_getkey	C++\ege-13.04.02-full\src\graphics.cpp	/^_getkey(_graph_setting* pg) {$/;"	f	namespace:ege
_getmouse	C++\ege-13.04.02-full\src\graphics.cpp	/^_getmouse(_graph_setting* pg) {$/;"	f	namespace:ege
attachHWND	C++\ege-13.04.02-full\src\graphics.cpp	/^int attachHWND(HWND hWnd) {$/;"	f	namespace:ege
closegraph	C++\ege-13.04.02-full\src\graphics.cpp	/^closegraph() {$/;"	f	namespace:ege
dealmessage	C++\ege-13.04.02-full\src\graphics.cpp	/^dealmessage(_graph_setting* pg, bool force_update) {$/;"	f	namespace:ege
detectgraph	C++\ege-13.04.02-full\src\graphics.cpp	/^detectgraph(int *gdriver, int *gmode) {$/;"	f	namespace:ege
ege	C++\ege-13.04.02-full\src\graphics.cpp	/^namespace ege {$/;"	n	file:
flushkey	C++\ege-13.04.02-full\src\graphics.cpp	/^flushkey() {$/;"	f	namespace:ege
flushmouse	C++\ege-13.04.02-full\src\graphics.cpp	/^flushmouse() {$/;"	f	namespace:ege
g_attach_hwnd	C++\ege-13.04.02-full\src\graphics.cpp	/^static HWND     g_attach_hwnd = 0;$/;"	m	namespace:ege	file:
g_has_init	C++\ege-13.04.02-full\src\graphics.cpp	/^static bool     g_has_init = false;$/;"	m	namespace:ege	file:
g_initcall	C++\ege-13.04.02-full\src\graphics.cpp	/^static int      g_initoption  = INIT_DEFAULT, g_initcall = 0;$/;"	m	namespace:ege	file:
g_initoption	C++\ege-13.04.02-full\src\graphics.cpp	/^static int      g_initoption  = INIT_DEFAULT, g_initcall = 0;$/;"	m	namespace:ege	file:
g_windowexstyle	C++\ege-13.04.02-full\src\graphics.cpp	/^static DWORD    g_windowexstyle = WS_EX_LEFT|WS_EX_LTRREADING;$/;"	m	namespace:ege	file:
g_windowpos_x	C++\ege-13.04.02-full\src\graphics.cpp	/^static int      g_windowpos_x = CW_USEDEFAULT;$/;"	m	namespace:ege	file:
g_windowpos_y	C++\ege-13.04.02-full\src\graphics.cpp	/^static int      g_windowpos_y = CW_USEDEFAULT;$/;"	m	namespace:ege	file:
g_windowstyle	C++\ege-13.04.02-full\src\graphics.cpp	/^static DWORD    g_windowstyle = WS_OVERLAPPED|WS_CAPTION|WS_SYSMENU|WS_MINIMIZEBOX|WS_CLIPCHILDREN|WS_VISIBLE;$/;"	m	namespace:ege	file:
getProcfunc	C++\ege-13.04.02-full\src\graphics.cpp	/^getProcfunc() {$/;"	f	namespace:ege
getch	C++\ege-13.04.02-full\src\graphics.cpp	/^getch() {$/;"	f	namespace:ege
getchEx	C++\ege-13.04.02-full\src\graphics.cpp	/^getchEx(int flag) {$/;"	f	namespace:ege
getflush	C++\ege-13.04.02-full\src\graphics.cpp	/^getflush() {$/;"	f	namespace:ege
getkey	C++\ege-13.04.02-full\src\graphics.cpp	/^getkey() {$/;"	f	namespace:ege
getmouse	C++\ege-13.04.02-full\src\graphics.cpp	/^getmouse() {$/;"	f	namespace:ege
graph_init	C++\ege-13.04.02-full\src\graphics.cpp	/^graph_init(_graph_setting * pg) {$/;"	f	namespace:ege
graph_setting	C++\ege-13.04.02-full\src\graphics.cpp	/^struct _graph_setting& graph_setting = *(struct _graph_setting*)malloc(sizeof(struct _graph_setting));$/;"	m	namespace:ege	typeref:struct:ege::_graph_setting	file:
graphupdate	C++\ege-13.04.02-full\src\graphics.cpp	/^graphupdate(_graph_setting* pg) {$/;"	f	namespace:ege
guiupdate	C++\ege-13.04.02-full\src\graphics.cpp	/^guiupdate(_graph_setting* pg, egeControlBase* &root) {$/;"	f	namespace:ege
init_img_page	C++\ege-13.04.02-full\src\graphics.cpp	/^init_img_page(struct _graph_setting * pg) {$/;"	f	namespace:ege
init_instance	C++\ege-13.04.02-full\src\graphics.cpp	/^init_instance(HINSTANCE hInstance, int nCmdShow) {$/;"	f	namespace:ege
initgraph	C++\ege-13.04.02-full\src\graphics.cpp	/^initgraph(int *gdriver, int *gmode, char *path) {$/;"	f	namespace:ege
initgraph	C++\ege-13.04.02-full\src\graphics.cpp	/^initgraph(int Width, int Height, int Flag) {$/;"	f	namespace:ege
kbhit	C++\ege-13.04.02-full\src\graphics.cpp	/^kbhit() {$/;"	f	namespace:ege
kbhitEx	C++\ege-13.04.02-full\src\graphics.cpp	/^kbhitEx(int flag) {$/;"	f	namespace:ege
kbmsg	C++\ege-13.04.02-full\src\graphics.cpp	/^kbmsg() {$/;"	f	namespace:ege
keystate	C++\ege-13.04.02-full\src\graphics.cpp	/^keystate(int key) {$/;"	f	namespace:ege
logoscene	C++\ege-13.04.02-full\src\graphics.cpp	/^void logoscene() {$/;"	f	namespace:ege
messageloopthread	C++\ege-13.04.02-full\src\graphics.cpp	/^messageloopthread(LPVOID lpParameter) {$/;"	f	namespace:ege
mousemsg	C++\ege-13.04.02-full\src\graphics.cpp	/^mousemsg() {$/;"	f	namespace:ege
on_destroy	C++\ege-13.04.02-full\src\graphics.cpp	/^on_destroy(struct _graph_setting * pg) {$/;"	f	namespace:ege
on_ime_control	C++\ege-13.04.02-full\src\graphics.cpp	/^on_ime_control(struct _graph_setting * pg, HWND hwnd, UINT message, WPARAM wparam, LPARAM lparam) {$/;"	f	namespace:ege
on_key	C++\ege-13.04.02-full\src\graphics.cpp	/^on_key(struct _graph_setting * pg, UINT message, unsigned long keycode, LPARAM keyflag) {$/;"	f	namespace:ege
on_paint	C++\ege-13.04.02-full\src\graphics.cpp	/^on_paint(struct _graph_setting * pg, HWND hwnd) {$/;"	f	namespace:ege
on_repaint	C++\ege-13.04.02-full\src\graphics.cpp	/^on_repaint(struct _graph_setting * pg, HWND hwnd, HDC dc) {$/;"	f	namespace:ege
on_setcursor	C++\ege-13.04.02-full\src\graphics.cpp	/^on_setcursor(struct _graph_setting * pg, HWND hwnd) {$/;"	f	namespace:ege
on_timer	C++\ege-13.04.02-full\src\graphics.cpp	/^on_timer(struct _graph_setting * pg, HWND hwnd, unsigned id) {$/;"	f	namespace:ege
peekallkey	C++\ege-13.04.02-full\src\graphics.cpp	/^peekallkey(_graph_setting* pg, int flag) {$/;"	f	namespace:ege
peekkey	C++\ege-13.04.02-full\src\graphics.cpp	/^peekkey(_graph_setting* pg) {$/;"	f	namespace:ege
peekmouse	C++\ege-13.04.02-full\src\graphics.cpp	/^peekmouse(_graph_setting* pg) {$/;"	f	namespace:ege
push_mouse_msg	C++\ege-13.04.02-full\src\graphics.cpp	/^push_mouse_msg(struct _graph_setting * pg, UINT message, WPARAM wparam, LPARAM lparam) {$/;"	f	namespace:ege
redraw_window	C++\ege-13.04.02-full\src\graphics.cpp	/^redraw_window(_graph_setting* pg, HDC dc) {$/;"	f	namespace:ege
register_class	C++\ege-13.04.02-full\src\graphics.cpp	/^register_class(struct _graph_setting * pg, HINSTANCE hInstance) {$/;"	f	namespace:ege
setinitmode	C++\ege-13.04.02-full\src\graphics.cpp	/^setinitmode(int mode, int x, int y) {$/;"	f	namespace:ege
setmode	C++\ege-13.04.02-full\src\graphics.cpp	/^setmode(int gdriver, int gmode) {$/;"	f	namespace:ege
ui_msg_process	C++\ege-13.04.02-full\src\graphics.cpp	/^ui_msg_process(EGEMSG& qmsg) {$/;"	f	namespace:ege
waitdealmessage	C++\ege-13.04.02-full\src\graphics.cpp	/^waitdealmessage(_graph_setting* pg) {$/;"	f	namespace:ege
windowmanager	C++\ege-13.04.02-full\src\graphics.cpp	/^windowmanager(ege::_graph_setting* pg, bool create, struct msg_createwindow* msg) {$/;"	f	namespace:ege
wndproc	C++\ege-13.04.02-full\src\graphics.cpp	/^wndproc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	namespace:ege
_GRAPHICS_H_	C++\ege-13.04.02-full\src\graphics.h	37;"	d
AND_PUT	C++\ege-13.04.02-full\src\graphics.py	/^AND_PUT     = 3$/;"	v
BKSLASH_FILL	C++\ege-13.04.02-full\src\graphics.py	/^BKSLASH_FILL    = 5$/;"	v
BLACK	C++\ege-13.04.02-full\src\graphics.py	/^BLACK = 0$/;"	v
BLUE	C++\ege-13.04.02-full\src\graphics.py	/^BLUE = 1$/;"	v
BOTTOM_TEXT	C++\ege-13.04.02-full\src\graphics.py	/^BOTTOM_TEXT = 0$/;"	v
BROWN	C++\ege-13.04.02-full\src\graphics.py	/^BROWN = 6$/;"	v
CENTER_LINE	C++\ege-13.04.02-full\src\graphics.py	/^CENTER_LINE  = 2$/;"	v
CENTER_TEXT	C++\ege-13.04.02-full\src\graphics.py	/^CENTER_TEXT = 1$/;"	v
CLOSE_DOT_FILL	C++\ege-13.04.02-full\src\graphics.py	/^CLOSE_DOT_FILL  = 11$/;"	v
COPY_PUT	C++\ege-13.04.02-full\src\graphics.py	/^COPY_PUT    = 0$/;"	v
CURRENT_DRIVER	C++\ege-13.04.02-full\src\graphics.py	/^CURRENT_DRIVER = -1$/;"	v
CYAN	C++\ege-13.04.02-full\src\graphics.py	/^CYAN = 3$/;"	v
DARKGRAY	C++\ege-13.04.02-full\src\graphics.py	/^DARKGRAY = 8$/;"	v
DASHED_LINE	C++\ege-13.04.02-full\src\graphics.py	/^DASHED_LINE  = 3$/;"	v
DEFAULT_FONT	C++\ege-13.04.02-full\src\graphics.py	/^DEFAULT_FONT    = 0$/;"	v
DETECT	C++\ege-13.04.02-full\src\graphics.py	/^DETECT = 0$/;"	v
DOTTED_LINE	C++\ege-13.04.02-full\src\graphics.py	/^DOTTED_LINE  = 1$/;"	v
EMPTY_FILL	C++\ege-13.04.02-full\src\graphics.py	/^EMPTY_FILL      = 0$/;"	v
GOTHIC_FONT	C++\ege-13.04.02-full\src\graphics.py	/^GOTHIC_FONT     = 4$/;"	v
GRAPHICS_ALWAYS_RENDER	C++\ege-13.04.02-full\src\graphics.py	/^GRAPHICS_ALWAYS_RENDER      = 0x10$/;"	v
GRAPHICS_DELAY_LEASTMODE	C++\ege-13.04.02-full\src\graphics.py	/^GRAPHICS_DELAY_LEASTMODE    = 0x11$/;"	v
GRAPHICS_FORCEEXIT	C++\ege-13.04.02-full\src\graphics.py	/^GRAPHICS_FORCEEXIT          = 0x01$/;"	v
GRAPHICS_NULL	C++\ege-13.04.02-full\src\graphics.py	/^GRAPHICS_NULL               = 0x00$/;"	v
GRAPHICS_OBJECT	C++\ege-13.04.02-full\src\graphics.py	/^GRAPHICS_OBJECT             = 0x04$/;"	v
GRAPHICS_PRESETEXSTYLE	C++\ege-13.04.02-full\src\graphics.py	/^GRAPHICS_PRESETEXSTYLE      = 0x07$/;"	v
GRAPHICS_PRESETSTYLE	C++\ege-13.04.02-full\src\graphics.py	/^GRAPHICS_PRESETSTYLE        = 0x06$/;"	v
GRAPHICS_PRIORITY	C++\ege-13.04.02-full\src\graphics.py	/^GRAPHICS_PRIORITY           = 0x03$/;"	v
GRAPHICS_SETEXSTYLE	C++\ege-13.04.02-full\src\graphics.py	/^GRAPHICS_SETEXSTYLE         = 0x0A$/;"	v
GRAPHICS_SETSTYLE	C++\ege-13.04.02-full\src\graphics.py	/^GRAPHICS_SETSTYLE           = 0x09$/;"	v
GRAPHICS_SETTITLE	C++\ege-13.04.02-full\src\graphics.py	/^GRAPHICS_SETTITLE           = 0x08$/;"	v
GRAPHICS_SHOWMOUSE	C++\ege-13.04.02-full\src\graphics.py	/^GRAPHICS_SHOWMOUSE          = 0x05$/;"	v
GRAPHICS_TOPMOST	C++\ege-13.04.02-full\src\graphics.py	/^GRAPHICS_TOPMOST            = 0x02$/;"	v
GREEN	C++\ege-13.04.02-full\src\graphics.py	/^GREEN = 2$/;"	v
HATCH_FILL	C++\ege-13.04.02-full\src\graphics.py	/^HATCH_FILL      = 7$/;"	v
INTERLEAVE_FILL	C++\ege-13.04.02-full\src\graphics.py	/^INTERLEAVE_FILL = 9$/;"	v
LEFT_TEXT	C++\ege-13.04.02-full\src\graphics.py	/^LEFT_TEXT   = 0$/;"	v
LIGHTBLUE	C++\ege-13.04.02-full\src\graphics.py	/^LIGHTBLUE = 9$/;"	v
LIGHTCYAN	C++\ege-13.04.02-full\src\graphics.py	/^LIGHTCYAN = 11$/;"	v
LIGHTGRAY	C++\ege-13.04.02-full\src\graphics.py	/^LIGHTGRAY = 7$/;"	v
LIGHTGREEN	C++\ege-13.04.02-full\src\graphics.py	/^LIGHTGREEN = 10$/;"	v
LIGHTMAGENTA	C++\ege-13.04.02-full\src\graphics.py	/^LIGHTMAGENTA = 13$/;"	v
LIGHTRED	C++\ege-13.04.02-full\src\graphics.py	/^LIGHTRED = 12$/;"	v
LINE_FILL	C++\ege-13.04.02-full\src\graphics.py	/^LINE_FILL       = 2$/;"	v
LTBKSLASH_FILL	C++\ege-13.04.02-full\src\graphics.py	/^LTBKSLASH_FILL  = 6$/;"	v
LTSLASH_FILL	C++\ege-13.04.02-full\src\graphics.py	/^LTSLASH_FILL    = 3$/;"	v
MAGENTA	C++\ege-13.04.02-full\src\graphics.py	/^MAGENTA = 5$/;"	v
MSG_EVENT_CLICK	C++\ege-13.04.02-full\src\graphics.py	/^MSG_EVENT_CLICK         = 0x01$/;"	v
MSG_EVENT_DBCLICK	C++\ege-13.04.02-full\src\graphics.py	/^MSG_EVENT_DBCLICK       = 0x02$/;"	v
MSG_EVENT_DOWN	C++\ege-13.04.02-full\src\graphics.py	/^MSG_EVENT_DOWN          = 0x01$/;"	v
MSG_EVENT_MOVE	C++\ege-13.04.02-full\src\graphics.py	/^MSG_EVENT_MOVE          = 0x04$/;"	v
MSG_EVENT_UP	C++\ege-13.04.02-full\src\graphics.py	/^MSG_EVENT_UP            = 0x00$/;"	v
MSG_EVENT_WHEEL	C++\ege-13.04.02-full\src\graphics.py	/^MSG_EVENT_WHEEL         = 0x10$/;"	v
MSG_MOUSE_LEFT	C++\ege-13.04.02-full\src\graphics.py	/^MSG_MOUSE_LEFT      = 0x01$/;"	v
MSG_MOUSE_MID	C++\ege-13.04.02-full\src\graphics.py	/^MSG_MOUSE_MID       = 0x04$/;"	v
MSG_MOUSE_RIGHT	C++\ege-13.04.02-full\src\graphics.py	/^MSG_MOUSE_RIGHT     = 0x02$/;"	v
NORM_WIDTH	C++\ege-13.04.02-full\src\graphics.py	/^NORM_WIDTH  = 1$/;"	v
NOT_PUT	C++\ege-13.04.02-full\src\graphics.py	/^NOT_PUT     = 4$/;"	v
OR_PUT	C++\ege-13.04.02-full\src\graphics.py	/^OR_PUT      = 2$/;"	v
PAGE_USING	C++\ege-13.04.02-full\src\graphics.py	/^PAGE_USING  = 0x40000000$/;"	v
RED	C++\ege-13.04.02-full\src\graphics.py	/^RED = 4$/;"	v
RIGHT_TEXT	C++\ege-13.04.02-full\src\graphics.py	/^RIGHT_TEXT  = 2$/;"	v
SANS_SERIF_FONT	C++\ege-13.04.02-full\src\graphics.py	/^SANS_SERIF_FONT = 3$/;"	v
SLASH_FILL	C++\ege-13.04.02-full\src\graphics.py	/^SLASH_FILL      = 4$/;"	v
SMALL_FONT	C++\ege-13.04.02-full\src\graphics.py	/^SMALL_FONT      = 2$/;"	v
SOLID_FILL	C++\ege-13.04.02-full\src\graphics.py	/^SOLID_FILL      = 1$/;"	v
SOLID_LINE	C++\ege-13.04.02-full\src\graphics.py	/^SOLID_LINE   = 0$/;"	v
THICK_WIDTH	C++\ege-13.04.02-full\src\graphics.py	/^THICK_WIDTH = 3$/;"	v
TOP_TEXT	C++\ege-13.04.02-full\src\graphics.py	/^TOP_TEXT    = 2$/;"	v
TRIPLEX_FONT	C++\ege-13.04.02-full\src\graphics.py	/^TRIPLEX_FONT    = 1$/;"	v
TRUECOLOR	C++\ege-13.04.02-full\src\graphics.py	/^TRUECOLOR = 11$/;"	v
TRUECOLORSIZE	C++\ege-13.04.02-full\src\graphics.py	/^TRUECOLORSIZE = 12$/;"	v
USER_FONT	C++\ege-13.04.02-full\src\graphics.py	/^USER_FONT       = 5$/;"	v
VGA	C++\ege-13.04.02-full\src\graphics.py	/^VGA = 9$/;"	v
WHITE	C++\ege-13.04.02-full\src\graphics.py	/^WHITE = 15$/;"	v
WIDE_DOT_FILL	C++\ege-13.04.02-full\src\graphics.py	/^WIDE_DOT_FILL   = 10$/;"	v
XHATCH_FILL	C++\ege-13.04.02-full\src\graphics.py	/^XHATCH_FILL     = 8$/;"	v
XOR_PUT	C++\ege-13.04.02-full\src\graphics.py	/^XOR_PUT     = 1$/;"	v
YELLOW	C++\ege-13.04.02-full\src\graphics.py	/^YELLOW = 14$/;"	v
grAllocError	C++\ege-13.04.02-full\src\graphics.py	/^grAllocError        = 0x15$/;"	v
grError	C++\ege-13.04.02-full\src\graphics.py	/^grError             = -11$/;"	v
grException	C++\ege-13.04.02-full\src\graphics.py	/^grException         = 0x10$/;"	v
grFileNotFound	C++\ege-13.04.02-full\src\graphics.py	/^grFileNotFound      =  -3$/;"	v
grFontNotFound	C++\ege-13.04.02-full\src\graphics.py	/^grFontNotFound      =  -8$/;"	v
grIOerror	C++\ege-13.04.02-full\src\graphics.py	/^grIOerror           = -12$/;"	v
grInvalidDriver	C++\ege-13.04.02-full\src\graphics.py	/^grInvalidDriver     =  -4$/;"	v
grInvalidFont	C++\ege-13.04.02-full\src\graphics.py	/^grInvalidFont       = -13$/;"	v
grInvalidFontNum	C++\ege-13.04.02-full\src\graphics.py	/^grInvalidFontNum    = -14$/;"	v
grInvalidMemory	C++\ege-13.04.02-full\src\graphics.py	/^grInvalidMemory     = 0xCDCDCDCD$/;"	v
grInvalidMode	C++\ege-13.04.02-full\src\graphics.py	/^grInvalidMode       = -10$/;"	v
grInvalidRegion	C++\ege-13.04.02-full\src\graphics.py	/^grInvalidRegion     = 0x12$/;"	v
grInvalidVersion	C++\ege-13.04.02-full\src\graphics.py	/^grInvalidVersion    = -18$/;"	v
grNoFloodMem	C++\ege-13.04.02-full\src\graphics.py	/^grNoFloodMem        =  -7$/;"	v
grNoFontMem	C++\ege-13.04.02-full\src\graphics.py	/^grNoFontMem         =  -9$/;"	v
grNoInitGraph	C++\ege-13.04.02-full\src\graphics.py	/^grNoInitGraph       =  -1$/;"	v
grNoLoadMem	C++\ege-13.04.02-full\src\graphics.py	/^grNoLoadMem         =  -5$/;"	v
grNoScanMem	C++\ege-13.04.02-full\src\graphics.py	/^grNoScanMem         =  -6$/;"	v
grNotDetected	C++\ege-13.04.02-full\src\graphics.py	/^grNotDetected       =  -2$/;"	v
grNullPointer	C++\ege-13.04.02-full\src\graphics.py	/^grNullPointer       = 0x14$/;"	v
grOk	C++\ege-13.04.02-full\src\graphics.py	/^grOk                =   0$/;"	v
grOutOfMemory	C++\ege-13.04.02-full\src\graphics.py	/^grOutOfMemory       = 0x13$/;"	v
grParamError	C++\ege-13.04.02-full\src\graphics.py	/^grParamError        = 0x11$/;"	v
BILINEAR_INTERPOLATION	C++\ege-13.04.02-full\src\image.cpp	1539;"	d	file:
IMAGE	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::IMAGE() {$/;"	f	class:ege::IMAGE
IMAGE	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::IMAGE(IMAGE &img) {$/;"	f	class:ege::IMAGE
IMAGE	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::IMAGE(int width, int height) {$/;"	f	class:ege::IMAGE
_CRT_SECURE_NO_DEPRECATE	C++\ege-13.04.02-full\src\image.cpp	13;"	d	file:
_CRT_SECURE_NO_WARNINGS	C++\ege-13.04.02-full\src\image.cpp	9;"	d	file:
color	C++\ege-13.04.02-full\src\image.cpp	/^	int color;$/;"	m	struct:ege::trangle2d	file:
color	C++\ege-13.04.02-full\src\image.cpp	/^	int color;$/;"	m	struct:ege::trangle3d	file:
copyimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::copyimage(const PIMAGE pSrcImg) {$/;"	f	class:ege::IMAGE
createimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::createimage(int width, int height) {$/;"	f	class:ege::IMAGE
delete_pattern	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::delete_pattern() {$/;"	f	class:ege::IMAGE
deleteimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::deleteimage() {$/;"	f	class:ege::IMAGE
delimage	C++\ege-13.04.02-full\src\image.cpp	/^delimage(PIMAGE pImg) {$/;"	f	namespace:ege
draw_flat_scanline	C++\ege-13.04.02-full\src\image.cpp	/^draw_flat_scanline(PIMAGE dc_dest, const struct vector2d* vt, PIMAGE dc_src, const struct vector2d* svt, int x1, int x2) {$/;"	f	namespace:ege
draw_flat_scanline_alpha	C++\ege-13.04.02-full\src\image.cpp	/^draw_flat_scanline_alpha(PIMAGE dc_dest, const struct vector2d* vt, PIMAGE dc_src, const struct vector2d* svt, int x1, int x2, int alpha) {$/;"	f	namespace:ege
draw_flat_scanline_alpha_s	C++\ege-13.04.02-full\src\image.cpp	/^draw_flat_scanline_alpha_s(PIMAGE dc_dest, const struct vector2d* vt, PIMAGE dc_src, const struct vector2d* svt, int x1, int x2, int alpha) {$/;"	f	namespace:ege
draw_flat_scanline_alphatrans	C++\ege-13.04.02-full\src\image.cpp	/^draw_flat_scanline_alphatrans(PIMAGE dc_dest, const struct vector2d* vt, PIMAGE dc_src, const struct vector2d* svt, int x1, int x2, int alpha) {$/;"	f	namespace:ege
draw_flat_scanline_alphatrans_s	C++\ege-13.04.02-full\src\image.cpp	/^draw_flat_scanline_alphatrans_s(PIMAGE dc_dest, const struct vector2d* vt, PIMAGE dc_src, const struct vector2d* svt, int x1, int x2, int alpha) {$/;"	f	namespace:ege
draw_flat_scanline_s	C++\ege-13.04.02-full\src\image.cpp	/^draw_flat_scanline_s(PIMAGE dc_dest, const struct vector2d* vt, PIMAGE dc_src, const struct vector2d* svt, int x1, int x2) {$/;"	f	namespace:ege
draw_flat_scanline_transparent	C++\ege-13.04.02-full\src\image.cpp	/^draw_flat_scanline_transparent(PIMAGE dc_dest, const struct vector2d* vt, PIMAGE dc_src, const struct vector2d* svt, int x1, int x2) {$/;"	f	namespace:ege
draw_flat_scanline_transparent_s	C++\ege-13.04.02-full\src\image.cpp	/^draw_flat_scanline_transparent_s(PIMAGE dc_dest, const struct vector2d* vt, PIMAGE dc_src, const struct vector2d* svt, int x1, int x2) {$/;"	f	namespace:ege
draw_flat_trangle_alpha	C++\ege-13.04.02-full\src\image.cpp	/^draw_flat_trangle_alpha(PIMAGE dc_dest, const struct trangle2d* dt, PIMAGE dc_src, const struct trangle2d* tt, int x1, int y1, int x2, int y2, int transparent, int alpha) {$/;"	f	namespace:ege
draw_flat_trangle_alpha_s	C++\ege-13.04.02-full\src\image.cpp	/^draw_flat_trangle_alpha_s(PIMAGE dc_dest, const struct trangle2d* dt, PIMAGE dc_src, const struct trangle2d* tt, int x1, int y1, int x2, int y2, int transparent, int alpha) {$/;"	f	namespace:ege
ege	C++\ege-13.04.02-full\src\image.cpp	/^namespace ege {$/;"	n	file:
ege_enable_aa	C++\ege-13.04.02-full\src\image.cpp	/^ege_enable_aa(bool enable, PIMAGE pimg) {$/;"	f	namespace:ege
fix_rect_0size	C++\ege-13.04.02-full\src\image.cpp	/^fix_rect_0size($/;"	f	namespace:ege
fix_rect_1size	C++\ege-13.04.02-full\src\image.cpp	/^fix_rect_1size($/;"	f	namespace:ege
float2int	C++\ege-13.04.02-full\src\image.cpp	/^int float2int(float f) {$/;"	f	namespace:ege
g_font_def	C++\ege-13.04.02-full\src\image.cpp	/^static HFONT    g_font_def;$/;"	m	namespace:ege	file:
g_hbmp_def	C++\ege-13.04.02-full\src\image.cpp	/^static HBITMAP  g_hbmp_def;$/;"	m	namespace:ege	file:
g_hbr_def	C++\ege-13.04.02-full\src\image.cpp	/^static HBRUSH   g_hbr_def;$/;"	m	namespace:ege	file:
g_pen_def	C++\ege-13.04.02-full\src\image.cpp	/^static HPEN     g_pen_def;$/;"	m	namespace:ege	file:
gentexture	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::gentexture(bool gen) {$/;"	f	class:ege::IMAGE
getbuffer	C++\ege-13.04.02-full\src\image.cpp	/^color_t* getbuffer(PIMAGE pImg) {$/;"	f	namespace:ege
getheight	C++\ege-13.04.02-full\src\image.cpp	/^getheight(PIMAGE pimg) {$/;"	f	namespace:ege
getimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::getimage(LPCSTR filename, int zoomWidth, int zoomHeight) {$/;"	f	class:ege::IMAGE
getimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::getimage(LPCSTR pResType, LPCSTR pResName, int zoomWidth, int zoomHeight) {$/;"	f	class:ege::IMAGE
getimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::getimage(LPCWSTR filename, int zoomWidth, int zoomHeight) {$/;"	f	class:ege::IMAGE
getimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::getimage(LPCWSTR pResType, LPCWSTR pResName, int zoomWidth, int zoomHeight) {$/;"	f	class:ege::IMAGE
getimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::getimage(const PIMAGE pSrcImg, int srcX, int srcY, int srcWidth, int srcHeight) {$/;"	f	class:ege::IMAGE
getimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::getimage(int srcX, int srcY, int srcWidth, int srcHeight) {$/;"	f	class:ege::IMAGE
getimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::getimage(void* pMem, long size) {$/;"	f	class:ege::IMAGE
getimage	C++\ege-13.04.02-full\src\image.cpp	/^getimage(PIMAGE pDstImg, LPCSTR pImgFile, int zoomWidth, int zoomHeight) {$/;"	f	namespace:ege
getimage	C++\ege-13.04.02-full\src\image.cpp	/^getimage(PIMAGE pDstImg, LPCSTR pResType, LPCSTR pResName, int zoomWidth, int zoomHeight) {$/;"	f	namespace:ege
getimage	C++\ege-13.04.02-full\src\image.cpp	/^getimage(PIMAGE pDstImg, LPCWSTR pImgFile, int zoomWidth, int zoomHeight) {$/;"	f	namespace:ege
getimage	C++\ege-13.04.02-full\src\image.cpp	/^getimage(PIMAGE pDstImg, LPCWSTR pResType, LPCWSTR pResName, int zoomWidth, int zoomHeight) {$/;"	f	namespace:ege
getimage	C++\ege-13.04.02-full\src\image.cpp	/^getimage(PIMAGE pDstImg, const PIMAGE pSrcImg, int srcX, int srcY, int srcWidth, int srcHeight) {$/;"	f	namespace:ege
getimage	C++\ege-13.04.02-full\src\image.cpp	/^getimage(PIMAGE pDstImg, int srcX, int srcY, int srcWidth, int srcHeight) {$/;"	f	namespace:ege
getimage_pngfile	C++\ege-13.04.02-full\src\image.cpp	/^getimage_pngfile(PIMAGE pimg, LPCSTR  filename) {$/;"	f	namespace:ege
getimage_pngfile	C++\ege-13.04.02-full\src\image.cpp	/^getimage_pngfile(PIMAGE pimg, LPCWSTR filename) {$/;"	f	namespace:ege
getpngimg	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::getpngimg(FILE* fp) {$/;"	f	class:ege::IMAGE
getwidth	C++\ege-13.04.02-full\src\image.cpp	/^getwidth(PIMAGE pimg) {$/;"	f	namespace:ege
getx	C++\ege-13.04.02-full\src\image.cpp	/^getx(PIMAGE pimg) {$/;"	f	namespace:ege
gety	C++\ege-13.04.02-full\src\image.cpp	/^gety(PIMAGE pimg) {$/;"	f	namespace:ege
imagefilter_blurring	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::imagefilter_blurring ($/;"	f	class:ege::IMAGE
imagefilter_blurring	C++\ege-13.04.02-full\src\image.cpp	/^imagefilter_blurring ($/;"	f	namespace:ege
imagefilter_blurring_4	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::imagefilter_blurring_4 ($/;"	f	class:ege::IMAGE
imagefilter_blurring_8	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::imagefilter_blurring_8 ($/;"	f	class:ege::IMAGE
inittest	C++\ege-13.04.02-full\src\image.cpp	/^void IMAGE::inittest(const WCHAR* strCallFunction) const {$/;"	f	class:ege::IMAGE
newimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::newimage(HDC hdc, int width, int height) {$/;"	f	class:ege::IMAGE
newimage	C++\ege-13.04.02-full\src\image.cpp	/^newimage() {$/;"	f	namespace:ege
newimage	C++\ege-13.04.02-full\src\image.cpp	/^newimage(int width, int height) {$/;"	f	namespace:ege
operator =	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::operator = (const IMAGE &img) {$/;"	f	class:ege::IMAGE
p	C++\ege-13.04.02-full\src\image.cpp	/^	struct point2d p[2];$/;"	m	struct:ege::vector2d	typeref:struct:ege::vector2d::point2d	file:
p	C++\ege-13.04.02-full\src\image.cpp	/^	struct point2d p[3];$/;"	m	struct:ege::trangle2d	typeref:struct:ege::trangle2d::point2d	file:
p	C++\ege-13.04.02-full\src\image.cpp	/^	struct point3d p[2];$/;"	m	struct:ege::vector3d	typeref:struct:ege::vector3d::point3d	file:
p	C++\ege-13.04.02-full\src\image.cpp	/^	struct point3d p[3];$/;"	m	struct:ege::trangle3d	typeref:struct:ege::trangle3d::point3d	file:
point2d	C++\ege-13.04.02-full\src\image.cpp	/^struct point2d {$/;"	s	namespace:ege	file:
point3d	C++\ege-13.04.02-full\src\image.cpp	/^struct point3d {$/;"	s	namespace:ege	file:
putimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::putimage(PIMAGE pDstImg, int dstX, int dstY, DWORD dwRop) const {$/;"	f	class:ege::IMAGE
putimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::putimage(PIMAGE pDstImg, int dstX, int dstY, int dstWidth, int dstHeight, int srcX, int srcY, DWORD dwRop) const {$/;"	f	class:ege::IMAGE
putimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::putimage(PIMAGE pDstImg, int dstX, int dstY, int dstWidth, int dstHeight, int srcX, int srcY, int srcWidth, int srcHeight, DWORD dwRop) const {$/;"	f	class:ege::IMAGE
putimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::putimage(int dstX, int dstY, DWORD dwRop) const {$/;"	f	class:ege::IMAGE
putimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::putimage(int dstX, int dstY, int dstWidth, int dstHeight, int srcX, int srcY, DWORD dwRop) const {$/;"	f	class:ege::IMAGE
putimage	C++\ege-13.04.02-full\src\image.cpp	/^putimage(PIMAGE pDstImg, int dstX, int dstY, const PIMAGE pSrcImg, DWORD dwRop) {$/;"	f	namespace:ege
putimage	C++\ege-13.04.02-full\src\image.cpp	/^putimage(PIMAGE pDstImg, int dstX, int dstY, int dstWidth, int dstHeight, const PIMAGE pSrcImg, int srcX, int srcY, DWORD dwRop) {$/;"	f	namespace:ege
putimage	C++\ege-13.04.02-full\src\image.cpp	/^putimage(PIMAGE pDstImg, int dstX, int dstY, int dstWidth, int dstHeight, const PIMAGE pSrcImg, int srcX, int srcY, int srcWidth, int srcHeight, DWORD dwRop) {$/;"	f	namespace:ege
putimage	C++\ege-13.04.02-full\src\image.cpp	/^putimage(int dstX, int dstY, const PIMAGE pSrcImg, DWORD dwRop) {$/;"	f	namespace:ege
putimage	C++\ege-13.04.02-full\src\image.cpp	/^putimage(int dstX, int dstY, int dstWidth, int dstHeight, const PIMAGE pSrcImg, int srcX, int srcY, DWORD dwRop) {$/;"	f	namespace:ege
putimage	C++\ege-13.04.02-full\src\image.cpp	/^putimage(int dstX, int dstY, int dstWidth, int dstHeight, const PIMAGE pSrcImg, int srcX, int srcY, int srcWidth, int srcHeight, DWORD dwRop) {$/;"	f	namespace:ege
putimage_alphablend	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::putimage_alphablend($/;"	f	class:ege::IMAGE
putimage_alphablend	C++\ege-13.04.02-full\src\image.cpp	/^putimage_alphablend($/;"	f	namespace:ege
putimage_alphafilter	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::putimage_alphafilter($/;"	f	class:ege::IMAGE
putimage_alphatransparent	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::putimage_alphatransparent($/;"	f	class:ege::IMAGE
putimage_alphatransparent	C++\ege-13.04.02-full\src\image.cpp	/^putimage_alphatransparent($/;"	f	namespace:ege
putimage_rotate	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::putimage_rotate($/;"	f	class:ege::IMAGE
putimage_rotate	C++\ege-13.04.02-full\src\image.cpp	/^putimage_rotate($/;"	f	namespace:ege
putimage_rotatezoom	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::putimage_rotatezoom($/;"	f	class:ege::IMAGE
putimage_rotatezoom	C++\ege-13.04.02-full\src\image.cpp	/^putimage_rotatezoom($/;"	f	namespace:ege
putimage_trangle	C++\ege-13.04.02-full\src\image.cpp	/^putimage_trangle($/;"	f	namespace:ege
putimage_transparent	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::putimage_transparent($/;"	f	class:ege::IMAGE
putimage_transparent	C++\ege-13.04.02-full\src\image.cpp	/^putimage_transparent($/;"	f	namespace:ege
putimage_withalpha	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::putimage_withalpha($/;"	f	class:ege::IMAGE
putimage_withalpha	C++\ege-13.04.02-full\src\image.cpp	/^putimage_withalpha($/;"	f	namespace:ege
resize	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::resize(int width, int height) {$/;"	f	class:ege::IMAGE
resize	C++\ege-13.04.02-full\src\image.cpp	/^resize(PIMAGE pDstImg, int width, int height) {$/;"	f	namespace:ege
saveimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::saveimage(LPCSTR  filename) {$/;"	f	class:ege::IMAGE
saveimage	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::saveimage(LPCWSTR filename) {$/;"	f	class:ege::IMAGE
saveimage	C++\ege-13.04.02-full\src\image.cpp	/^saveimage(PIMAGE pimg, LPCSTR  filename) {$/;"	f	namespace:ege
saveimage	C++\ege-13.04.02-full\src\image.cpp	/^saveimage(PIMAGE pimg, LPCWSTR filename) {$/;"	f	namespace:ege
saveimagetofile	C++\ege-13.04.02-full\src\image.cpp	/^saveimagetofile(PIMAGE img, FILE* fp) {$/;"	f	namespace:ege
savepng	C++\ege-13.04.02-full\src\image.cpp	/^savepng(PIMAGE pimg, LPCSTR  filename, int bAlpha) {$/;"	f	namespace:ege
savepng	C++\ege-13.04.02-full\src\image.cpp	/^savepng(PIMAGE pimg, LPCWSTR filename, int bAlpha) {$/;"	f	namespace:ege
savepngimg	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::savepngimg(FILE* fp, int bAlpha) {$/;"	f	class:ege::IMAGE
set_pattern	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::set_pattern(void* obj, int type) {$/;"	f	class:ege::IMAGE
trangle2d	C++\ege-13.04.02-full\src\image.cpp	/^typedef struct trangle2d {$/;"	s	namespace:ege	file:
trangle2d	C++\ege-13.04.02-full\src\image.cpp	/^}trangle2d;$/;"	t	namespace:ege	typeref:struct:ege::trangle2d	file:
trangle3d	C++\ege-13.04.02-full\src\image.cpp	/^struct trangle3d {$/;"	s	namespace:ege	file:
vector2d	C++\ege-13.04.02-full\src\image.cpp	/^struct vector2d {$/;"	s	namespace:ege	file:
vector3d	C++\ege-13.04.02-full\src\image.cpp	/^struct vector3d {$/;"	s	namespace:ege	file:
x	C++\ege-13.04.02-full\src\image.cpp	/^	float x;$/;"	m	struct:ege::point2d	file:
x	C++\ege-13.04.02-full\src\image.cpp	/^	float x;$/;"	m	struct:ege::point3d	file:
y	C++\ege-13.04.02-full\src\image.cpp	/^	float y;$/;"	m	struct:ege::point2d	file:
y	C++\ege-13.04.02-full\src\image.cpp	/^	float y;$/;"	m	struct:ege::point3d	file:
z	C++\ege-13.04.02-full\src\image.cpp	/^	float z;$/;"	m	struct:ege::point3d	file:
~IMAGE	C++\ege-13.04.02-full\src\image.cpp	/^IMAGE::~IMAGE() {$/;"	f	class:ege::IMAGE
DCR_USE_NEW_105760	C++\ege-13.04.02-full\src\includes\GdiPlus.h	26;"	d
DCR_USE_NEW_125467	C++\ege-13.04.02-full\src\includes\GdiPlus.h	84;"	d
DCR_USE_NEW_127084	C++\ege-13.04.02-full\src\includes\GdiPlus.h	29;"	d
DCR_USE_NEW_135429	C++\ege-13.04.02-full\src\includes\GdiPlus.h	32;"	d
DCR_USE_NEW_137252	C++\ege-13.04.02-full\src\includes\GdiPlus.h	72;"	d
DCR_USE_NEW_140782	C++\ege-13.04.02-full\src\includes\GdiPlus.h	35;"	d
DCR_USE_NEW_140855	C++\ege-13.04.02-full\src\includes\GdiPlus.h	38;"	d
DCR_USE_NEW_140857	C++\ege-13.04.02-full\src\includes\GdiPlus.h	41;"	d
DCR_USE_NEW_140861	C++\ege-13.04.02-full\src\includes\GdiPlus.h	44;"	d
DCR_USE_NEW_145135	C++\ege-13.04.02-full\src\includes\GdiPlus.h	47;"	d
DCR_USE_NEW_145138	C++\ege-13.04.02-full\src\includes\GdiPlus.h	50;"	d
DCR_USE_NEW_145139	C++\ege-13.04.02-full\src\includes\GdiPlus.h	53;"	d
DCR_USE_NEW_145804	C++\ege-13.04.02-full\src\includes\GdiPlus.h	56;"	d
DCR_USE_NEW_146933	C++\ege-13.04.02-full\src\includes\GdiPlus.h	59;"	d
DCR_USE_NEW_152154	C++\ege-13.04.02-full\src\includes\GdiPlus.h	62;"	d
DCR_USE_NEW_168772	C++\ege-13.04.02-full\src\includes\GdiPlus.h	87;"	d
DCR_USE_NEW_174340	C++\ege-13.04.02-full\src\includes\GdiPlus.h	93;"	d
DCR_USE_NEW_175866	C++\ege-13.04.02-full\src\includes\GdiPlus.h	65;"	d
DCR_USE_NEW_186091	C++\ege-13.04.02-full\src\includes\GdiPlus.h	81;"	d
DCR_USE_NEW_186151	C++\ege-13.04.02-full\src\includes\GdiPlus.h	96;"	d
DCR_USE_NEW_186764	C++\ege-13.04.02-full\src\includes\GdiPlus.h	90;"	d
DCR_USE_NEW_188922	C++\ege-13.04.02-full\src\includes\GdiPlus.h	69;"	d
DCR_USE_NEW_197819	C++\ege-13.04.02-full\src\includes\GdiPlus.h	78;"	d
DCR_USE_NEW_202903	C++\ege-13.04.02-full\src\includes\GdiPlus.h	75;"	d
DCR_USE_NEW_235072	C++\ege-13.04.02-full\src\includes\GdiPlus.h	100;"	d
DllExports	C++\ege-13.04.02-full\src\includes\GdiPlus.h	/^    namespace DllExports$/;"	n	namespace:Gdiplus
Gdiplus	C++\ege-13.04.02-full\src\includes\GdiPlus.h	/^namespace Gdiplus$/;"	n
INT16	C++\ege-13.04.02-full\src\includes\GdiPlus.h	/^typedef signed   short   INT16;$/;"	t
UINT16	C++\ege-13.04.02-full\src\includes\GdiPlus.h	/^typedef unsigned short  UINT16;$/;"	t
_GDIPLUS_H	C++\ege-13.04.02-full\src\includes\GdiPlus.h	16;"	d
GdiplusBase	C++\ege-13.04.02-full\src\includes\GdiPlusBase.h	/^class GdiplusBase$/;"	c
_GDIPLUSBASE_H	C++\ege-13.04.02-full\src\includes\GdiPlusBase.h	16;"	d
Bitmap	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::Bitmap($/;"	f	class:Bitmap
Bitmap	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^inline Bitmap::Bitmap(GpBitmap *nativeBitmap)$/;"	f	class:Bitmap
Clone	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::Clone($/;"	f	class:Bitmap
Clone	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::Clone() $/;"	f	class:Image
FromBITMAPINFO	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::FromBITMAPINFO($/;"	f	class:Bitmap
FromDirectDrawSurface7	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::FromDirectDrawSurface7($/;"	f	class:Bitmap
FromFile	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::FromFile($/;"	f	class:Bitmap
FromFile	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::FromFile($/;"	f	class:Image
FromHBITMAP	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::FromHBITMAP($/;"	f	class:Bitmap
FromHICON	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::FromHICON($/;"	f	class:Bitmap
FromResource	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::FromResource($/;"	f	class:Bitmap
FromStream	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::FromStream($/;"	f	class:Bitmap
FromStream	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::FromStream($/;"	f	class:Image
GetAllPropertyItems	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetAllPropertyItems($/;"	f	class:Image
GetBounds	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetBounds($/;"	f	class:Image
GetEncoderParameterList	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetEncoderParameterList($/;"	f	class:Image
GetEncoderParameterListSize	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetEncoderParameterListSize($/;"	f	class:Image
GetFlags	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetFlags()$/;"	f	class:Image
GetFrameCount	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetFrameCount($/;"	f	class:Image
GetFrameDimensionsCount	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetFrameDimensionsCount()$/;"	f	class:Image
GetFrameDimensionsList	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetFrameDimensionsList($/;"	f	class:Image
GetHBITMAP	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::GetHBITMAP($/;"	f	class:Bitmap
GetHICON	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::GetHICON($/;"	f	class:Bitmap
GetHeight	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetHeight()$/;"	f	class:Image
GetHorizontalResolution	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetHorizontalResolution()$/;"	f	class:Image
GetLastStatus	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetLastStatus() const$/;"	f	class:Image
GetLayout	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetLayout() const$/;"	f	class:Image
GetPalette	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetPalette($/;"	f	class:Image
GetPaletteSize	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetPaletteSize()$/;"	f	class:Image
GetPhysicalDimension	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetPhysicalDimension($/;"	f	class:Image
GetPixel	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::GetPixel($/;"	f	class:Bitmap
GetPixelFormat	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetPixelFormat()$/;"	f	class:Image
GetPropertyCount	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetPropertyCount()$/;"	f	class:Image
GetPropertyIdList	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetPropertyIdList($/;"	f	class:Image
GetPropertyItem	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetPropertyItem($/;"	f	class:Image
GetPropertyItemSize	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetPropertyItemSize($/;"	f	class:Image
GetPropertySize	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetPropertySize($/;"	f	class:Image
GetRawFormat	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetRawFormat(OUT GUID *format)$/;"	f	class:Image
GetThumbnailImage	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetThumbnailImage($/;"	f	class:Image
GetType	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetType() const$/;"	f	class:Image
GetVerticalResolution	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetVerticalResolution()$/;"	f	class:Image
GetWidth	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::GetWidth()$/;"	f	class:Image
Image	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::Image($/;"	f	class:Image
Image	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::Image(GpImage *nativeImage, Status status)$/;"	f	class:Image
LockBits	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::LockBits($/;"	f	class:Bitmap
RemovePropertyItem	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::RemovePropertyItem($/;"	f	class:Image
RotateFlip	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::RotateFlip($/;"	f	class:Image
Save	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::Save($/;"	f	class:Image
SaveAdd	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::SaveAdd($/;"	f	class:Image
SelectActiveFrame	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::SelectActiveFrame($/;"	f	class:Image
SetLayout	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::SetLayout(IN const ImageLayout layout)$/;"	f	class:Image
SetNativeImage	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::SetNativeImage(GpImage *nativeImage)$/;"	f	class:Image
SetPalette	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::SetPalette($/;"	f	class:Image
SetPixel	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::SetPixel($/;"	f	class:Bitmap
SetPropertyItem	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::SetPropertyItem($/;"	f	class:Image
SetResolution	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::SetResolution($/;"	f	class:Bitmap
UnlockBits	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Bitmap::UnlockBits($/;"	f	class:Bitmap
_GDIPLUSBITMAP_H	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	16;"	d
~Image	C++\ege-13.04.02-full\src\includes\GdiPlusBitmap.h	/^Image::~Image()$/;"	f	class:Image
Brush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Brush()$/;"	f	class:Brush
Brush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Brush(GpBrush* nativeBrush, Status status)$/;"	f	class:Brush
Brush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Brush(const Brush& brush)$/;"	f	class:Brush
Brush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^class Brush : public GdiplusBase$/;"	c
Clone	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    virtual Brush* Clone() const$/;"	f	class:Brush
GetBackgroundColor	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status GetBackgroundColor(OUT Color *color) const$/;"	f	class:HatchBrush
GetBlend	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status GetBlend(OUT REAL* blendFactors, $/;"	f	class:LinearGradientBrush
GetBlendCount	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    INT GetBlendCount() const$/;"	f	class:LinearGradientBrush
GetColor	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status GetColor(OUT Color* color) const$/;"	f	class:SolidBrush
GetForegroundColor	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status GetForegroundColor(OUT Color* color) const$/;"	f	class:HatchBrush
GetGammaCorrection	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    BOOL GetGammaCorrection() const$/;"	f	class:LinearGradientBrush
GetHatchStyle	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    HatchStyle GetHatchStyle() const$/;"	f	class:HatchBrush
GetImage	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Image *GetImage() const$/;"	f	class:TextureBrush
GetInterpolationColorCount	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    INT GetInterpolationColorCount() const$/;"	f	class:LinearGradientBrush
GetInterpolationColors	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status GetInterpolationColors(OUT Color* presetColors, $/;"	f	class:LinearGradientBrush
GetLastStatus	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status GetLastStatus() const$/;"	f	class:Brush
GetLinearColors	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status GetLinearColors(OUT Color* colors) const$/;"	f	class:LinearGradientBrush
GetLinearPoints	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status GetLinearPoints(OUT Point* points) const$/;"	f	class:LinearGradientBrush
GetLinearPoints	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status GetLinearPoints(OUT PointF* points) const $/;"	f	class:LinearGradientBrush
GetRectangle	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status GetRectangle(OUT Rect* rect) const$/;"	f	class:LinearGradientBrush
GetRectangle	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status GetRectangle(OUT RectF* rect) const$/;"	f	class:LinearGradientBrush
GetTransform	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status GetTransform(OUT Matrix *matrix) const$/;"	f	class:LinearGradientBrush
GetTransform	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status GetTransform(OUT Matrix* matrix) const$/;"	f	class:TextureBrush
GetType	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    BrushType GetType() const$/;"	f	class:Brush
GetWrapMode	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    WrapMode GetWrapMode() const$/;"	f	class:LinearGradientBrush
GetWrapMode	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    WrapMode GetWrapMode() const$/;"	f	class:TextureBrush
HatchBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    HatchBrush()$/;"	f	class:HatchBrush
HatchBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    HatchBrush(IN HatchStyle hatchStyle, $/;"	f	class:HatchBrush
HatchBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^class HatchBrush : public Brush$/;"	c
LinearGradientBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    LinearGradientBrush()$/;"	f	class:LinearGradientBrush
LinearGradientBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    LinearGradientBrush(IN const Point& point1,$/;"	f	class:LinearGradientBrush
LinearGradientBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    LinearGradientBrush(IN const PointF& point1,$/;"	f	class:LinearGradientBrush
LinearGradientBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    LinearGradientBrush(IN const Rect& rect,$/;"	f	class:LinearGradientBrush
LinearGradientBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    LinearGradientBrush(IN const RectF& rect,$/;"	f	class:LinearGradientBrush
LinearGradientBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^class LinearGradientBrush : public Brush$/;"	c
MultiplyTransform	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status MultiplyTransform(IN const Matrix* matrix,$/;"	f	class:LinearGradientBrush
MultiplyTransform	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status MultiplyTransform(IN const Matrix* matrix,$/;"	f	class:TextureBrush
ResetTransform	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status ResetTransform()$/;"	f	class:LinearGradientBrush
ResetTransform	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status ResetTransform()$/;"	f	class:TextureBrush
RotateTransform	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status RotateTransform(IN REAL angle, $/;"	f	class:LinearGradientBrush
RotateTransform	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status RotateTransform(IN REAL angle, $/;"	f	class:TextureBrush
ScaleTransform	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status ScaleTransform(IN REAL sx, $/;"	f	class:LinearGradientBrush
ScaleTransform	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status ScaleTransform(IN REAL sx, $/;"	f	class:TextureBrush
SetBlend	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status SetBlend(IN const REAL* blendFactors, $/;"	f	class:LinearGradientBrush
SetBlendBellShape	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status SetBlendBellShape(IN REAL focus, $/;"	f	class:LinearGradientBrush
SetBlendTriangularShape	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status SetBlendTriangularShape($/;"	f	class:LinearGradientBrush
SetColor	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status SetColor(IN const Color& color)$/;"	f	class:SolidBrush
SetGammaCorrection	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status SetGammaCorrection(IN BOOL useGammaCorrection)$/;"	f	class:LinearGradientBrush
SetInterpolationColors	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status SetInterpolationColors(IN const Color* presetColors,$/;"	f	class:LinearGradientBrush
SetLinearColors	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status SetLinearColors(IN const Color& color1, $/;"	f	class:LinearGradientBrush
SetLinearPoints	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status SetLinearPoints(IN const Point& point1, $/;"	f	class:LinearGradientBrush
SetLinearPoints	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status SetLinearPoints(IN const PointF& point1, $/;"	f	class:LinearGradientBrush
SetNativeBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    VOID SetNativeBrush(GpBrush* nativeBrush)$/;"	f	class:Brush
SetStatus	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status SetStatus(Status status) const$/;"	f	class:Brush
SetTransform	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status SetTransform(IN const Matrix* matrix)$/;"	f	class:LinearGradientBrush
SetTransform	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status SetTransform(IN const Matrix* matrix)$/;"	f	class:TextureBrush
SetWrapMode	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status SetWrapMode(IN WrapMode wrapMode)$/;"	f	class:LinearGradientBrush
SetWrapMode	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status SetWrapMode(IN WrapMode wrapMode)$/;"	f	class:TextureBrush
SolidBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    SolidBrush()$/;"	f	class:SolidBrush
SolidBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    SolidBrush(IN const Color& color)$/;"	f	class:SolidBrush
SolidBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^class SolidBrush : public Brush$/;"	c
TextureBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    TextureBrush($/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    TextureBrush()$/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    TextureBrush(IN Image *image, $/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    TextureBrush(IN Image* image, $/;"	f	class:TextureBrush
TextureBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^class TextureBrush : public Brush$/;"	c
TranslateTransform	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status TranslateTransform(IN REAL dx, $/;"	f	class:LinearGradientBrush
TranslateTransform	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Status TranslateTransform(IN REAL dx,$/;"	f	class:TextureBrush
_GDIPLUSBRUSH_H	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	16;"	d
lastResult	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    mutable Status lastResult;$/;"	m	class:Brush
nativeBrush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    GpBrush* nativeBrush;$/;"	m	class:Brush
operator =	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    Brush& operator=(const Brush& brush)$/;"	f	class:Brush
~Brush	C++\ege-13.04.02-full\src\includes\GdiPlusBrush.h	/^    virtual ~Brush()$/;"	f	class:Brush
CachedBitmap	C++\ege-13.04.02-full\src\includes\GdiPlusCachedBitmap.h	/^CachedBitmap::CachedBitmap($/;"	f	class:CachedBitmap
GetLastStatus	C++\ege-13.04.02-full\src\includes\GdiPlusCachedBitmap.h	/^CachedBitmap::GetLastStatus() const $/;"	f	class:CachedBitmap
_GDIPLUSCACHEDBITMAP_H	C++\ege-13.04.02-full\src\includes\GdiPlusCachedBitmap.h	18;"	d
~CachedBitmap	C++\ege-13.04.02-full\src\includes\GdiPlusCachedBitmap.h	/^CachedBitmap::~CachedBitmap()$/;"	f	class:CachedBitmap
AlphaMask	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^        AlphaMask   = 0xff000000,$/;"	e	enum:Color::__anon17
AlphaShift	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^        AlphaShift  = 24,$/;"	e	enum:Color::__anon16
Aqua	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       Aqua = 0xff00ffff$/;"	e	enum:Color::__anon15
Argb	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    ARGB Argb;$/;"	m	class:Color
Black	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       Black = 0xff000000,$/;"	e	enum:Color::__anon15
Blue	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       Blue = 0xff0000ff,$/;"	e	enum:Color::__anon15
BlueMask	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^        BlueMask    = 0x000000ff$/;"	e	enum:Color::__anon17
BlueShift	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^        BlueShift   = 0$/;"	e	enum:Color::__anon16
Color	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    Color()$/;"	f	class:Color
Color	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    Color(IN ARGB argb)$/;"	f	class:Color
Color	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    Color(IN BYTE a,$/;"	f	class:Color
Color	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    Color(IN BYTE r,$/;"	f	class:Color
Color	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^class Color$/;"	c
ColorChannelFlags	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^enum ColorChannelFlags$/;"	g
ColorChannelFlagsC	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    ColorChannelFlagsC = 0,$/;"	e	enum:ColorChannelFlags
ColorChannelFlagsK	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    ColorChannelFlagsK,$/;"	e	enum:ColorChannelFlags
ColorChannelFlagsLast	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    ColorChannelFlagsLast$/;"	e	enum:ColorChannelFlags
ColorChannelFlagsM	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    ColorChannelFlagsM,$/;"	e	enum:ColorChannelFlags
ColorChannelFlagsY	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    ColorChannelFlagsY,$/;"	e	enum:ColorChannelFlags
ColorMode	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^enum ColorMode$/;"	g
ColorModeARGB32	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    ColorModeARGB32 = 0,$/;"	e	enum:ColorMode
ColorModeARGB64	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    ColorModeARGB64 = 1$/;"	e	enum:ColorMode
Fuchsia	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       Fuchsia = 0xffff00ff,$/;"	e	enum:Color::__anon15
GetA	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    BYTE GetA() const$/;"	f	class:Color
GetAlpha	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    BYTE GetAlpha() const$/;"	f	class:Color
GetB	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    BYTE GetB() const$/;"	f	class:Color
GetBlue	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    BYTE GetBlue() const$/;"	f	class:Color
GetG	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    BYTE GetG() const$/;"	f	class:Color
GetGreen	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    BYTE GetGreen() const$/;"	f	class:Color
GetR	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    BYTE GetR() const$/;"	f	class:Color
GetRed	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    BYTE GetRed() const$/;"	f	class:Color
GetValue	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    ARGB GetValue() const$/;"	f	class:Color
Gray	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       Gray = 0xff808080,$/;"	e	enum:Color::__anon15
Green	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       Green = 0xff008000,$/;"	e	enum:Color::__anon15
GreenMask	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^        GreenMask   = 0x0000ff00,$/;"	e	enum:Color::__anon17
GreenShift	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^        GreenShift  = 8,$/;"	e	enum:Color::__anon16
Lime	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       Lime = 0xff00ff00,$/;"	e	enum:Color::__anon15
MakeARGB	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    static ARGB MakeARGB(IN BYTE a,$/;"	f	class:Color
Maroon	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       Maroon = 0xff800000,$/;"	e	enum:Color::__anon15
Navy	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       Navy = 0xff000080,$/;"	e	enum:Color::__anon15
Olive	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       Olive = 0xff808000,$/;"	e	enum:Color::__anon15
Purple	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       Purple = 0xff800080,$/;"	e	enum:Color::__anon15
Red	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       Red = 0xffff0000,$/;"	e	enum:Color::__anon15
RedMask	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^        RedMask     = 0x00ff0000,$/;"	e	enum:Color::__anon17
RedShift	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^        RedShift    = 16,$/;"	e	enum:Color::__anon16
SetFromCOLORREF	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    VOID SetFromCOLORREF(IN COLORREF rgb)$/;"	f	class:Color
SetValue	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    VOID SetValue(IN ARGB argb)$/;"	f	class:Color
Silver	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       Silver = 0xffc0c0c0,$/;"	e	enum:Color::__anon15
Teal	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       Teal = 0xff008080,$/;"	e	enum:Color::__anon15
ToCOLORREF	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^    COLORREF ToCOLORREF() const$/;"	f	class:Color
White	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       White = 0xffffffff,$/;"	e	enum:Color::__anon15
Yellow	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	/^       Yellow = 0xffffff00,$/;"	e	enum:Color::__anon15
_GDIPLUSCOLOR_H	C++\ege-13.04.02-full\src\includes\GdiPlusColor.h	16;"	d
ColorAdjustType	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^enum ColorAdjustType$/;"	g
ColorAdjustTypeAny	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^    ColorAdjustTypeAny      \/\/ internal use: for querying if any type has recoloring$/;"	e	enum:ColorAdjustType
ColorAdjustTypeBitmap	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^    ColorAdjustTypeBitmap,$/;"	e	enum:ColorAdjustType
ColorAdjustTypeBrush	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^    ColorAdjustTypeBrush,$/;"	e	enum:ColorAdjustType
ColorAdjustTypeCount	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^    ColorAdjustTypeCount,   \/\/ must be immediately after all the individual ones$/;"	e	enum:ColorAdjustType
ColorAdjustTypeDefault	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^    ColorAdjustTypeDefault,$/;"	e	enum:ColorAdjustType
ColorAdjustTypePen	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^    ColorAdjustTypePen,$/;"	e	enum:ColorAdjustType
ColorAdjustTypeText	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^    ColorAdjustTypeText,$/;"	e	enum:ColorAdjustType
ColorMap	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^struct ColorMap$/;"	s
ColorMatrix	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^struct ColorMatrix$/;"	s
ColorMatrixFlags	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^enum ColorMatrixFlags$/;"	g
ColorMatrixFlagsAltGray	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^    ColorMatrixFlagsAltGray   = 2$/;"	e	enum:ColorMatrixFlags
ColorMatrixFlagsDefault	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^    ColorMatrixFlagsDefault   = 0,$/;"	e	enum:ColorMatrixFlags
ColorMatrixFlagsSkipGrays	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^    ColorMatrixFlagsSkipGrays = 1,$/;"	e	enum:ColorMatrixFlags
_GDIPLUSCOLORMATRIX_H	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	16;"	d
m	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^    REAL m[5][5];$/;"	m	struct:ColorMatrix
newColor	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^    Color newColor;$/;"	m	struct:ColorMap
oldColor	C++\ege-13.04.02-full\src\includes\GdiPlusColorMatrix.h	/^    Color oldColor;$/;"	m	struct:ColorMap
BrushType	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum BrushType$/;"	g
BrushTypeHatchFill	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   BrushTypeHatchFill        = 1,$/;"	e	enum:BrushType
BrushTypeLinearGradient	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   BrushTypeLinearGradient   = 4$/;"	e	enum:BrushType
BrushTypePathGradient	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   BrushTypePathGradient     = 3,$/;"	e	enum:BrushType
BrushTypeSolidColor	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   BrushTypeSolidColor       = 0,$/;"	e	enum:BrushType
BrushTypeTextureFill	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   BrushTypeTextureFill      = 2,$/;"	e	enum:BrushType
CombineMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum CombineMode$/;"	g
CombineModeComplement	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CombineModeComplement   \/\/ 5 (does exclude from)$/;"	e	enum:CombineMode
CombineModeExclude	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CombineModeExclude,     \/\/ 4$/;"	e	enum:CombineMode
CombineModeIntersect	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CombineModeIntersect,   \/\/ 1$/;"	e	enum:CombineMode
CombineModeReplace	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CombineModeReplace,     \/\/ 0$/;"	e	enum:CombineMode
CombineModeUnion	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CombineModeUnion,       \/\/ 2$/;"	e	enum:CombineMode
CombineModeXor	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CombineModeXor,         \/\/ 3$/;"	e	enum:CombineMode
CompositingMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum CompositingMode$/;"	g
CompositingModeSourceCopy	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CompositingModeSourceCopy     \/\/ 1$/;"	e	enum:CompositingMode
CompositingModeSourceOver	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CompositingModeSourceOver,    \/\/ 0$/;"	e	enum:CompositingMode
CompositingQuality	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum CompositingQuality$/;"	g
CompositingQualityAssumeLinear	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CompositingQualityAssumeLinear$/;"	e	enum:CompositingQuality
CompositingQualityDefault	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CompositingQualityDefault          = QualityModeDefault,$/;"	e	enum:CompositingQuality
CompositingQualityGammaCorrected	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CompositingQualityGammaCorrected,$/;"	e	enum:CompositingQuality
CompositingQualityHighQuality	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CompositingQualityHighQuality      = QualityModeHigh,$/;"	e	enum:CompositingQuality
CompositingQualityHighSpeed	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CompositingQualityHighSpeed        = QualityModeLow,$/;"	e	enum:CompositingQuality
CompositingQualityInvalid	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CompositingQualityInvalid          = QualityModeInvalid,$/;"	e	enum:CompositingQuality
CoordinateSpace	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum CoordinateSpace$/;"	g
CoordinateSpaceDevice	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CoordinateSpaceDevice     \/\/ 2$/;"	e	enum:CoordinateSpace
CoordinateSpacePage	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CoordinateSpacePage,      \/\/ 1$/;"	e	enum:CoordinateSpace
CoordinateSpaceWorld	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CoordinateSpaceWorld,     \/\/ 0$/;"	e	enum:CoordinateSpace
CustomLineCapType	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum CustomLineCapType$/;"	g
CustomLineCapTypeAdjustableArrow	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CustomLineCapTypeAdjustableArrow = 1$/;"	e	enum:CustomLineCapType
CustomLineCapTypeDefault	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    CustomLineCapTypeDefault         = 0,$/;"	e	enum:CustomLineCapType
DashCap	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum DashCap$/;"	g
DashCapFlat	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    DashCapFlat             = 0,$/;"	e	enum:DashCap
DashCapRound	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    DashCapRound            = 2,$/;"	e	enum:DashCap
DashCapTriangle	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    DashCapTriangle         = 3$/;"	e	enum:DashCap
DashStyle	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum DashStyle$/;"	g
DashStyleCustom	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    DashStyleCustom          \/\/ 5$/;"	e	enum:DashStyle
DashStyleDash	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    DashStyleDash,           \/\/ 1$/;"	e	enum:DashStyle
DashStyleDashDot	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    DashStyleDashDot,        \/\/ 3$/;"	e	enum:DashStyle
DashStyleDashDotDot	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    DashStyleDashDotDot,     \/\/ 4$/;"	e	enum:DashStyle
DashStyleDot	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    DashStyleDot,            \/\/ 2$/;"	e	enum:DashStyle
DashStyleSolid	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    DashStyleSolid,          \/\/ 0$/;"	e	enum:DashStyle
DriverStringOptions	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum DriverStringOptions$/;"	g
DriverStringOptionsCmapLookup	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    DriverStringOptionsCmapLookup             = 1,$/;"	e	enum:DriverStringOptions
DriverStringOptionsCompensateResolution	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    DriverStringOptionsCompensateResolution   = 8$/;"	e	enum:DriverStringOptions
DriverStringOptionsRealizedAdvance	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    DriverStringOptionsRealizedAdvance        = 4,$/;"	e	enum:DriverStringOptions
DriverStringOptionsVertical	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    DriverStringOptionsVertical               = 2,$/;"	e	enum:DriverStringOptions
EmfPlusRecordTotal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTotal,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordType	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum EmfPlusRecordType$/;"	g
EmfPlusRecordTypeBeginContainer	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeBeginContainer,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeBeginContainerNoParams	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeBeginContainerNoParams,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeClear	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeClear,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeComment	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeComment,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawArc	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeDrawArc,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawBeziers	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeDrawBeziers,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawClosedCurve	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeDrawClosedCurve,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawCurve	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeDrawCurve,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawDriverString	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeDrawDriverString,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawEllipse	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeDrawEllipse,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawImage	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeDrawImage,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawImagePoints	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeDrawImagePoints,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawLines	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeDrawLines,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawPath	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeDrawPath,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawPie	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeDrawPie,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawRects	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeDrawRects,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeDrawString	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeDrawString,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeEndContainer	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeEndContainer,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeEndOfFile	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeEndOfFile,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillClosedCurve	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeFillClosedCurve,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillEllipse	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeFillEllipse,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillPath	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeFillPath,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillPie	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeFillPie,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillPolygon	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeFillPolygon,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillRects	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeFillRects,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeFillRegion	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeFillRegion,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeGetDC	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeGetDC,    \/\/ the application grabbed the metafile dc$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeHeader	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeHeader,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeInvalid	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeInvalid = GDIP_EMFPLUS_RECORD_BASE,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMax	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeMax = EmfPlusRecordTotal-1,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMin	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeMin = EmfPlusRecordTypeHeader,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMultiFormatEnd	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeMultiFormatEnd,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMultiFormatSection	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeMultiFormatSection,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMultiFormatStart	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeMultiFormatStart,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeMultiplyWorldTransform	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeMultiplyWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeObject	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeObject, \/\/ brush,pen,path,region,image,font,string-format$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeOffsetClip	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeOffsetClip,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeResetClip	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeResetClip,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeResetWorldTransform	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeResetWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeRestore	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeRestore,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeRotateWorldTransform	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeRotateWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSave	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeSave,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeScaleWorldTransform	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeScaleWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetAntiAliasMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeSetAntiAliasMode,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetClipPath	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeSetClipPath,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetClipRect	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeSetClipRect,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetClipRegion	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeSetClipRegion,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetCompositingMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeSetCompositingMode,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetCompositingQuality	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeSetCompositingQuality,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetInterpolationMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeSetInterpolationMode,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetPageTransform	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeSetPageTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetPixelOffsetMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeSetPixelOffsetMode,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetRenderingOrigin	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeSetRenderingOrigin,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetTextContrast	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   EmfPlusRecordTypeSetTextContrast,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetTextRenderingHint	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeSetTextRenderingHint,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeSetWorldTransform	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeSetWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfPlusRecordTypeTranslateWorldTransform	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfPlusRecordTypeTranslateWorldTransform,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeAbortPath	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeAbortPath               = EMR_ABORTPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeAlphaBlend	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeAlphaBlend              = 114, \/\/ EMR_ALPHABLEND,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeAngleArc	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeAngleArc                = EMR_ANGLEARC,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeArc	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeArc                     = EMR_ARC,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeArcTo	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeArcTo                   = EMR_ARCTO,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeBeginPath	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeBeginPath               = EMR_BEGINPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeBitBlt	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeBitBlt                  = EMR_BITBLT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeChord	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeChord                   = EMR_CHORD,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCloseFigure	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeCloseFigure             = EMR_CLOSEFIGURE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeColorCorrectPalette	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeColorCorrectPalette     = 111, \/\/ EMR_COLORCORRECTPALETTE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeColorMatchToTargetW	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeColorMatchToTargetW     = 121, \/\/ EMR_COLORMATCHTOTARGETW,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreateBrushIndirect	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeCreateBrushIndirect     = EMR_CREATEBRUSHINDIRECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreateColorSpace	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeCreateColorSpace        = 99,  \/\/ EMR_CREATECOLORSPACE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreateColorSpaceW	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeCreateColorSpaceW       = 122, \/\/ EMR_CREATECOLORSPACEW,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreateDIBPatternBrushPt	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeCreateDIBPatternBrushPt = EMR_CREATEDIBPATTERNBRUSHPT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreateMonoBrush	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeCreateMonoBrush         = EMR_CREATEMONOBRUSH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreatePalette	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeCreatePalette           = EMR_CREATEPALETTE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeCreatePen	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeCreatePen               = EMR_CREATEPEN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeDeleteColorSpace	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeDeleteColorSpace        = 101, \/\/ EMR_DELETECOLORSPACE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeDeleteObject	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeDeleteObject            = EMR_DELETEOBJECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeDrawEscape	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeDrawEscape              = 105, \/\/ EMR_RESERVED_105,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeEOF	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeEOF                     = EMR_EOF,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeEllipse	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeEllipse                 = EMR_ELLIPSE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeEndPath	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeEndPath                 = EMR_ENDPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExcludeClipRect	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeExcludeClipRect         = EMR_EXCLUDECLIPRECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtCreateFontIndirect	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeExtCreateFontIndirect   = EMR_EXTCREATEFONTINDIRECTW,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtCreatePen	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeExtCreatePen            = EMR_EXTCREATEPEN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtEscape	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeExtEscape               = 106, \/\/ EMR_RESERVED_106,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtFloodFill	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeExtFloodFill            = EMR_EXTFLOODFILL,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtSelectClipRgn	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeExtSelectClipRgn        = EMR_EXTSELECTCLIPRGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtTextOutA	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeExtTextOutA             = EMR_EXTTEXTOUTA,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeExtTextOutW	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeExtTextOutW             = EMR_EXTTEXTOUTW,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeFillPath	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeFillPath                = EMR_FILLPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeFillRgn	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeFillRgn                 = EMR_FILLRGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeFlattenPath	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeFlattenPath             = EMR_FLATTENPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeForceUFIMapping	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeForceUFIMapping         = 109, \/\/ EMR_RESERVED_109,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeFrameRgn	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeFrameRgn                = EMR_FRAMERGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeGLSBoundedRecord	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeGLSBoundedRecord        = 103, \/\/ EMR_GLSBOUNDEDRECORD,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeGLSRecord	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeGLSRecord               = 102, \/\/ EMR_GLSRECORD,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeGdiComment	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeGdiComment              = EMR_GDICOMMENT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeGradientFill	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeGradientFill            = 118, \/\/ EMR_GRADIENTFILL,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeHeader	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeHeader                  = EMR_HEADER,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeIntersectClipRect	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeIntersectClipRect       = EMR_INTERSECTCLIPRECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeInvertRgn	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeInvertRgn               = EMR_INVERTRGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeLineTo	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeLineTo                  = EMR_LINETO,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeMaskBlt	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeMaskBlt                 = EMR_MASKBLT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeMax	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeMax                     = 122,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeMin	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeMin                     = 1,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeModifyWorldTransform	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeModifyWorldTransform    = EMR_MODIFYWORLDTRANSFORM,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeMoveToEx	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeMoveToEx                = EMR_MOVETOEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeNamedEscape	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeNamedEscape             = 110, \/\/ EMR_RESERVED_110,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeOffsetClipRgn	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeOffsetClipRgn           = EMR_OFFSETCLIPRGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePaintRgn	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePaintRgn                = EMR_PAINTRGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePie	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePie                     = EMR_PIE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePixelFormat	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePixelFormat             = 104, \/\/ EMR_PIXELFORMAT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePlgBlt	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePlgBlt                  = EMR_PLGBLT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyBezier	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolyBezier              = EMR_POLYBEZIER,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyBezier16	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolyBezier16            = EMR_POLYBEZIER16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyBezierTo	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolyBezierTo            = EMR_POLYBEZIERTO,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyBezierTo16	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolyBezierTo16          = EMR_POLYBEZIERTO16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyDraw	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolyDraw                = EMR_POLYDRAW,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyDraw16	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolyDraw16              = EMR_POLYDRAW16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyLineTo	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolyLineTo              = EMR_POLYLINETO,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyPolygon	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolyPolygon             = EMR_POLYPOLYGON,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyPolygon16	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolyPolygon16           = EMR_POLYPOLYGON16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyPolyline	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolyPolyline            = EMR_POLYPOLYLINE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyPolyline16	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolyPolyline16          = EMR_POLYPOLYLINE16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyTextOutA	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolyTextOutA            = EMR_POLYTEXTOUTA,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyTextOutW	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolyTextOutW            = EMR_POLYTEXTOUTW,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolygon	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolygon                 = EMR_POLYGON,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolygon16	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolygon16               = EMR_POLYGON16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyline	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolyline                = EMR_POLYLINE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolyline16	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolyline16              = EMR_POLYLINE16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypePolylineTo16	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypePolylineTo16            = EMR_POLYLINETO16,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeRealizePalette	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeRealizePalette          = EMR_REALIZEPALETTE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeRectangle	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeRectangle               = EMR_RECTANGLE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeReserved_069	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeReserved_069            = 69,  \/\/ Not Used$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeReserved_117	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeReserved_117            = 117, \/\/ Not Used$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeResizePalette	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeResizePalette           = EMR_RESIZEPALETTE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeRestoreDC	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeRestoreDC               = EMR_RESTOREDC,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeRoundRect	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeRoundRect               = EMR_ROUNDRECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSaveDC	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSaveDC                  = EMR_SAVEDC,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeScaleViewportExtEx	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeScaleViewportExtEx      = EMR_SCALEVIEWPORTEXTEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeScaleWindowExtEx	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeScaleWindowExtEx        = EMR_SCALEWINDOWEXTEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSelectClipPath	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSelectClipPath          = EMR_SELECTCLIPPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSelectObject	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSelectObject            = EMR_SELECTOBJECT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSelectPalette	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSelectPalette           = EMR_SELECTPALETTE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetArcDirection	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetArcDirection         = EMR_SETARCDIRECTION,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetBkColor	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetBkColor              = EMR_SETBKCOLOR,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetBkMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetBkMode               = EMR_SETBKMODE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetBrushOrgEx	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetBrushOrgEx           = EMR_SETBRUSHORGEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetColorAdjustment	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetColorAdjustment      = EMR_SETCOLORADJUSTMENT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetColorSpace	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetColorSpace           = 100, \/\/ EMR_SETCOLORSPACE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetDIBitsToDevice	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetDIBitsToDevice       = EMR_SETDIBITSTODEVICE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetICMMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetICMMode              = 98,  \/\/ EMR_SETICMMODE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetICMProfileA	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetICMProfileA          = 112, \/\/ EMR_SETICMPROFILEA,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetICMProfileW	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetICMProfileW          = 113, \/\/ EMR_SETICMPROFILEW,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetLayout	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetLayout               = 115, \/\/ EMR_SETLAYOUT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetLinkedUFIs	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetLinkedUFIs           = 119, \/\/ EMR_RESERVED_119,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetMapMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetMapMode              = EMR_SETMAPMODE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetMapperFlags	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetMapperFlags          = EMR_SETMAPPERFLAGS,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetMetaRgn	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetMetaRgn              = EMR_SETMETARGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetMiterLimit	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetMiterLimit           = EMR_SETMITERLIMIT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetPaletteEntries	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetPaletteEntries       = EMR_SETPALETTEENTRIES,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetPixelV	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetPixelV               = EMR_SETPIXELV,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetPolyFillMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetPolyFillMode         = EMR_SETPOLYFILLMODE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetROP2	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetROP2                 = EMR_SETROP2,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetStretchBltMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetStretchBltMode       = EMR_SETSTRETCHBLTMODE,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetTextAlign	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetTextAlign            = EMR_SETTEXTALIGN,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetTextColor	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetTextColor            = EMR_SETTEXTCOLOR,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetTextJustification	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetTextJustification    = 120, \/\/ EMR_RESERVED_120,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetViewportExtEx	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetViewportExtEx        = EMR_SETVIEWPORTEXTEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetViewportOrgEx	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetViewportOrgEx        = EMR_SETVIEWPORTORGEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetWindowExtEx	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetWindowExtEx          = EMR_SETWINDOWEXTEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetWindowOrgEx	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetWindowOrgEx          = EMR_SETWINDOWORGEX,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSetWorldTransform	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSetWorldTransform       = EMR_SETWORLDTRANSFORM,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeSmallTextOut	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeSmallTextOut            = 108, \/\/ EMR_RESERVED_108,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeStartDoc	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeStartDoc                = 107, \/\/ EMR_RESERVED_107,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeStretchBlt	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeStretchBlt              = EMR_STRETCHBLT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeStretchDIBits	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeStretchDIBits           = EMR_STRETCHDIBITS,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeStrokeAndFillPath	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeStrokeAndFillPath       = EMR_STROKEANDFILLPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeStrokePath	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeStrokePath              = EMR_STROKEPATH,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeTransparentBlt	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeTransparentBlt          = 116, \/\/ EMR_TRANSPARENTBLT,$/;"	e	enum:EmfPlusRecordType
EmfRecordTypeWidenPath	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfRecordTypeWidenPath               = EMR_WIDENPATH,$/;"	e	enum:EmfPlusRecordType
EmfToWmfBitsFlags	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum EmfToWmfBitsFlags$/;"	g
EmfToWmfBitsFlagsDefault	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfToWmfBitsFlagsDefault    = 0x00000000,$/;"	e	enum:EmfToWmfBitsFlags
EmfToWmfBitsFlagsEmbedEmf	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfToWmfBitsFlagsEmbedEmf   = 0x00000001,$/;"	e	enum:EmfToWmfBitsFlags
EmfToWmfBitsFlagsIncludeAPM	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfToWmfBitsFlagsIncludeAPM = 0x00000002,$/;"	e	enum:EmfToWmfBitsFlags
EmfToWmfBitsFlagsNoXORClip	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfToWmfBitsFlagsNoXORClip  = 0x00000004$/;"	e	enum:EmfToWmfBitsFlags
EmfType	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum EmfType$/;"	g
EmfTypeEmfOnly	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfTypeEmfOnly     = MetafileTypeEmf,          \/\/ no EMF+, only EMF$/;"	e	enum:EmfType
EmfTypeEmfPlusDual	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfTypeEmfPlusDual = MetafileTypeEmfPlusDual   \/\/ both EMF+ and EMF$/;"	e	enum:EmfType
EmfTypeEmfPlusOnly	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EmfTypeEmfPlusOnly = MetafileTypeEmfPlusOnly,  \/\/ no EMF, only EMF+$/;"	e	enum:EmfType
EncoderParameterValueType	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum EncoderParameterValueType$/;"	g
EncoderParameterValueTypeASCII	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderParameterValueTypeASCII          = 2,    \/\/ 8-bit byte containing one 7-bit ASCII$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeByte	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderParameterValueTypeByte           = 1,    \/\/ 8-bit unsigned int$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeLong	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderParameterValueTypeLong           = 4,    \/\/ 32-bit unsigned int$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeLongRange	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderParameterValueTypeLongRange      = 6,    \/\/ Two longs which specify a range of$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeRational	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderParameterValueTypeRational       = 5,    \/\/ Two Longs. The first Long is the$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeRationalRange	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderParameterValueTypeRationalRange  = 8     \/\/ Two Rationals. The first Rational$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeShort	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderParameterValueTypeShort          = 3,    \/\/ 16-bit unsigned int$/;"	e	enum:EncoderParameterValueType
EncoderParameterValueTypeUndefined	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderParameterValueTypeUndefined      = 7,    \/\/ 8-bit byte that can take any value$/;"	e	enum:EncoderParameterValueType
EncoderValue	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum EncoderValue$/;"	g
EncoderValueColorTypeCMYK	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueColorTypeCMYK,$/;"	e	enum:EncoderValue
EncoderValueColorTypeYCCK	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueColorTypeYCCK,$/;"	e	enum:EncoderValue
EncoderValueCompressionCCITT3	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueCompressionCCITT3,$/;"	e	enum:EncoderValue
EncoderValueCompressionCCITT4	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueCompressionCCITT4,$/;"	e	enum:EncoderValue
EncoderValueCompressionLZW	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueCompressionLZW,$/;"	e	enum:EncoderValue
EncoderValueCompressionNone	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueCompressionNone,$/;"	e	enum:EncoderValue
EncoderValueCompressionRle	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueCompressionRle,$/;"	e	enum:EncoderValue
EncoderValueFlush	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueFlush,$/;"	e	enum:EncoderValue
EncoderValueFrameDimensionPage	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueFrameDimensionPage$/;"	e	enum:EncoderValue
EncoderValueFrameDimensionResolution	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueFrameDimensionResolution,$/;"	e	enum:EncoderValue
EncoderValueFrameDimensionTime	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueFrameDimensionTime,$/;"	e	enum:EncoderValue
EncoderValueLastFrame	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueLastFrame,$/;"	e	enum:EncoderValue
EncoderValueMultiFrame	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueMultiFrame,$/;"	e	enum:EncoderValue
EncoderValueRenderNonProgressive	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueRenderNonProgressive,$/;"	e	enum:EncoderValue
EncoderValueRenderProgressive	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueRenderProgressive,$/;"	e	enum:EncoderValue
EncoderValueScanMethodInterlaced	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueScanMethodInterlaced,$/;"	e	enum:EncoderValue
EncoderValueScanMethodNonInterlaced	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueScanMethodNonInterlaced,$/;"	e	enum:EncoderValue
EncoderValueTransformFlipHorizontal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueTransformFlipHorizontal,$/;"	e	enum:EncoderValue
EncoderValueTransformFlipVertical	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueTransformFlipVertical,$/;"	e	enum:EncoderValue
EncoderValueTransformRotate180	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueTransformRotate180,$/;"	e	enum:EncoderValue
EncoderValueTransformRotate270	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueTransformRotate270,$/;"	e	enum:EncoderValue
EncoderValueTransformRotate90	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueTransformRotate90,$/;"	e	enum:EncoderValue
EncoderValueVersionGif87	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueVersionGif87,$/;"	e	enum:EncoderValue
EncoderValueVersionGif89	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    EncoderValueVersionGif89,$/;"	e	enum:EncoderValue
FillMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum FillMode$/;"	g
FillModeAlternate	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    FillModeAlternate,        \/\/ 0$/;"	e	enum:FillMode
FillModeWinding	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    FillModeWinding           \/\/ 1$/;"	e	enum:FillMode
FlatnessDefault	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^const float FlatnessDefault = 1.0f\/4.0f;$/;"	v
FlushIntention	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum FlushIntention$/;"	g
FlushIntentionFlush	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    FlushIntentionFlush = 0,        \/\/ Flush all batched rendering operations$/;"	e	enum:FlushIntention
FlushIntentionSync	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    FlushIntentionSync = 1          \/\/ Flush all batched rendering operations$/;"	e	enum:FlushIntention
FontStyle	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum FontStyle$/;"	g
FontStyleBold	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    FontStyleBold       = 1,$/;"	e	enum:FontStyle
FontStyleBoldItalic	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    FontStyleBoldItalic = 3,$/;"	e	enum:FontStyle
FontStyleItalic	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    FontStyleItalic     = 2,$/;"	e	enum:FontStyle
FontStyleRegular	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    FontStyleRegular    = 0,$/;"	e	enum:FontStyle
FontStyleStrikeout	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    FontStyleStrikeout  = 8$/;"	e	enum:FontStyle
FontStyleUnderline	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    FontStyleUnderline  = 4,$/;"	e	enum:FontStyle
GDIP_EMFPLUS_RECORD_BASE	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	546;"	d
GDIP_EMFPLUS_RECORD_TO_WMF	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	549;"	d
GDIP_IS_WMF_RECORDTYPE	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	550;"	d
GDIP_WMF_RECORD_BASE	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	547;"	d
GDIP_WMF_RECORD_TO_EMFPLUS	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	548;"	d
GenericFontFamily	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum GenericFontFamily$/;"	g
GenericFontFamilyMonospace	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    GenericFontFamilyMonospace$/;"	e	enum:GenericFontFamily
GenericFontFamilySansSerif	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    GenericFontFamilySansSerif,$/;"	e	enum:GenericFontFamily
GenericFontFamilySerif	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    GenericFontFamilySerif,$/;"	e	enum:GenericFontFamily
GraphicsContainer	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^typedef UINT     GraphicsContainer;$/;"	t
GraphicsLayout	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum GraphicsLayout$/;"	g
GraphicsLayoutMirrored	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    GraphicsLayoutMirrored,$/;"	e	enum:GraphicsLayout
GraphicsLayoutMirroredForceImages	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    GraphicsLayoutMirroredForceImages$/;"	e	enum:GraphicsLayout
GraphicsLayoutMirroredIgnoreImages	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    GraphicsLayoutMirroredIgnoreImages,$/;"	e	enum:GraphicsLayout
GraphicsLayoutNormal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    GraphicsLayoutNormal,$/;"	e	enum:GraphicsLayout
GraphicsState	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^typedef UINT     GraphicsState;$/;"	t
HatchStyle	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum HatchStyle$/;"	g
HatchStyle05Percent	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyle05Percent,                    \/\/ 6$/;"	e	enum:HatchStyle
HatchStyle10Percent	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyle10Percent,                    \/\/ 7$/;"	e	enum:HatchStyle
HatchStyle20Percent	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyle20Percent,                    \/\/ 8$/;"	e	enum:HatchStyle
HatchStyle25Percent	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyle25Percent,                    \/\/ 9$/;"	e	enum:HatchStyle
HatchStyle30Percent	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyle30Percent,                    \/\/ 10$/;"	e	enum:HatchStyle
HatchStyle40Percent	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyle40Percent,                    \/\/ 11$/;"	e	enum:HatchStyle
HatchStyle50Percent	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyle50Percent,                    \/\/ 12$/;"	e	enum:HatchStyle
HatchStyle60Percent	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyle60Percent,                    \/\/ 13$/;"	e	enum:HatchStyle
HatchStyle70Percent	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyle70Percent,                    \/\/ 14$/;"	e	enum:HatchStyle
HatchStyle75Percent	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyle75Percent,                    \/\/ 15$/;"	e	enum:HatchStyle
HatchStyle80Percent	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyle80Percent,                    \/\/ 16$/;"	e	enum:HatchStyle
HatchStyle90Percent	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyle90Percent,                    \/\/ 17$/;"	e	enum:HatchStyle
HatchStyleBackwardDiagonal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleBackwardDiagonal,             \/\/ 3$/;"	e	enum:HatchStyle
HatchStyleCross	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleCross,                        \/\/ 4$/;"	e	enum:HatchStyle
HatchStyleDarkDownwardDiagonal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleDarkDownwardDiagonal,         \/\/ 20$/;"	e	enum:HatchStyle
HatchStyleDarkHorizontal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleDarkHorizontal,               \/\/ 29$/;"	e	enum:HatchStyle
HatchStyleDarkUpwardDiagonal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleDarkUpwardDiagonal,           \/\/ 21$/;"	e	enum:HatchStyle
HatchStyleDarkVertical	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleDarkVertical,                 \/\/ 28$/;"	e	enum:HatchStyle
HatchStyleDashedDownwardDiagonal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleDashedDownwardDiagonal,       \/\/ 30$/;"	e	enum:HatchStyle
HatchStyleDashedHorizontal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleDashedHorizontal,             \/\/ 32$/;"	e	enum:HatchStyle
HatchStyleDashedUpwardDiagonal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleDashedUpwardDiagonal,         \/\/ 31$/;"	e	enum:HatchStyle
HatchStyleDashedVertical	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleDashedVertical,               \/\/ 33$/;"	e	enum:HatchStyle
HatchStyleDiagonalBrick	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleDiagonalBrick,                \/\/ 38$/;"	e	enum:HatchStyle
HatchStyleDiagonalCross	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleDiagonalCross,                \/\/ 5$/;"	e	enum:HatchStyle
HatchStyleDivot	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleDivot,                        \/\/ 42$/;"	e	enum:HatchStyle
HatchStyleDottedDiamond	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleDottedDiamond,                \/\/ 44$/;"	e	enum:HatchStyle
HatchStyleDottedGrid	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleDottedGrid,                   \/\/ 43$/;"	e	enum:HatchStyle
HatchStyleForwardDiagonal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleForwardDiagonal,              \/\/ 2$/;"	e	enum:HatchStyle
HatchStyleHorizontal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleHorizontal,                   \/\/ 0$/;"	e	enum:HatchStyle
HatchStyleHorizontalBrick	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleHorizontalBrick,              \/\/ 39$/;"	e	enum:HatchStyle
HatchStyleLargeCheckerBoard	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleLargeCheckerBoard,            \/\/ 50$/;"	e	enum:HatchStyle
HatchStyleLargeConfetti	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleLargeConfetti,                \/\/ 35$/;"	e	enum:HatchStyle
HatchStyleLargeGrid	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleLargeGrid = HatchStyleCross,  \/\/ 4  an alias for the cross style$/;"	e	enum:HatchStyle
HatchStyleLightDownwardDiagonal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleLightDownwardDiagonal,        \/\/ 18$/;"	e	enum:HatchStyle
HatchStyleLightHorizontal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleLightHorizontal,              \/\/ 25$/;"	e	enum:HatchStyle
HatchStyleLightUpwardDiagonal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleLightUpwardDiagonal,          \/\/ 19$/;"	e	enum:HatchStyle
HatchStyleLightVertical	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleLightVertical,                \/\/ 24$/;"	e	enum:HatchStyle
HatchStyleMax	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleMax       = HatchStyleTotal - 1,$/;"	e	enum:HatchStyle
HatchStyleMin	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleMin       = HatchStyleHorizontal,$/;"	e	enum:HatchStyle
HatchStyleNarrowHorizontal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleNarrowHorizontal,             \/\/ 27$/;"	e	enum:HatchStyle
HatchStyleNarrowVertical	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleNarrowVertical,               \/\/ 26$/;"	e	enum:HatchStyle
HatchStyleOutlinedDiamond	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleOutlinedDiamond,              \/\/ 51$/;"	e	enum:HatchStyle
HatchStylePlaid	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStylePlaid,                        \/\/ 41$/;"	e	enum:HatchStyle
HatchStyleShingle	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleShingle,                      \/\/ 45$/;"	e	enum:HatchStyle
HatchStyleSmallCheckerBoard	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleSmallCheckerBoard,            \/\/ 49$/;"	e	enum:HatchStyle
HatchStyleSmallConfetti	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleSmallConfetti,                \/\/ 34$/;"	e	enum:HatchStyle
HatchStyleSmallGrid	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleSmallGrid,                    \/\/ 48$/;"	e	enum:HatchStyle
HatchStyleSolidDiamond	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleSolidDiamond,                 \/\/ 52$/;"	e	enum:HatchStyle
HatchStyleSphere	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleSphere,                       \/\/ 47$/;"	e	enum:HatchStyle
HatchStyleTotal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleTotal,    \/\/ must be after all unique hatch styles$/;"	e	enum:HatchStyle
HatchStyleTrellis	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleTrellis,                      \/\/ 46$/;"	e	enum:HatchStyle
HatchStyleVertical	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleVertical,                     \/\/ 1$/;"	e	enum:HatchStyle
HatchStyleWave	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleWave,                         \/\/ 37$/;"	e	enum:HatchStyle
HatchStyleWeave	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleWeave,                        \/\/ 40$/;"	e	enum:HatchStyle
HatchStyleWideDownwardDiagonal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleWideDownwardDiagonal,         \/\/ 22$/;"	e	enum:HatchStyle
HatchStyleWideUpwardDiagonal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleWideUpwardDiagonal,           \/\/ 23$/;"	e	enum:HatchStyle
HatchStyleZigZag	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HatchStyleZigZag,                       \/\/ 36$/;"	e	enum:HatchStyle
HotkeyPrefix	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum HotkeyPrefix$/;"	g
HotkeyPrefixHide	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HotkeyPrefixHide        = 2$/;"	e	enum:HotkeyPrefix
HotkeyPrefixNone	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HotkeyPrefixNone        = 0,$/;"	e	enum:HotkeyPrefix
HotkeyPrefixShow	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    HotkeyPrefixShow        = 1,$/;"	e	enum:HotkeyPrefix
ImageLayout	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum ImageLayout$/;"	g
ImageLayoutIgnoreMirrored	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ImageLayoutIgnoreMirrored$/;"	e	enum:ImageLayout
ImageLayoutNormal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ImageLayoutNormal,$/;"	e	enum:ImageLayout
ImageType	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum ImageType$/;"	g
ImageTypeBitmap	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ImageTypeBitmap,    \/\/ 1$/;"	e	enum:ImageType
ImageTypeMetafile	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ImageTypeMetafile   \/\/ 2$/;"	e	enum:ImageType
ImageTypeUnknown	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ImageTypeUnknown,   \/\/ 0$/;"	e	enum:ImageType
InterpolationMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum InterpolationMode$/;"	g
InterpolationModeBicubic	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    InterpolationModeBicubic,$/;"	e	enum:InterpolationMode
InterpolationModeBilinear	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    InterpolationModeBilinear,$/;"	e	enum:InterpolationMode
InterpolationModeDefault	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    InterpolationModeDefault          = QualityModeDefault,$/;"	e	enum:InterpolationMode
InterpolationModeHighQuality	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    InterpolationModeHighQuality      = QualityModeHigh,$/;"	e	enum:InterpolationMode
InterpolationModeHighQualityBicubic	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    InterpolationModeHighQualityBicubic$/;"	e	enum:InterpolationMode
InterpolationModeHighQualityBilinear	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    InterpolationModeHighQualityBilinear,$/;"	e	enum:InterpolationMode
InterpolationModeInvalid	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    InterpolationModeInvalid          = QualityModeInvalid,$/;"	e	enum:InterpolationMode
InterpolationModeLowQuality	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    InterpolationModeLowQuality       = QualityModeLow,$/;"	e	enum:InterpolationMode
InterpolationModeNearestNeighbor	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    InterpolationModeNearestNeighbor,$/;"	e	enum:InterpolationMode
LineCap	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum LineCap$/;"	g
LineCapAnchorMask	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineCapAnchorMask       = 0xf0  \/\/ mask to check for anchor or not.$/;"	e	enum:LineCap
LineCapArrowAnchor	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineCapArrowAnchor      = 0x14, \/\/ no correspondence$/;"	e	enum:LineCap
LineCapCustom	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineCapCustom           = 0xff, \/\/ custom cap$/;"	e	enum:LineCap
LineCapDiamondAnchor	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineCapDiamondAnchor    = 0x13, \/\/ corresponds to triangle cap$/;"	e	enum:LineCap
LineCapFlat	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineCapFlat             = 0,$/;"	e	enum:LineCap
LineCapNoAnchor	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineCapNoAnchor         = 0x10, \/\/ corresponds to flat cap$/;"	e	enum:LineCap
LineCapRound	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineCapRound            = 2,$/;"	e	enum:LineCap
LineCapRoundAnchor	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineCapRoundAnchor      = 0x12, \/\/ corresponds to round cap$/;"	e	enum:LineCap
LineCapSquare	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineCapSquare           = 1,$/;"	e	enum:LineCap
LineCapSquareAnchor	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineCapSquareAnchor     = 0x11, \/\/ corresponds to square cap$/;"	e	enum:LineCap
LineCapTriangle	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineCapTriangle         = 3,$/;"	e	enum:LineCap
LineJoin	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum LineJoin$/;"	g
LineJoinBevel	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineJoinBevel        = 1,$/;"	e	enum:LineJoin
LineJoinMiter	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineJoinMiter        = 0,$/;"	e	enum:LineJoin
LineJoinMiterClipped	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineJoinMiterClipped = 3$/;"	e	enum:LineJoin
LineJoinRound	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineJoinRound        = 2,$/;"	e	enum:LineJoin
LineSpacing	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum LineSpacing {$/;"	g
LineSpacingAtLeast	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineSpacingAtLeast              = 33,$/;"	e	enum:LineSpacing
LineSpacingAtLeastMultiple	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineSpacingAtLeastMultiple      = 34,$/;"	e	enum:LineSpacing
LineSpacingCell	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineSpacingCell                 = 35,$/;"	e	enum:LineSpacing
LineSpacingCellAtLeast	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineSpacingCellAtLeast          = 36,$/;"	e	enum:LineSpacing
LineSpacingCellAtLeastMultiple	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineSpacingCellAtLeastMultiple  = 37$/;"	e	enum:LineSpacing
LineSpacingDisplay	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineSpacingDisplay              = UnitDisplay,$/;"	e	enum:LineSpacing
LineSpacingDocument	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineSpacingDocument             = UnitDocument,$/;"	e	enum:LineSpacing
LineSpacingInch	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineSpacingInch                 = UnitInch,$/;"	e	enum:LineSpacing
LineSpacingMillimeter	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineSpacingMillimeter           = UnitMillimeter,$/;"	e	enum:LineSpacing
LineSpacingPixel	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineSpacingPixel                = UnitPixel,$/;"	e	enum:LineSpacing
LineSpacingPoint	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineSpacingPoint                = UnitPoint,$/;"	e	enum:LineSpacing
LineSpacingRecommended	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineSpacingRecommended          = 32,$/;"	e	enum:LineSpacing
LineSpacingWorld	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LineSpacingWorld                = UnitWorld,$/;"	e	enum:LineSpacing
LinearGradientMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum LinearGradientMode$/;"	g
LinearGradientModeBackwardDiagonal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LinearGradientModeBackwardDiagonal    \/\/ 3$/;"	e	enum:LinearGradientMode
LinearGradientModeForwardDiagonal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LinearGradientModeForwardDiagonal,    \/\/ 2$/;"	e	enum:LinearGradientMode
LinearGradientModeHorizontal	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LinearGradientModeHorizontal,         \/\/ 0$/;"	e	enum:LinearGradientMode
LinearGradientModeVertical	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    LinearGradientModeVertical,           \/\/ 1$/;"	e	enum:LinearGradientMode
MatrixOrder	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum MatrixOrder$/;"	g
MatrixOrderAppend	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    MatrixOrderAppend     = 1$/;"	e	enum:MatrixOrder
MatrixOrderPrepend	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    MatrixOrderPrepend    = 0,$/;"	e	enum:MatrixOrder
MetafileFrameUnit	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum MetafileFrameUnit$/;"	g
MetafileFrameUnitDocument	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    MetafileFrameUnitDocument   = UnitDocument,$/;"	e	enum:MetafileFrameUnit
MetafileFrameUnitGdi	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    MetafileFrameUnitGdi                        \/\/ GDI compatible .01 MM units$/;"	e	enum:MetafileFrameUnit
MetafileFrameUnitInch	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    MetafileFrameUnitInch       = UnitInch,$/;"	e	enum:MetafileFrameUnit
MetafileFrameUnitMillimeter	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    MetafileFrameUnitMillimeter = UnitMillimeter,$/;"	e	enum:MetafileFrameUnit
MetafileFrameUnitPixel	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    MetafileFrameUnitPixel      = UnitPixel,$/;"	e	enum:MetafileFrameUnit
MetafileFrameUnitPoint	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    MetafileFrameUnitPoint      = UnitPoint,$/;"	e	enum:MetafileFrameUnit
MetafileType	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum MetafileType$/;"	g
MetafileTypeEmf	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    MetafileTypeEmf,                \/\/ EMF (not EMF+)$/;"	e	enum:MetafileType
MetafileTypeEmfPlusDual	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    MetafileTypeEmfPlusDual         \/\/ EMF+ with dual, down-level records$/;"	e	enum:MetafileType
MetafileTypeEmfPlusOnly	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    MetafileTypeEmfPlusOnly,        \/\/ EMF+ without dual, down-level records$/;"	e	enum:MetafileType
MetafileTypeInvalid	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    MetafileTypeInvalid,            \/\/ Invalid metafile$/;"	e	enum:MetafileType
MetafileTypeWmf	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    MetafileTypeWmf,                \/\/ Standard WMF$/;"	e	enum:MetafileType
MetafileTypeWmfAldus	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    MetafileTypeWmfAldus,           \/\/ Aldus Placeable Metafile format$/;"	e	enum:MetafileType
ObjectType	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum ObjectType$/;"	g
ObjectTypeBrush	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ObjectTypeBrush,$/;"	e	enum:ObjectType
ObjectTypeCustomLineCap	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ObjectTypeCustomLineCap,$/;"	e	enum:ObjectType
ObjectTypeFont	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ObjectTypeFont,$/;"	e	enum:ObjectType
ObjectTypeImage	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ObjectTypeImage,$/;"	e	enum:ObjectType
ObjectTypeImageAttributes	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ObjectTypeImageAttributes,$/;"	e	enum:ObjectType
ObjectTypeInvalid	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ObjectTypeInvalid,$/;"	e	enum:ObjectType
ObjectTypeIsValid	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^ObjectTypeIsValid($/;"	f
ObjectTypeMax	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ObjectTypeMax = ObjectTypeCustomLineCap,$/;"	e	enum:ObjectType
ObjectTypeMin	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ObjectTypeMin = ObjectTypeBrush$/;"	e	enum:ObjectType
ObjectTypePath	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ObjectTypePath,$/;"	e	enum:ObjectType
ObjectTypePen	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ObjectTypePen,$/;"	e	enum:ObjectType
ObjectTypeRegion	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ObjectTypeRegion,$/;"	e	enum:ObjectType
ObjectTypeStringFormat	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ObjectTypeStringFormat,$/;"	e	enum:ObjectType
PathPointType	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum PathPointType$/;"	g
PathPointTypeBezier	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PathPointTypeBezier          = 3,    \/\/ default Beizer (= cubic Bezier)$/;"	e	enum:PathPointType
PathPointTypeBezier2	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PathPointTypeBezier2    = 2,    \/\/ quadratic Beizer$/;"	e	enum:PathPointType
PathPointTypeBezier3	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PathPointTypeBezier3    = 3,    \/\/ cubic Bezier$/;"	e	enum:PathPointType
PathPointTypeBezier4	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PathPointTypeBezier4    = 4,    \/\/ quartic (4th order) Beizer$/;"	e	enum:PathPointType
PathPointTypeBezier5	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PathPointTypeBezier5    = 5,    \/\/ quintic (5th order) Bezier$/;"	e	enum:PathPointType
PathPointTypeBezier6	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PathPointTypeBezier6    = 6     \/\/ hexaic (6th order) Bezier$/;"	e	enum:PathPointType
PathPointTypeCloseSubpath	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PathPointTypeCloseSubpath    = 0x80, \/\/ closed flag$/;"	e	enum:PathPointType
PathPointTypeDashMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PathPointTypeDashMode        = 0x10, \/\/ currently in dash mode.$/;"	e	enum:PathPointType
PathPointTypeLine	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PathPointTypeLine            = 1,    \/\/ line$/;"	e	enum:PathPointType
PathPointTypePathMarker	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PathPointTypePathMarker      = 0x20, \/\/ a marker for the path.$/;"	e	enum:PathPointType
PathPointTypePathTypeMask	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PathPointTypePathTypeMask    = 0x07, \/\/ type mask (lowest 3 bits).$/;"	e	enum:PathPointType
PathPointTypeStart	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PathPointTypeStart           = 0,    \/\/ move$/;"	e	enum:PathPointType
PenAlignment	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum PenAlignment$/;"	g
PenAlignmentCenter	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PenAlignmentCenter       = 0,$/;"	e	enum:PenAlignment
PenAlignmentInset	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PenAlignmentInset        = 1,$/;"	e	enum:PenAlignment
PenAlignmentLeft	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PenAlignmentLeft         = 3,$/;"	e	enum:PenAlignment
PenAlignmentOutset	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PenAlignmentOutset       = 2,$/;"	e	enum:PenAlignment
PenAlignmentRight	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PenAlignmentRight        = 4$/;"	e	enum:PenAlignment
PenType	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum PenType$/;"	g
PenTypeHatchFill	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   PenTypeHatchFill        = BrushTypeHatchFill,$/;"	e	enum:PenType
PenTypeLinearGradient	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   PenTypeLinearGradient   = BrushTypeLinearGradient,$/;"	e	enum:PenType
PenTypePathGradient	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   PenTypePathGradient     = BrushTypePathGradient,$/;"	e	enum:PenType
PenTypeSolidColor	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   PenTypeSolidColor       = BrushTypeSolidColor,$/;"	e	enum:PenType
PenTypeTextureFill	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   PenTypeTextureFill      = BrushTypeTextureFill,$/;"	e	enum:PenType
PenTypeUnknown	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   PenTypeUnknown          = -1$/;"	e	enum:PenType
PixelOffsetMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum PixelOffsetMode$/;"	g
PixelOffsetModeDefault	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PixelOffsetModeDefault     = QualityModeDefault,$/;"	e	enum:PixelOffsetMode
PixelOffsetModeHalf	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PixelOffsetModeHalf     \/\/ offset by -0.5, -0.5 for fast anti-alias perf$/;"	e	enum:PixelOffsetMode
PixelOffsetModeHighQuality	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PixelOffsetModeHighQuality = QualityModeHigh,$/;"	e	enum:PixelOffsetMode
PixelOffsetModeHighSpeed	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PixelOffsetModeHighSpeed   = QualityModeLow,$/;"	e	enum:PixelOffsetMode
PixelOffsetModeInvalid	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PixelOffsetModeInvalid     = QualityModeInvalid,$/;"	e	enum:PixelOffsetMode
PixelOffsetModeNone	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    PixelOffsetModeNone,    \/\/ no pixel offset$/;"	e	enum:PixelOffsetMode
QualityMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum QualityMode$/;"	g
QualityModeDefault	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    QualityModeDefault   = 0,$/;"	e	enum:QualityMode
QualityModeHigh	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    QualityModeHigh      = 2  \/\/ for apps that need the best rendering quality$/;"	e	enum:QualityMode
QualityModeInvalid	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    QualityModeInvalid   = -1,$/;"	e	enum:QualityMode
QualityModeLow	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    QualityModeLow       = 1, \/\/ for apps that need the best performance$/;"	e	enum:QualityMode
SmoothingMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum SmoothingMode$/;"	g
SmoothingModeAntiAlias	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    SmoothingModeAntiAlias$/;"	e	enum:SmoothingMode
SmoothingModeDefault	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    SmoothingModeDefault     = QualityModeDefault,$/;"	e	enum:SmoothingMode
SmoothingModeHighQuality	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    SmoothingModeHighQuality = QualityModeHigh,$/;"	e	enum:SmoothingMode
SmoothingModeHighSpeed	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    SmoothingModeHighSpeed   = QualityModeLow,$/;"	e	enum:SmoothingMode
SmoothingModeInvalid	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    SmoothingModeInvalid     = QualityModeInvalid,$/;"	e	enum:SmoothingMode
SmoothingModeNone	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    SmoothingModeNone,$/;"	e	enum:SmoothingMode
StringAlignment	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum StringAlignment$/;"	g
StringAlignmentCenter	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringAlignmentCenter = 1,$/;"	e	enum:StringAlignment
StringAlignmentFar	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringAlignmentFar    = 2$/;"	e	enum:StringAlignment
StringAlignmentNear	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringAlignmentNear   = 0,$/;"	e	enum:StringAlignment
StringDigitSubstitute	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum StringDigitSubstitute$/;"	g
StringDigitSubstituteNational	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringDigitSubstituteNational    = 2,$/;"	e	enum:StringDigitSubstitute
StringDigitSubstituteNone	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringDigitSubstituteNone        = 1,$/;"	e	enum:StringDigitSubstitute
StringDigitSubstituteTraditional	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringDigitSubstituteTraditional = 3$/;"	e	enum:StringDigitSubstitute
StringDigitSubstituteUser	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringDigitSubstituteUser        = 0,  \/\/ As NLS setting$/;"	e	enum:StringDigitSubstitute
StringFormatFlags	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum StringFormatFlags$/;"	g
StringFormatFlagsDirectionRightToLeft	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringFormatFlagsDirectionRightToLeft        = 0x00000001,$/;"	e	enum:StringFormatFlags
StringFormatFlagsDirectionVertical	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringFormatFlagsDirectionVertical           = 0x00000002,$/;"	e	enum:StringFormatFlags
StringFormatFlagsDisableKashidaJustification	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringFormatFlagsDisableKashidaJustification = 0x00000010,$/;"	e	enum:StringFormatFlags
StringFormatFlagsDisableKerning	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringFormatFlagsDisableKerning              = 0x00000040,$/;"	e	enum:StringFormatFlags
StringFormatFlagsDisableLigatures	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringFormatFlagsDisableLigatures            = 0x00000080,$/;"	e	enum:StringFormatFlags
StringFormatFlagsDisplayFormatControl	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringFormatFlagsDisplayFormatControl        = 0x00000020,$/;"	e	enum:StringFormatFlags
StringFormatFlagsLayoutLegacyBidi	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringFormatFlagsLayoutLegacyBidi            = 0x00000100,$/;"	e	enum:StringFormatFlags
StringFormatFlagsLineLimit	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringFormatFlagsLineLimit                   = 0x00002000,$/;"	e	enum:StringFormatFlags
StringFormatFlagsMeasureTrailingSpaces	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringFormatFlagsMeasureTrailingSpaces       = 0x00000800,$/;"	e	enum:StringFormatFlags
StringFormatFlagsNoChanges	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringFormatFlagsNoChanges                   = 0x00000200,$/;"	e	enum:StringFormatFlags
StringFormatFlagsNoClip	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringFormatFlagsNoClip                      = 0x00004000$/;"	e	enum:StringFormatFlags
StringFormatFlagsNoFitBlackBox	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringFormatFlagsNoFitBlackBox               = 0x00000004,$/;"	e	enum:StringFormatFlags
StringFormatFlagsNoFontFallback	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringFormatFlagsNoFontFallback              = 0x00000400,$/;"	e	enum:StringFormatFlags
StringFormatFlagsNoWrap	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringFormatFlagsNoWrap                      = 0x00001000,$/;"	e	enum:StringFormatFlags
StringFormatFlagsNumberContextArabic	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringFormatFlagsNumberContextArabic         = 0x00000008,$/;"	e	enum:StringFormatFlags
StringTrimming	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum StringTrimming {$/;"	g
StringTrimmingCharacter	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringTrimmingCharacter         = 1,$/;"	e	enum:StringTrimming
StringTrimmingEllipsisCharacter	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringTrimmingEllipsisCharacter = 3,$/;"	e	enum:StringTrimming
StringTrimmingEllipsisPath	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringTrimmingEllipsisPath      = 5$/;"	e	enum:StringTrimming
StringTrimmingEllipsisWord	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringTrimmingEllipsisWord      = 4,$/;"	e	enum:StringTrimming
StringTrimmingNone	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringTrimmingNone              = 0,$/;"	e	enum:StringTrimming
StringTrimmingWord	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringTrimmingWord              = 2,$/;"	e	enum:StringTrimming
StringUnit	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum StringUnit {$/;"	g
StringUnitDisplay	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringUnitDisplay      = UnitDisplay,$/;"	e	enum:StringUnit
StringUnitDocument	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringUnitDocument     = UnitDocument,$/;"	e	enum:StringUnit
StringUnitEm	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringUnitEm           = 32$/;"	e	enum:StringUnit
StringUnitInch	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringUnitInch         = UnitInch,$/;"	e	enum:StringUnit
StringUnitMillimeter	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringUnitMillimeter   = UnitMillimeter,$/;"	e	enum:StringUnit
StringUnitPixel	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringUnitPixel        = UnitPixel,$/;"	e	enum:StringUnit
StringUnitPoint	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringUnitPoint        = UnitPoint,$/;"	e	enum:StringUnit
StringUnitWorld	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    StringUnitWorld        = UnitWorld,$/;"	e	enum:StringUnit
TextRenderingHint	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum TextRenderingHint$/;"	g
TextRenderingHintAntiAlias	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    TextRenderingHintAntiAlias,                    \/\/ Glyph anti-alias bitmap without hinting$/;"	e	enum:TextRenderingHint
TextRenderingHintAntiAliasGridFit	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    TextRenderingHintAntiAliasGridFit,             \/\/ Glyph anti-alias bitmap with hinting$/;"	e	enum:TextRenderingHint
TextRenderingHintClearTypeGridFit	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    TextRenderingHintClearTypeGridFit              \/\/ Glyph CT bitmap with hinting$/;"	e	enum:TextRenderingHint
TextRenderingHintSingleBitPerPixel	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    TextRenderingHintSingleBitPerPixel,            \/\/ Glyph bitmap without hinting$/;"	e	enum:TextRenderingHint
TextRenderingHintSingleBitPerPixelGridFit	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    TextRenderingHintSingleBitPerPixelGridFit,     \/\/ Glyph bitmap with hinting$/;"	e	enum:TextRenderingHint
TextRenderingHintSystemDefault	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    TextRenderingHintSystemDefault = 0,            \/\/ Glyph with system default rendering hint$/;"	e	enum:TextRenderingHint
Unit	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum Unit$/;"	g
UnitDisplay	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    UnitDisplay,    \/\/ 1 -- Variable -- for PageTransform only$/;"	e	enum:Unit
UnitDocument	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    UnitDocument,   \/\/ 5 -- Each unit is 1\/300 inch.$/;"	e	enum:Unit
UnitInch	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    UnitInch,       \/\/ 4 -- Each unit is 1 inch.$/;"	e	enum:Unit
UnitMillimeter	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    UnitMillimeter  \/\/ 6 -- Each unit is 1 millimeter.$/;"	e	enum:Unit
UnitPixel	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    UnitPixel,      \/\/ 2 -- Each unit is one device pixel.$/;"	e	enum:Unit
UnitPoint	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    UnitPoint,      \/\/ 3 -- Each unit is a printer's point, or 1\/72 inch.$/;"	e	enum:Unit
UnitWorld	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    UnitWorld,      \/\/ 0 -- World coordinate (non-physical unit)$/;"	e	enum:Unit
ValueType	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum ValueType$/;"	g
ValueTypeASCII	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ValueTypeASCII          = 2,    \/\/ 8-bit byte containing one 7-bit ASCII$/;"	e	enum:ValueType
ValueTypeByte	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ValueTypeByte           = 1,    \/\/ 8-bit unsigned int$/;"	e	enum:ValueType
ValueTypeLong	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ValueTypeLong           = 4,    \/\/ 32-bit unsigned int$/;"	e	enum:ValueType
ValueTypeLongRange	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ValueTypeLongRange      = 6,    \/\/ Two longs which specify a range of$/;"	e	enum:ValueType
ValueTypeRational	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ValueTypeRational       = 5,    \/\/ Two Longs. The first Long is the$/;"	e	enum:ValueType
ValueTypeRationalRange	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ValueTypeRationalRange  = 8     \/\/ Two Rationals. The first Rational$/;"	e	enum:ValueType
ValueTypeShort	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ValueTypeShort          = 3,    \/\/ 16-bit unsigned int$/;"	e	enum:ValueType
ValueTypeUndefined	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    ValueTypeUndefined      = 7,    \/\/ 8-bit byte that can take any value$/;"	e	enum:ValueType
WarpMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum WarpMode$/;"	g
WarpModeBilinear	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WarpModeBilinear        \/\/ 1$/;"	e	enum:WarpMode
WarpModePerspective	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WarpModePerspective,    \/\/ 0$/;"	e	enum:WarpMode
WindowNotifyEnum	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum WindowNotifyEnum$/;"	g
WindowNotifyEnumDisable	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   WindowNotifyEnumDisable,$/;"	e	enum:WindowNotifyEnum
WindowNotifyEnumDisplay	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   WindowNotifyEnumDisplay,$/;"	e	enum:WindowNotifyEnum
WindowNotifyEnumEnable	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   WindowNotifyEnumEnable = 0,$/;"	e	enum:WindowNotifyEnum
WindowNotifyEnumPalette	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   WindowNotifyEnumPalette,$/;"	e	enum:WindowNotifyEnum
WindowNotifyEnumSysColor	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^   WindowNotifyEnumSysColor$/;"	e	enum:WindowNotifyEnum
WmfRecordTypeAbortDoc	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeAbortDoc                = GDIP_WMF_RECORD_TO_EMFPLUS(0x0052),  \/\/ META_ABORTDOC$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeAnimatePalette	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeAnimatePalette          = GDIP_WMF_RECORD_TO_EMFPLUS(META_ANIMATEPALETTE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeArc	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeArc                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_ARC),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeBitBlt	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeBitBlt                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_BITBLT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeChord	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeChord                   = GDIP_WMF_RECORD_TO_EMFPLUS(META_CHORD),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateBitmap	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeCreateBitmap            = GDIP_WMF_RECORD_TO_EMFPLUS(0x06FE),  \/\/ META_CREATEBITMAP$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateBitmapIndirect	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeCreateBitmapIndirect    = GDIP_WMF_RECORD_TO_EMFPLUS(0x02FD),  \/\/ META_CREATEBITMAPINDIRECT$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateBrush	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeCreateBrush             = GDIP_WMF_RECORD_TO_EMFPLUS(0x00F8),  \/\/ META_CREATEBRUSH$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateBrushIndirect	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeCreateBrushIndirect     = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEBRUSHINDIRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateFontIndirect	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeCreateFontIndirect      = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEFONTINDIRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreatePalette	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeCreatePalette           = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEPALETTE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreatePatternBrush	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeCreatePatternBrush      = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEPATTERNBRUSH),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreatePenIndirect	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeCreatePenIndirect       = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEPENINDIRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeCreateRegion	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeCreateRegion            = GDIP_WMF_RECORD_TO_EMFPLUS(META_CREATEREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeDIBBitBlt	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeDIBBitBlt               = GDIP_WMF_RECORD_TO_EMFPLUS(META_DIBBITBLT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeDIBCreatePatternBrush	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeDIBCreatePatternBrush   = GDIP_WMF_RECORD_TO_EMFPLUS(META_DIBCREATEPATTERNBRUSH),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeDIBStretchBlt	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeDIBStretchBlt           = GDIP_WMF_RECORD_TO_EMFPLUS(META_DIBSTRETCHBLT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeDeleteObject	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeDeleteObject            = GDIP_WMF_RECORD_TO_EMFPLUS(META_DELETEOBJECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeDrawText	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeDrawText                = GDIP_WMF_RECORD_TO_EMFPLUS(0x062F),  \/\/ META_DRAWTEXT$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeEllipse	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeEllipse                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_ELLIPSE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeEndDoc	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeEndDoc                  = GDIP_WMF_RECORD_TO_EMFPLUS(0x005E),  \/\/ META_ENDDOC$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeEndPage	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeEndPage                 = GDIP_WMF_RECORD_TO_EMFPLUS(0x0050),  \/\/ META_ENDPAGE$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeEscape	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeEscape                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_ESCAPE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeExcludeClipRect	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeExcludeClipRect         = GDIP_WMF_RECORD_TO_EMFPLUS(META_EXCLUDECLIPRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeExtFloodFill	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeExtFloodFill            = GDIP_WMF_RECORD_TO_EMFPLUS(META_EXTFLOODFILL),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeExtTextOut	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeExtTextOut              = GDIP_WMF_RECORD_TO_EMFPLUS(META_EXTTEXTOUT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeFillRegion	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeFillRegion              = GDIP_WMF_RECORD_TO_EMFPLUS(META_FILLREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeFloodFill	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeFloodFill               = GDIP_WMF_RECORD_TO_EMFPLUS(META_FLOODFILL),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeFrameRegion	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeFrameRegion             = GDIP_WMF_RECORD_TO_EMFPLUS(META_FRAMEREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeIntersectClipRect	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeIntersectClipRect       = GDIP_WMF_RECORD_TO_EMFPLUS(META_INTERSECTCLIPRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeInvertRegion	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeInvertRegion            = GDIP_WMF_RECORD_TO_EMFPLUS(META_INVERTREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeLineTo	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeLineTo                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_LINETO),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeMoveTo	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeMoveTo                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_MOVETO),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeOffsetClipRgn	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeOffsetClipRgn           = GDIP_WMF_RECORD_TO_EMFPLUS(META_OFFSETCLIPRGN),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeOffsetViewportOrg	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeOffsetViewportOrg       = GDIP_WMF_RECORD_TO_EMFPLUS(META_OFFSETVIEWPORTORG),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeOffsetWindowOrg	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeOffsetWindowOrg         = GDIP_WMF_RECORD_TO_EMFPLUS(META_OFFSETWINDOWORG),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePaintRegion	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypePaintRegion             = GDIP_WMF_RECORD_TO_EMFPLUS(META_PAINTREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePatBlt	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypePatBlt                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_PATBLT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePie	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypePie                     = GDIP_WMF_RECORD_TO_EMFPLUS(META_PIE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePolyPolygon	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypePolyPolygon             = GDIP_WMF_RECORD_TO_EMFPLUS(META_POLYPOLYGON),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePolygon	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypePolygon                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_POLYGON),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypePolyline	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypePolyline                = GDIP_WMF_RECORD_TO_EMFPLUS(META_POLYLINE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeRealizePalette	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeRealizePalette          = GDIP_WMF_RECORD_TO_EMFPLUS(META_REALIZEPALETTE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeRectangle	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeRectangle               = GDIP_WMF_RECORD_TO_EMFPLUS(META_RECTANGLE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeResetDC	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeResetDC                 = GDIP_WMF_RECORD_TO_EMFPLUS(0x014C),  \/\/ META_RESETDC$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeResizePalette	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeResizePalette           = GDIP_WMF_RECORD_TO_EMFPLUS(META_RESIZEPALETTE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeRestoreDC	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeRestoreDC               = GDIP_WMF_RECORD_TO_EMFPLUS(META_RESTOREDC),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeRoundRect	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeRoundRect               = GDIP_WMF_RECORD_TO_EMFPLUS(META_ROUNDRECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSaveDC	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSaveDC                  = GDIP_WMF_RECORD_TO_EMFPLUS(META_SAVEDC),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeScaleViewportExt	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeScaleViewportExt        = GDIP_WMF_RECORD_TO_EMFPLUS(META_SCALEVIEWPORTEXT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeScaleWindowExt	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeScaleWindowExt          = GDIP_WMF_RECORD_TO_EMFPLUS(META_SCALEWINDOWEXT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSelectClipRegion	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSelectClipRegion        = GDIP_WMF_RECORD_TO_EMFPLUS(META_SELECTCLIPREGION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSelectObject	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSelectObject            = GDIP_WMF_RECORD_TO_EMFPLUS(META_SELECTOBJECT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSelectPalette	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSelectPalette           = GDIP_WMF_RECORD_TO_EMFPLUS(META_SELECTPALETTE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetBkColor	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetBkColor              = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETBKCOLOR),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetBkMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetBkMode               = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETBKMODE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetDIBToDev	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetDIBToDev             = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETDIBTODEV),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetLayout	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetLayout               = GDIP_WMF_RECORD_TO_EMFPLUS(0x0149),  \/\/ META_SETLAYOUT$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetMapMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetMapMode              = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETMAPMODE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetMapperFlags	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetMapperFlags          = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETMAPPERFLAGS),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetPalEntries	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetPalEntries           = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETPALENTRIES),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetPixel	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetPixel                = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETPIXEL),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetPolyFillMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetPolyFillMode         = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETPOLYFILLMODE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetROP2	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetROP2                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETROP2),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetRelAbs	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetRelAbs               = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETRELABS),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetStretchBltMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetStretchBltMode       = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETSTRETCHBLTMODE),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetTextAlign	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetTextAlign            = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETTEXTALIGN),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetTextCharExtra	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetTextCharExtra        = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETTEXTCHAREXTRA),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetTextColor	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetTextColor            = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETTEXTCOLOR),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetTextJustification	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetTextJustification    = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETTEXTJUSTIFICATION),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetViewportExt	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetViewportExt          = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETVIEWPORTEXT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetViewportOrg	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetViewportOrg          = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETVIEWPORTORG),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetWindowExt	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetWindowExt            = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETWINDOWEXT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeSetWindowOrg	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeSetWindowOrg            = GDIP_WMF_RECORD_TO_EMFPLUS(META_SETWINDOWORG),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeStartDoc	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeStartDoc                = GDIP_WMF_RECORD_TO_EMFPLUS(0x014D),  \/\/ META_STARTDOC$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeStartPage	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeStartPage               = GDIP_WMF_RECORD_TO_EMFPLUS(0x004F),  \/\/ META_STARTPAGE$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeStretchBlt	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeStretchBlt              = GDIP_WMF_RECORD_TO_EMFPLUS(META_STRETCHBLT),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeStretchDIB	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeStretchDIB              = GDIP_WMF_RECORD_TO_EMFPLUS(META_STRETCHDIB),$/;"	e	enum:EmfPlusRecordType
WmfRecordTypeTextOut	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WmfRecordTypeTextOut                 = GDIP_WMF_RECORD_TO_EMFPLUS(META_TEXTOUT),$/;"	e	enum:EmfPlusRecordType
WrapMode	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^enum WrapMode$/;"	g
WrapModeClamp	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WrapModeClamp        \/\/ 4$/;"	e	enum:WrapMode
WrapModeTile	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WrapModeTile,        \/\/ 0$/;"	e	enum:WrapMode
WrapModeTileFlipX	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WrapModeTileFlipX,   \/\/ 1$/;"	e	enum:WrapMode
WrapModeTileFlipXY	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WrapModeTileFlipXY,  \/\/ 3$/;"	e	enum:WrapMode
WrapModeTileFlipY	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	/^    WrapModeTileFlipY,   \/\/ 2$/;"	e	enum:WrapMode
_GDIPLUSENUMS_H	C++\ege-13.04.02-full\src\includes\GdiPlusEnums.h	16;"	d
GDIPCONST	C++\ege-13.04.02-full\src\includes\GdiPlusFlat.h	25;"	d
WINGDIPAPI	C++\ege-13.04.02-full\src\includes\GdiPlusFlat.h	21;"	d
_FLATAPI_H	C++\ege-13.04.02-full\src\includes\GdiPlusFlat.h	19;"	d
Clone	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::Clone() const$/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::Font($/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::Font(IN GpFont* font,$/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::Font(IN HDC hdc)$/;"	f	class:Font
Font	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::Font(IN HDC hdc,$/;"	f	class:Font
GetFamily	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::GetFamily(OUT FontFamily *family) const$/;"	f	class:Font
GetHeight	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::GetHeight(IN REAL dpi = 0) const$/;"	f	class:Font
GetHeight	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::GetHeight(IN const Graphics *graphics) const$/;"	f	class:Font
GetLastStatus	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::GetLastStatus(void) const$/;"	f	class:Font
GetLogFontA	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::GetLogFontA(IN const Graphics *g,$/;"	f	class:Font
GetLogFontW	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::GetLogFontW(IN const Graphics *g,$/;"	f	class:Font
GetSize	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::GetSize() const$/;"	f	class:Font
GetStyle	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::GetStyle() const$/;"	f	class:Font
GetUnit	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::GetUnit() const$/;"	f	class:Font
IsAvailable	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::IsAvailable() const$/;"	f	class:Font
SetNativeFont	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::SetNativeFont(GpFont *Font)$/;"	f	class:Font
SetStatus	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::SetStatus(IN Status status) const$/;"	f	class:Font
_GDIPLUSFONT_H	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	16;"	d
~Font	C++\ege-13.04.02-full\src\includes\GdiPlusFont.h	/^Font::~Font()$/;"	f	class:Font
AddFontFile	C++\ege-13.04.02-full\src\includes\GdiPlusFontCollection.h	/^PrivateFontCollection::AddFontFile(IN const WCHAR* filename)$/;"	f	class:PrivateFontCollection
AddMemoryFont	C++\ege-13.04.02-full\src\includes\GdiPlusFontCollection.h	/^PrivateFontCollection::AddMemoryFont(IN const void* memory,$/;"	f	class:PrivateFontCollection
FontCollection	C++\ege-13.04.02-full\src\includes\GdiPlusFontCollection.h	/^FontCollection::FontCollection()$/;"	f	class:FontCollection
GetFamilies	C++\ege-13.04.02-full\src\includes\GdiPlusFontCollection.h	/^FontCollection::GetFamilies($/;"	f	class:FontCollection
GetFamilyCount	C++\ege-13.04.02-full\src\includes\GdiPlusFontCollection.h	/^FontCollection::GetFamilyCount() const$/;"	f	class:FontCollection
GetLastStatus	C++\ege-13.04.02-full\src\includes\GdiPlusFontCollection.h	/^inline Status FontCollection::GetLastStatus () const$/;"	f	class:FontCollection
InstallFontFile	C++\ege-13.04.02-full\src\includes\GdiPlusFontCollection.h	/^InstalledFontCollection::InstallFontFile(IN const WCHAR* filename)$/;"	f	class:InstalledFontCollection
InstalledFontCollection	C++\ege-13.04.02-full\src\includes\GdiPlusFontCollection.h	/^InstalledFontCollection::InstalledFontCollection()$/;"	f	class:InstalledFontCollection
PrivateFontCollection	C++\ege-13.04.02-full\src\includes\GdiPlusFontCollection.h	/^PrivateFontCollection::PrivateFontCollection()$/;"	f	class:PrivateFontCollection
SetStatus	C++\ege-13.04.02-full\src\includes\GdiPlusFontCollection.h	/^FontCollection::SetStatus(IN Status status) const$/;"	f	class:FontCollection
UninstallFontFile	C++\ege-13.04.02-full\src\includes\GdiPlusFontCollection.h	/^InstalledFontCollection::UninstallFontFile(IN const WCHAR* filename)$/;"	f	class:InstalledFontCollection
_GDIPLUSFONTCOLL_H	C++\ege-13.04.02-full\src\includes\GdiPlusFontCollection.h	16;"	d
~FontCollection	C++\ege-13.04.02-full\src\includes\GdiPlusFontCollection.h	/^FontCollection::~FontCollection()$/;"	f	class:FontCollection
~InstalledFontCollection	C++\ege-13.04.02-full\src\includes\GdiPlusFontCollection.h	/^InstalledFontCollection::~InstalledFontCollection()$/;"	f	class:InstalledFontCollection
~PrivateFontCollection	C++\ege-13.04.02-full\src\includes\GdiPlusFontCollection.h	/^PrivateFontCollection::~PrivateFontCollection()$/;"	f	class:PrivateFontCollection
Clone	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::Clone() const$/;"	f	class:FontFamily
FontFamily	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::FontFamily($/;"	f	class:FontFamily
FontFamily	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::FontFamily() :$/;"	f	class:FontFamily
GenericMonospace	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::GenericMonospace()$/;"	f	class:FontFamily
GenericSansSerif	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::GenericSansSerif() $/;"	f	class:FontFamily
GenericSerif	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::GenericSerif() $/;"	f	class:FontFamily
GetCellAscent	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::GetCellAscent(IN INT style) const$/;"	f	class:FontFamily
GetCellDescent	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::GetCellDescent(IN INT style) const$/;"	f	class:FontFamily
GetEmHeight	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::GetEmHeight(IN INT style) const$/;"	f	class:FontFamily
GetFamilyName	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::GetFamilyName($/;"	f	class:FontFamily
GetLastStatus	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::GetLastStatus() const$/;"	f	class:FontFamily
GetLineSpacing	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::GetLineSpacing(IN INT style) const$/;"	f	class:FontFamily
GetTypographicAscent	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::GetTypographicAscent(IN INT style) const$/;"	f	class:FontFamily
GetTypographicDescent	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::GetTypographicDescent(IN INT style) const$/;"	f	class:FontFamily
GetTypographicLineGap	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::GetTypographicLineGap(IN INT style) const$/;"	f	class:FontFamily
IsStyleAvailable	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::IsStyleAvailable(IN INT style) const$/;"	f	class:FontFamily
SetStatus	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^FontFamily::SetStatus(Status status) const $/;"	f	class:FontFamily
_GDIPLUS_FONT_FAMILY_H	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	16;"	d
~FontFamily	C++\ege-13.04.02-full\src\includes\GdiPlusFontFamily.h	/^inline FontFamily::~FontFamily()$/;"	f	class:FontFamily
GpAdjustableArrowCap	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpAdjustableArrowCap : public GpCustomLineCap {};$/;"	c
GpBitmap	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpBitmap : public GpImage {};$/;"	c
GpBrush	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpBrush {};$/;"	c
GpBrushType	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef BrushType GpBrushType;$/;"	t
GpCoordinateSpace	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef CoordinateSpace GpCoordinateSpace;$/;"	t
GpCustomLineCap	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpCustomLineCap {};$/;"	c
GpDashCap	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef DashCap GpDashCap;$/;"	t
GpDashStyle	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef DashStyle GpDashStyle;$/;"	t
GpFillMode	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef FillMode GpFillMode;$/;"	t
GpFlushIntention	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef FlushIntention GpFlushIntention;$/;"	t
GpFont	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpFont {};$/;"	c
GpFontCollection	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpFontCollection {};$/;"	c
GpFontFamily	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpFontFamily {};$/;"	c
GpGraphics	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpGraphics {};$/;"	c
GpHatch	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpHatch : public GpBrush {};$/;"	c
GpHatchStyle	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef HatchStyle GpHatchStyle;$/;"	t
GpImage	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpImage {};$/;"	c
GpImageAttributes	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpImageAttributes {};$/;"	c
GpInstalledFontCollection	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpInstalledFontCollection : public GpFontCollection {};$/;"	c
GpLineCap	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef LineCap GpLineCap;$/;"	t
GpLineGradient	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpLineGradient : public GpBrush {};$/;"	c
GpLineJoin	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef LineJoin GpLineJoin;$/;"	t
GpMatrix	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef Matrix GpMatrix;$/;"	t
GpMatrixOrder	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef MatrixOrder GpMatrixOrder;$/;"	t
GpMetafile	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpMetafile : public GpImage {};$/;"	c
GpPath	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpPath {};$/;"	c
GpPathData	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef PathData GpPathData;$/;"	t
GpPathGradient	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpPathGradient : public GpBrush {};$/;"	c
GpPathIterator	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpPathIterator {};$/;"	c
GpPen	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpPen {};$/;"	c
GpPenAlignment	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef PenAlignment GpPenAlignment;$/;"	t
GpPenType	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef PenType GpPenType;$/;"	t
GpPoint	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef Point GpPoint;$/;"	t
GpPointF	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef PointF GpPointF;$/;"	t
GpPrivateFontCollection	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpPrivateFontCollection : public GpFontCollection {};$/;"	c
GpRect	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef Rect GpRect;$/;"	t
GpRectF	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef RectF GpRectF;$/;"	t
GpRegion	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpRegion {};$/;"	c
GpSizeF	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef SizeF GpSizeF;$/;"	t
GpSolidFill	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpSolidFill : public GpBrush {};$/;"	c
GpStatus	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef Status GpStatus;$/;"	t
GpStringFormat	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpStringFormat {};$/;"	c
GpTexture	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^class GpTexture : public GpBrush {};$/;"	c
GpUnit	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef Unit GpUnit;$/;"	t
GpWrapMode	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	/^typedef WrapMode GpWrapMode;$/;"	t
_GDIPLUSGPSTUBS_H	C++\ege-13.04.02-full\src\includes\GdiPlusGpStubs.h	16;"	d
AddMetafileComment	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status AddMetafileComment(IN const BYTE * data,$/;"	f	class:Graphics
BeginContainer	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    GraphicsContainer BeginContainer()$/;"	f	class:Graphics
BeginContainer	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    GraphicsContainer BeginContainer(IN const Rect    &dstrect,$/;"	f	class:Graphics
BeginContainer	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    GraphicsContainer BeginContainer(IN const RectF &dstrect,$/;"	f	class:Graphics
Clear	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status Clear(IN const Color &color)$/;"	f	class:Graphics
DrawArc	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawArc(IN const Pen* pen,$/;"	f	class:Graphics
DrawBezier	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawBezier(IN const Pen* pen,$/;"	f	class:Graphics
DrawBeziers	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawBeziers(IN const Pen* pen,$/;"	f	class:Graphics
DrawCachedBitmap	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawCachedBitmap(IN CachedBitmap *cb,$/;"	f	class:Graphics
DrawClosedCurve	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawClosedCurve(IN const Pen *pen,$/;"	f	class:Graphics
DrawClosedCurve	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawClosedCurve(IN const Pen* pen,$/;"	f	class:Graphics
DrawCurve	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawCurve(IN const Pen* pen,$/;"	f	class:Graphics
DrawDriverString	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawDriverString($/;"	f	class:Graphics
DrawEllipse	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawEllipse(IN const Pen* pen,$/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawImage(IN Image* image, $/;"	f	class:Graphics
DrawImage	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawImage(IN Image* image,$/;"	f	class:Graphics
DrawLine	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawLine(IN const Pen* pen,$/;"	f	class:Graphics
DrawLines	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawLines(IN const Pen* pen,$/;"	f	class:Graphics
DrawPath	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawPath(IN const Pen* pen,$/;"	f	class:Graphics
DrawPie	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawPie(IN const Pen* pen,$/;"	f	class:Graphics
DrawPolygon	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawPolygon(IN const Pen* pen,$/;"	f	class:Graphics
DrawRectangle	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawRectangle(IN const Pen* pen,$/;"	f	class:Graphics
DrawRectangles	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DrawRectangles(IN const Pen* pen,$/;"	f	class:Graphics
DrawString	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    DrawString($/;"	f	class:Graphics
DriverStringPointToCodepoint	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status DriverStringPointToCodepoint($/;"	f	class:Graphics
EndContainer	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status EndContainer(IN GraphicsContainer state)$/;"	f	class:Graphics
EnumerateMetafile	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    EnumerateMetafile($/;"	f	class:Graphics
ExcludeClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status ExcludeClip(IN const Rect& rect)$/;"	f	class:Graphics
ExcludeClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status ExcludeClip(IN const RectF& rect)$/;"	f	class:Graphics
ExcludeClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status ExcludeClip(IN const Region* region)$/;"	f	class:Graphics
FillClosedCurve	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status FillClosedCurve(IN const Brush* brush,$/;"	f	class:Graphics
FillEllipse	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status FillEllipse(IN const Brush* brush,$/;"	f	class:Graphics
FillPath	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status FillPath(IN const Brush* brush,$/;"	f	class:Graphics
FillPie	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status FillPie(IN const Brush* brush,$/;"	f	class:Graphics
FillPolygon	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status FillPolygon(IN const Brush* brush,$/;"	f	class:Graphics
FillRectangle	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status FillRectangle(IN const Brush* brush,$/;"	f	class:Graphics
FillRectangles	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status FillRectangles(IN const Brush* brush,$/;"	f	class:Graphics
FillRegion	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status FillRegion(IN const Brush* brush,$/;"	f	class:Graphics
Flush	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    VOID Flush(IN FlushIntention intention = FlushIntentionFlush)$/;"	f	class:Graphics
FromHDC	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    static Graphics* FromHDC(IN HDC hdc)$/;"	f	class:Graphics
FromHDC	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    static Graphics* FromHDC(IN HDC hdc,$/;"	f	class:Graphics
FromHWND	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    static Graphics* FromHWND(IN HWND hwnd,$/;"	f	class:Graphics
FromImage	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    static Graphics* FromImage(IN Image *image)$/;"	f	class:Graphics
GetBounds	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^GraphicsPath::GetBounds($/;"	f	class:GraphicsPath
GetClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status GetClip(OUT Region* region) const$/;"	f	class:Graphics
GetClipBounds	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status GetClipBounds(OUT Rect* rect) const$/;"	f	class:Graphics
GetClipBounds	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status GetClipBounds(OUT RectF* rect) const$/;"	f	class:Graphics
GetCompositingMode	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    CompositingMode GetCompositingMode() const$/;"	f	class:Graphics
GetCompositingQuality	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    CompositingQuality GetCompositingQuality() const$/;"	f	class:Graphics
GetDpiX	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    REAL GetDpiX() const$/;"	f	class:Graphics
GetDpiY	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    REAL GetDpiY() const$/;"	f	class:Graphics
GetHDC	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    HDC GetHDC()$/;"	f	class:Graphics
GetHalftonePalette	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    static HPALETTE GetHalftonePalette()$/;"	f	class:Graphics
GetInterpolationMode	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    InterpolationMode GetInterpolationMode() const$/;"	f	class:Graphics
GetLastStatus	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status GetLastStatus() const$/;"	f	class:Graphics
GetLayout	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    GraphicsLayout GetLayout() const$/;"	f	class:Graphics
GetNativeGraphics	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    GpGraphics* GetNativeGraphics() const$/;"	f	class:Graphics
GetNativePen	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    GpPen* GetNativePen(const Pen* pen)$/;"	f	class:Graphics
GetNearestColor	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status GetNearestColor(IN OUT Color* color) const$/;"	f	class:Graphics
GetPageScale	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    REAL GetPageScale() const$/;"	f	class:Graphics
GetPageUnit	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Unit GetPageUnit() const$/;"	f	class:Graphics
GetPixelOffsetMode	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    PixelOffsetMode GetPixelOffsetMode() const$/;"	f	class:Graphics
GetRenderingOrigin	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status GetRenderingOrigin(OUT INT *x, OUT INT *y) const$/;"	f	class:Graphics
GetSmoothingMode	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    SmoothingMode GetSmoothingMode() const$/;"	f	class:Graphics
GetTextContrast	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    UINT GetTextContrast() const$/;"	f	class:Graphics
GetTextGammaValue	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    UINT GetTextGammaValue() const$/;"	f	class:Graphics
GetTextRenderingHint	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    TextRenderingHint GetTextRenderingHint() const$/;"	f	class:Graphics
GetTransform	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status GetTransform(OUT Matrix* matrix) const$/;"	f	class:Graphics
GetVisibleClipBounds	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status GetVisibleClipBounds(OUT Rect *rect) const$/;"	f	class:Graphics
GetVisibleClipBounds	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status GetVisibleClipBounds(OUT RectF *rect) const$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Graphics(GpGraphics* graphics)$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Graphics(IN HDC hdc)$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Graphics(IN HDC hdc,$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Graphics(IN HWND hwnd,$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Graphics(IN Image* image)$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Graphics(const Graphics& graphics)$/;"	f	class:Graphics
Graphics	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^class Graphics : public GdiplusBase$/;"	c
IntersectClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status IntersectClip(IN const Rect& rect)$/;"	f	class:Graphics
IntersectClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status IntersectClip(IN const RectF& rect)$/;"	f	class:Graphics
IntersectClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status IntersectClip(IN const Region* region)$/;"	f	class:Graphics
IsClipEmpty	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    BOOL IsClipEmpty() const$/;"	f	class:Graphics
IsOutlineVisible	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^GraphicsPath::IsOutlineVisible($/;"	f	class:GraphicsPath
IsVisible	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    BOOL IsVisible(IN INT x,$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    BOOL IsVisible(IN REAL x,$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    BOOL IsVisible(IN const Point& point) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    BOOL IsVisible(IN const PointF& point) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    BOOL IsVisible(IN const Rect& rect) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    BOOL IsVisible(IN const RectF& rect) const$/;"	f	class:Graphics
IsVisible	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^GraphicsPath::IsVisible($/;"	f	class:GraphicsPath
IsVisibleClipEmpty	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    BOOL IsVisibleClipEmpty() const$/;"	f	class:Graphics
MeasureCharacterRanges	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    MeasureCharacterRanges($/;"	f	class:Graphics
MeasureDriverString	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status MeasureDriverString($/;"	f	class:Graphics
MeasureString	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    MeasureString($/;"	f	class:Graphics
MeasureStringRegion	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    MeasureStringRegion($/;"	f	class:Graphics
MultiplyTransform	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status MultiplyTransform(IN const Matrix* matrix,$/;"	f	class:Graphics
ReleaseHDC	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    VOID ReleaseHDC(IN HDC hdc)$/;"	f	class:Graphics
ResetClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status ResetClip()$/;"	f	class:Graphics
ResetTransform	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status ResetTransform()$/;"	f	class:Graphics
Restore	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status Restore(IN GraphicsState gstate)$/;"	f	class:Graphics
RotateTransform	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status RotateTransform(IN REAL angle,$/;"	f	class:Graphics
Save	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    GraphicsState Save() const$/;"	f	class:Graphics
ScaleTransform	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status ScaleTransform(IN REAL sx,$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetClip(IN HRGN hRgn,$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetClip(IN const Graphics* g,$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetClip(IN const GraphicsPath* path,$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetClip(IN const Rect& rect,$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetClip(IN const RectF& rect,$/;"	f	class:Graphics
SetClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetClip(IN const Region* region,$/;"	f	class:Graphics
SetCompositingMode	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetCompositingMode(IN CompositingMode compositingMode)$/;"	f	class:Graphics
SetCompositingQuality	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetCompositingQuality(IN CompositingQuality compositingQuality)$/;"	f	class:Graphics
SetInterpolationMode	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetInterpolationMode(IN InterpolationMode interpolationMode)$/;"	f	class:Graphics
SetLayout	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetLayout(IN const GraphicsLayout layout)$/;"	f	class:Graphics
SetNativeGraphics	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    VOID SetNativeGraphics(GpGraphics *graphics)$/;"	f	class:Graphics
SetPageScale	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetPageScale(IN REAL scale)$/;"	f	class:Graphics
SetPageUnit	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetPageUnit(IN Unit unit)$/;"	f	class:Graphics
SetPixelOffsetMode	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetPixelOffsetMode(IN PixelOffsetMode pixelOffsetMode)$/;"	f	class:Graphics
SetRenderingOrigin	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetRenderingOrigin(IN INT x, IN INT y)$/;"	f	class:Graphics
SetSmoothingMode	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetSmoothingMode(IN SmoothingMode smoothingMode)$/;"	f	class:Graphics
SetStatus	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetStatus(Status status) const$/;"	f	class:Graphics
SetTextContrast	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetTextContrast(IN UINT contrast)$/;"	f	class:Graphics
SetTextGammaValue	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetTextGammaValue(IN UINT gammaValue)$/;"	f	class:Graphics
SetTextRenderingHint	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetTextRenderingHint(IN TextRenderingHint newMode)$/;"	f	class:Graphics
SetTransform	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status SetTransform(IN const Matrix* matrix)$/;"	f	class:Graphics
TransformPoints	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status TransformPoints(IN CoordinateSpace destSpace,$/;"	f	class:Graphics
TranslateClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status TranslateClip(IN INT dx,$/;"	f	class:Graphics
TranslateClip	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status TranslateClip(IN REAL dx,$/;"	f	class:Graphics
TranslateTransform	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Status TranslateTransform(IN REAL dx,$/;"	f	class:Graphics
_GDIPLUSGRAPHICS_H	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	16;"	d
lastResult	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    mutable Status lastResult;$/;"	m	class:Graphics
nativeGraphics	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    GpGraphics* nativeGraphics;$/;"	m	class:Graphics
operator =	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    Graphics& operator=(const Graphics& graphics)$/;"	f	class:Graphics
~Graphics	C++\ege-13.04.02-full\src\includes\GdiPlusGraphics.h	/^    ~Graphics()$/;"	f	class:Graphics
Bitmap	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^class Bitmap : public Image$/;"	c
CachedBitmap	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^class CachedBitmap : public GdiplusBase$/;"	c
CustomLineCap	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    CustomLineCap(GpCustomLineCap* nativeCap, Status status)$/;"	f	class:CustomLineCap
CustomLineCap	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    CustomLineCap(const CustomLineCap& customLineCap)$/;"	f	class:CustomLineCap
CustomLineCap	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^class CustomLineCap : public GdiplusBase$/;"	c
Font	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^class Font : public GdiplusBase$/;"	c
FontCollection	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^class FontCollection : public GdiplusBase$/;"	c
FontFamily	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^class FontFamily : public GdiplusBase$/;"	c
GenericMonospaceFontFamily	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^static FontFamily *GenericMonospaceFontFamily = NULL;$/;"	v
GenericMonospaceFontFamilyBuffer	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^static BYTE GenericMonospaceFontFamilyBuffer[sizeof(FontFamily)] = {0};$/;"	v
GenericSansSerifFontFamily	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^static FontFamily *GenericSansSerifFontFamily = NULL;$/;"	v
GenericSansSerifFontFamilyBuffer	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^static BYTE GenericSansSerifFontFamilyBuffer[sizeof(FontFamily)] = {0};$/;"	v
GenericSerifFontFamily	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^static FontFamily *GenericSerifFontFamily     = NULL;$/;"	v
GenericSerifFontFamilyBuffer	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^static BYTE GenericSerifFontFamilyBuffer    [sizeof(FontFamily)] = {0};$/;"	v
Image	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    Image() {}$/;"	f	class:Image
Image	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^class Image : public GdiplusBase$/;"	c
InstalledFontCollection	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^class InstalledFontCollection : public FontCollection$/;"	c
IsAvailable	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    BOOL    IsAvailable() const$/;"	f	class:FontFamily
IsVisible	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    BOOL IsVisible(IN INT x,$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    BOOL IsVisible(IN REAL x,$/;"	f	class:Region
PrivateFontCollection	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^class PrivateFontCollection : public FontCollection$/;"	c
Region	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    Region(const Region &region)$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^class Region : public GdiplusBase$/;"	c
SetNativeCap	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    VOID SetNativeCap(GpCustomLineCap* nativeCap)$/;"	f	class:CustomLineCap
SetStatus	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    Status SetStatus(Status status) const$/;"	f	class:CustomLineCap
SetStatus	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    Status SetStatus(Status status) const$/;"	f	class:Image
SetStatus	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    Status SetStatus(Status status) const$/;"	f	class:Region
SetStrokeCap	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    Status SetStrokeCap(IN LineCap strokeCap)$/;"	f	class:CustomLineCap
_GDIPLUSHEADERS_H	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	16;"	d
lastResult	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    mutable Status    lastResult;$/;"	m	class:FontCollection
lastResult	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    mutable Status   lastResult;$/;"	m	class:FontFamily
lastResult	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    mutable Status lastResult;$/;"	m	class:CachedBitmap
lastResult	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    mutable Status lastResult;$/;"	m	class:CustomLineCap
lastResult	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    mutable Status lastResult;$/;"	m	class:Font
lastResult	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    mutable Status lastResult;$/;"	m	class:Image
lastResult	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    mutable Status lastResult;$/;"	m	class:Region
loadStatus	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    mutable Status loadStatus;$/;"	m	class:Image
nativeCachedBitmap	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    GpCachedBitmap *nativeCachedBitmap;$/;"	m	class:CachedBitmap
nativeCap	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    GpCustomLineCap* nativeCap;$/;"	m	class:CustomLineCap
nativeFamily	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    GpFontFamily    *nativeFamily;$/;"	m	class:FontFamily
nativeFont	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    GpFont* nativeFont;$/;"	m	class:Font
nativeFontCollection	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    GpFontCollection *nativeFontCollection;$/;"	m	class:FontCollection
nativeImage	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    GpImage* nativeImage;$/;"	m	class:Image
nativeRegion	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    GpRegion* nativeRegion;$/;"	m	class:Region
operator =	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    CustomLineCap& operator=(const CustomLineCap& customLineCap)$/;"	f	class:CustomLineCap
operator =	C++\ege-13.04.02-full\src\includes\GdiPlusHeaders.h	/^    Region& operator=(const Region &region)$/;"	f	class:Region
AddImageCodec	C++\ege-13.04.02-full\src\includes\GdiPlusImageCodec.h	/^AddImageCodec($/;"	f
GetImageDecoders	C++\ege-13.04.02-full\src\includes\GdiPlusImageCodec.h	/^GetImageDecoders($/;"	f
GetImageDecodersSize	C++\ege-13.04.02-full\src\includes\GdiPlusImageCodec.h	/^GetImageDecodersSize($/;"	f
GetImageEncoders	C++\ege-13.04.02-full\src\includes\GdiPlusImageCodec.h	/^GetImageEncoders($/;"	f
GetImageEncodersSize	C++\ege-13.04.02-full\src\includes\GdiPlusImageCodec.h	/^GetImageEncodersSize($/;"	f
RemoveImageCodec	C++\ege-13.04.02-full\src\includes\GdiPlusImageCodec.h	/^RemoveImageCodec($/;"	f
_GDIPLUSIMAGECODEC_H	C++\ege-13.04.02-full\src\includes\GdiPlusImageCodec.h	16;"	d
BitmapData	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^class BitmapData$/;"	c
Clsid	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    CLSID Clsid;$/;"	m	class:ImageCodecInfo
CodecName	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    const WCHAR* CodecName;$/;"	m	class:ImageCodecInfo
Count	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    UINT Count;                      \/\/ Number of parameters in this structure$/;"	m	class:EncoderParameters
DllName	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    const WCHAR* DllName;$/;"	m	class:ImageCodecInfo
EncoderParameter	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^class EncoderParameter$/;"	c
EncoderParameters	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^class EncoderParameters$/;"	c
FilenameExtension	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    const WCHAR* FilenameExtension;$/;"	m	class:ImageCodecInfo
Flags	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    DWORD Flags;$/;"	m	class:ImageCodecInfo
FormatDescription	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    const WCHAR* FormatDescription;$/;"	m	class:ImageCodecInfo
FormatID	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    GUID  FormatID;$/;"	m	class:ImageCodecInfo
Guid	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    GUID    Guid;               \/\/ GUID of the parameter$/;"	m	class:EncoderParameter
Height	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    UINT Height;$/;"	m	class:BitmapData
ImageCodecFlags	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^enum ImageCodecFlags$/;"	g
ImageCodecFlagsBlockingDecode	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageCodecFlagsBlockingDecode     = 0x00000020,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsBuiltin	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageCodecFlagsBuiltin            = 0x00010000,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsDecoder	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageCodecFlagsDecoder            = 0x00000002,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsEncoder	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageCodecFlagsEncoder            = 0x00000001,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsSeekableEncode	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageCodecFlagsSeekableEncode     = 0x00000010,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsSupportBitmap	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageCodecFlagsSupportBitmap      = 0x00000004,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsSupportVector	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageCodecFlagsSupportVector      = 0x00000008,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsSystem	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageCodecFlagsSystem             = 0x00020000,$/;"	e	enum:ImageCodecFlags
ImageCodecFlagsUser	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageCodecFlagsUser               = 0x00040000$/;"	e	enum:ImageCodecFlags
ImageCodecInfo	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^class ImageCodecInfo$/;"	c
ImageFlags	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^enum ImageFlags$/;"	g
ImageFlagsCaching	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageFlagsCaching             = 0x00020000$/;"	e	enum:ImageFlags
ImageFlagsColorSpaceCMYK	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageFlagsColorSpaceCMYK      = 0x0020,$/;"	e	enum:ImageFlags
ImageFlagsColorSpaceGRAY	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageFlagsColorSpaceGRAY      = 0x0040,$/;"	e	enum:ImageFlags
ImageFlagsColorSpaceRGB	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageFlagsColorSpaceRGB       = 0x0010,$/;"	e	enum:ImageFlags
ImageFlagsColorSpaceYCBCR	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageFlagsColorSpaceYCBCR     = 0x0080,$/;"	e	enum:ImageFlags
ImageFlagsColorSpaceYCCK	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageFlagsColorSpaceYCCK      = 0x0100,$/;"	e	enum:ImageFlags
ImageFlagsHasAlpha	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageFlagsHasAlpha            = 0x0002,$/;"	e	enum:ImageFlags
ImageFlagsHasRealDPI	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageFlagsHasRealDPI          = 0x1000,$/;"	e	enum:ImageFlags
ImageFlagsHasRealPixelSize	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageFlagsHasRealPixelSize    = 0x2000,$/;"	e	enum:ImageFlags
ImageFlagsHasTranslucent	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageFlagsHasTranslucent      = 0x0004,$/;"	e	enum:ImageFlags
ImageFlagsNone	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageFlagsNone                = 0,$/;"	e	enum:ImageFlags
ImageFlagsPartiallyScalable	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageFlagsPartiallyScalable   = 0x0008,$/;"	e	enum:ImageFlags
ImageFlagsReadOnly	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageFlagsReadOnly            = 0x00010000,$/;"	e	enum:ImageFlags
ImageFlagsScalable	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageFlagsScalable            = 0x0001,$/;"	e	enum:ImageFlags
ImageLockMode	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^enum ImageLockMode$/;"	g
ImageLockModeRead	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageLockModeRead        = 0x0001,$/;"	e	enum:ImageLockMode
ImageLockModeUserInputBuf	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageLockModeUserInputBuf= 0x0004$/;"	e	enum:ImageLockMode
ImageLockModeWrite	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ImageLockModeWrite       = 0x0002,$/;"	e	enum:ImageLockMode
MimeType	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    const WCHAR* MimeType;$/;"	m	class:ImageCodecInfo
NumberOfValues	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ULONG   NumberOfValues;     \/\/ Number of the parameter values$/;"	m	class:EncoderParameter
Parameter	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    EncoderParameter Parameter[1];   \/\/ Parameter values$/;"	m	class:EncoderParameters
PixelFormat	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    PixelFormat PixelFormat;$/;"	m	class:BitmapData
PropertyItem	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^class PropertyItem$/;"	c
PropertyTagArtist	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	326;"	d
PropertyTagBitsPerSample	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	291;"	d
PropertyTagCellHeight	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	296;"	d
PropertyTagCellWidth	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	295;"	d
PropertyTagChrominanceTable	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	451;"	d
PropertyTagColorMap	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	331;"	d
PropertyTagColorTransferFunction	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	399;"	d
PropertyTagCompression	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	292;"	d
PropertyTagCopyright	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	370;"	d
PropertyTagDateTime	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	325;"	d
PropertyTagDocumentName	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	298;"	d
PropertyTagDotRange	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	340;"	d
PropertyTagEquipMake	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	300;"	d
PropertyTagEquipModel	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	301;"	d
PropertyTagExifAperture	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	479;"	d
PropertyTagExifBrightness	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	480;"	d
PropertyTagExifCfaPattern	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	510;"	d
PropertyTagExifColorSpace	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	495;"	d
PropertyTagExifCompBPP	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	476;"	d
PropertyTagExifCompConfig	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	475;"	d
PropertyTagExifDTDigSS	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	492;"	d
PropertyTagExifDTDigitized	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	473;"	d
PropertyTagExifDTOrig	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	472;"	d
PropertyTagExifDTOrigSS	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	491;"	d
PropertyTagExifDTSubsec	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	490;"	d
PropertyTagExifExposureBias	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	481;"	d
PropertyTagExifExposureIndex	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	506;"	d
PropertyTagExifExposureProg	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	466;"	d
PropertyTagExifExposureTime	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	463;"	d
PropertyTagExifFNumber	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	464;"	d
PropertyTagExifFPXVer	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	494;"	d
PropertyTagExifFileSource	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	508;"	d
PropertyTagExifFlash	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	486;"	d
PropertyTagExifFlashEnergy	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	500;"	d
PropertyTagExifFocalLength	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	487;"	d
PropertyTagExifFocalResUnit	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	504;"	d
PropertyTagExifFocalXRes	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	502;"	d
PropertyTagExifFocalYRes	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	503;"	d
PropertyTagExifIFD	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	284;"	d
PropertyTagExifISOSpeed	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	468;"	d
PropertyTagExifInterop	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	499;"	d
PropertyTagExifLightSource	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	485;"	d
PropertyTagExifMakerNote	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	488;"	d
PropertyTagExifMaxAperture	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	482;"	d
PropertyTagExifMeteringMode	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	484;"	d
PropertyTagExifOECF	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	469;"	d
PropertyTagExifPixXDim	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	496;"	d
PropertyTagExifPixYDim	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	497;"	d
PropertyTagExifRelatedWav	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	498;"	d
PropertyTagExifSceneType	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	509;"	d
PropertyTagExifSensingMethod	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	507;"	d
PropertyTagExifShutterSpeed	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	478;"	d
PropertyTagExifSpatialFR	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	501;"	d
PropertyTagExifSpectralSense	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	467;"	d
PropertyTagExifSubjectDist	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	483;"	d
PropertyTagExifSubjectLoc	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	505;"	d
PropertyTagExifUserComment	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	489;"	d
PropertyTagExifVer	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	471;"	d
PropertyTagExtraSamples	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	342;"	d
PropertyTagFillOrder	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	297;"	d
PropertyTagFrameDelay	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	453;"	d
PropertyTagFreeByteCounts	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	316;"	d
PropertyTagFreeOffset	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	315;"	d
PropertyTagGamma	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	365;"	d
PropertyTagGpsAltitude	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	518;"	d
PropertyTagGpsAltitudeRef	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	517;"	d
PropertyTagGpsDestBear	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	536;"	d
PropertyTagGpsDestBearRef	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	535;"	d
PropertyTagGpsDestDist	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	538;"	d
PropertyTagGpsDestDistRef	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	537;"	d
PropertyTagGpsDestLat	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	532;"	d
PropertyTagGpsDestLatRef	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	531;"	d
PropertyTagGpsDestLong	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	534;"	d
PropertyTagGpsDestLongRef	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	533;"	d
PropertyTagGpsGpsDop	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	523;"	d
PropertyTagGpsGpsMeasureMode	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	522;"	d
PropertyTagGpsGpsSatellites	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	520;"	d
PropertyTagGpsGpsStatus	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	521;"	d
PropertyTagGpsGpsTime	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	519;"	d
PropertyTagGpsIFD	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	285;"	d
PropertyTagGpsImgDir	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	529;"	d
PropertyTagGpsImgDirRef	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	528;"	d
PropertyTagGpsLatitude	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	514;"	d
PropertyTagGpsLatitudeRef	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	513;"	d
PropertyTagGpsLongitude	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	516;"	d
PropertyTagGpsLongitudeRef	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	515;"	d
PropertyTagGpsMapDatum	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	530;"	d
PropertyTagGpsSpeed	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	525;"	d
PropertyTagGpsSpeedRef	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	524;"	d
PropertyTagGpsTrack	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	527;"	d
PropertyTagGpsTrackRef	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	526;"	d
PropertyTagGpsVer	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	512;"	d
PropertyTagGrayResponseCurve	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	318;"	d
PropertyTagGrayResponseUnit	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	317;"	d
PropertyTagGridSize	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	390;"	d
PropertyTagHalftoneDegree	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	385;"	d
PropertyTagHalftoneHints	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	332;"	d
PropertyTagHalftoneLPI	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	383;"	d
PropertyTagHalftoneLPIUnit	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	384;"	d
PropertyTagHalftoneMisc	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	387;"	d
PropertyTagHalftoneScreen	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	388;"	d
PropertyTagHalftoneShape	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	386;"	d
PropertyTagHostComputer	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	327;"	d
PropertyTagICCProfile	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	363;"	d
PropertyTagICCProfileDescriptor	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	366;"	d
PropertyTagImageDescription	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	299;"	d
PropertyTagImageHeight	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	290;"	d
PropertyTagImageTitle	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	369;"	d
PropertyTagImageWidth	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	289;"	d
PropertyTagInkNames	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	338;"	d
PropertyTagInkSet	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	337;"	d
PropertyTagJPEGACTables	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	356;"	d
PropertyTagJPEGDCTables	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	355;"	d
PropertyTagJPEGInterFormat	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	349;"	d
PropertyTagJPEGInterLength	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	350;"	d
PropertyTagJPEGLosslessPredictors	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	352;"	d
PropertyTagJPEGPointTransforms	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	353;"	d
PropertyTagJPEGProc	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	348;"	d
PropertyTagJPEGQTables	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	354;"	d
PropertyTagJPEGQuality	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	389;"	d
PropertyTagJPEGRestartInterval	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	351;"	d
PropertyTagLoopCount	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	454;"	d
PropertyTagLuminanceTable	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	450;"	d
PropertyTagMaxSampleValue	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	308;"	d
PropertyTagMinSampleValue	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	307;"	d
PropertyTagNewSubfileType	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	287;"	d
PropertyTagNumberOfInks	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	339;"	d
PropertyTagOrientation	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	303;"	d
PropertyTagPageName	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	312;"	d
PropertyTagPageNumber	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	322;"	d
PropertyTagPaletteHistogram	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	459;"	d
PropertyTagPhotometricInterp	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	293;"	d
PropertyTagPixelPerUnitX	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	457;"	d
PropertyTagPixelPerUnitY	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	458;"	d
PropertyTagPixelUnit	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	456;"	d
PropertyTagPlanarConfig	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	311;"	d
PropertyTagPredictor	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	328;"	d
PropertyTagPrimaryChromaticities	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	330;"	d
PropertyTagPrintFlags	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	378;"	d
PropertyTagPrintFlagsBleedWidth	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	381;"	d
PropertyTagPrintFlagsBleedWidthScale	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	382;"	d
PropertyTagPrintFlagsCrop	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	380;"	d
PropertyTagPrintFlagsVersion	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	379;"	d
PropertyTagREFBlackWhite	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	361;"	d
PropertyTagResolutionUnit	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	321;"	d
PropertyTagResolutionXLengthUnit	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	376;"	d
PropertyTagResolutionXUnit	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	374;"	d
PropertyTagResolutionYLengthUnit	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	377;"	d
PropertyTagResolutionYUnit	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	375;"	d
PropertyTagRowsPerStrip	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	305;"	d
PropertyTagSMaxSampleValue	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	345;"	d
PropertyTagSMinSampleValue	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	344;"	d
PropertyTagSRGBRenderingIntent	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	367;"	d
PropertyTagSampleFormat	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	343;"	d
PropertyTagSamplesPerPixel	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	304;"	d
PropertyTagSoftwareUsed	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	324;"	d
PropertyTagStripBytesCount	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	306;"	d
PropertyTagStripOffsets	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	302;"	d
PropertyTagSubfileType	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	288;"	d
PropertyTagT4Option	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	319;"	d
PropertyTagT6Option	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	320;"	d
PropertyTagTargetPrinter	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	341;"	d
PropertyTagThreshHolding	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	294;"	d
PropertyTagThumbnailArtist	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	435;"	d
PropertyTagThumbnailBitsPerSample	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	409;"	d
PropertyTagThumbnailColorDepth	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	394;"	d
PropertyTagThumbnailCompressedSize	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	398;"	d
PropertyTagThumbnailCompression	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	411;"	d
PropertyTagThumbnailCopyRight	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	448;"	d
PropertyTagThumbnailData	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	400;"	d
PropertyTagThumbnailDateTime	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	433;"	d
PropertyTagThumbnailEquipMake	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	414;"	d
PropertyTagThumbnailEquipModel	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	416;"	d
PropertyTagThumbnailFormat	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	391;"	d
PropertyTagThumbnailHeight	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	393;"	d
PropertyTagThumbnailImageDescription	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	413;"	d
PropertyTagThumbnailImageHeight	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	408;"	d
PropertyTagThumbnailImageWidth	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	407;"	d
PropertyTagThumbnailOrientation	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	419;"	d
PropertyTagThumbnailPhotometricInterp	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	412;"	d
PropertyTagThumbnailPlanarConfig	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	428;"	d
PropertyTagThumbnailPlanes	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	395;"	d
PropertyTagThumbnailPrimaryChromaticities	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	438;"	d
PropertyTagThumbnailRawBytes	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	396;"	d
PropertyTagThumbnailRefBlackWhite	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	446;"	d
PropertyTagThumbnailResolutionUnit	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	429;"	d
PropertyTagThumbnailResolutionX	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	424;"	d
PropertyTagThumbnailResolutionY	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	426;"	d
PropertyTagThumbnailRowsPerStrip	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	421;"	d
PropertyTagThumbnailSamplesPerPixel	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	420;"	d
PropertyTagThumbnailSize	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	397;"	d
PropertyTagThumbnailSoftwareUsed	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	432;"	d
PropertyTagThumbnailStripBytesCount	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	422;"	d
PropertyTagThumbnailStripOffsets	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	418;"	d
PropertyTagThumbnailTransferFunction	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	431;"	d
PropertyTagThumbnailWhitePoint	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	437;"	d
PropertyTagThumbnailWidth	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	392;"	d
PropertyTagThumbnailYCbCrCoefficients	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	441;"	d
PropertyTagThumbnailYCbCrPositioning	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	445;"	d
PropertyTagThumbnailYCbCrSubsampling	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	443;"	d
PropertyTagTileByteCounts	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	336;"	d
PropertyTagTileLength	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	334;"	d
PropertyTagTileOffset	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	335;"	d
PropertyTagTileWidth	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	333;"	d
PropertyTagTransferFuncition	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	323;"	d
PropertyTagTransferRange	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	346;"	d
PropertyTagTypeASCII	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	271;"	d
PropertyTagTypeByte	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	270;"	d
PropertyTagTypeLong	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	273;"	d
PropertyTagTypeRational	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	274;"	d
PropertyTagTypeSLONG	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	276;"	d
PropertyTagTypeSRational	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	277;"	d
PropertyTagTypeShort	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	272;"	d
PropertyTagTypeUndefined	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	275;"	d
PropertyTagWhitePoint	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	329;"	d
PropertyTagXPosition	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	313;"	d
PropertyTagXResolution	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	309;"	d
PropertyTagYCbCrCoefficients	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	358;"	d
PropertyTagYCbCrPositioning	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	360;"	d
PropertyTagYCbCrSubsampling	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	359;"	d
PropertyTagYPosition	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	314;"	d
PropertyTagYResolution	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	310;"	d
Reserved	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    UINT_PTR Reserved;$/;"	m	class:BitmapData
Rotate180FlipNone	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    Rotate180FlipNone  = 2,$/;"	e	enum:RotateFlipType
Rotate180FlipX	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    Rotate180FlipX     = 6,$/;"	e	enum:RotateFlipType
Rotate180FlipXY	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    Rotate180FlipXY    = RotateNoneFlipNone,$/;"	e	enum:RotateFlipType
Rotate180FlipY	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    Rotate180FlipY     = RotateNoneFlipX,$/;"	e	enum:RotateFlipType
Rotate270FlipNone	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    Rotate270FlipNone  = 3,$/;"	e	enum:RotateFlipType
Rotate270FlipX	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    Rotate270FlipX     = 7,$/;"	e	enum:RotateFlipType
Rotate270FlipXY	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    Rotate270FlipXY    = Rotate90FlipNone$/;"	e	enum:RotateFlipType
Rotate270FlipY	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    Rotate270FlipY     = Rotate90FlipX,$/;"	e	enum:RotateFlipType
Rotate90FlipNone	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    Rotate90FlipNone   = 1,$/;"	e	enum:RotateFlipType
Rotate90FlipX	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    Rotate90FlipX      = 5,$/;"	e	enum:RotateFlipType
Rotate90FlipXY	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    Rotate90FlipXY     = Rotate270FlipNone,$/;"	e	enum:RotateFlipType
Rotate90FlipY	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    Rotate90FlipY      = Rotate270FlipX,$/;"	e	enum:RotateFlipType
RotateFlipType	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^enum RotateFlipType$/;"	g
RotateNoneFlipNone	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    RotateNoneFlipNone = 0,$/;"	e	enum:RotateFlipType
RotateNoneFlipX	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    RotateNoneFlipX    = 4,$/;"	e	enum:RotateFlipType
RotateNoneFlipXY	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    RotateNoneFlipXY   = Rotate180FlipNone,$/;"	e	enum:RotateFlipType
RotateNoneFlipY	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    RotateNoneFlipY    = Rotate180FlipX,$/;"	e	enum:RotateFlipType
Scan0	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    VOID* Scan0;$/;"	m	class:BitmapData
SigCount	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    DWORD SigCount;$/;"	m	class:ImageCodecInfo
SigMask	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    const BYTE* SigMask;$/;"	m	class:ImageCodecInfo
SigPattern	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    const BYTE* SigPattern;$/;"	m	class:ImageCodecInfo
SigSize	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    DWORD SigSize;$/;"	m	class:ImageCodecInfo
Stride	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    INT Stride;$/;"	m	class:BitmapData
Type	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ULONG   Type;               \/\/ Value type, like ValueTypeLONG  etc.$/;"	m	class:EncoderParameter
Value	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    VOID*   Value;              \/\/ A pointer to the parameter values$/;"	m	class:EncoderParameter
Version	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    DWORD Version;$/;"	m	class:ImageCodecInfo
Width	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    UINT Width;$/;"	m	class:BitmapData
_GDIPLUSIMAGING_H	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	15;"	d
id	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    PROPID  id;                 \/\/ ID of this property$/;"	m	class:PropertyItem
length	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    ULONG   length;             \/\/ Length of the property value, in bytes$/;"	m	class:PropertyItem
type	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    WORD    type;               \/\/ Type of the value, as one of TAG_TYPE_XXX$/;"	m	class:PropertyItem
value	C++\ege-13.04.02-full\src\includes\GdiPlusImaging.h	/^    VOID*   value;              \/\/ property value$/;"	m	class:PropertyItem
DebugEventCallback	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	/^    DebugEventProc DebugEventCallback; \/\/ Ignored on free builds$/;"	m	struct:GdiplusStartupInput
DebugEventLevel	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	/^enum DebugEventLevel$/;"	g
DebugEventLevelFatal	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	/^    DebugEventLevelFatal,$/;"	e	enum:DebugEventLevel
DebugEventLevelWarning	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	/^    DebugEventLevelWarning$/;"	e	enum:DebugEventLevel
DebugEventProc	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	/^typedef VOID (WINAPI *DebugEventProc)(DebugEventLevel level, CHAR *message);$/;"	t
GdiplusStartupInput	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	/^    GdiplusStartupInput($/;"	f	struct:GdiplusStartupInput
GdiplusStartupInput	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	/^struct GdiplusStartupInput$/;"	s
GdiplusStartupOutput	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	/^struct GdiplusStartupOutput$/;"	s
GdiplusVersion	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	/^    UINT32 GdiplusVersion;             \/\/ Must be 1$/;"	m	struct:GdiplusStartupInput
NotificationHook	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	/^    NotificationHookProc NotificationHook;$/;"	m	struct:GdiplusStartupOutput
NotificationHookProc	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	/^typedef Status (WINAPI *NotificationHookProc)(OUT ULONG_PTR *token);$/;"	t
NotificationUnhook	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	/^    NotificationUnhookProc NotificationUnhook;$/;"	m	struct:GdiplusStartupOutput
NotificationUnhookProc	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	/^typedef VOID (WINAPI *NotificationUnhookProc)(ULONG_PTR token);$/;"	t
SuppressBackgroundThread	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	/^    BOOL SuppressBackgroundThread;     \/\/ FALSE unless you're prepared to call $/;"	m	struct:GdiplusStartupInput
SuppressExternalCodecs	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	/^    BOOL SuppressExternalCodecs;       \/\/ FALSE unless you want GDI+ only to use$/;"	m	struct:GdiplusStartupInput
_GDIPLUSINIT_H	C++\ege-13.04.02-full\src\includes\GdiPlusInit.h	21;"	d
AdjustableArrowCap	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^    AdjustableArrowCap($/;"	f	class:AdjustableArrowCap
AdjustableArrowCap	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^class AdjustableArrowCap : public CustomLineCap$/;"	c
Clone	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^CustomLineCap::Clone() const$/;"	f	class:CustomLineCap
CustomLineCap	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^CustomLineCap::CustomLineCap($/;"	f	class:CustomLineCap
CustomLineCap	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^CustomLineCap::CustomLineCap()$/;"	f	class:CustomLineCap
GetBaseCap	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^CustomLineCap::GetBaseCap() const$/;"	f	class:CustomLineCap
GetBaseInset	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^CustomLineCap::GetBaseInset() const$/;"	f	class:CustomLineCap
GetHeight	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^    REAL GetHeight() const$/;"	f	class:AdjustableArrowCap
GetMiddleInset	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^    REAL GetMiddleInset() const$/;"	f	class:AdjustableArrowCap
GetStrokeCaps	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^CustomLineCap::GetStrokeCaps($/;"	f	class:CustomLineCap
GetStrokeJoin	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^CustomLineCap::GetStrokeJoin() const$/;"	f	class:CustomLineCap
GetWidth	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^    REAL GetWidth() const$/;"	f	class:AdjustableArrowCap
GetWidthScale	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^CustomLineCap::GetWidthScale() const$/;"	f	class:CustomLineCap
IsFilled	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^    BOOL IsFilled() const$/;"	f	class:AdjustableArrowCap
SetBaseCap	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^CustomLineCap::SetBaseCap(IN LineCap baseCap)$/;"	f	class:CustomLineCap
SetBaseInset	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^CustomLineCap::SetBaseInset(IN REAL inset)$/;"	f	class:CustomLineCap
SetFillState	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^    Status SetFillState(IN BOOL isFilled)$/;"	f	class:AdjustableArrowCap
SetHeight	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^    Status SetHeight(IN REAL height)$/;"	f	class:AdjustableArrowCap
SetMiddleInset	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^    Status SetMiddleInset(IN REAL middleInset)$/;"	f	class:AdjustableArrowCap
SetStrokeCaps	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^CustomLineCap::SetStrokeCaps($/;"	f	class:CustomLineCap
SetStrokeJoin	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^CustomLineCap::SetStrokeJoin($/;"	f	class:CustomLineCap
SetWidth	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^    Status SetWidth(IN REAL width)$/;"	f	class:AdjustableArrowCap
SetWidthScale	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^CustomLineCap::SetWidthScale(IN REAL widthScale)$/;"	f	class:CustomLineCap
_GDIPLUSLINECAPS_H	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	16;"	d
~CustomLineCap	C++\ege-13.04.02-full\src\includes\GdiPlusLineCaps.h	/^CustomLineCap::~CustomLineCap()$/;"	f	class:CustomLineCap
Clone	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Matrix *Clone() const$/;"	f	class:Matrix
Equals	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    BOOL Equals(IN const Matrix *matrix) const$/;"	f	class:Matrix
GetElements	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status GetElements(OUT REAL *m) const $/;"	f	class:Matrix
GetLastStatus	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status GetLastStatus() const$/;"	f	class:Matrix
Invert	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status Invert()$/;"	f	class:Matrix
IsIdentity	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    BOOL IsIdentity() const$/;"	f	class:Matrix
IsInvertible	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    BOOL IsInvertible() const$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Matrix()$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Matrix(GpMatrix *nativeMatrix)$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Matrix(IN REAL m11, $/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Matrix(IN const Rect& rect, $/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Matrix(IN const RectF& rect, $/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Matrix(const Matrix& matrix)$/;"	f	class:Matrix
Matrix	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^class Matrix : public GdiplusBase$/;"	c
Multiply	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status Multiply(IN const Matrix *matrix, $/;"	f	class:Matrix
OffsetX	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    REAL OffsetX() const$/;"	f	class:Matrix
OffsetY	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    REAL OffsetY() const$/;"	f	class:Matrix
Reset	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status Reset()$/;"	f	class:Matrix
Rotate	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status Rotate(IN REAL angle, $/;"	f	class:Matrix
RotateAt	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status RotateAt(IN REAL angle, $/;"	f	class:Matrix
Scale	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status Scale(IN REAL scaleX, $/;"	f	class:Matrix
SetElements	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status SetElements(IN REAL m11, $/;"	f	class:Matrix
SetNativeMatrix	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    VOID SetNativeMatrix(GpMatrix *nativeMatrix)$/;"	f	class:Matrix
SetStatus	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status SetStatus(Status status) const$/;"	f	class:Matrix
Shear	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status Shear(IN REAL shearX, $/;"	f	class:Matrix
TransformPoints	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status TransformPoints(IN OUT Point* pts, $/;"	f	class:Matrix
TransformPoints	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status TransformPoints(IN OUT PointF* pts, $/;"	f	class:Matrix
TransformVectors	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status TransformVectors(IN OUT Point* pts, $/;"	f	class:Matrix
TransformVectors	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status TransformVectors(IN OUT PointF* pts, $/;"	f	class:Matrix
Translate	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Status Translate(IN REAL offsetX, $/;"	f	class:Matrix
lastResult	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    mutable Status lastResult;$/;"	m	class:Matrix
nativeMatrix	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    GpMatrix *nativeMatrix;$/;"	m	class:Matrix
operator =	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    Matrix& operator=(const Matrix& matrix)$/;"	f	class:Matrix
~Matrix	C++\ege-13.04.02-full\src\includes\GdiPlusMatrix.h	/^    ~Matrix()$/;"	f	class:Matrix
GDIPCONST	C++\ege-13.04.02-full\src\includes\GdiPlusMem.h	26;"	d
GDIPCONST	C++\ege-13.04.02-full\src\includes\GdiPlusMem.h	28;"	d
WINGDIPAPI	C++\ege-13.04.02-full\src\includes\GdiPlusMem.h	21;"	d
_GDIPLUSMEM_H	C++\ege-13.04.02-full\src\includes\GdiPlusMem.h	19;"	d
EmfToWmfBits	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	/^    static UINT Metafile::EmfToWmfBits($/;"	f	class:Metafile::Metafile
GetDownLevelRasterizationLimit	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	/^    UINT GetDownLevelRasterizationLimit() const$/;"	f	class:Metafile
GetHENHMETAFILE	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	/^    HENHMETAFILE GetHENHMETAFILE()$/;"	f	class:Metafile
GetMetafileHeader	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	/^    Status GetMetafileHeader($/;"	f	class:Metafile
GetMetafileHeader	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	/^    static Status GetMetafileHeader($/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	/^    Metafile($/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	/^    Metafile()$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	/^    Metafile(IN HENHMETAFILE hEmf,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	/^    Metafile(IN HMETAFILE hWmf,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	/^    Metafile(IN IStream* stream)$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	/^    Metafile(IN const WCHAR* filename)$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	/^    Metafile(IN const WCHAR* filename,$/;"	f	class:Metafile
Metafile	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	/^class Metafile : public Image$/;"	c
PlayRecord	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	/^    PlayRecord($/;"	f	class:Metafile
SetDownLevelRasterizationLimit	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	/^    Status SetDownLevelRasterizationLimit($/;"	f	class:Metafile
_GDIPLUSMETAFILE_H	C++\ege-13.04.02-full\src\includes\GdiPlusMetaFile.h	16;"	d
APMFileHeader	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^} APMFileHeader;$/;"	t	typeref:struct:__anon20
APMRect16	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^} APMRect16;$/;"	t	typeref:struct:__anon19
Bottom	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    INT16           Bottom;$/;"	m	struct:__anon19
BoundingBox	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    APMRect16       BoundingBox;    \/\/ Coordinates in metafile units$/;"	m	struct:__anon20
Checksum	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    INT16           Checksum;       \/\/ Checksum value for previous 10 WORDs$/;"	m	struct:__anon20
DpiX	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    REAL                DpiX;$/;"	m	class:MetafileHeader
DpiY	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    REAL                DpiY;$/;"	m	class:MetafileHeader
ENHMETAHEADER3	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^} ENHMETAHEADER3;$/;"	t	typeref:struct:__anon18
EmfHeader	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^        ENHMETAHEADER3  EmfHeader;$/;"	m	union:MetafileHeader::__anon21
EmfPlusFlags	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    UINT                EmfPlusFlags;$/;"	m	class:MetafileHeader
EmfPlusHeaderSize	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    INT                 EmfPlusHeaderSize;  \/\/ size of the EMF+ header in file$/;"	m	class:MetafileHeader
GDIP_EMFPLUSFLAGS_DISPLAY	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	108;"	d
GetBounds	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    VOID GetBounds (OUT Rect *rect) const$/;"	f	class:MetafileHeader
GetDpiX	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    REAL GetDpiX() const { return DpiX; }$/;"	f	class:MetafileHeader
GetDpiY	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    REAL GetDpiY() const { return DpiY; }$/;"	f	class:MetafileHeader
GetEmfHeader	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    const ENHMETAHEADER3 * GetEmfHeader() const$/;"	f	class:MetafileHeader
GetEmfPlusFlags	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    UINT GetEmfPlusFlags() const { return EmfPlusFlags; }$/;"	f	class:MetafileHeader
GetMetafileSize	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    UINT GetMetafileSize() const { return Size; }$/;"	f	class:MetafileHeader
GetType	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    MetafileType GetType() const { return Type; }$/;"	f	class:MetafileHeader
GetVersion	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    UINT GetVersion() const { return Version; }$/;"	f	class:MetafileHeader
GetWmfHeader	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    const METAHEADER * GetWmfHeader() const$/;"	f	class:MetafileHeader
Height	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    INT                 Height;$/;"	m	class:MetafileHeader
Hmf	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    INT16           Hmf;            \/\/ Metafile HANDLE number (always 0)$/;"	m	struct:__anon20
Inch	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    INT16           Inch;           \/\/ Number of metafile units per inch$/;"	m	struct:__anon20
IsDisplay	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    BOOL IsDisplay() const$/;"	f	class:MetafileHeader
IsEmf	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    BOOL IsEmf() const { return (Type == MetafileTypeEmf); }$/;"	f	class:MetafileHeader
IsEmfOrEmfPlus	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    BOOL IsEmfOrEmfPlus() const { return (Type >= MetafileTypeEmf); }$/;"	f	class:MetafileHeader
IsEmfPlus	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    BOOL IsEmfPlus() const { return (Type >= MetafileTypeEmfPlusOnly); }$/;"	f	class:MetafileHeader
IsEmfPlusDual	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    BOOL IsEmfPlusDual() const { return (Type == MetafileTypeEmfPlusDual); }$/;"	f	class:MetafileHeader
IsEmfPlusOnly	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    BOOL IsEmfPlusOnly() const { return (Type == MetafileTypeEmfPlusOnly); }$/;"	f	class:MetafileHeader
IsWmf	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    BOOL IsWmf() const$/;"	f	class:MetafileHeader
IsWmfAldus	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    BOOL IsWmfAldus() const { return (Type == MetafileTypeWmf); }$/;"	f	class:MetafileHeader
Key	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    UINT32          Key;            \/\/ GDIP_WMF_ALDUSKEY$/;"	m	struct:__anon20
Left	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    INT16           Left;$/;"	m	struct:__anon19
LogicalDpiX	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    INT                 LogicalDpiX;        \/\/ Logical Dpi of reference Hdc$/;"	m	class:MetafileHeader
LogicalDpiY	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    INT                 LogicalDpiY;        \/\/ usually valid only for EMF+ files$/;"	m	class:MetafileHeader
MetafileHeader	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^class MetafileHeader$/;"	c
Reserved	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    UINT32          Reserved;       \/\/ Reserved (always 0)$/;"	m	struct:__anon20
Right	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    INT16           Right;$/;"	m	struct:__anon19
Size	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    UINT                Size;               \/\/ Size of the metafile (in bytes)$/;"	m	class:MetafileHeader
Top	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    INT16           Top;$/;"	m	struct:__anon19
Type	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    MetafileType        Type;$/;"	m	class:MetafileHeader
Version	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    UINT                Version;            \/\/ EMF+, EMF, or WMF version$/;"	m	class:MetafileHeader
Width	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    INT                 Width;$/;"	m	class:MetafileHeader
WmfHeader	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^        METAHEADER      WmfHeader;$/;"	m	union:MetafileHeader::__anon21
X	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    INT                 X;                  \/\/ Bounds in device units$/;"	m	class:MetafileHeader
Y	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    INT                 Y;$/;"	m	class:MetafileHeader
_GDIPLUSMETAHEADER_H	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	16;"	d
dSignature	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    DWORD   dSignature;         \/\/ Signature.  Must be ENHMETA_SIGNATURE.$/;"	m	struct:__anon18
iType	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    DWORD   iType;              \/\/ Record type EMR_HEADER$/;"	m	struct:__anon18
nBytes	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    DWORD   nBytes;             \/\/ Size of the metafile in bytes$/;"	m	struct:__anon18
nDescription	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    DWORD   nDescription;       \/\/ Number of chars in the unicode description string$/;"	m	struct:__anon18
nHandles	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    WORD    nHandles;           \/\/ Number of handles in the handle table$/;"	m	struct:__anon18
nPalEntries	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    DWORD   nPalEntries;        \/\/ Number of entries in the metafile palette.$/;"	m	struct:__anon18
nRecords	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    DWORD   nRecords;           \/\/ Number of records in the metafile$/;"	m	struct:__anon18
nSize	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    DWORD   nSize;              \/\/ Record size in bytes.  This may be greater$/;"	m	struct:__anon18
nVersion	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    DWORD   nVersion;           \/\/ Version number$/;"	m	struct:__anon18
offDescription	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    DWORD   offDescription;     \/\/ Offset to the metafile description record.$/;"	m	struct:__anon18
rclBounds	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    RECTL   rclBounds;          \/\/ Inclusive-inclusive bounds in device units$/;"	m	struct:__anon18
rclFrame	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    RECTL   rclFrame;           \/\/ Inclusive-inclusive Picture Frame of metafile in .01 mm units$/;"	m	struct:__anon18
sReserved	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    WORD    sReserved;          \/\/ Reserved.  Must be zero.$/;"	m	struct:__anon18
szlDevice	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    SIZEL   szlDevice;          \/\/ Size of the reference device in pels$/;"	m	struct:__anon18
szlMillimeters	C++\ege-13.04.02-full\src\includes\GdiPlusMetaHeader.h	/^    SIZEL   szlMillimeters;     \/\/ Size of the reference device in millimeters$/;"	m	struct:__anon18
AddArc	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddArc(IN INT x, $/;"	f	class:GraphicsPath
AddArc	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddArc(IN REAL x, $/;"	f	class:GraphicsPath
AddArc	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddArc(IN const Rect& rect, $/;"	f	class:GraphicsPath
AddArc	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddArc(IN const RectF& rect, $/;"	f	class:GraphicsPath
AddBezier	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddBezier(IN INT x1, $/;"	f	class:GraphicsPath
AddBezier	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddBezier(IN REAL x1, $/;"	f	class:GraphicsPath
AddBezier	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddBezier(IN const Point& pt1, $/;"	f	class:GraphicsPath
AddBezier	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddBezier(IN const PointF& pt1, $/;"	f	class:GraphicsPath
AddBeziers	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddBeziers(IN const Point* points,$/;"	f	class:GraphicsPath
AddBeziers	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddBeziers(IN const PointF* points, $/;"	f	class:GraphicsPath
AddClosedCurve	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddClosedCurve(IN const Point* points, $/;"	f	class:GraphicsPath
AddClosedCurve	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddClosedCurve(IN const PointF* points, $/;"	f	class:GraphicsPath
AddCurve	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddCurve(IN const Point* points, $/;"	f	class:GraphicsPath
AddCurve	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddCurve(IN const PointF* points, $/;"	f	class:GraphicsPath
AddEllipse	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddEllipse(IN INT x, $/;"	f	class:GraphicsPath
AddEllipse	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddEllipse(IN REAL x, $/;"	f	class:GraphicsPath
AddEllipse	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddEllipse(IN const Rect& rect)$/;"	f	class:GraphicsPath
AddEllipse	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddEllipse(IN const RectF& rect)$/;"	f	class:GraphicsPath
AddLine	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddLine(IN INT x1, $/;"	f	class:GraphicsPath
AddLine	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddLine(IN REAL x1,$/;"	f	class:GraphicsPath
AddLine	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddLine(IN const Point& pt1, $/;"	f	class:GraphicsPath
AddLine	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddLine(IN const PointF& pt1, $/;"	f	class:GraphicsPath
AddLines	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddLines(IN const Point* points, $/;"	f	class:GraphicsPath
AddLines	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddLines(IN const PointF* points, $/;"	f	class:GraphicsPath
AddPath	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddPath(IN const GraphicsPath* addingPath, $/;"	f	class:GraphicsPath
AddPie	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddPie(IN INT x, $/;"	f	class:GraphicsPath
AddPie	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddPie(IN REAL x, $/;"	f	class:GraphicsPath
AddPie	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddPie(IN const Rect& rect, $/;"	f	class:GraphicsPath
AddPie	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddPie(IN const RectF& rect, $/;"	f	class:GraphicsPath
AddPolygon	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddPolygon(IN const Point* points, $/;"	f	class:GraphicsPath
AddPolygon	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddPolygon(IN const PointF* points, $/;"	f	class:GraphicsPath
AddRectangle	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddRectangle(IN const Rect& rect)$/;"	f	class:GraphicsPath
AddRectangle	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddRectangle(IN const RectF& rect)$/;"	f	class:GraphicsPath
AddRectangles	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddRectangles(IN const Rect* rects, INT count)$/;"	f	class:GraphicsPath
AddRectangles	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddRectangles(IN const RectF* rects, $/;"	f	class:GraphicsPath
AddString	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status AddString($/;"	f	class:GraphicsPath
ClearMarkers	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status ClearMarkers()$/;"	f	class:GraphicsPath
Clone	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    GraphicsPath* Clone() const$/;"	f	class:GraphicsPath
CloseAllFigures	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status CloseAllFigures()$/;"	f	class:GraphicsPath
CloseFigure	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status CloseFigure()$/;"	f	class:GraphicsPath
CopyData	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    INT CopyData(OUT PointF* points, $/;"	f	class:GraphicsPathIterator
Enumerate	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    INT Enumerate(OUT PointF *points,$/;"	f	class:GraphicsPathIterator
Flatten	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status Flatten(IN const Matrix* matrix = NULL, $/;"	f	class:GraphicsPath
GetBlend	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetBlend(OUT REAL* blendFactors,$/;"	f	class:PathGradientBrush
GetBlendCount	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    INT GetBlendCount() const$/;"	f	class:PathGradientBrush
GetCenterColor	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetCenterColor(OUT Color* color) const$/;"	f	class:PathGradientBrush
GetCenterPoint	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetCenterPoint(OUT Point* point) const$/;"	f	class:PathGradientBrush
GetCenterPoint	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetCenterPoint(OUT PointF* point) const$/;"	f	class:PathGradientBrush
GetCount	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    INT GetCount() const$/;"	f	class:GraphicsPathIterator
GetFillMode	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    FillMode GetFillMode() const$/;"	f	class:GraphicsPath
GetFocusScales	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetFocusScales(OUT REAL* xScale, $/;"	f	class:PathGradientBrush
GetGammaCorrection	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    BOOL GetGammaCorrection() const$/;"	f	class:PathGradientBrush
GetGraphicsPath	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetGraphicsPath(OUT GraphicsPath* path) const$/;"	f	class:PathGradientBrush
GetInterpolationColorCount	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    INT GetInterpolationColorCount() const$/;"	f	class:PathGradientBrush
GetInterpolationColors	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetInterpolationColors(OUT Color* presetColors,$/;"	f	class:PathGradientBrush
GetLastPoint	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetLastPoint(OUT PointF* lastPoint) const$/;"	f	class:GraphicsPath
GetLastStatus	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetLastStatus() const$/;"	f	class:GraphicsPath
GetLastStatus	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetLastStatus() const$/;"	f	class:GraphicsPathIterator
GetPathData	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetPathData(OUT PathData* pathData) const$/;"	f	class:GraphicsPath
GetPathPoints	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetPathPoints(OUT Point* points, $/;"	f	class:GraphicsPath
GetPathPoints	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetPathPoints(OUT PointF* points, $/;"	f	class:GraphicsPath
GetPathTypes	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetPathTypes(OUT BYTE* types, $/;"	f	class:GraphicsPath
GetPointCount	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    INT GetPointCount() const$/;"	f	class:GraphicsPath
GetPointCount	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    INT GetPointCount() const$/;"	f	class:PathGradientBrush
GetRectangle	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetRectangle(OUT Rect* rect) const$/;"	f	class:PathGradientBrush
GetRectangle	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetRectangle(OUT RectF* rect) const$/;"	f	class:PathGradientBrush
GetSubpathCount	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    INT GetSubpathCount() const$/;"	f	class:GraphicsPathIterator
GetSurroundColorCount	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    INT GetSurroundColorCount() const$/;"	f	class:PathGradientBrush
GetSurroundColors	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetSurroundColors(OUT Color* colors, $/;"	f	class:PathGradientBrush
GetTransform	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status GetTransform(OUT Matrix *matrix) const$/;"	f	class:PathGradientBrush
GetWrapMode	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    WrapMode GetWrapMode() const$/;"	f	class:PathGradientBrush
GraphicsPath	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    GraphicsPath(GpPath* nativePath)$/;"	f	class:GraphicsPath
GraphicsPath	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    GraphicsPath(IN FillMode fillMode = FillModeAlternate)$/;"	f	class:GraphicsPath
GraphicsPath	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    GraphicsPath(IN const Point* points,$/;"	f	class:GraphicsPath
GraphicsPath	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    GraphicsPath(IN const PointF* points,$/;"	f	class:GraphicsPath
GraphicsPath	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    GraphicsPath(const GraphicsPath& path)$/;"	f	class:GraphicsPath
GraphicsPath	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^class GraphicsPath : public GdiplusBase$/;"	c
GraphicsPathIterator	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    GraphicsPathIterator(IN const GraphicsPath* path)$/;"	f	class:GraphicsPathIterator
GraphicsPathIterator	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^class GraphicsPathIterator : public GdiplusBase$/;"	c
HasCurve	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    BOOL HasCurve() const$/;"	f	class:GraphicsPathIterator
IsOutlineVisible	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    BOOL IsOutlineVisible(IN const Point& point,$/;"	f	class:GraphicsPath
IsOutlineVisible	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    BOOL IsOutlineVisible(IN const PointF& point,$/;"	f	class:GraphicsPath
IsVisible	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    BOOL IsVisible(IN const Point& point,$/;"	f	class:GraphicsPath
IsVisible	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    BOOL IsVisible(IN const PointF& point, $/;"	f	class:GraphicsPath
MultiplyTransform	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status MultiplyTransform(IN const Matrix* matrix,$/;"	f	class:PathGradientBrush
NextMarker	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    INT NextMarker(IN const GraphicsPath* path)$/;"	f	class:GraphicsPathIterator
NextMarker	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    INT NextMarker(OUT INT* startIndex, $/;"	f	class:GraphicsPathIterator
NextPathType	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    INT NextPathType(OUT BYTE* pathType, $/;"	f	class:GraphicsPathIterator
NextSubpath	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    INT NextSubpath(IN const GraphicsPath* path, $/;"	f	class:GraphicsPathIterator
NextSubpath	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    INT NextSubpath(OUT INT* startIndex,$/;"	f	class:GraphicsPathIterator
Outline	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status Outline($/;"	f	class:GraphicsPath
PathGradientBrush	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    PathGradientBrush($/;"	f	class:PathGradientBrush
PathGradientBrush	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    PathGradientBrush()$/;"	f	class:PathGradientBrush
PathGradientBrush	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^class PathGradientBrush : public Brush$/;"	c
Reset	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status Reset()$/;"	f	class:GraphicsPath
ResetTransform	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status ResetTransform()$/;"	f	class:PathGradientBrush
Reverse	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status Reverse()$/;"	f	class:GraphicsPath
Rewind	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    VOID Rewind()$/;"	f	class:GraphicsPathIterator
RotateTransform	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status RotateTransform(IN REAL angle, $/;"	f	class:PathGradientBrush
ScaleTransform	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status ScaleTransform(IN REAL sx, $/;"	f	class:PathGradientBrush
SetBlend	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetBlend(IN const REAL* blendFactors, $/;"	f	class:PathGradientBrush
SetBlendBellShape	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetBlendBellShape(IN REAL focus, $/;"	f	class:PathGradientBrush
SetBlendTriangularShape	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetBlendTriangularShape($/;"	f	class:PathGradientBrush
SetCenterColor	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetCenterColor(IN const Color& color)$/;"	f	class:PathGradientBrush
SetCenterPoint	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetCenterPoint(IN const Point& point)$/;"	f	class:PathGradientBrush
SetCenterPoint	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetCenterPoint(IN const PointF& point)$/;"	f	class:PathGradientBrush
SetFillMode	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetFillMode(IN FillMode fillmode)$/;"	f	class:GraphicsPath
SetFocusScales	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetFocusScales(IN REAL xScale,$/;"	f	class:PathGradientBrush
SetGammaCorrection	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetGammaCorrection(IN BOOL useGammaCorrection)$/;"	f	class:PathGradientBrush
SetGraphicsPath	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetGraphicsPath(IN const GraphicsPath* path)$/;"	f	class:PathGradientBrush
SetInterpolationColors	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetInterpolationColors(IN const Color* presetColors,$/;"	f	class:PathGradientBrush
SetMarker	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetMarker()$/;"	f	class:GraphicsPath
SetNativeIterator	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    VOID SetNativeIterator(GpPathIterator *nativeIterator)$/;"	f	class:GraphicsPathIterator
SetNativePath	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    VOID SetNativePath(GpPath *nativePath)$/;"	f	class:GraphicsPath
SetStatus	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetStatus(Status status) const$/;"	f	class:GraphicsPath
SetStatus	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetStatus(Status status) const$/;"	f	class:GraphicsPathIterator
SetSurroundColors	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetSurroundColors(IN const Color* colors, $/;"	f	class:PathGradientBrush
SetTransform	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetTransform(IN const Matrix* matrix)$/;"	f	class:PathGradientBrush
SetWrapMode	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status SetWrapMode(IN WrapMode wrapMode)$/;"	f	class:PathGradientBrush
StartFigure	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status StartFigure()$/;"	f	class:GraphicsPath
Transform	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status Transform(IN const Matrix* matrix)$/;"	f	class:GraphicsPath
TranslateTransform	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status TranslateTransform(IN REAL dx, $/;"	f	class:PathGradientBrush
Warp	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status Warp(IN const PointF* destPoints, $/;"	f	class:GraphicsPath
Widen	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status Widen($/;"	f	class:GraphicsPath
Widen	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    Status Widen(IN const Pen* pen, $/;"	f	class:GraphicsPath
_GDIPLUSPATH_H	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	16;"	d
lastResult	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    mutable Status lastResult;$/;"	m	class:GraphicsPath
lastResult	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    mutable Status lastResult;$/;"	m	class:GraphicsPathIterator
nativeIterator	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    GpPathIterator* nativeIterator;$/;"	m	class:GraphicsPathIterator
nativePath	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    GpPath* nativePath;$/;"	m	class:GraphicsPath
operator =	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    GraphicsPath& operator=(const GraphicsPath& path)$/;"	f	class:GraphicsPath
~GraphicsPath	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    ~GraphicsPath()$/;"	f	class:GraphicsPath
~GraphicsPathIterator	C++\ege-13.04.02-full\src\includes\GdiPlusPath.h	/^    ~GraphicsPathIterator()$/;"	f	class:GraphicsPathIterator
Clone	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Pen* Clone() const$/;"	f	class:Pen
GetAlignment	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    PenAlignment GetAlignment() const$/;"	f	class:Pen
GetBrush	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Brush* GetBrush() const$/;"	f	class:Pen
GetColor	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status GetColor(OUT Color* color) const$/;"	f	class:Pen
GetCompoundArray	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status GetCompoundArray(OUT REAL* compoundArray, $/;"	f	class:Pen
GetCompoundArrayCount	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    INT GetCompoundArrayCount() const$/;"	f	class:Pen
GetCustomEndCap	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status GetCustomEndCap(OUT CustomLineCap* customCap) const$/;"	f	class:Pen
GetCustomStartCap	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status GetCustomStartCap(OUT CustomLineCap* customCap) const$/;"	f	class:Pen
GetDashCap	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    DashCap GetDashCap() const$/;"	f	class:Pen
GetDashCap	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    LineCap GetDashCap() const$/;"	f	class:Pen
GetDashOffset	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    REAL GetDashOffset() const$/;"	f	class:Pen
GetDashPattern	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status GetDashPattern(OUT REAL* dashArray, $/;"	f	class:Pen
GetDashPatternCount	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    INT GetDashPatternCount() const$/;"	f	class:Pen
GetDashStyle	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    DashStyle GetDashStyle() const$/;"	f	class:Pen
GetEndCap	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    LineCap GetEndCap() const$/;"	f	class:Pen
GetLastStatus	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status GetLastStatus() const$/;"	f	class:Pen
GetLineJoin	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    LineJoin GetLineJoin() const$/;"	f	class:Pen
GetMiterLimit	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    REAL GetMiterLimit() const$/;"	f	class:Pen
GetPenType	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    PenType GetPenType() const$/;"	f	class:Pen
GetStartCap	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    LineCap GetStartCap() const$/;"	f	class:Pen
GetTransform	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status GetTransform(OUT Matrix* matrix) const$/;"	f	class:Pen
GetWidth	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    REAL GetWidth() const$/;"	f	class:Pen
MultiplyTransform	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status MultiplyTransform(IN const Matrix* matrix,$/;"	f	class:Pen
Pen	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Pen(GpPen* nativePen, Status status)$/;"	f	class:Pen
Pen	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Pen(IN const Brush* brush, $/;"	f	class:Pen
Pen	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Pen(IN const Color& color, $/;"	f	class:Pen
Pen	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Pen(const Pen& pen)$/;"	f	class:Pen
Pen	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^class Pen : public GdiplusBase$/;"	c
ResetTransform	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status ResetTransform()$/;"	f	class:Pen
RotateTransform	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status RotateTransform(IN REAL angle, $/;"	f	class:Pen
ScaleTransform	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status ScaleTransform(IN REAL sx, $/;"	f	class:Pen
SetAlignment	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetAlignment(IN PenAlignment penAlignment)$/;"	f	class:Pen
SetBrush	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetBrush(IN const Brush* brush)$/;"	f	class:Pen
SetColor	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetColor(IN const Color& color)$/;"	f	class:Pen
SetCompoundArray	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetCompoundArray(IN const REAL* compoundArray,$/;"	f	class:Pen
SetCustomEndCap	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetCustomEndCap(IN const CustomLineCap* customCap)$/;"	f	class:Pen
SetCustomStartCap	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetCustomStartCap(IN const CustomLineCap* customCap)$/;"	f	class:Pen
SetDashCap	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetDashCap(IN DashCap dashCap)$/;"	f	class:Pen
SetDashCap	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetDashCap(IN LineCap dashCap)$/;"	f	class:Pen
SetDashOffset	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetDashOffset(IN REAL dashOffset)$/;"	f	class:Pen
SetDashPattern	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetDashPattern(IN const REAL* dashArray, IN INT count)$/;"	f	class:Pen
SetDashStyle	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetDashStyle(IN DashStyle dashStyle)$/;"	f	class:Pen
SetEndCap	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetEndCap(IN LineCap endCap)$/;"	f	class:Pen
SetLineCap	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetLineCap(IN LineCap startCap, $/;"	f	class:Pen
SetLineJoin	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetLineJoin(IN LineJoin lineJoin)$/;"	f	class:Pen
SetMiterLimit	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetMiterLimit(IN REAL miterLimit)$/;"	f	class:Pen
SetNativePen	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    VOID SetNativePen(GpPen* nativePen)$/;"	f	class:Pen
SetStartCap	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetStartCap(IN LineCap startCap)$/;"	f	class:Pen
SetStatus	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetStatus(Status status) const$/;"	f	class:Pen
SetTransform	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetTransform(IN const Matrix* matrix)$/;"	f	class:Pen
SetWidth	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status SetWidth(IN REAL width)$/;"	f	class:Pen
TranslateTransform	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Status TranslateTransform(IN REAL dx, $/;"	f	class:Pen
_GDIPLUSPEN_H	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	15;"	d
lastResult	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    mutable Status lastResult;$/;"	m	class:Pen
nativePen	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    GpPen* nativePen;$/;"	m	class:Pen
operator =	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    Pen& operator=(const Pen& pen)$/;"	f	class:Pen
~Pen	C++\ege-13.04.02-full\src\includes\GdiPlusPen.h	/^    ~Pen()$/;"	f	class:Pen
ALPHA_MASK	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	29;"	d
ALPHA_SHIFT	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	25;"	d
ARGB	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^typedef DWORD ARGB;$/;"	t
ARGB64	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^typedef DWORDLONG ARGB64;$/;"	t
BLUE_SHIFT	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	28;"	d
ColorPalette	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^struct ColorPalette$/;"	s
Count	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    UINT Count;             \/\/ number of color entries$/;"	m	struct:ColorPalette
Entries	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    ARGB Entries[1];        \/\/ palette color entries$/;"	m	struct:ColorPalette
Flags	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    UINT Flags;             \/\/ palette flags$/;"	m	struct:ColorPalette
GREEN_SHIFT	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	27;"	d
GetPixelFormatSize	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^GetPixelFormatSize($/;"	f
IsAlphaPixelFormat	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^IsAlphaPixelFormat($/;"	f
IsCanonicalPixelFormat	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^IsCanonicalPixelFormat($/;"	f
IsExtendedPixelFormat	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^IsExtendedPixelFormat($/;"	f
IsIndexedPixelFormat	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^IsIndexedPixelFormat($/;"	f
PaletteFlags	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^enum PaletteFlags$/;"	g
PaletteFlagsGrayScale	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PaletteFlagsGrayScale   = 0x0002,$/;"	e	enum:PaletteFlags
PaletteFlagsHalftone	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PaletteFlagsHalftone    = 0x0004$/;"	e	enum:PaletteFlags
PaletteFlagsHasAlpha	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PaletteFlagsHasAlpha    = 0x0001,$/;"	e	enum:PaletteFlags
PixelFormat	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^enum PixelFormat$/;"	g
PixelFormat	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^typedef INT PixelFormat;$/;"	t
PixelFormat16bppARGB1555	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormat16bppARGB1555   =  7 | (16 << 8) | PixelFormatAlpha$/;"	e	enum:PixelFormat
PixelFormat16bppARGB1555	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	103;"	d
PixelFormat16bppGrayScale	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormat16bppGrayScale  =  4 | (16 << 8) | PixelFormatExtended,$/;"	e	enum:PixelFormat
PixelFormat16bppGrayScale	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	100;"	d
PixelFormat16bppRGB555	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormat16bppRGB555     =  5 | (16 << 8) | PixelFormatGDI,$/;"	e	enum:PixelFormat
PixelFormat16bppRGB555	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	101;"	d
PixelFormat16bppRGB565	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormat16bppRGB565     =  6 | (16 << 8) | PixelFormatGDI,$/;"	e	enum:PixelFormat
PixelFormat16bppRGB565	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	102;"	d
PixelFormat1bppIndexed	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormat1bppIndexed     =  1 | ( 1 << 8) | PixelFormatIndexed$/;"	e	enum:PixelFormat
PixelFormat1bppIndexed	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	97;"	d
PixelFormat24bppBGR	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormat24bppBGR        = 15 | (24 << 8) | PixelFormatGDI, $/;"	e	enum:PixelFormat
PixelFormat24bppRGB	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormat24bppRGB        =  8 | (24 << 8) | PixelFormatGDI,$/;"	e	enum:PixelFormat
PixelFormat24bppRGB	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	104;"	d
PixelFormat32bppARGB	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormat32bppARGB       = 10 | (32 << 8) | PixelFormatAlpha$/;"	e	enum:PixelFormat
PixelFormat32bppARGB	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	106;"	d
PixelFormat32bppPARGB	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormat32bppPARGB      = 11 | (32 << 8) | PixelFormatAlpha$/;"	e	enum:PixelFormat
PixelFormat32bppPARGB	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	107;"	d
PixelFormat32bppRGB	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormat32bppRGB        =  9 | (32 << 8) | PixelFormatGDI,$/;"	e	enum:PixelFormat
PixelFormat32bppRGB	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	105;"	d
PixelFormat48bppRGB	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormat48bppRGB        = 12 | (48 << 8) | PixelFormatExtended,$/;"	e	enum:PixelFormat
PixelFormat48bppRGB	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	108;"	d
PixelFormat4bppIndexed	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormat4bppIndexed     =  2 | ( 4 << 8) | PixelFormatIndexed$/;"	e	enum:PixelFormat
PixelFormat4bppIndexed	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	98;"	d
PixelFormat64bppARGB	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormat64bppARGB       = 13 | (64 << 8) | PixelFormatAlpha$/;"	e	enum:PixelFormat
PixelFormat64bppARGB	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	109;"	d
PixelFormat64bppPARGB	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormat64bppPARGB      = 14 | (64 << 8) | PixelFormatAlpha$/;"	e	enum:PixelFormat
PixelFormat64bppPARGB	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	110;"	d
PixelFormat8bppIndexed	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormat8bppIndexed     =  3 | ( 8 << 8) | PixelFormatIndexed$/;"	e	enum:PixelFormat
PixelFormat8bppIndexed	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	99;"	d
PixelFormatAlpha	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormatAlpha        = 0x00040000, \/\/ Has an alpha component$/;"	e	enum:PixelFormat
PixelFormatAlpha	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	89;"	d
PixelFormatCanonical	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormatCanonical    = 0x00200000, \/\/ ?$/;"	e	enum:PixelFormat
PixelFormatCanonical	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	92;"	d
PixelFormatDontCare	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormatDontCare       =  0,$/;"	e	enum:PixelFormat
PixelFormatDontCare	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	95;"	d
PixelFormatExtended	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormatExtended     = 0x00100000, \/\/ Uses extended color (16 bits per channel)$/;"	e	enum:PixelFormat
PixelFormatExtended	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	91;"	d
PixelFormatGDI	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormatGDI          = 0x00020000, \/\/ Is a GDI-supported format$/;"	e	enum:PixelFormat
PixelFormatGDI	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	88;"	d
PixelFormatIndexed	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormatIndexed      = 0x00010000, \/\/ Indexes into a palette$/;"	e	enum:PixelFormat
PixelFormatIndexed	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	87;"	d
PixelFormatMax	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormatMax             = 16$/;"	e	enum:PixelFormat
PixelFormatMax	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	111;"	d
PixelFormatPAlpha	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormatPAlpha       = 0x00080000, \/\/ Uses pre-multiplied alpha$/;"	e	enum:PixelFormat
PixelFormatPAlpha	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	90;"	d
PixelFormatUndefined	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	/^    PixelFormatUndefined       =  0,$/;"	e	enum:PixelFormat
PixelFormatUndefined	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	94;"	d
RED_SHIFT	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	26;"	d
_GDIPLUSPIXELFORMATS_H	C++\ege-13.04.02-full\src\includes\GdiPlusPixelFormats.h	16;"	d
Clone	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Clone() const$/;"	f	class:Region
Complement	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Complement(IN const GraphicsPath* path)$/;"	f	class:Region
Complement	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Complement(IN const Rect& rect)$/;"	f	class:Region
Complement	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Complement(IN const RectF& rect)$/;"	f	class:Region
Complement	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Complement(IN const Region* region)$/;"	f	class:Region
Equals	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Equals(IN const Region* region, $/;"	f	class:Region
Exclude	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Exclude(IN const GraphicsPath* path)$/;"	f	class:Region
Exclude	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Exclude(IN const Rect& rect)$/;"	f	class:Region
Exclude	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Exclude(IN const RectF& rect)$/;"	f	class:Region
Exclude	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Exclude(IN const Region* region)$/;"	f	class:Region
FromHRGN	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region* Region::FromHRGN(IN HRGN hRgn)$/;"	f	class:Region
GetBounds	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::GetBounds(OUT Rect* rect,$/;"	f	class:Region
GetBounds	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::GetBounds(OUT RectF* rect,$/;"	f	class:Region
GetData	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::GetData(OUT BYTE* buffer, $/;"	f	class:Region
GetDataSize	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::GetDataSize() const$/;"	f	class:Region
GetHRGN	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::GetHRGN(IN const Graphics* g) const$/;"	f	class:Region
GetLastStatus	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^inline Status Region::GetLastStatus() const$/;"	f	class:Region
GetRegionScans	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::GetRegionScans($/;"	f	class:Region
GetRegionScansCount	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::GetRegionScansCount(IN const Matrix* matrix) const$/;"	f	class:Region
Intersect	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Intersect(IN const GraphicsPath* path)$/;"	f	class:Region
Intersect	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Intersect(IN const Rect& rect)$/;"	f	class:Region
Intersect	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Intersect(IN const RectF& rect)$/;"	f	class:Region
Intersect	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Intersect(IN const Region* region)$/;"	f	class:Region
IsEmpty	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::IsEmpty(IN const Graphics *g) const$/;"	f	class:Region
IsInfinite	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::IsInfinite(IN const Graphics *g) const$/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::IsVisible(IN const Point& point, $/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::IsVisible(IN const PointF& point, $/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::IsVisible(IN const Rect& rect, $/;"	f	class:Region
IsVisible	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::IsVisible(IN const RectF& rect, $/;"	f	class:Region
MakeEmpty	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::MakeEmpty()$/;"	f	class:Region
MakeInfinite	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::MakeInfinite()$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Region()$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Region(IN HRGN hRgn)$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Region(IN const BYTE* regionData, IN INT size)$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Region(IN const GraphicsPath* path)$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Region(IN const Rect& rect)$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Region(IN const RectF& rect)$/;"	f	class:Region
Region	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^inline Region::Region(GpRegion* nativeRegion)$/;"	f	class:Region
SetNativeRegion	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^inline VOID Region::SetNativeRegion(GpRegion* nativeRegion)$/;"	f	class:Region
Transform	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Transform(IN const Matrix* matrix)$/;"	f	class:Region
Translate	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Translate(IN INT dx, $/;"	f	class:Region
Translate	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Translate(IN REAL dx, $/;"	f	class:Region
Union	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Union(IN const GraphicsPath* path)$/;"	f	class:Region
Union	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Union(IN const Rect& rect)$/;"	f	class:Region
Union	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Union(IN const RectF& rect)$/;"	f	class:Region
Union	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Union(IN const Region* region)$/;"	f	class:Region
Xor	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Xor(IN const GraphicsPath* path)$/;"	f	class:Region
Xor	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Xor(IN const Rect& rect)$/;"	f	class:Region
Xor	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Xor(IN const RectF& rect)$/;"	f	class:Region
Xor	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::Xor(IN const Region* region)$/;"	f	class:Region
_GDIPLUSREGION_H	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	16;"	d
~Region	C++\ege-13.04.02-full\src\includes\GdiPlusRegion.h	/^Region::~Region()$/;"	f	class:Region
Clone	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    StringFormat *Clone() const$/;"	f	class:StringFormat
GenericDefault	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^inline const StringFormat *StringFormat::GenericDefault()$/;"	f	class:StringFormat
GenericDefaultStringFormat	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^static StringFormat *GenericDefaultStringFormat     = NULL;$/;"	v
GenericDefaultStringFormatBuffer	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^static BYTE GenericDefaultStringFormatBuffer[sizeof(StringFormat)] = {0};$/;"	v
GenericTypographic	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^inline const StringFormat *StringFormat::GenericTypographic()$/;"	f	class:StringFormat
GenericTypographicStringFormat	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^static StringFormat *GenericTypographicStringFormat = NULL;$/;"	v
GenericTypographicStringFormatBuffer	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^static BYTE GenericTypographicStringFormatBuffer[sizeof(StringFormat)] = {0};$/;"	v
GetAlignment	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    StringAlignment GetAlignment() const$/;"	f	class:StringFormat
GetDigitSubstitutionLanguage	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    LANGID GetDigitSubstitutionLanguage($/;"	f	class:StringFormat
GetDigitSubstitutionMethod	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    StringDigitSubstitute GetDigitSubstitutionMethod($/;"	f	class:StringFormat
GetFormatFlags	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    INT GetFormatFlags() const$/;"	f	class:StringFormat
GetHotkeyPrefix	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    HotkeyPrefix GetHotkeyPrefix() const$/;"	f	class:StringFormat
GetLastStatus	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    Status GetLastStatus() const$/;"	f	class:StringFormat
GetLineAlignment	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    StringAlignment GetLineAlignment() const$/;"	f	class:StringFormat
GetMeasurableCharacterRangeCount	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    INT GetMeasurableCharacterRangeCount()$/;"	f	class:StringFormat
GetTabStopCount	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    INT GetTabStopCount() const$/;"	f	class:StringFormat
GetTabStops	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    Status GetTabStops($/;"	f	class:StringFormat
GetTrimming	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    StringTrimming StringFormat::GetTrimming() const$/;"	f	class:StringFormat::StringFormat
SetAlignment	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    Status SetAlignment(IN StringAlignment align)$/;"	f	class:StringFormat
SetDigitSubstitution	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    Status SetDigitSubstitution($/;"	f	class:StringFormat
SetFormatFlags	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    Status SetFormatFlags(IN INT flags)$/;"	f	class:StringFormat
SetHotkeyPrefix	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    Status SetHotkeyPrefix(IN HotkeyPrefix hotkeyPrefix)$/;"	f	class:StringFormat
SetLineAlignment	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    Status SetLineAlignment(IN StringAlignment align)$/;"	f	class:StringFormat
SetLineSpacing	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    Status SetLineSpacing($/;"	f	class:StringFormat
SetMeasurableCharacterRanges	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    Status SetMeasurableCharacterRanges($/;"	f	class:StringFormat
SetStatus	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    Status SetStatus(GpStatus newStatus) const$/;"	f	class:StringFormat
SetTabStops	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    Status SetTabStops($/;"	f	class:StringFormat
SetTrimming	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    Status SetTrimming(IN StringTrimming trimming)$/;"	f	class:StringFormat
StringFormat	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    StringFormat($/;"	f	class:StringFormat
StringFormat	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    StringFormat(GpStringFormat * clonedStringFormat, Status status)$/;"	f	class:StringFormat
StringFormat	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    StringFormat(const StringFormat &source)$/;"	f	class:StringFormat
StringFormat	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^class StringFormat : public GdiplusBase$/;"	c
_GDIPLUSSTRINGFORMAT_H	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	16;"	d
lastError	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    mutable Status  lastError;$/;"	m	class:StringFormat
nativeFormat	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    GpStringFormat *nativeFormat;$/;"	m	class:StringFormat
operator =	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    StringFormat& operator=(const StringFormat &source)$/;"	f	class:StringFormat
~StringFormat	C++\ege-13.04.02-full\src\includes\GdiPlusStringFormat.h	/^    ~StringFormat()$/;"	f	class:StringFormat
Aborted	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    Aborted = 9,$/;"	e	enum:Status
AccessDenied	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    AccessDenied = 12,$/;"	e	enum:Status
CharacterRange	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    CharacterRange($/;"	f	class:CharacterRange
CharacterRange	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    CharacterRange() : First(0), Length(0)$/;"	f	class:CharacterRange
CharacterRange	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^class CharacterRange$/;"	c
Clone	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    Rect* Clone() const$/;"	f	class:Rect
Clone	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    RectF* Clone() const$/;"	f	class:RectF
Contains	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL Contains(IN INT x,$/;"	f	class:Rect
Contains	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL Contains(IN REAL x,$/;"	f	class:RectF
Contains	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL Contains(IN Rect& rect) const$/;"	f	class:Rect
Contains	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL Contains(IN const Point& pt) const$/;"	f	class:Rect
Contains	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL Contains(IN const PointF& pt) const$/;"	f	class:RectF
Contains	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL Contains(IN const RectF& rect) const$/;"	f	class:RectF
Count	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    INT Count;$/;"	m	class:PathData
DEBUGEVENTFUNCTION	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^typedef VOID (__cdecl *DEBUGEVENTFUNCTION)(INT level, CHAR *message);$/;"	t
DrawImageAbort	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^typedef ImageAbort DrawImageAbort;$/;"	t
Empty	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL Empty() const$/;"	f	class:Size
Empty	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL Empty() const$/;"	f	class:SizeF
EnumerateMetafileProc	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^typedef BOOL (CALLBACK * EnumerateMetafileProc)(EmfPlusRecordType,UINT,UINT,const BYTE*,VOID*);$/;"	t
Equals	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL Equals(IN const Rect & rect) const$/;"	f	class:Rect
Equals	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL Equals(IN const RectF & rect) const$/;"	f	class:RectF
Equals	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL Equals(IN const Size& sz) const$/;"	f	class:Size
Equals	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL Equals(IN const SizeF& sz) const$/;"	f	class:SizeF
Equals	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^   BOOL Equals(IN const Point& point)$/;"	f	class:Point
Equals	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^   BOOL Equals(IN const PointF& point)$/;"	f	class:PointF
FileNotFound	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    FileNotFound = 10,$/;"	e	enum:Status
First	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    INT First;$/;"	m	class:CharacterRange
FontFamilyNotFound	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    FontFamilyNotFound = 14,$/;"	e	enum:Status
FontStyleNotFound	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    FontStyleNotFound = 15,$/;"	e	enum:Status
GdiplusNotInitialized	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    GdiplusNotInitialized$/;"	e	enum:Status
GenericError	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    GenericError = 1,$/;"	e	enum:Status
GetBottom	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    INT GetBottom() const$/;"	f	class:Rect
GetBottom	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    REAL GetBottom() const$/;"	f	class:RectF
GetBounds	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    VOID GetBounds(OUT Rect* rect) const$/;"	f	class:Rect
GetBounds	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    VOID GetBounds(OUT RectF* rect) const$/;"	f	class:RectF
GetLeft	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    INT GetLeft() const$/;"	f	class:Rect
GetLeft	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    REAL GetLeft() const$/;"	f	class:RectF
GetLocation	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    VOID GetLocation(OUT Point* point) const$/;"	f	class:Rect
GetLocation	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    VOID GetLocation(OUT PointF* point) const$/;"	f	class:RectF
GetRight	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    INT GetRight() const$/;"	f	class:Rect
GetRight	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    REAL GetRight() const$/;"	f	class:RectF
GetSize	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    VOID GetSize(OUT Size* size) const$/;"	f	class:Rect
GetSize	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    VOID GetSize(OUT SizeF* size) const$/;"	f	class:RectF
GetThumbnailImageAbort	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^typedef ImageAbort GetThumbnailImageAbort;$/;"	t
GetTop	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    INT GetTop() const$/;"	f	class:Rect
GetTop	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    REAL GetTop() const$/;"	f	class:RectF
Height	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    INT Height;$/;"	m	class:Rect
Height	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    INT Height;$/;"	m	class:Size
Height	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    REAL Height;$/;"	m	class:RectF
Height	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    REAL Height;$/;"	m	class:SizeF
ImageAbort	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^typedef BOOL (CALLBACK * ImageAbort)(VOID *);$/;"	t
Inflate	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    VOID Inflate(IN INT dx,$/;"	f	class:Rect
Inflate	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    VOID Inflate(IN REAL dx,$/;"	f	class:RectF
Inflate	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    VOID Inflate(IN const Point& point)$/;"	f	class:Rect
Inflate	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    VOID Inflate(IN const PointF& point)$/;"	f	class:RectF
InsufficientBuffer	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    InsufficientBuffer = 5,$/;"	e	enum:Status
Intersect	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL Intersect(IN const Rect& rect)$/;"	f	class:Rect
Intersect	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL Intersect(IN const RectF& rect)$/;"	f	class:RectF
Intersect	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    static BOOL Intersect(OUT Rect& c,$/;"	f	class:Rect
Intersect	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    static BOOL Intersect(OUT RectF& c,$/;"	f	class:RectF
IntersectsWith	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL IntersectsWith(IN const Rect& rect) const$/;"	f	class:Rect
IntersectsWith	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL IntersectsWith(IN const RectF& rect) const$/;"	f	class:RectF
InvalidParameter	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    InvalidParameter = 2,$/;"	e	enum:Status
IsEmptyArea	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL IsEmptyArea() const$/;"	f	class:Rect
IsEmptyArea	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BOOL IsEmptyArea() const$/;"	f	class:RectF
Length	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    INT Length;$/;"	m	class:CharacterRange
NotImplemented	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    NotImplemented = 6,$/;"	e	enum:Status
NotTrueTypeFont	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    NotTrueTypeFont = 16,$/;"	e	enum:Status
ObjectBusy	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    ObjectBusy = 4,$/;"	e	enum:Status
Offset	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    VOID Offset(IN INT dx,$/;"	f	class:Rect
Offset	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    VOID Offset(IN REAL dx,$/;"	f	class:RectF
Offset	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    VOID Offset(IN const Point& point)$/;"	f	class:Rect
Offset	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    VOID Offset(IN const PointF& point)$/;"	f	class:RectF
Ok	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    Ok = 0,$/;"	e	enum:Status
OutOfMemory	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    OutOfMemory = 3,$/;"	e	enum:Status
PathData	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    PathData()$/;"	f	class:PathData
PathData	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^class PathData$/;"	c
Point	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^   Point()$/;"	f	class:Point
Point	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^   Point(IN INT x,$/;"	f	class:Point
Point	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^   Point(IN const Point &point)$/;"	f	class:Point
Point	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^   Point(IN const Size &size)$/;"	f	class:Point
Point	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^class Point$/;"	c
PointF	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^   PointF()$/;"	f	class:PointF
PointF	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^   PointF(IN REAL x,$/;"	f	class:PointF
PointF	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^   PointF(IN const PointF &point)$/;"	f	class:PointF
PointF	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^   PointF(IN const SizeF &size)$/;"	f	class:PointF
PointF	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^class PointF$/;"	c
Points	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    PointF* Points;$/;"	m	class:PathData
REAL	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^typedef float REAL;$/;"	t
REAL_EPSILON	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	82;"	d
REAL_MAX	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	79;"	d
REAL_MIN	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	80;"	d
REAL_TOLERANCE	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	81;"	d
Rect	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    Rect()$/;"	f	class:Rect
Rect	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    Rect(IN INT x,$/;"	f	class:Rect
Rect	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    Rect(IN const Point& location,$/;"	f	class:Rect
Rect	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^class Rect$/;"	c
RectF	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    RectF()$/;"	f	class:RectF
RectF	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    RectF(IN REAL x,$/;"	f	class:RectF
RectF	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    RectF(IN const PointF& location,$/;"	f	class:RectF
RectF	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^class RectF$/;"	c
Size	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    Size()$/;"	f	class:Size
Size	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    Size(IN INT width,$/;"	f	class:Size
Size	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    Size(IN const Size& size)$/;"	f	class:Size
Size	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^class Size$/;"	c
SizeF	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    SizeF()$/;"	f	class:SizeF
SizeF	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    SizeF(IN REAL width,$/;"	f	class:SizeF
SizeF	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    SizeF(IN const SizeF& size)$/;"	f	class:SizeF
SizeF	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^class SizeF$/;"	c
Status	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^enum Status$/;"	g
Types	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    BYTE* Types;$/;"	m	class:PathData
Union	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    static BOOL Union(OUT Rect& c,$/;"	f	class:Rect
Union	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    static BOOL Union(OUT RectF& c,$/;"	f	class:RectF
UnknownImageFormat	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    UnknownImageFormat = 13,$/;"	e	enum:Status
UnsupportedGdiplusVersion	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    UnsupportedGdiplusVersion = 17,$/;"	e	enum:Status
ValueOverflow	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    ValueOverflow = 11,$/;"	e	enum:Status
Width	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    INT Width;$/;"	m	class:Rect
Width	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    INT Width;$/;"	m	class:Size
Width	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    REAL Width;$/;"	m	class:RectF
Width	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    REAL Width;$/;"	m	class:SizeF
Win32Error	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    Win32Error = 7,$/;"	e	enum:Status
WrongState	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    WrongState = 8,$/;"	e	enum:Status
X	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    INT X;$/;"	m	class:Point
X	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    INT X;$/;"	m	class:Rect
X	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    REAL X;$/;"	m	class:PointF
X	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    REAL X;$/;"	m	class:RectF
Y	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    INT Y;$/;"	m	class:Point
Y	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    INT Y;$/;"	m	class:Rect
Y	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    REAL Y;$/;"	m	class:PointF
Y	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    REAL Y;$/;"	m	class:RectF
_GDIPLUSTYPES_H	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	16;"	d
operator +	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    Size operator+(IN const Size& sz) const$/;"	f	class:Size
operator +	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    SizeF operator+(IN const SizeF& sz) const$/;"	f	class:SizeF
operator +	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^   Point operator+(IN const Point& point) const$/;"	f	class:Point
operator +	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^   PointF operator+(IN const PointF& point) const$/;"	f	class:PointF
operator -	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    Size operator-(IN const Size& sz) const$/;"	f	class:Size
operator -	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    SizeF operator-(IN const SizeF& sz) const$/;"	f	class:SizeF
operator -	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^   Point operator-(IN const Point& point) const$/;"	f	class:Point
operator -	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^   PointF operator-(IN const PointF& point) const$/;"	f	class:PointF
operator =	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    CharacterRange & operator = (const CharacterRange &rhs)$/;"	f	class:CharacterRange
~PathData	C++\ege-13.04.02-full\src\includes\GdiPlusTypes.h	/^    ~PathData()$/;"	f	class:PathData
ClearBrushRemapTable	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status ClearBrushRemapTable()$/;"	f	class:ImageAttributes
ClearColorKey	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status ClearColorKey($/;"	f	class:ImageAttributes
ClearColorMatrices	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status ClearColorMatrices($/;"	f	class:ImageAttributes
ClearColorMatrix	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status ClearColorMatrix($/;"	f	class:ImageAttributes
ClearGamma	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status ClearGamma($/;"	f	class:ImageAttributes
ClearNoOp	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status ClearNoOp($/;"	f	class:ImageAttributes
ClearOutputChannel	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status ClearOutputChannel($/;"	f	class:ImageAttributes
ClearOutputChannelColorProfile	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status ClearOutputChannelColorProfile($/;"	f	class:ImageAttributes
ClearRemapTable	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status ClearRemapTable($/;"	f	class:ImageAttributes
ClearThreshold	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status ClearThreshold($/;"	f	class:ImageAttributes
Clone	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    ImageAttributes* Clone() const$/;"	f	class:ImageAttributes
GetAdjustedPalette	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status GetAdjustedPalette(IN OUT ColorPalette* colorPalette,$/;"	f	class:ImageAttributes
GetLastStatus	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status GetLastStatus() const$/;"	f	class:ImageAttributes
ImageAttributes	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    ImageAttributes()$/;"	f	class:ImageAttributes
ImageAttributes	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    ImageAttributes(GpImageAttributes* imageAttr, Status status)$/;"	f	class:ImageAttributes
ImageAttributes	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^class ImageAttributes : public GdiplusBase$/;"	c
Reset	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Reset($/;"	f	class:ImageAttributes
SetBrushRemapTable	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status SetBrushRemapTable(IN UINT mapSize, $/;"	f	class:ImageAttributes
SetColorKey	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status SetColorKey($/;"	f	class:ImageAttributes
SetColorMatrices	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    SetColorMatrices($/;"	f	class:ImageAttributes
SetColorMatrix	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    SetColorMatrix($/;"	f	class:ImageAttributes
SetGamma	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status SetGamma($/;"	f	class:ImageAttributes
SetICMMode	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status SetICMMode(IN BOOL on)$/;"	f	class:ImageAttributes
SetNativeImageAttr	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    VOID SetNativeImageAttr(GpImageAttributes* nativeImageAttr)$/;"	f	class:ImageAttributes
SetNoOp	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status SetNoOp($/;"	f	class:ImageAttributes
SetOutputChannel	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status SetOutputChannel($/;"	f	class:ImageAttributes
SetOutputChannelColorProfile	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status SetOutputChannelColorProfile($/;"	f	class:ImageAttributes
SetRemapTable	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status SetRemapTable($/;"	f	class:ImageAttributes
SetStatus	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status SetStatus(Status status) const$/;"	f	class:ImageAttributes
SetThreshold	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status SetThreshold($/;"	f	class:ImageAttributes
SetToIdentity	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    SetToIdentity($/;"	f	class:ImageAttributes
SetWrapMode	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    Status SetWrapMode(IN WrapMode wrap, $/;"	f	class:ImageAttributes
_GDIPLUSIMAGEATTRIBUTES_H	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	16;"	d
lastResult	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    mutable Status lastResult;$/;"	m	class:ImageAttributes
nativeImageAttr	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    GpImageAttributes* nativeImageAttr;$/;"	m	class:ImageAttributes
~ImageAttributes	C++\ege-13.04.02-full\src\includes\GdiPlusimageAttributes.h	/^    ~ImageAttributes()$/;"	f	class:ImageAttributes
getlogodata	C++\ege-13.04.02-full\src\logo.cpp	/^char* getlogodata() {$/;"	f
getlogodatasize	C++\ege-13.04.02-full\src\logo.cpp	/^unsigned long getlogodatasize() {$/;"	f
logo_res	C++\ege-13.04.02-full\src\logo.cpp	/^static unsigned char logo_res[] = {$/;"	v	file:
BASE	C++\ege-13.04.02-full\src\lpng\adler32.c	14;"	d	file:
DO1	C++\ege-13.04.02-full\src\lpng\adler32.c	18;"	d	file:
DO16	C++\ege-13.04.02-full\src\lpng\adler32.c	22;"	d	file:
DO2	C++\ege-13.04.02-full\src\lpng\adler32.c	19;"	d	file:
DO4	C++\ege-13.04.02-full\src\lpng\adler32.c	20;"	d	file:
DO8	C++\ege-13.04.02-full\src\lpng\adler32.c	21;"	d	file:
MOD	C++\ege-13.04.02-full\src\lpng\adler32.c	26;"	d	file:
MOD	C++\ege-13.04.02-full\src\lpng\adler32.c	55;"	d	file:
MOD4	C++\ege-13.04.02-full\src\lpng\adler32.c	46;"	d	file:
MOD4	C++\ege-13.04.02-full\src\lpng\adler32.c	56;"	d	file:
NMAX	C++\ege-13.04.02-full\src\lpng\adler32.c	15;"	d	file:
adler32	C++\ege-13.04.02-full\src\lpng\adler32.c	/^uLong ZEXPORT adler32(adler, buf, len)$/;"	f
adler32_combine	C++\ege-13.04.02-full\src\lpng\adler32.c	/^uLong ZEXPORT adler32_combine(adler1, adler2, len2)$/;"	f
adler32_combine64	C++\ege-13.04.02-full\src\lpng\adler32.c	/^uLong ZEXPORT adler32_combine64(adler1, adler2, len2)$/;"	f
adler32_combine_	C++\ege-13.04.02-full\src\lpng\adler32.c	/^local uLong adler32_combine_(adler1, adler2, len2)$/;"	f
local	C++\ege-13.04.02-full\src\lpng\adler32.c	10;"	d	file:
ZLIB_INTERNAL	C++\ege-13.04.02-full\src\lpng\compress.c	8;"	d	file:
compress	C++\ege-13.04.02-full\src\lpng\compress.c	/^int ZEXPORT compress (dest, destLen, source, sourceLen)$/;"	f
compress2	C++\ege-13.04.02-full\src\lpng\compress.c	/^int ZEXPORT compress2 (dest, destLen, source, sourceLen, level)$/;"	f
compressBound	C++\ege-13.04.02-full\src\lpng\compress.c	/^uLong ZEXPORT compressBound (sourceLen)$/;"	f
BYFOUR	C++\ege-13.04.02-full\src\lpng\crc32.c	37;"	d	file:
BYFOUR	C++\ege-13.04.02-full\src\lpng\crc32.c	47;"	d	file:
DO1	C++\ege-13.04.02-full\src\lpng\crc32.c	217;"	d	file:
DO8	C++\ege-13.04.02-full\src\lpng\crc32.c	218;"	d	file:
DOBIG32	C++\ege-13.04.02-full\src\lpng\crc32.c	301;"	d	file:
DOBIG4	C++\ege-13.04.02-full\src\lpng\crc32.c	298;"	d	file:
DOLIT32	C++\ege-13.04.02-full\src\lpng\crc32.c	261;"	d	file:
DOLIT4	C++\ege-13.04.02-full\src\lpng\crc32.c	258;"	d	file:
DYNAMIC_CRC_TABLE	C++\ege-13.04.02-full\src\lpng\crc32.c	25;"	d	file:
GF2_DIM	C++\ege-13.04.02-full\src\lpng\crc32.c	341;"	d	file:
REV	C++\ege-13.04.02-full\src\lpng\crc32.c	56;"	d	file:
TBLS	C++\ege-13.04.02-full\src\lpng\crc32.c	62;"	d	file:
TBLS	C++\ege-13.04.02-full\src\lpng\crc32.c	64;"	d	file:
crc32	C++\ege-13.04.02-full\src\lpng\crc32.c	/^unsigned long ZEXPORT crc32(crc, buf, len)$/;"	f
crc32_big	C++\ege-13.04.02-full\src\lpng\crc32.c	/^local unsigned long crc32_big(crc, buf, len)$/;"	f
crc32_combine	C++\ege-13.04.02-full\src\lpng\crc32.c	/^uLong ZEXPORT crc32_combine(crc1, crc2, len2)$/;"	f
crc32_combine64	C++\ege-13.04.02-full\src\lpng\crc32.c	/^uLong ZEXPORT crc32_combine64(crc1, crc2, len2)$/;"	f
crc32_combine_	C++\ege-13.04.02-full\src\lpng\crc32.c	/^local uLong crc32_combine_(crc1, crc2, len2)$/;"	f
crc32_little	C++\ege-13.04.02-full\src\lpng\crc32.c	/^local unsigned long crc32_little(crc, buf, len)$/;"	f
crc_table	C++\ege-13.04.02-full\src\lpng\crc32.c	/^local unsigned long FAR crc_table[TBLS][256];$/;"	v
crc_table_empty	C++\ege-13.04.02-full\src\lpng\crc32.c	/^local volatile int crc_table_empty = 1;$/;"	v
get_crc_table	C++\ege-13.04.02-full\src\lpng\crc32.c	/^const unsigned long FAR * ZEXPORT get_crc_table()$/;"	f
gf2_matrix_square	C++\ege-13.04.02-full\src\lpng\crc32.c	/^local void gf2_matrix_square(square, mat)$/;"	f
gf2_matrix_times	C++\ege-13.04.02-full\src\lpng\crc32.c	/^local unsigned long gf2_matrix_times(mat, vec)$/;"	f
local	C++\ege-13.04.02-full\src\lpng\crc32.c	31;"	d	file:
make_crc_table	C++\ege-13.04.02-full\src\lpng\crc32.c	/^local void make_crc_table()$/;"	f
u4	C++\ege-13.04.02-full\src\lpng\crc32.c	/^           typedef unsigned short u4;$/;"	t	file:
u4	C++\ege-13.04.02-full\src\lpng\crc32.c	/^         typedef unsigned long u4;$/;"	t	file:
u4	C++\ege-13.04.02-full\src\lpng\crc32.c	/^       typedef unsigned int u4;$/;"	t	file:
write_table	C++\ege-13.04.02-full\src\lpng\crc32.c	/^local void write_table(out, table)$/;"	f
crc_table	C++\ege-13.04.02-full\src\lpng\crc32.h	/^local const unsigned long FAR crc_table[TBLS][256] =$/;"	v
CLEAR_HASH	C++\ege-13.04.02-full\src\lpng\deflate.c	197;"	d	file:
EQUAL	C++\ege-13.04.02-full\src\lpng\deflate.c	155;"	d	file:
FLUSH_BLOCK	C++\ege-13.04.02-full\src\lpng\deflate.c	1452;"	d	file:
FLUSH_BLOCK_ONLY	C++\ege-13.04.02-full\src\lpng\deflate.c	1440;"	d	file:
INSERT_STRING	C++\ege-13.04.02-full\src\lpng\deflate.c	182;"	d	file:
INSERT_STRING	C++\ege-13.04.02-full\src\lpng\deflate.c	187;"	d	file:
NIL	C++\ege-13.04.02-full\src\lpng\deflate.c	108;"	d	file:
TOO_FAR	C++\ege-13.04.02-full\src\lpng\deflate.c	112;"	d	file:
UPDATE_HASH	C++\ege-13.04.02-full\src\lpng\deflate.c	168;"	d	file:
block_done	C++\ege-13.04.02-full\src\lpng\deflate.c	/^    block_done,     \/* block flush performed *\/$/;"	e	enum:__anon22	file:
block_state	C++\ege-13.04.02-full\src\lpng\deflate.c	/^} block_state;$/;"	t	typeref:enum:__anon22	file:
check_match	C++\ege-13.04.02-full\src\lpng\deflate.c	/^local void check_match(s, start, match, length)$/;"	f
check_match	C++\ege-13.04.02-full\src\lpng\deflate.c	1296;"	d	file:
compress_func	C++\ege-13.04.02-full\src\lpng\deflate.c	/^typedef block_state (*compress_func) OF((deflate_state *s, int flush));$/;"	t	file:
config	C++\ege-13.04.02-full\src\lpng\deflate.c	/^} config;$/;"	t	typeref:struct:config_s	file:
config_s	C++\ege-13.04.02-full\src\lpng\deflate.c	/^typedef struct config_s {$/;"	s	file:
configuration_table	C++\ege-13.04.02-full\src\lpng\deflate.c	/^local const config configuration_table[10] = {$/;"	v
configuration_table	C++\ege-13.04.02-full\src\lpng\deflate.c	/^local const config configuration_table[2] = {$/;"	v
deflate	C++\ege-13.04.02-full\src\lpng\deflate.c	/^int ZEXPORT deflate (strm, flush)$/;"	f
deflateBound	C++\ege-13.04.02-full\src\lpng\deflate.c	/^uLong ZEXPORT deflateBound(strm, sourceLen)$/;"	f
deflateCopy	C++\ege-13.04.02-full\src\lpng\deflate.c	/^int ZEXPORT deflateCopy (dest, source)$/;"	f
deflateEnd	C++\ege-13.04.02-full\src\lpng\deflate.c	/^int ZEXPORT deflateEnd (strm)$/;"	f
deflateInit2_	C++\ege-13.04.02-full\src\lpng\deflate.c	/^int ZEXPORT deflateInit2_(strm, level, method, windowBits, memLevel, strategy,$/;"	f
deflateInit_	C++\ege-13.04.02-full\src\lpng\deflate.c	/^int ZEXPORT deflateInit_(strm, level, version, stream_size)$/;"	f
deflateParams	C++\ege-13.04.02-full\src\lpng\deflate.c	/^int ZEXPORT deflateParams(strm, level, strategy)$/;"	f
deflatePrime	C++\ege-13.04.02-full\src\lpng\deflate.c	/^int ZEXPORT deflatePrime (strm, bits, value)$/;"	f
deflateReset	C++\ege-13.04.02-full\src\lpng\deflate.c	/^int ZEXPORT deflateReset (strm)$/;"	f
deflateSetDictionary	C++\ege-13.04.02-full\src\lpng\deflate.c	/^int ZEXPORT deflateSetDictionary (strm, dictionary, dictLength)$/;"	f
deflateSetHeader	C++\ege-13.04.02-full\src\lpng\deflate.c	/^int ZEXPORT deflateSetHeader (strm, head)$/;"	f
deflateTune	C++\ege-13.04.02-full\src\lpng\deflate.c	/^int ZEXPORT deflateTune(strm, good_length, max_lazy, nice_length, max_chain)$/;"	f
deflate_copyright	C++\ege-13.04.02-full\src\lpng\deflate.c	/^const char deflate_copyright[] =$/;"	v
deflate_fast	C++\ege-13.04.02-full\src\lpng\deflate.c	/^local block_state deflate_fast(s, flush)$/;"	f
deflate_huff	C++\ege-13.04.02-full\src\lpng\deflate.c	/^local block_state deflate_huff(s, flush)$/;"	f
deflate_rle	C++\ege-13.04.02-full\src\lpng\deflate.c	/^local block_state deflate_rle(s, flush)$/;"	f
deflate_slow	C++\ege-13.04.02-full\src\lpng\deflate.c	/^local block_state deflate_slow(s, flush)$/;"	f
deflate_stored	C++\ege-13.04.02-full\src\lpng\deflate.c	/^local block_state deflate_stored(s, flush)$/;"	f
dummy	C++\ege-13.04.02-full\src\lpng\deflate.c	/^struct static_tree_desc_s {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:static_tree_desc_s	file:
fill_window	C++\ege-13.04.02-full\src\lpng\deflate.c	/^local void fill_window(s)$/;"	f
finish_done	C++\ege-13.04.02-full\src\lpng\deflate.c	/^    finish_done     \/* finish done, accept no more input or output *\/$/;"	e	enum:__anon22	file:
finish_started	C++\ege-13.04.02-full\src\lpng\deflate.c	/^    finish_started, \/* finish started, need only more output at next deflate *\/$/;"	e	enum:__anon22	file:
flush_pending	C++\ege-13.04.02-full\src\lpng\deflate.c	/^local void flush_pending(strm)$/;"	f
func	C++\ege-13.04.02-full\src\lpng\deflate.c	/^   compress_func func;$/;"	m	struct:config_s	file:
good_length	C++\ege-13.04.02-full\src\lpng\deflate.c	/^   ush good_length; \/* reduce lazy search above this match length *\/$/;"	m	struct:config_s	file:
lm_init	C++\ege-13.04.02-full\src\lpng\deflate.c	/^local void lm_init (s)$/;"	f
longest_match	C++\ege-13.04.02-full\src\lpng\deflate.c	/^local uInt longest_match(s, cur_match)$/;"	f
max_chain	C++\ege-13.04.02-full\src\lpng\deflate.c	/^   ush max_chain;$/;"	m	struct:config_s	file:
max_lazy	C++\ege-13.04.02-full\src\lpng\deflate.c	/^   ush max_lazy;    \/* do not perform lazy search above this match length *\/$/;"	m	struct:config_s	file:
need_more	C++\ege-13.04.02-full\src\lpng\deflate.c	/^    need_more,      \/* block not completed, need more input or more output *\/$/;"	e	enum:__anon22	file:
nice_length	C++\ege-13.04.02-full\src\lpng\deflate.c	/^   ush nice_length; \/* quit search above this match length *\/$/;"	m	struct:config_s	file:
putShortMSB	C++\ege-13.04.02-full\src\lpng\deflate.c	/^local void putShortMSB (s, b)$/;"	f
read_buf	C++\ege-13.04.02-full\src\lpng\deflate.c	/^local int read_buf(strm, buf, size)$/;"	f
static_tree_desc_s	C++\ege-13.04.02-full\src\lpng\deflate.c	/^struct static_tree_desc_s {int dummy;}; \/* for buggy compilers *\/$/;"	s	file:
BL_CODES	C++\ege-13.04.02-full\src\lpng\deflate.h	42;"	d
BUSY_STATE	C++\ege-13.04.02-full\src\lpng\deflate.h	56;"	d
COMMENT_STATE	C++\ege-13.04.02-full\src\lpng\deflate.h	54;"	d
Code	C++\ege-13.04.02-full\src\lpng\deflate.h	74;"	d
DEFLATE_H	C++\ege-13.04.02-full\src\lpng\deflate.h	14;"	d
D_CODES	C++\ege-13.04.02-full\src\lpng\deflate.h	39;"	d
Dad	C++\ege-13.04.02-full\src\lpng\deflate.h	75;"	d
EXTRA_STATE	C++\ege-13.04.02-full\src\lpng\deflate.h	52;"	d
FINISH_STATE	C++\ege-13.04.02-full\src\lpng\deflate.h	57;"	d
Freq	C++\ege-13.04.02-full\src\lpng\deflate.h	73;"	d
GZIP	C++\ege-13.04.02-full\src\lpng\deflate.h	23;"	d
HCRC_STATE	C++\ege-13.04.02-full\src\lpng\deflate.h	55;"	d
HEAP_SIZE	C++\ege-13.04.02-full\src\lpng\deflate.h	45;"	d
INIT_STATE	C++\ege-13.04.02-full\src\lpng\deflate.h	51;"	d
IPos	C++\ege-13.04.02-full\src\lpng\deflate.h	/^typedef unsigned IPos;$/;"	t
LENGTH_CODES	C++\ege-13.04.02-full\src\lpng\deflate.h	30;"	d
LITERALS	C++\ege-13.04.02-full\src\lpng\deflate.h	33;"	d
L_CODES	C++\ege-13.04.02-full\src\lpng\deflate.h	36;"	d
Len	C++\ege-13.04.02-full\src\lpng\deflate.h	76;"	d
MAX_BITS	C++\ege-13.04.02-full\src\lpng\deflate.h	48;"	d
MAX_DIST	C++\ege-13.04.02-full\src\lpng\deflate.h	283;"	d
MIN_LOOKAHEAD	C++\ege-13.04.02-full\src\lpng\deflate.h	278;"	d
NAME_STATE	C++\ege-13.04.02-full\src\lpng\deflate.h	53;"	d
Pos	C++\ege-13.04.02-full\src\lpng\deflate.h	/^typedef ush Pos;$/;"	t
Posf	C++\ege-13.04.02-full\src\lpng\deflate.h	/^typedef Pos FAR Posf;$/;"	t
WIN_INIT	C++\ege-13.04.02-full\src\lpng\deflate.h	288;"	d
_tr_tally_dist	C++\ege-13.04.02-full\src\lpng\deflate.h	326;"	d
_tr_tally_dist	C++\ege-13.04.02-full\src\lpng\deflate.h	338;"	d
_tr_tally_lit	C++\ege-13.04.02-full\src\lpng\deflate.h	319;"	d
_tr_tally_lit	C++\ege-13.04.02-full\src\lpng\deflate.h	337;"	d
bi_buf	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    ush bi_buf;$/;"	m	struct:internal_state
bi_valid	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    int bi_valid;$/;"	m	struct:internal_state
bits_sent	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    ulg bits_sent;      \/* bit length of compressed data sent mod 2^32 *\/$/;"	m	struct:internal_state
bl_count	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    ush bl_count[MAX_BITS+1];$/;"	m	struct:internal_state
bl_desc	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    struct tree_desc_s bl_desc;              \/* desc. for bit length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s
bl_tree	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    struct ct_data_s bl_tree[2*BL_CODES+1];  \/* Huffman tree for bit lengths *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s
block_start	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    long block_start;$/;"	m	struct:internal_state
code	C++\ege-13.04.02-full\src\lpng\deflate.h	/^        ush  code;       \/* bit string *\/$/;"	m	union:ct_data_s::__anon23
compressed_len	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    ulg compressed_len; \/* total bit length of compressed file mod 2^32 *\/$/;"	m	struct:internal_state
ct_data	C++\ege-13.04.02-full\src\lpng\deflate.h	/^} FAR ct_data;$/;"	t	typeref:struct:ct_data_s
ct_data_s	C++\ege-13.04.02-full\src\lpng\deflate.h	/^typedef struct ct_data_s {$/;"	s
d_buf	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    ushf *d_buf;$/;"	m	struct:internal_state
d_code	C++\ege-13.04.02-full\src\lpng\deflate.h	301;"	d
d_desc	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    struct tree_desc_s d_desc;               \/* desc. for distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s
dad	C++\ege-13.04.02-full\src\lpng\deflate.h	/^        ush  dad;        \/* father node in Huffman tree *\/$/;"	m	union:ct_data_s::__anon24
deflate_state	C++\ege-13.04.02-full\src\lpng\deflate.h	/^} FAR deflate_state;$/;"	t	typeref:struct:internal_state
depth	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uch depth[2*L_CODES+1];$/;"	m	struct:internal_state
dl	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    } dl;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon24
dyn_dtree	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    struct ct_data_s dyn_dtree[2*D_CODES+1]; \/* distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s
dyn_ltree	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    struct ct_data_s dyn_ltree[HEAP_SIZE];   \/* literal and length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s
dyn_tree	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    ct_data *dyn_tree;           \/* the dynamic tree *\/$/;"	m	struct:tree_desc_s
fc	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    } fc;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon23
freq	C++\ege-13.04.02-full\src\lpng\deflate.h	/^        ush  freq;       \/* frequency count *\/$/;"	m	union:ct_data_s::__anon23
good_match	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt good_match;$/;"	m	struct:internal_state
gzhead	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    gz_headerp  gzhead;  \/* gzip header information to write *\/$/;"	m	struct:internal_state
gzindex	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt   gzindex;      \/* where in extra, name, or comment *\/$/;"	m	struct:internal_state
hash_bits	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt  hash_bits;      \/* log2(hash_size) *\/$/;"	m	struct:internal_state
hash_mask	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt  hash_mask;      \/* hash_size-1 *\/$/;"	m	struct:internal_state
hash_shift	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt  hash_shift;$/;"	m	struct:internal_state
hash_size	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt  hash_size;      \/* number of elements in hash table *\/$/;"	m	struct:internal_state
head	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    Posf *head; \/* Heads of the hash chains or NIL. *\/$/;"	m	struct:internal_state
heap	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    int heap[2*L_CODES+1];      \/* heap used to build the Huffman trees *\/$/;"	m	struct:internal_state
heap_len	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    int heap_len;               \/* number of elements in the heap *\/$/;"	m	struct:internal_state
heap_max	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    int heap_max;               \/* element of largest frequency *\/$/;"	m	struct:internal_state
high_water	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    ulg high_water;$/;"	m	struct:internal_state
ins_h	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt  ins_h;          \/* hash index of string to be inserted *\/$/;"	m	struct:internal_state
internal_state	C++\ege-13.04.02-full\src\lpng\deflate.h	/^typedef struct internal_state {$/;"	s
l_buf	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uchf *l_buf;          \/* buffer for literals or lengths *\/$/;"	m	struct:internal_state
l_desc	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    struct tree_desc_s l_desc;               \/* desc. for literal tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s
last_eob_len	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    int last_eob_len;   \/* bit length of EOB code for last block *\/$/;"	m	struct:internal_state
last_flush	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    int   last_flush;    \/* value of flush param for previous deflate call *\/$/;"	m	struct:internal_state
last_lit	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt last_lit;      \/* running index in l_buf *\/$/;"	m	struct:internal_state
len	C++\ege-13.04.02-full\src\lpng\deflate.h	/^        ush  len;        \/* length of bit string *\/$/;"	m	union:ct_data_s::__anon24
level	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    int level;    \/* compression level (1..9) *\/$/;"	m	struct:internal_state
lit_bufsize	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt  lit_bufsize;$/;"	m	struct:internal_state
lookahead	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt lookahead;              \/* number of valid bytes ahead in window *\/$/;"	m	struct:internal_state
match_available	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    int match_available;         \/* set if previous match exists *\/$/;"	m	struct:internal_state
match_length	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt match_length;           \/* length of best match *\/$/;"	m	struct:internal_state
match_start	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt match_start;            \/* start of matching string *\/$/;"	m	struct:internal_state
matches	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt matches;       \/* number of string matches in current block *\/$/;"	m	struct:internal_state
max_chain_length	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt max_chain_length;$/;"	m	struct:internal_state
max_code	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    int     max_code;            \/* largest code with non zero frequency *\/$/;"	m	struct:tree_desc_s
max_insert_length	C++\ege-13.04.02-full\src\lpng\deflate.h	176;"	d
max_lazy_match	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt max_lazy_match;$/;"	m	struct:internal_state
method	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    Byte  method;        \/* STORED (for zip only) or DEFLATED *\/$/;"	m	struct:internal_state
nice_match	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    int nice_match; \/* Stop searching when current match exceeds this *\/$/;"	m	struct:internal_state
opt_len	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    ulg opt_len;        \/* bit length of current block with optimal trees *\/$/;"	m	struct:internal_state
pending	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt   pending;      \/* nb of bytes in the pending buffer *\/$/;"	m	struct:internal_state
pending_buf	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    Bytef *pending_buf;  \/* output still pending *\/$/;"	m	struct:internal_state
pending_buf_size	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    ulg   pending_buf_size; \/* size of pending_buf *\/$/;"	m	struct:internal_state
pending_out	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    Bytef *pending_out;  \/* next pending byte to output to the stream *\/$/;"	m	struct:internal_state
prev	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    Posf *prev;$/;"	m	struct:internal_state
prev_length	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt prev_length;$/;"	m	struct:internal_state
prev_match	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    IPos prev_match;             \/* previous match *\/$/;"	m	struct:internal_state
put_byte	C++\ege-13.04.02-full\src\lpng\deflate.h	275;"	d
stat_desc	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    static_tree_desc *stat_desc; \/* the corresponding static tree *\/$/;"	m	struct:tree_desc_s
static_len	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    ulg static_len;     \/* bit length of current block with static trees *\/$/;"	m	struct:internal_state
static_tree_desc	C++\ege-13.04.02-full\src\lpng\deflate.h	/^typedef struct static_tree_desc_s  static_tree_desc;$/;"	t	typeref:struct:static_tree_desc_s
status	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    int   status;        \/* as the name implies *\/$/;"	m	struct:internal_state
strategy	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    int strategy; \/* favor or force Huffman coding*\/$/;"	m	struct:internal_state
strm	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    z_streamp strm;      \/* pointer back to this zlib stream *\/$/;"	m	struct:internal_state
strstart	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt strstart;               \/* start of string to insert *\/$/;"	m	struct:internal_state
tree_desc	C++\ege-13.04.02-full\src\lpng\deflate.h	/^} FAR tree_desc;$/;"	t	typeref:struct:tree_desc_s
tree_desc_s	C++\ege-13.04.02-full\src\lpng\deflate.h	/^typedef struct tree_desc_s {$/;"	s
w_bits	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt  w_bits;        \/* log2(w_size)  (8..16) *\/$/;"	m	struct:internal_state
w_mask	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt  w_mask;        \/* w_size - 1 *\/$/;"	m	struct:internal_state
w_size	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    uInt  w_size;        \/* LZ77 window size (32K by default) *\/$/;"	m	struct:internal_state
window	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    Bytef *window;$/;"	m	struct:internal_state
window_size	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    ulg window_size;$/;"	m	struct:internal_state
wrap	C++\ege-13.04.02-full\src\lpng\deflate.h	/^    int   wrap;          \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:internal_state
gzclose	C++\ege-13.04.02-full\src\lpng\gzclose.c	/^int ZEXPORT gzclose(file)$/;"	f
COPY	C++\ege-13.04.02-full\src\lpng\gzguts.h	82;"	d
GT_OFF	C++\ege-13.04.02-full\src\lpng\gzguts.h	128;"	d
GT_OFF	C++\ege-13.04.02-full\src\lpng\gzguts.h	131;"	d
GZBUFSIZE	C++\ege-13.04.02-full\src\lpng\gzguts.h	72;"	d
GZIP	C++\ege-13.04.02-full\src\lpng\gzguts.h	83;"	d
GZ_APPEND	C++\ege-13.04.02-full\src\lpng\gzguts.h	78;"	d
GZ_NONE	C++\ege-13.04.02-full\src\lpng\gzguts.h	75;"	d
GZ_READ	C++\ege-13.04.02-full\src\lpng\gzguts.h	76;"	d
GZ_WRITE	C++\ege-13.04.02-full\src\lpng\gzguts.h	77;"	d
LOOK	C++\ege-13.04.02-full\src\lpng\gzguts.h	81;"	d
NO_GZCOMPRESS	C++\ege-13.04.02-full\src\lpng\gzguts.h	31;"	d
ZLIB_INTERNAL	C++\ege-13.04.02-full\src\lpng\gzguts.h	16;"	d
ZLIB_INTERNAL	C++\ege-13.04.02-full\src\lpng\gzguts.h	18;"	d
_FILE_OFFSET_BITS	C++\ege-13.04.02-full\src\lpng\gzguts.h	11;"	d
_LARGEFILE_SOURCE	C++\ege-13.04.02-full\src\lpng\gzguts.h	8;"	d
direct	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    int direct;             \/* true if last read direct, false if gzip *\/$/;"	m	struct:__anon25
eof	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    int eof;                \/* true if end of input file reached *\/$/;"	m	struct:__anon25
err	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    int err;                \/* error code *\/$/;"	m	struct:__anon25
fd	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    int fd;                 \/* file descriptor *\/$/;"	m	struct:__anon25
gz_state	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^} gz_state;$/;"	t	typeref:struct:__anon25
gz_statep	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^typedef gz_state FAR *gz_statep;$/;"	t
have	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    unsigned have;          \/* amount of output data unused at next *\/$/;"	m	struct:__anon25
how	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    int how;                \/* 0: get header, 1: copy, 2: decompress *\/$/;"	m	struct:__anon25
in	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    unsigned char *in;      \/* input buffer *\/$/;"	m	struct:__anon25
level	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    int level;              \/* compression level *\/$/;"	m	struct:__anon25
local	C++\ege-13.04.02-full\src\lpng\gzguts.h	40;"	d
mode	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    int mode;               \/* see gzip modes above *\/$/;"	m	struct:__anon25
msg	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    char *msg;              \/* error message *\/$/;"	m	struct:__anon25
next	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    unsigned char *next;    \/* next output data to deliver or write *\/$/;"	m	struct:__anon25
out	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    unsigned char *out;     \/* output buffer (double-sized when reading) *\/$/;"	m	struct:__anon25
path	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    char *path;             \/* path or fd for error messages *\/$/;"	m	struct:__anon25
pos	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    z_off64_t pos;          \/* current position in uncompressed data *\/$/;"	m	struct:__anon25
raw	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    z_off64_t raw;          \/* where the raw data started, for seeking *\/$/;"	m	struct:__anon25
seek	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    int seek;               \/* true if seek request pending *\/$/;"	m	struct:__anon25
size	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    unsigned size;          \/* buffer size, zero if not allocated yet *\/$/;"	m	struct:__anon25
skip	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    z_off64_t skip;         \/* amount to skip (already rewound if backwards) *\/$/;"	m	struct:__anon25
start	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    z_off64_t start;        \/* where the gzip data started, for rewinding *\/$/;"	m	struct:__anon25
strategy	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    int strategy;           \/* compression strategy *\/$/;"	m	struct:__anon25
strm	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    z_stream strm;          \/* stream structure in-place (not a pointer) *\/$/;"	m	struct:__anon25
vsnprintf	C++\ege-13.04.02-full\src\lpng\gzguts.h	36;"	d
want	C++\ege-13.04.02-full\src\lpng\gzguts.h	/^    unsigned want;          \/* requested buffer size, default is GZBUFSIZE *\/$/;"	m	struct:__anon25
zstrerror	C++\ege-13.04.02-full\src\lpng\gzguts.h	53;"	d
zstrerror	C++\ege-13.04.02-full\src\lpng\gzguts.h	57;"	d
zstrerror	C++\ege-13.04.02-full\src\lpng\gzguts.h	59;"	d
LSEEK	C++\ege-13.04.02-full\src\lpng\gzlib.c	11;"	d	file:
LSEEK	C++\ege-13.04.02-full\src\lpng\gzlib.c	9;"	d	file:
gz_error	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^void ZLIB_INTERNAL gz_error(state, err, msg)$/;"	f
gz_intmax	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^unsigned ZLIB_INTERNAL gz_intmax()$/;"	f
gz_open	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^local gzFile gz_open(path, fd, mode)$/;"	f
gz_reset	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^local void gz_reset(state)$/;"	f
gz_strwinerror	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^char ZLIB_INTERNAL *gz_strwinerror (error)$/;"	f
gzbuffer	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^int ZEXPORT gzbuffer(file, size)$/;"	f
gzclearerr	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^void ZEXPORT gzclearerr(file)$/;"	f
gzdopen	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^gzFile ZEXPORT gzdopen(fd, mode)$/;"	f
gzeof	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^int ZEXPORT gzeof(file)$/;"	f
gzerror	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^const char * ZEXPORT gzerror(file, errnum)$/;"	f
gzoffset	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^z_off_t ZEXPORT gzoffset(file)$/;"	f
gzoffset64	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^z_off64_t ZEXPORT gzoffset64(file)$/;"	f
gzopen	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^gzFile ZEXPORT gzopen(path, mode)$/;"	f
gzopen64	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^gzFile ZEXPORT gzopen64(path, mode)$/;"	f
gzrewind	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^int ZEXPORT gzrewind(file)$/;"	f
gzseek	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^z_off_t ZEXPORT gzseek(file, offset, whence)$/;"	f
gzseek64	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^z_off64_t ZEXPORT gzseek64(file, offset, whence)$/;"	f
gztell	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^z_off_t ZEXPORT gztell(file)$/;"	f
gztell64	C++\ege-13.04.02-full\src\lpng\gzlib.c	/^z_off64_t ZEXPORT gztell64(file)$/;"	f
NEXT	C++\ege-13.04.02-full\src\lpng\gzread.c	71;"	d	file:
gz_avail	C++\ege-13.04.02-full\src\lpng\gzread.c	/^local int gz_avail(state)$/;"	f
gz_decomp	C++\ege-13.04.02-full\src\lpng\gzread.c	/^local int gz_decomp(state)$/;"	f
gz_head	C++\ege-13.04.02-full\src\lpng\gzread.c	/^local int gz_head(state)$/;"	f
gz_load	C++\ege-13.04.02-full\src\lpng\gzread.c	/^local int gz_load(state, buf, len, have)$/;"	f
gz_make	C++\ege-13.04.02-full\src\lpng\gzread.c	/^local int gz_make(state)$/;"	f
gz_next4	C++\ege-13.04.02-full\src\lpng\gzread.c	/^local int gz_next4(state, ret)$/;"	f
gz_skip	C++\ege-13.04.02-full\src\lpng\gzread.c	/^local int gz_skip(state, len)$/;"	f
gzclose_r	C++\ege-13.04.02-full\src\lpng\gzread.c	/^int ZEXPORT gzclose_r(file)$/;"	f
gzdirect	C++\ege-13.04.02-full\src\lpng\gzread.c	/^int ZEXPORT gzdirect(file)$/;"	f
gzgetc	C++\ege-13.04.02-full\src\lpng\gzread.c	/^int ZEXPORT gzgetc(file)$/;"	f
gzgets	C++\ege-13.04.02-full\src\lpng\gzread.c	/^char * ZEXPORT gzgets(file, buf, len)$/;"	f
gzread	C++\ege-13.04.02-full\src\lpng\gzread.c	/^int ZEXPORT gzread(file, buf, len)$/;"	f
gzungetc	C++\ege-13.04.02-full\src\lpng\gzread.c	/^int ZEXPORT gzungetc(c, file)$/;"	f
gz_comp	C++\ege-13.04.02-full\src\lpng\gzwrite.c	/^local int gz_comp(state, flush)$/;"	f
gz_init	C++\ege-13.04.02-full\src\lpng\gzwrite.c	/^local int gz_init(state)$/;"	f
gz_zero	C++\ege-13.04.02-full\src\lpng\gzwrite.c	/^local int gz_zero(state, len)$/;"	f
gzclose_w	C++\ege-13.04.02-full\src\lpng\gzwrite.c	/^int ZEXPORT gzclose_w(file)$/;"	f
gzflush	C++\ege-13.04.02-full\src\lpng\gzwrite.c	/^int ZEXPORT gzflush(file, flush)$/;"	f
gzprintf	C++\ege-13.04.02-full\src\lpng\gzwrite.c	/^int ZEXPORTVA gzprintf (file, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10,$/;"	f
gzprintf	C++\ege-13.04.02-full\src\lpng\gzwrite.c	/^int ZEXPORTVA gzprintf (gzFile file, const char *format, ...)$/;"	f
gzputc	C++\ege-13.04.02-full\src\lpng\gzwrite.c	/^int ZEXPORT gzputc(file, c)$/;"	f
gzputs	C++\ege-13.04.02-full\src\lpng\gzwrite.c	/^int ZEXPORT gzputs(file, str)$/;"	f
gzsetparams	C++\ege-13.04.02-full\src\lpng\gzwrite.c	/^int ZEXPORT gzsetparams(file, level, strategy)$/;"	f
gzwrite	C++\ege-13.04.02-full\src\lpng\gzwrite.c	/^int ZEXPORT gzwrite(file, buf, len)$/;"	f
BITS	C++\ege-13.04.02-full\src\lpng\infback.c	181;"	d	file:
BYTEBITS	C++\ege-13.04.02-full\src\lpng\infback.c	192;"	d	file:
DROPBITS	C++\ege-13.04.02-full\src\lpng\infback.c	185;"	d	file:
INITBITS	C++\ege-13.04.02-full\src\lpng\infback.c	141;"	d	file:
LOAD	C++\ege-13.04.02-full\src\lpng\infback.c	119;"	d	file:
NEEDBITS	C++\ege-13.04.02-full\src\lpng\infback.c	174;"	d	file:
PULL	C++\ege-13.04.02-full\src\lpng\infback.c	149;"	d	file:
PULLBYTE	C++\ege-13.04.02-full\src\lpng\infback.c	163;"	d	file:
RESTORE	C++\ege-13.04.02-full\src\lpng\infback.c	130;"	d	file:
ROOM	C++\ege-13.04.02-full\src\lpng\infback.c	201;"	d	file:
fixedtables	C++\ege-13.04.02-full\src\lpng\infback.c	/^local void fixedtables(state)$/;"	f
inflateBack	C++\ege-13.04.02-full\src\lpng\infback.c	/^int ZEXPORT inflateBack(strm, in, in_desc, out, out_desc)$/;"	f
inflateBackEnd	C++\ege-13.04.02-full\src\lpng\infback.c	/^int ZEXPORT inflateBackEnd(strm)$/;"	f
inflateBackInit_	C++\ege-13.04.02-full\src\lpng\infback.c	/^int ZEXPORT inflateBackInit_(strm, windowBits, window, version, stream_size)$/;"	f
OFF	C++\ege-13.04.02-full\src\lpng\inffast.c	25;"	d	file:
OFF	C++\ege-13.04.02-full\src\lpng\inffast.c	28;"	d	file:
PUP	C++\ege-13.04.02-full\src\lpng\inffast.c	26;"	d	file:
PUP	C++\ege-13.04.02-full\src\lpng\inffast.c	29;"	d	file:
inflate_fast	C++\ege-13.04.02-full\src\lpng\inffast.c	/^void ZLIB_INTERNAL inflate_fast(strm, start)$/;"	f
distfix	C++\ege-13.04.02-full\src\lpng\inffixed.h	/^    static const code distfix[32] = {$/;"	v
lenfix	C++\ege-13.04.02-full\src\lpng\inffixed.h	/^    static const code lenfix[512] = {$/;"	v
BITS	C++\ege-13.04.02-full\src\lpng\inflate.c	489;"	d	file:
BUILDFIXED	C++\ege-13.04.02-full\src\lpng\inflate.c	94;"	d	file:
BYTEBITS	C++\ege-13.04.02-full\src\lpng\inflate.c	500;"	d	file:
CRC2	C++\ege-13.04.02-full\src\lpng\inflate.c	424;"	d	file:
CRC4	C++\ege-13.04.02-full\src\lpng\inflate.c	431;"	d	file:
DROPBITS	C++\ege-13.04.02-full\src\lpng\inflate.c	493;"	d	file:
INITBITS	C++\ege-13.04.02-full\src\lpng\inflate.c	464;"	d	file:
LOAD	C++\ege-13.04.02-full\src\lpng\inflate.c	442;"	d	file:
NEEDBITS	C++\ege-13.04.02-full\src\lpng\inflate.c	482;"	d	file:
PULLBYTE	C++\ege-13.04.02-full\src\lpng\inflate.c	472;"	d	file:
RESTORE	C++\ege-13.04.02-full\src\lpng\inflate.c	453;"	d	file:
REVERSE	C++\ege-13.04.02-full\src\lpng\inflate.c	507;"	d	file:
UPDATE	C++\ege-13.04.02-full\src\lpng\inflate.c	416;"	d	file:
UPDATE	C++\ege-13.04.02-full\src\lpng\inflate.c	419;"	d	file:
fixedtables	C++\ege-13.04.02-full\src\lpng\inflate.c	/^local void fixedtables(state)$/;"	f
inflate	C++\ege-13.04.02-full\src\lpng\inflate.c	/^int ZEXPORT inflate(strm, flush)$/;"	f
inflateCopy	C++\ege-13.04.02-full\src\lpng\inflate.c	/^int ZEXPORT inflateCopy(dest, source)$/;"	f
inflateEnd	C++\ege-13.04.02-full\src\lpng\inflate.c	/^int ZEXPORT inflateEnd(strm)$/;"	f
inflateGetHeader	C++\ege-13.04.02-full\src\lpng\inflate.c	/^int ZEXPORT inflateGetHeader(strm, head)$/;"	f
inflateInit2_	C++\ege-13.04.02-full\src\lpng\inflate.c	/^int ZEXPORT inflateInit2_(strm, windowBits, version, stream_size)$/;"	f
inflateInit_	C++\ege-13.04.02-full\src\lpng\inflate.c	/^int ZEXPORT inflateInit_(strm, version, stream_size)$/;"	f
inflateMark	C++\ege-13.04.02-full\src\lpng\inflate.c	/^long ZEXPORT inflateMark(strm)$/;"	f
inflatePrime	C++\ege-13.04.02-full\src\lpng\inflate.c	/^int ZEXPORT inflatePrime(strm, bits, value)$/;"	f
inflateReset	C++\ege-13.04.02-full\src\lpng\inflate.c	/^int ZEXPORT inflateReset(strm)$/;"	f
inflateReset2	C++\ege-13.04.02-full\src\lpng\inflate.c	/^int ZEXPORT inflateReset2(strm, windowBits)$/;"	f
inflateSetDictionary	C++\ege-13.04.02-full\src\lpng\inflate.c	/^int ZEXPORT inflateSetDictionary(strm, dictionary, dictLength)$/;"	f
inflateSync	C++\ege-13.04.02-full\src\lpng\inflate.c	/^int ZEXPORT inflateSync(strm)$/;"	f
inflateSyncPoint	C++\ege-13.04.02-full\src\lpng\inflate.c	/^int ZEXPORT inflateSyncPoint(strm)$/;"	f
inflateUndermine	C++\ege-13.04.02-full\src\lpng\inflate.c	/^int ZEXPORT inflateUndermine(strm, subvert)$/;"	f
makefixed	C++\ege-13.04.02-full\src\lpng\inflate.c	/^void makefixed()$/;"	f
syncsearch	C++\ege-13.04.02-full\src\lpng\inflate.c	/^local unsigned syncsearch(have, buf, len)$/;"	f
updatewindow	C++\ege-13.04.02-full\src\lpng\inflate.c	/^local int updatewindow(strm, out)$/;"	f
BAD	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    BAD,        \/* got a data error -- remain here until reset *\/$/;"	e	enum:__anon26
CHECK	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    CHECK,      \/* i: waiting for 32-bit check value *\/$/;"	e	enum:__anon26
CODELENS	C++\ege-13.04.02-full\src\lpng\inflate.h	/^        CODELENS,   \/* i: waiting for length\/lit and distance code lengths *\/$/;"	e	enum:__anon26
COMMENT	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    COMMENT,    \/* i: waiting for end of comment (gzip) *\/$/;"	e	enum:__anon26
COPY	C++\ege-13.04.02-full\src\lpng\inflate.h	/^        COPY,       \/* i\/o: waiting for input or output to copy stored block *\/$/;"	e	enum:__anon26
COPY_	C++\ege-13.04.02-full\src\lpng\inflate.h	/^        COPY_,      \/* i\/o: same as COPY below, but only first time in *\/$/;"	e	enum:__anon26
DICT	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    DICT,       \/* waiting for inflateSetDictionary() call *\/$/;"	e	enum:__anon26
DICTID	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    DICTID,     \/* i: waiting for dictionary check value *\/$/;"	e	enum:__anon26
DIST	C++\ege-13.04.02-full\src\lpng\inflate.h	/^            DIST,       \/* i: waiting for distance code *\/$/;"	e	enum:__anon26
DISTEXT	C++\ege-13.04.02-full\src\lpng\inflate.h	/^            DISTEXT,    \/* i: waiting for distance extra bits *\/$/;"	e	enum:__anon26
DONE	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    DONE,       \/* finished check, done -- remain here until reset *\/$/;"	e	enum:__anon26
EXLEN	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    EXLEN,      \/* i: waiting for extra length (gzip) *\/$/;"	e	enum:__anon26
EXTRA	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    EXTRA,      \/* i: waiting for extra bytes (gzip) *\/$/;"	e	enum:__anon26
FLAGS	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    FLAGS,      \/* i: waiting for method and flags (gzip) *\/$/;"	e	enum:__anon26
GUNZIP	C++\ege-13.04.02-full\src\lpng\inflate.h	16;"	d
HCRC	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    HCRC,       \/* i: waiting for header crc (gzip) *\/$/;"	e	enum:__anon26
HEAD	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    HEAD,       \/* i: waiting for magic header *\/$/;"	e	enum:__anon26
LEN	C++\ege-13.04.02-full\src\lpng\inflate.h	/^            LEN,        \/* i: waiting for length\/lit\/eob code *\/$/;"	e	enum:__anon26
LENEXT	C++\ege-13.04.02-full\src\lpng\inflate.h	/^            LENEXT,     \/* i: waiting for length extra bits *\/$/;"	e	enum:__anon26
LENGTH	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    LENGTH,     \/* i: waiting for 32-bit length (gzip) *\/$/;"	e	enum:__anon26
LENLENS	C++\ege-13.04.02-full\src\lpng\inflate.h	/^        LENLENS,    \/* i: waiting for code length code lengths *\/$/;"	e	enum:__anon26
LEN_	C++\ege-13.04.02-full\src\lpng\inflate.h	/^            LEN_,       \/* i: same as LEN below, but only first time in *\/$/;"	e	enum:__anon26
LIT	C++\ege-13.04.02-full\src\lpng\inflate.h	/^            LIT,        \/* o: waiting for output space to write literal *\/$/;"	e	enum:__anon26
MATCH	C++\ege-13.04.02-full\src\lpng\inflate.h	/^            MATCH,      \/* o: waiting for output space to copy string *\/$/;"	e	enum:__anon26
MEM	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    MEM,        \/* got an inflate() memory error -- remain here until reset *\/$/;"	e	enum:__anon26
NAME	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    NAME,       \/* i: waiting for end of file name (gzip) *\/$/;"	e	enum:__anon26
OS	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    OS,         \/* i: waiting for extra flags and operating system (gzip) *\/$/;"	e	enum:__anon26
STORED	C++\ege-13.04.02-full\src\lpng\inflate.h	/^        STORED,     \/* i: waiting for stored size (length and complement) *\/$/;"	e	enum:__anon26
SYNC	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    SYNC        \/* looking for synchronization bytes to restart inflate() *\/$/;"	e	enum:__anon26
TABLE	C++\ege-13.04.02-full\src\lpng\inflate.h	/^        TABLE,      \/* i: waiting for dynamic block table lengths *\/$/;"	e	enum:__anon26
TIME	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    TIME,       \/* i: waiting for modification time (gzip) *\/$/;"	e	enum:__anon26
TYPE	C++\ege-13.04.02-full\src\lpng\inflate.h	/^        TYPE,       \/* i: waiting for type bits, including last-flag bit *\/$/;"	e	enum:__anon26
TYPEDO	C++\ege-13.04.02-full\src\lpng\inflate.h	/^        TYPEDO,     \/* i: same, but skip check to exit inflate on new block *\/$/;"	e	enum:__anon26
back	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    int back;                   \/* bits back of last unprocessed length\/lit *\/$/;"	m	struct:inflate_state
bits	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned bits;              \/* number of bits in "in" *\/$/;"	m	struct:inflate_state
check	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned long check;        \/* protected copy of check value *\/$/;"	m	struct:inflate_state
codes	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    code codes[ENOUGH];         \/* space for code tables *\/$/;"	m	struct:inflate_state
distbits	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned distbits;          \/* index bits for distcode *\/$/;"	m	struct:inflate_state
distcode	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    code const FAR *distcode;   \/* starting table for distance codes *\/$/;"	m	struct:inflate_state
dmax	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned dmax;              \/* zlib header max distance (INFLATE_STRICT) *\/$/;"	m	struct:inflate_state
extra	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned extra;             \/* extra bits needed *\/$/;"	m	struct:inflate_state
flags	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    int flags;                  \/* gzip header method and flags (0 if zlib) *\/$/;"	m	struct:inflate_state
have	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned have;              \/* number of code lengths in lens[] *\/$/;"	m	struct:inflate_state
havedict	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    int havedict;               \/* true if dictionary provided *\/$/;"	m	struct:inflate_state
head	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    gz_headerp head;            \/* where to save gzip header information *\/$/;"	m	struct:inflate_state
hold	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned long hold;         \/* input bit accumulator *\/$/;"	m	struct:inflate_state
inflate_mode	C++\ege-13.04.02-full\src\lpng\inflate.h	/^} inflate_mode;$/;"	t	typeref:enum:__anon26
inflate_state	C++\ege-13.04.02-full\src\lpng\inflate.h	/^struct inflate_state {$/;"	s
last	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    int last;                   \/* true if processing last block *\/$/;"	m	struct:inflate_state
lenbits	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned lenbits;           \/* index bits for lencode *\/$/;"	m	struct:inflate_state
lencode	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    code const FAR *lencode;    \/* starting table for length\/literal codes *\/$/;"	m	struct:inflate_state
length	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned length;            \/* literal or length of data to copy *\/$/;"	m	struct:inflate_state
lens	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned short lens[320];   \/* temporary storage for code lengths *\/$/;"	m	struct:inflate_state
mode	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    inflate_mode mode;          \/* current inflate mode *\/$/;"	m	struct:inflate_state
ncode	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned ncode;             \/* number of code length code lengths *\/$/;"	m	struct:inflate_state
ndist	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned ndist;             \/* number of distance code lengths *\/$/;"	m	struct:inflate_state
next	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    code FAR *next;             \/* next available space in codes[] *\/$/;"	m	struct:inflate_state
nlen	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned nlen;              \/* number of length code lengths *\/$/;"	m	struct:inflate_state
offset	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned offset;            \/* distance back to copy string from *\/$/;"	m	struct:inflate_state
sane	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    int sane;                   \/* if false, allow invalid distance too far *\/$/;"	m	struct:inflate_state
total	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned long total;        \/* protected copy of output count *\/$/;"	m	struct:inflate_state
was	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned was;               \/* initial length of match *\/$/;"	m	struct:inflate_state
wbits	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned wbits;             \/* log base 2 of requested window size *\/$/;"	m	struct:inflate_state
whave	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned whave;             \/* valid bytes in the window *\/$/;"	m	struct:inflate_state
window	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned char FAR *window;  \/* allocated sliding window, if needed *\/$/;"	m	struct:inflate_state
wnext	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned wnext;             \/* window write index *\/$/;"	m	struct:inflate_state
work	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned short work[288];   \/* work area for code table building *\/$/;"	m	struct:inflate_state
wrap	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    int wrap;                   \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:inflate_state
wsize	C++\ege-13.04.02-full\src\lpng\inflate.h	/^    unsigned wsize;             \/* window size or zero if not using window *\/$/;"	m	struct:inflate_state
MAXBITS	C++\ege-13.04.02-full\src\lpng\inftrees.c	9;"	d	file:
inflate_copyright	C++\ege-13.04.02-full\src\lpng\inftrees.c	/^const char inflate_copyright[] =$/;"	v
inflate_table	C++\ege-13.04.02-full\src\lpng\inftrees.c	/^int ZLIB_INTERNAL inflate_table(type, lens, codes, table, bits, work)$/;"	f
CODES	C++\ege-13.04.02-full\src\lpng\inftrees.h	/^    CODES,$/;"	e	enum:__anon28
DISTS	C++\ege-13.04.02-full\src\lpng\inftrees.h	/^    DISTS$/;"	e	enum:__anon28
ENOUGH	C++\ege-13.04.02-full\src\lpng\inftrees.h	51;"	d
ENOUGH_DISTS	C++\ege-13.04.02-full\src\lpng\inftrees.h	50;"	d
ENOUGH_LENS	C++\ege-13.04.02-full\src\lpng\inftrees.h	49;"	d
LENS	C++\ege-13.04.02-full\src\lpng\inftrees.h	/^    LENS,$/;"	e	enum:__anon28
bits	C++\ege-13.04.02-full\src\lpng\inftrees.h	/^    unsigned char bits;         \/* bits in this part of the code *\/$/;"	m	struct:__anon27
code	C++\ege-13.04.02-full\src\lpng\inftrees.h	/^} code;$/;"	t	typeref:struct:__anon27
codetype	C++\ege-13.04.02-full\src\lpng\inftrees.h	/^} codetype;$/;"	t	typeref:enum:__anon28
op	C++\ege-13.04.02-full\src\lpng\inftrees.h	/^    unsigned char op;           \/* operation, extra bits, table bits *\/$/;"	m	struct:__anon27
val	C++\ege-13.04.02-full\src\lpng\inftrees.h	/^    unsigned short val;         \/* offset in table or code value *\/$/;"	m	struct:__anon27
PNG_FP_DIGIT	C++\ege-13.04.02-full\src\lpng\png.c	900;"	d	file:
PNG_FP_DOT	C++\ege-13.04.02-full\src\lpng\png.c	899;"	d	file:
PNG_FP_E	C++\ege-13.04.02-full\src\lpng\png.c	901;"	d	file:
PNG_FP_SIGN	C++\ege-13.04.02-full\src\lpng\png.c	898;"	d	file:
PNG_FUNCTION	C++\ege-13.04.02-full\src\lpng\png.c	/^PNG_FUNCTION(png_infop,PNGAPI$/;"	f
PNG_FUNCTION	C++\ege-13.04.02-full\src\lpng\png.c	/^PNG_FUNCTION(voidpf \/* PRIVATE *\/,$/;"	f
Your_png_h_is_not_version_1_5_1	C++\ege-13.04.02-full\src\lpng\png.c	/^typedef png_libpng_version_1_5_1 Your_png_h_is_not_version_1_5_1;$/;"	t	file:
png_32bit_exp	C++\ege-13.04.02-full\src\lpng\png.c	/^png_32bit_exp[16] =$/;"	v	file:
png_64bit_product	C++\ege-13.04.02-full\src\lpng\png.c	/^png_64bit_product (long v1, long v2, unsigned long *hi_product,$/;"	f
png_8bit_l2	C++\ege-13.04.02-full\src\lpng\png.c	/^png_8bit_l2[128] =$/;"	v	file:
png_access_version_number	C++\ege-13.04.02-full\src\lpng\png.c	/^png_access_version_number(void)$/;"	f
png_ascii_from_fixed	C++\ege-13.04.02-full\src\lpng\png.c	/^png_ascii_from_fixed(png_structp png_ptr, png_charp ascii, png_size_t size,$/;"	f
png_ascii_from_fp	C++\ege-13.04.02-full\src\lpng\png.c	/^png_ascii_from_fp(png_structp png_ptr, png_charp ascii, png_size_t size,$/;"	f
png_build_16bit_table	C++\ege-13.04.02-full\src\lpng\png.c	/^png_build_16bit_table(png_structp png_ptr, png_uint_16pp *ptable,$/;"	f	file:
png_build_16to8_table	C++\ege-13.04.02-full\src\lpng\png.c	/^png_build_16to8_table(png_structp png_ptr, png_uint_16pp *ptable,$/;"	f	file:
png_build_8bit_table	C++\ege-13.04.02-full\src\lpng\png.c	/^png_build_8bit_table(png_structp png_ptr, png_bytepp ptable,$/;"	f	file:
png_build_gamma_table	C++\ege-13.04.02-full\src\lpng\png.c	/^png_build_gamma_table(png_structp png_ptr, int bit_depth)$/;"	f
png_calculate_crc	C++\ege-13.04.02-full\src\lpng\png.c	/^png_calculate_crc(png_structp png_ptr, png_const_bytep ptr, png_size_t length)$/;"	f
png_check_IHDR	C++\ege-13.04.02-full\src\lpng\png.c	/^png_check_IHDR(png_structp png_ptr,$/;"	f
png_check_cHRM_fixed	C++\ege-13.04.02-full\src\lpng\png.c	/^png_check_cHRM_fixed(png_structp png_ptr,$/;"	f
png_check_fp_number	C++\ege-13.04.02-full\src\lpng\png.c	/^png_check_fp_number(png_const_charp string, png_size_t size, int *statep,$/;"	f
png_check_fp_string	C++\ege-13.04.02-full\src\lpng\png.c	/^png_check_fp_string(png_const_charp string, png_size_t size)$/;"	f
png_convert_size	C++\ege-13.04.02-full\src\lpng\png.c	/^png_convert_size(size_t size)$/;"	f
png_convert_to_rfc1123	C++\ege-13.04.02-full\src\lpng\png.c	/^png_convert_to_rfc1123(png_structp png_ptr, png_const_timep ptime)$/;"	f
png_data_freer	C++\ege-13.04.02-full\src\lpng\png.c	/^png_data_freer(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_destroy_info_struct	C++\ege-13.04.02-full\src\lpng\png.c	/^png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr)$/;"	f
png_exp	C++\ege-13.04.02-full\src\lpng\png.c	/^png_exp(png_fixed_point x)$/;"	f	file:
png_exp16bit	C++\ege-13.04.02-full\src\lpng\png.c	/^png_exp16bit(png_fixed_point lg2)$/;"	f	file:
png_exp8bit	C++\ege-13.04.02-full\src\lpng\png.c	/^png_exp8bit(png_fixed_point lg2)$/;"	f	file:
png_fixed	C++\ege-13.04.02-full\src\lpng\png.c	/^png_fixed(png_structp png_ptr, double fp, png_const_charp text)$/;"	f
png_fp_add	C++\ege-13.04.02-full\src\lpng\png.c	893;"	d	file:
png_fp_set	C++\ege-13.04.02-full\src\lpng\png.c	894;"	d	file:
png_free_data	C++\ege-13.04.02-full\src\lpng\png.c	/^png_free_data(png_structp png_ptr, png_infop info_ptr, png_uint_32 mask,$/;"	f
png_gamma_16bit_correct	C++\ege-13.04.02-full\src\lpng\png.c	/^png_gamma_16bit_correct(unsigned int value, png_fixed_point gamma_val)$/;"	f
png_gamma_8bit_correct	C++\ege-13.04.02-full\src\lpng\png.c	/^png_gamma_8bit_correct(unsigned int value, png_fixed_point gamma_val)$/;"	f
png_gamma_correct	C++\ege-13.04.02-full\src\lpng\png.c	/^png_gamma_correct(png_structp png_ptr, unsigned int value,$/;"	f
png_gamma_significant	C++\ege-13.04.02-full\src\lpng\png.c	/^png_gamma_significant(png_fixed_point gamma_val)$/;"	f
png_get_copyright	C++\ege-13.04.02-full\src\lpng\png.c	/^png_get_copyright(png_const_structp png_ptr)$/;"	f
png_get_header_ver	C++\ege-13.04.02-full\src\lpng\png.c	/^png_get_header_ver(png_const_structp png_ptr)$/;"	f
png_get_header_version	C++\ege-13.04.02-full\src\lpng\png.c	/^png_get_header_version(png_const_structp png_ptr)$/;"	f
png_get_io_ptr	C++\ege-13.04.02-full\src\lpng\png.c	/^png_get_io_ptr(png_structp png_ptr)$/;"	f
png_get_libpng_ver	C++\ege-13.04.02-full\src\lpng\png.c	/^png_get_libpng_ver(png_const_structp png_ptr)$/;"	f
png_handle_as_unknown	C++\ege-13.04.02-full\src\lpng\png.c	/^png_handle_as_unknown(png_structp png_ptr, png_const_bytep chunk_name)$/;"	f
png_info_destroy	C++\ege-13.04.02-full\src\lpng\png.c	/^png_info_destroy(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_info_init_3	C++\ege-13.04.02-full\src\lpng\png.c	/^png_info_init_3(png_infopp ptr_ptr, png_size_t png_info_struct_size)$/;"	f
png_init_io	C++\ege-13.04.02-full\src\lpng\png.c	/^png_init_io(png_structp png_ptr, png_FILE_p fp)$/;"	f
png_log16bit	C++\ege-13.04.02-full\src\lpng\png.c	/^png_log16bit(png_uint_32 x)$/;"	f	file:
png_log8bit	C++\ege-13.04.02-full\src\lpng\png.c	/^png_log8bit(unsigned int x)$/;"	f	file:
png_muldiv	C++\ege-13.04.02-full\src\lpng\png.c	/^png_muldiv(png_fixed_point_p res, png_fixed_point a, png_int_32 times,$/;"	f
png_muldiv_warn	C++\ege-13.04.02-full\src\lpng\png.c	/^png_muldiv_warn(png_structp png_ptr, png_fixed_point a, png_int_32 times,$/;"	f
png_pow10	C++\ege-13.04.02-full\src\lpng\png.c	/^png_pow10(int power)$/;"	f	file:
png_product2	C++\ege-13.04.02-full\src\lpng\png.c	/^png_product2(png_fixed_point a, png_fixed_point b)$/;"	f	file:
png_reciprocal	C++\ege-13.04.02-full\src\lpng\png.c	/^png_reciprocal(png_fixed_point a)$/;"	f
png_reciprocal2	C++\ege-13.04.02-full\src\lpng\png.c	/^png_reciprocal2(png_fixed_point a, png_fixed_point b)$/;"	f
png_reset_crc	C++\ege-13.04.02-full\src\lpng\png.c	/^png_reset_crc(png_structp png_ptr)$/;"	f
png_reset_zstream	C++\ege-13.04.02-full\src\lpng\png.c	/^png_reset_zstream(png_structp png_ptr)$/;"	f
png_set_sig_bytes	C++\ege-13.04.02-full\src\lpng\png.c	/^png_set_sig_bytes(png_structp png_ptr, int num_bytes)$/;"	f
png_sig_cmp	C++\ege-13.04.02-full\src\lpng\png.c	/^png_sig_cmp(png_const_bytep sig, png_size_t start, png_size_t num_to_check)$/;"	f
png_zfree	C++\ege-13.04.02-full\src\lpng\png.c	/^png_zfree(voidpf png_ptr, voidpf ptr)$/;"	f
PNG_ALL_FILTERS	C++\ege-13.04.02-full\src\lpng\png.h	1315;"	d
PNG_ALL_MNG_FEATURES	C++\ege-13.04.02-full\src\lpng\png.h	879;"	d
PNG_BACKGROUND_GAMMA_FILE	C++\ege-13.04.02-full\src\lpng\png.h	1169;"	d
PNG_BACKGROUND_GAMMA_SCREEN	C++\ege-13.04.02-full\src\lpng\png.h	1168;"	d
PNG_BACKGROUND_GAMMA_UNIQUE	C++\ege-13.04.02-full\src\lpng\png.h	1170;"	d
PNG_BACKGROUND_GAMMA_UNKNOWN	C++\ege-13.04.02-full\src\lpng\png.h	1167;"	d
PNG_CALLBACK	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CALLBACK(int, *png_user_chunk_ptr, (png_structp, $/;"	t
PNG_CALLBACK	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CALLBACK(png_voidp, *png_malloc_ptr, (png_structp, $/;"	t
PNG_CALLBACK	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CALLBACK(void, *png_error_ptr, (png_structp, png_const_charp), );$/;"	t
PNG_CALLBACK	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CALLBACK(void, *png_flush_ptr, (png_structp), );$/;"	t
PNG_CALLBACK	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CALLBACK(void, *png_free_ptr, (png_structp, png_voidp), );$/;"	t
PNG_CALLBACK	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CALLBACK(void, *png_progressive_end_ptr,$/;"	t
PNG_CALLBACK	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CALLBACK(void, *png_progressive_info_ptr, $/;"	t
PNG_CALLBACK	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CALLBACK(void, *png_progressive_row_ptr,$/;"	t
PNG_CALLBACK	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CALLBACK(void, *png_read_status_ptr, (png_structp, png_uint_32, $/;"	t
PNG_CALLBACK	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CALLBACK(void, *png_rw_ptr, (png_structp, png_bytep, png_size_t), );$/;"	t
PNG_CALLBACK	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CALLBACK(void, *png_unknown_chunk_ptr, (png_structp), );$/;"	t
PNG_CALLBACK	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CALLBACK(void, *png_user_transform_ptr,$/;"	t
PNG_CALLBACK	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CALLBACK(void, *png_write_status_ptr, (png_structp, png_uint_32, $/;"	t
PNG_COLOR_MASK_ALPHA	C++\ege-13.04.02-full\src\lpng\png.h	690;"	d
PNG_COLOR_MASK_COLOR	C++\ege-13.04.02-full\src\lpng\png.h	689;"	d
PNG_COLOR_MASK_PALETTE	C++\ege-13.04.02-full\src\lpng\png.h	688;"	d
PNG_COLOR_TYPE_GA	C++\ege-13.04.02-full\src\lpng\png.h	700;"	d
PNG_COLOR_TYPE_GRAY	C++\ege-13.04.02-full\src\lpng\png.h	693;"	d
PNG_COLOR_TYPE_GRAY_ALPHA	C++\ege-13.04.02-full\src\lpng\png.h	697;"	d
PNG_COLOR_TYPE_PALETTE	C++\ege-13.04.02-full\src\lpng\png.h	694;"	d
PNG_COLOR_TYPE_RGB	C++\ege-13.04.02-full\src\lpng\png.h	695;"	d
PNG_COLOR_TYPE_RGBA	C++\ege-13.04.02-full\src\lpng\png.h	699;"	d
PNG_COLOR_TYPE_RGB_ALPHA	C++\ege-13.04.02-full\src\lpng\png.h	696;"	d
PNG_COL_FROM_PASS_COL	C++\ege-13.04.02-full\src\lpng\png.h	2154;"	d
PNG_COL_IN_INTERLACE_PASS	C++\ege-13.04.02-full\src\lpng\png.h	2169;"	d
PNG_COMPRESSION_TYPE_BASE	C++\ege-13.04.02-full\src\lpng\png.h	703;"	d
PNG_COMPRESSION_TYPE_DEFAULT	C++\ege-13.04.02-full\src\lpng\png.h	704;"	d
PNG_CRC_DEFAULT	C++\ege-13.04.02-full\src\lpng\png.h	1283;"	d
PNG_CRC_ERROR_QUIT	C++\ege-13.04.02-full\src\lpng\png.h	1284;"	d
PNG_CRC_NO_CHANGE	C++\ege-13.04.02-full\src\lpng\png.h	1288;"	d
PNG_CRC_QUIET_USE	C++\ege-13.04.02-full\src\lpng\png.h	1287;"	d
PNG_CRC_WARN_DISCARD	C++\ege-13.04.02-full\src\lpng\png.h	1285;"	d
PNG_CRC_WARN_USE	C++\ege-13.04.02-full\src\lpng\png.h	1286;"	d
PNG_DESTROY_WILL_FREE_DATA	C++\ege-13.04.02-full\src\lpng\png.h	1563;"	d
PNG_EQUATION_ARBITRARY	C++\ege-13.04.02-full\src\lpng\png.h	724;"	d
PNG_EQUATION_BASE_E	C++\ege-13.04.02-full\src\lpng\png.h	723;"	d
PNG_EQUATION_HYPERBOLIC	C++\ege-13.04.02-full\src\lpng\png.h	725;"	d
PNG_EQUATION_LAST	C++\ege-13.04.02-full\src\lpng\png.h	726;"	d
PNG_EQUATION_LINEAR	C++\ege-13.04.02-full\src\lpng\png.h	722;"	d
PNG_FILLER_AFTER	C++\ege-13.04.02-full\src\lpng\png.h	1112;"	d
PNG_FILLER_BEFORE	C++\ege-13.04.02-full\src\lpng\png.h	1111;"	d
PNG_FILTER_AVG	C++\ege-13.04.02-full\src\lpng\png.h	1313;"	d
PNG_FILTER_HEURISTIC_DEFAULT	C++\ege-13.04.02-full\src\lpng\png.h	1369;"	d
PNG_FILTER_HEURISTIC_LAST	C++\ege-13.04.02-full\src\lpng\png.h	1372;"	d
PNG_FILTER_HEURISTIC_UNWEIGHTED	C++\ege-13.04.02-full\src\lpng\png.h	1370;"	d
PNG_FILTER_HEURISTIC_WEIGHTED	C++\ege-13.04.02-full\src\lpng\png.h	1371;"	d
PNG_FILTER_NONE	C++\ege-13.04.02-full\src\lpng\png.h	1310;"	d
PNG_FILTER_PAETH	C++\ege-13.04.02-full\src\lpng\png.h	1314;"	d
PNG_FILTER_SUB	C++\ege-13.04.02-full\src\lpng\png.h	1311;"	d
PNG_FILTER_TYPE_BASE	C++\ege-13.04.02-full\src\lpng\png.h	707;"	d
PNG_FILTER_TYPE_DEFAULT	C++\ege-13.04.02-full\src\lpng\png.h	709;"	d
PNG_FILTER_UP	C++\ege-13.04.02-full\src\lpng\png.h	1312;"	d
PNG_FILTER_VALUE_AVG	C++\ege-13.04.02-full\src\lpng\png.h	1324;"	d
PNG_FILTER_VALUE_LAST	C++\ege-13.04.02-full\src\lpng\png.h	1326;"	d
PNG_FILTER_VALUE_NONE	C++\ege-13.04.02-full\src\lpng\png.h	1321;"	d
PNG_FILTER_VALUE_PAETH	C++\ege-13.04.02-full\src\lpng\png.h	1325;"	d
PNG_FILTER_VALUE_SUB	C++\ege-13.04.02-full\src\lpng\png.h	1322;"	d
PNG_FILTER_VALUE_UP	C++\ege-13.04.02-full\src\lpng\png.h	1323;"	d
PNG_FLAG_MNG_EMPTY_PLTE	C++\ege-13.04.02-full\src\lpng\png.h	877;"	d
PNG_FLAG_MNG_FILTER_64	C++\ege-13.04.02-full\src\lpng\png.h	878;"	d
PNG_FP_1	C++\ege-13.04.02-full\src\lpng\png.h	683;"	d
PNG_FP_HALF	C++\ege-13.04.02-full\src\lpng\png.h	684;"	d
PNG_FREE_ALL	C++\ege-13.04.02-full\src\lpng\png.h	1578;"	d
PNG_FREE_HIST	C++\ege-13.04.02-full\src\lpng\png.h	1567;"	d
PNG_FREE_ICCP	C++\ege-13.04.02-full\src\lpng\png.h	1568;"	d
PNG_FREE_LIST	C++\ege-13.04.02-full\src\lpng\png.h	1574;"	d
PNG_FREE_MUL	C++\ege-13.04.02-full\src\lpng\png.h	1579;"	d
PNG_FREE_PCAL	C++\ege-13.04.02-full\src\lpng\png.h	1571;"	d
PNG_FREE_PLTE	C++\ege-13.04.02-full\src\lpng\png.h	1575;"	d
PNG_FREE_ROWS	C++\ege-13.04.02-full\src\lpng\png.h	1570;"	d
PNG_FREE_SCAL	C++\ege-13.04.02-full\src\lpng\png.h	1572;"	d
PNG_FREE_SPLT	C++\ege-13.04.02-full\src\lpng\png.h	1569;"	d
PNG_FREE_TEXT	C++\ege-13.04.02-full\src\lpng\png.h	1577;"	d
PNG_FREE_TRNS	C++\ege-13.04.02-full\src\lpng\png.h	1576;"	d
PNG_FREE_UNKN	C++\ege-13.04.02-full\src\lpng\png.h	1573;"	d
PNG_FUNCTION	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_FUNCTION(void, (PNGCAPI *png_longjmp_ptr), PNGARG((jmp_buf, int)), $/;"	t
PNG_GAMMA_THRESHOLD	C++\ege-13.04.02-full\src\lpng\png.h	1192;"	d
PNG_H	C++\ege-13.04.02-full\src\lpng\png.h	346;"	d
PNG_HANDLE_CHUNK_ALWAYS	C++\ege-13.04.02-full\src\lpng\png.h	2036;"	d
PNG_HANDLE_CHUNK_AS_DEFAULT	C++\ege-13.04.02-full\src\lpng\png.h	2033;"	d
PNG_HANDLE_CHUNK_IF_SAFE	C++\ege-13.04.02-full\src\lpng\png.h	2035;"	d
PNG_HANDLE_CHUNK_NEVER	C++\ege-13.04.02-full\src\lpng\png.h	2034;"	d
PNG_HEADER_VERSION_STRING	C++\ege-13.04.02-full\src\lpng\png.h	360;"	d
PNG_INFO_IDAT	C++\ege-13.04.02-full\src\lpng\png.h	772;"	d
PNG_INFO_PLTE	C++\ege-13.04.02-full\src\lpng\png.h	760;"	d
PNG_INFO_bKGD	C++\ege-13.04.02-full\src\lpng\png.h	762;"	d
PNG_INFO_cHRM	C++\ege-13.04.02-full\src\lpng\png.h	759;"	d
PNG_INFO_gAMA	C++\ege-13.04.02-full\src\lpng\png.h	757;"	d
PNG_INFO_hIST	C++\ege-13.04.02-full\src\lpng\png.h	763;"	d
PNG_INFO_iCCP	C++\ege-13.04.02-full\src\lpng\png.h	769;"	d
PNG_INFO_oFFs	C++\ege-13.04.02-full\src\lpng\png.h	765;"	d
PNG_INFO_pCAL	C++\ege-13.04.02-full\src\lpng\png.h	767;"	d
PNG_INFO_pHYs	C++\ege-13.04.02-full\src\lpng\png.h	764;"	d
PNG_INFO_sBIT	C++\ege-13.04.02-full\src\lpng\png.h	758;"	d
PNG_INFO_sCAL	C++\ege-13.04.02-full\src\lpng\png.h	771;"	d
PNG_INFO_sPLT	C++\ege-13.04.02-full\src\lpng\png.h	770;"	d
PNG_INFO_sRGB	C++\ege-13.04.02-full\src\lpng\png.h	768;"	d
PNG_INFO_tIME	C++\ege-13.04.02-full\src\lpng\png.h	766;"	d
PNG_INFO_tRNS	C++\ege-13.04.02-full\src\lpng\png.h	761;"	d
PNG_INTERLACE_ADAM7	C++\ege-13.04.02-full\src\lpng\png.h	713;"	d
PNG_INTERLACE_ADAM7_PASSES	C++\ege-13.04.02-full\src\lpng\png.h	2123;"	d
PNG_INTERLACE_LAST	C++\ege-13.04.02-full\src\lpng\png.h	714;"	d
PNG_INTERLACE_NONE	C++\ege-13.04.02-full\src\lpng\png.h	712;"	d
PNG_INTRAPIXEL_DIFFERENCING	C++\ege-13.04.02-full\src\lpng\png.h	708;"	d
PNG_IO_CHUNK_CRC	C++\ege-13.04.02-full\src\lpng\png.h	2114;"	d
PNG_IO_CHUNK_DATA	C++\ege-13.04.02-full\src\lpng\png.h	2113;"	d
PNG_IO_CHUNK_HDR	C++\ege-13.04.02-full\src\lpng\png.h	2112;"	d
PNG_IO_MASK_LOC	C++\ege-13.04.02-full\src\lpng\png.h	2116;"	d
PNG_IO_MASK_OP	C++\ege-13.04.02-full\src\lpng\png.h	2115;"	d
PNG_IO_NONE	C++\ege-13.04.02-full\src\lpng\png.h	2108;"	d
PNG_IO_READING	C++\ege-13.04.02-full\src\lpng\png.h	2109;"	d
PNG_IO_SIGNATURE	C++\ege-13.04.02-full\src\lpng\png.h	2111;"	d
PNG_IO_WRITING	C++\ege-13.04.02-full\src\lpng\png.h	2110;"	d
PNG_ITXT_COMPRESSION_NONE	C++\ege-13.04.02-full\src\lpng\png.h	625;"	d
PNG_ITXT_COMPRESSION_zTXt	C++\ege-13.04.02-full\src\lpng\png.h	626;"	d
PNG_KEYWORD_MAX_LENGTH	C++\ege-13.04.02-full\src\lpng\png.h	747;"	d
PNG_LIBPNG_BUILD_ALPHA	C++\ege-13.04.02-full\src\lpng\png.h	377;"	d
PNG_LIBPNG_BUILD_BASE_TYPE	C++\ege-13.04.02-full\src\lpng\png.h	391;"	d
PNG_LIBPNG_BUILD_BETA	C++\ege-13.04.02-full\src\lpng\png.h	378;"	d
PNG_LIBPNG_BUILD_PATCH	C++\ege-13.04.02-full\src\lpng\png.h	384;"	d
PNG_LIBPNG_BUILD_PRIVATE	C++\ege-13.04.02-full\src\lpng\png.h	386;"	d
PNG_LIBPNG_BUILD_RC	C++\ege-13.04.02-full\src\lpng\png.h	379;"	d
PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK	C++\ege-13.04.02-full\src\lpng\png.h	381;"	d
PNG_LIBPNG_BUILD_SPECIAL	C++\ege-13.04.02-full\src\lpng\png.h	388;"	d
PNG_LIBPNG_BUILD_STABLE	C++\ege-13.04.02-full\src\lpng\png.h	380;"	d
PNG_LIBPNG_BUILD_TYPE	C++\ege-13.04.02-full\src\lpng\png.h	444;"	d
PNG_LIBPNG_BUILD_TYPE	C++\ege-13.04.02-full\src\lpng\png.h	448;"	d
PNG_LIBPNG_BUILD_TYPE	C++\ege-13.04.02-full\src\lpng\png.h	451;"	d
PNG_LIBPNG_VER	C++\ege-13.04.02-full\src\lpng\png.h	399;"	d
PNG_LIBPNG_VER_BUILD	C++\ege-13.04.02-full\src\lpng\png.h	374;"	d
PNG_LIBPNG_VER_DLLNUM	C++\ege-13.04.02-full\src\lpng\png.h	364;"	d
PNG_LIBPNG_VER_MAJOR	C++\ege-13.04.02-full\src\lpng\png.h	367;"	d
PNG_LIBPNG_VER_MINOR	C++\ege-13.04.02-full\src\lpng\png.h	368;"	d
PNG_LIBPNG_VER_RELEASE	C++\ege-13.04.02-full\src\lpng\png.h	369;"	d
PNG_LIBPNG_VER_SONUM	C++\ege-13.04.02-full\src\lpng\png.h	363;"	d
PNG_LIBPNG_VER_STRING	C++\ege-13.04.02-full\src\lpng\png.h	359;"	d
PNG_MAX_PALETTE_LENGTH	C++\ege-13.04.02-full\src\lpng\png.h	750;"	d
PNG_NO_FILTERS	C++\ege-13.04.02-full\src\lpng\png.h	1309;"	d
PNG_OFFSET_LAST	C++\ege-13.04.02-full\src\lpng\png.h	719;"	d
PNG_OFFSET_MICROMETER	C++\ege-13.04.02-full\src\lpng\png.h	718;"	d
PNG_OFFSET_PIXEL	C++\ege-13.04.02-full\src\lpng\png.h	717;"	d
PNG_PASS_COLS	C++\ege-13.04.02-full\src\lpng\png.h	2146;"	d
PNG_PASS_COL_SHIFT	C++\ege-13.04.02-full\src\lpng\png.h	2137;"	d
PNG_PASS_MASK	C++\ege-13.04.02-full\src\lpng\png.h	2163;"	d
PNG_PASS_ROWS	C++\ege-13.04.02-full\src\lpng\png.h	2144;"	d
PNG_PASS_ROW_SHIFT	C++\ege-13.04.02-full\src\lpng\png.h	2136;"	d
PNG_PASS_START_COL	C++\ege-13.04.02-full\src\lpng\png.h	2130;"	d
PNG_PASS_START_ROW	C++\ege-13.04.02-full\src\lpng\png.h	2129;"	d
PNG_RESOLUTION_LAST	C++\ege-13.04.02-full\src\lpng\png.h	737;"	d
PNG_RESOLUTION_METER	C++\ege-13.04.02-full\src\lpng\png.h	736;"	d
PNG_RESOLUTION_UNKNOWN	C++\ege-13.04.02-full\src\lpng\png.h	735;"	d
PNG_ROW_FROM_PASS_ROW	C++\ege-13.04.02-full\src\lpng\png.h	2152;"	d
PNG_ROW_IN_INTERLACE_PASS	C++\ege-13.04.02-full\src\lpng\png.h	2167;"	d
PNG_SCALE_LAST	C++\ege-13.04.02-full\src\lpng\png.h	732;"	d
PNG_SCALE_METER	C++\ege-13.04.02-full\src\lpng\png.h	730;"	d
PNG_SCALE_RADIAN	C++\ege-13.04.02-full\src\lpng\png.h	731;"	d
PNG_SCALE_UNKNOWN	C++\ege-13.04.02-full\src\lpng\png.h	729;"	d
PNG_SET_WILL_FREE_DATA	C++\ege-13.04.02-full\src\lpng\png.h	1564;"	d
PNG_SIZE_MAX	C++\ege-13.04.02-full\src\lpng\png.h	678;"	d
PNG_TEXT_COMPRESSION_LAST	C++\ege-13.04.02-full\src\lpng\png.h	627;"	d
PNG_TEXT_COMPRESSION_NONE	C++\ege-13.04.02-full\src\lpng\png.h	623;"	d
PNG_TEXT_COMPRESSION_NONE_WR	C++\ege-13.04.02-full\src\lpng\png.h	621;"	d
PNG_TEXT_COMPRESSION_zTXt	C++\ege-13.04.02-full\src\lpng\png.h	624;"	d
PNG_TEXT_COMPRESSION_zTXt_WR	C++\ege-13.04.02-full\src\lpng\png.h	622;"	d
PNG_TRANSFORM_BGR	C++\ege-13.04.02-full\src\lpng\png.h	865;"	d
PNG_TRANSFORM_EXPAND	C++\ege-13.04.02-full\src\lpng\png.h	862;"	d
PNG_TRANSFORM_GRAY_TO_RGB	C++\ege-13.04.02-full\src\lpng\png.h	874;"	d
PNG_TRANSFORM_IDENTITY	C++\ege-13.04.02-full\src\lpng\png.h	857;"	d
PNG_TRANSFORM_INVERT_ALPHA	C++\ege-13.04.02-full\src\lpng\png.h	868;"	d
PNG_TRANSFORM_INVERT_MONO	C++\ege-13.04.02-full\src\lpng\png.h	863;"	d
PNG_TRANSFORM_PACKING	C++\ege-13.04.02-full\src\lpng\png.h	860;"	d
PNG_TRANSFORM_PACKSWAP	C++\ege-13.04.02-full\src\lpng\png.h	861;"	d
PNG_TRANSFORM_SHIFT	C++\ege-13.04.02-full\src\lpng\png.h	864;"	d
PNG_TRANSFORM_STRIP_16	C++\ege-13.04.02-full\src\lpng\png.h	858;"	d
PNG_TRANSFORM_STRIP_ALPHA	C++\ege-13.04.02-full\src\lpng\png.h	859;"	d
PNG_TRANSFORM_STRIP_FILLER	C++\ege-13.04.02-full\src\lpng\png.h	869;"	d
PNG_TRANSFORM_STRIP_FILLER_AFTER	C++\ege-13.04.02-full\src\lpng\png.h	872;"	d
PNG_TRANSFORM_STRIP_FILLER_BEFORE	C++\ege-13.04.02-full\src\lpng\png.h	871;"	d
PNG_TRANSFORM_SWAP_ALPHA	C++\ege-13.04.02-full\src\lpng\png.h	866;"	d
PNG_TRANSFORM_SWAP_ENDIAN	C++\ege-13.04.02-full\src\lpng\png.h	867;"	d
PNG_UINT_31_MAX	C++\ege-13.04.02-full\src\lpng\png.h	676;"	d
PNG_UINT_32_MAX	C++\ege-13.04.02-full\src\lpng\png.h	677;"	d
PNG_USER_WILL_FREE_DATA	C++\ege-13.04.02-full\src\lpng\png.h	1565;"	d
PNG_sRGB_INTENT_ABSOLUTE	C++\ege-13.04.02-full\src\lpng\png.h	743;"	d
PNG_sRGB_INTENT_LAST	C++\ege-13.04.02-full\src\lpng\png.h	744;"	d
PNG_sRGB_INTENT_PERCEPTUAL	C++\ege-13.04.02-full\src\lpng\png.h	740;"	d
PNG_sRGB_INTENT_RELATIVE	C++\ege-13.04.02-full\src\lpng\png.h	741;"	d
PNG_sRGB_INTENT_SATURATION	C++\ege-13.04.02-full\src\lpng\png.h	742;"	d
alpha	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte alpha; \/* for alpha channel files *\/$/;"	m	struct:png_color_8_struct
alpha	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_uint_16 alpha;$/;"	m	struct:png_sPLT_entry_struct
bit_depth	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte bit_depth;   \/* bit depth of row *\/$/;"	m	struct:png_row_info_struct
blue	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte blue;$/;"	m	struct:png_color_8_struct
blue	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte blue;$/;"	m	struct:png_color_struct
blue	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_uint_16 blue;$/;"	m	struct:png_color_16_struct
blue	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_uint_16 blue;$/;"	m	struct:png_sPLT_entry_struct
channels	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte channels;    \/* number of channels (1, 2, 3, or 4) *\/$/;"	m	struct:png_row_info_struct
color_type	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte color_type;  \/* color type of row *\/$/;"	m	struct:png_row_info_struct
compression	C++\ege-13.04.02-full\src\lpng\png.h	/^   int  compression;       \/* compression value:$/;"	m	struct:png_text_struct
data	C++\ege-13.04.02-full\src\lpng\png.h	/^    png_byte *data;$/;"	m	struct:png_unknown_chunk_t
day	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte day;     \/* day of month, 1 - 31 *\/$/;"	m	struct:png_time_struct
depth	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte depth;           \/* depth of palette samples *\/$/;"	m	struct:png_sPLT_struct
entries	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_sPLT_entryp entries;  \/* palette entries *\/$/;"	m	struct:png_sPLT_struct
frequency	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_uint_16 frequency;$/;"	m	struct:png_sPLT_entry_struct
gray	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte gray;  \/* for use in grayscale files *\/$/;"	m	struct:png_color_8_struct
gray	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_uint_16 gray;  \/* for use in grayscale files *\/$/;"	m	struct:png_color_16_struct
green	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte green;$/;"	m	struct:png_color_8_struct
green	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte green;$/;"	m	struct:png_color_struct
green	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_uint_16 green;$/;"	m	struct:png_color_16_struct
green	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_uint_16 green;$/;"	m	struct:png_sPLT_entry_struct
hour	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte hour;    \/* hour of day, 0 - 23 *\/$/;"	m	struct:png_time_struct
index	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte index;    \/* used for palette files *\/$/;"	m	struct:png_color_16_struct
itxt_length	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_size_t itxt_length; \/* length of the itxt string *\/$/;"	m	struct:png_text_struct
key	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_charp key;          \/* keyword, 1-79 character description of "text" *\/$/;"	m	struct:png_text_struct
lang	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_charp lang;         \/* language code, 0-79 characters$/;"	m	struct:png_text_struct
lang_key	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_charp lang_key;     \/* keyword translated UTF-8 string, 0 or more$/;"	m	struct:png_text_struct
location	C++\ege-13.04.02-full\src\lpng\png.h	/^    png_byte location; \/* mode of operation at read time *\/$/;"	m	struct:png_unknown_chunk_t
minute	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte minute;  \/* minute of hour, 0 - 59 *\/$/;"	m	struct:png_time_struct
month	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte month;   \/* month of year, 1 - 12 *\/$/;"	m	struct:png_time_struct
name	C++\ege-13.04.02-full\src\lpng\png.h	/^    png_byte name[5];$/;"	m	struct:png_unknown_chunk_t
name	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_charp name;           \/* palette name *\/$/;"	m	struct:png_sPLT_struct
nentries	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_int_32 nentries;      \/* number of palette entries *\/$/;"	m	struct:png_sPLT_struct
pixel_depth	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte pixel_depth; \/* bits per pixel (depth * channels) *\/$/;"	m	struct:png_row_info_struct
png_benign_error	C++\ege-13.04.02-full\src\lpng\png.h	1613;"	d
png_benign_error	C++\ege-13.04.02-full\src\lpng\png.h	1626;"	d
png_benign_error	C++\ege-13.04.02-full\src\lpng\png.h	1629;"	d
png_check_sig	C++\ege-13.04.02-full\src\lpng\png.h	941;"	d
png_chunk_benign_error	C++\ege-13.04.02-full\src\lpng\png.h	1618;"	d
png_chunk_benign_error	C++\ege-13.04.02-full\src\lpng\png.h	1627;"	d
png_chunk_benign_error	C++\ege-13.04.02-full\src\lpng\png.h	1630;"	d
png_color	C++\ege-13.04.02-full\src\lpng\png.h	/^} png_color;$/;"	t	typeref:struct:png_color_struct
png_color_16	C++\ege-13.04.02-full\src\lpng\png.h	/^} png_color_16;$/;"	t	typeref:struct:png_color_16_struct
png_color_16_struct	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef struct png_color_16_struct$/;"	s
png_color_16p	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_color_16 FAR * png_color_16p;$/;"	t
png_color_16pp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_color_16 FAR * FAR * png_color_16pp;$/;"	t
png_color_8	C++\ege-13.04.02-full\src\lpng\png.h	/^} png_color_8;$/;"	t	typeref:struct:png_color_8_struct
png_color_8_struct	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef struct png_color_8_struct$/;"	s
png_color_8p	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_color_8 FAR * png_color_8p;$/;"	t
png_color_8pp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_color_8 FAR * FAR * png_color_8pp;$/;"	t
png_color_struct	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef struct png_color_struct$/;"	s
png_colorp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_color FAR * png_colorp;$/;"	t
png_colorpp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_color FAR * FAR * png_colorpp;$/;"	t
png_composite	C++\ege-13.04.02-full\src\lpng\png.h	2187;"	d
png_composite	C++\ege-13.04.02-full\src\lpng\png.h	2203;"	d
png_composite_16	C++\ege-13.04.02-full\src\lpng\png.h	2194;"	d
png_composite_16	C++\ege-13.04.02-full\src\lpng\png.h	2208;"	d
png_const_color_16p	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CONST png_color_16 FAR * png_const_color_16p;$/;"	t
png_const_color_8p	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CONST png_color_8 FAR * png_const_color_8p;$/;"	t
png_const_colorp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CONST png_color FAR * png_const_colorp;$/;"	t
png_const_infop	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CONST png_info FAR * png_const_infop;$/;"	t
png_const_sPLT_entryp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CONST png_sPLT_entry FAR * png_const_sPLT_entryp;$/;"	t
png_const_sPLT_tp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CONST png_sPLT_t FAR * png_const_sPLT_tp;$/;"	t
png_const_structp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CONST png_struct FAR * png_const_structp;$/;"	t
png_const_textp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CONST png_text FAR * png_const_textp;$/;"	t
png_const_timep	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CONST png_time FAR * png_const_timep;$/;"	t
png_const_unknown_chunkp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef PNG_CONST png_unknown_chunk FAR * png_const_unknown_chunkp;$/;"	t
png_get_int_32	C++\ege-13.04.02-full\src\lpng\png.h	2260;"	d
png_get_uint_16	C++\ege-13.04.02-full\src\lpng\png.h	2255;"	d
png_get_uint_32	C++\ege-13.04.02-full\src\lpng\png.h	2246;"	d
png_info	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef struct png_info_def png_info;$/;"	t	typeref:struct:png_info_def
png_infop	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_info FAR * png_infop;$/;"	t
png_infopp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_info FAR * FAR * png_infopp;$/;"	t
png_jmpbuf	C++\ege-13.04.02-full\src\lpng\png.h	974;"	d
png_jmpbuf	C++\ege-13.04.02-full\src\lpng\png.h	977;"	d
png_libpng_ver	C++\ege-13.04.02-full\src\lpng\png.h	465;"	d
png_libpng_version_1_5_1	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef char* png_libpng_version_1_5_1;$/;"	t
png_row_info	C++\ege-13.04.02-full\src\lpng\png.h	/^} png_row_info;$/;"	t	typeref:struct:png_row_info_struct
png_row_info_struct	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef struct png_row_info_struct$/;"	s
png_row_infop	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_row_info FAR * png_row_infop;$/;"	t
png_row_infopp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_row_info FAR * FAR * png_row_infopp;$/;"	t
png_sPLT_entry	C++\ege-13.04.02-full\src\lpng\png.h	/^} png_sPLT_entry;$/;"	t	typeref:struct:png_sPLT_entry_struct
png_sPLT_entry_struct	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef struct png_sPLT_entry_struct$/;"	s
png_sPLT_entryp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_sPLT_entry FAR * png_sPLT_entryp;$/;"	t
png_sPLT_entrypp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_sPLT_entry FAR * FAR * png_sPLT_entrypp;$/;"	t
png_sPLT_struct	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef struct png_sPLT_struct$/;"	s
png_sPLT_t	C++\ege-13.04.02-full\src\lpng\png.h	/^} png_sPLT_t;$/;"	t	typeref:struct:png_sPLT_struct
png_sPLT_tp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_sPLT_t FAR * png_sPLT_tp;$/;"	t
png_sPLT_tpp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_sPLT_t FAR * FAR * png_sPLT_tpp;$/;"	t
png_struct	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef struct png_struct_def png_struct;$/;"	t	typeref:struct:png_struct_def
png_structp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_struct FAR * png_structp;$/;"	t
png_structpp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_struct FAR * FAR * png_structpp;$/;"	t
png_text	C++\ege-13.04.02-full\src\lpng\png.h	/^} png_text;$/;"	t	typeref:struct:png_text_struct
png_text_struct	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef struct png_text_struct$/;"	s
png_textp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_text FAR * png_textp;$/;"	t
png_textpp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_text FAR * FAR * png_textpp;$/;"	t
png_time	C++\ege-13.04.02-full\src\lpng\png.h	/^} png_time;$/;"	t	typeref:struct:png_time_struct
png_time_struct	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef struct png_time_struct$/;"	s
png_timep	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_time FAR * png_timep;$/;"	t
png_timepp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_time FAR * FAR * png_timepp;$/;"	t
png_unknown_chunk	C++\ege-13.04.02-full\src\lpng\png.h	/^png_unknown_chunk;$/;"	t	typeref:struct:png_unknown_chunk_t
png_unknown_chunk_t	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef struct png_unknown_chunk_t$/;"	s
png_unknown_chunkp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_unknown_chunk FAR * png_unknown_chunkp;$/;"	t
png_unknown_chunkpp	C++\ege-13.04.02-full\src\lpng\png.h	/^typedef png_unknown_chunk FAR * FAR * png_unknown_chunkpp;$/;"	t
red	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte red;   \/* for use in red green blue files *\/$/;"	m	struct:png_color_8_struct
red	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte red;$/;"	m	struct:png_color_struct
red	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_uint_16 red;   \/* for use in red green blue files *\/$/;"	m	struct:png_color_16_struct
red	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_uint_16 red;$/;"	m	struct:png_sPLT_entry_struct
rowbytes	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_size_t rowbytes;  \/* number of bytes in row *\/$/;"	m	struct:png_row_info_struct
second	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_byte second;  \/* second of minute, 0 - 60 (for leap seconds) *\/$/;"	m	struct:png_time_struct
size	C++\ege-13.04.02-full\src\lpng\png.h	/^    png_size_t size;$/;"	m	struct:png_unknown_chunk_t
text	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_charp text;         \/* comment, may be an empty string (ie "")$/;"	m	struct:png_text_struct
text_length	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_size_t text_length; \/* length of the text string *\/$/;"	m	struct:png_text_struct
width	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_uint_32 width;    \/* width of row *\/$/;"	m	struct:png_row_info_struct
year	C++\ege-13.04.02-full\src\lpng\png.h	/^   png_uint_16 year; \/* full year, as in, 1995 *\/$/;"	m	struct:png_time_struct
FAR	C++\ege-13.04.02-full\src\lpng\pngconf.h	530;"	d
FAR	C++\ege-13.04.02-full\src\lpng\pngconf.h	559;"	d
FARDATA	C++\ege-13.04.02-full\src\lpng\pngconf.h	552;"	d
FARDATA	C++\ege-13.04.02-full\src\lpng\pngconf.h	564;"	d
LDATA	C++\ege-13.04.02-full\src\lpng\pngconf.h	521;"	d
LDATA	C++\ege-13.04.02-full\src\lpng\pngconf.h	523;"	d
PNGAPI	C++\ege-13.04.02-full\src\lpng\pngconf.h	201;"	d
PNGAPI	C++\ege-13.04.02-full\src\lpng\pngconf.h	212;"	d
PNGAPI	C++\ege-13.04.02-full\src\lpng\pngconf.h	261;"	d
PNGARG	C++\ege-13.04.02-full\src\lpng\pngconf.h	83;"	d
PNGARG	C++\ege-13.04.02-full\src\lpng\pngconf.h	87;"	d
PNGARG	C++\ege-13.04.02-full\src\lpng\pngconf.h	89;"	d
PNGCAPI	C++\ege-13.04.02-full\src\lpng\pngconf.h	195;"	d
PNGCAPI	C++\ege-13.04.02-full\src\lpng\pngconf.h	199;"	d
PNGCAPI	C++\ege-13.04.02-full\src\lpng\pngconf.h	209;"	d
PNGCAPI	C++\ege-13.04.02-full\src\lpng\pngconf.h	255;"	d
PNGCBAPI	C++\ege-13.04.02-full\src\lpng\pngconf.h	258;"	d
PNGCONF_H	C++\ege-13.04.02-full\src\lpng\pngconf.h	23;"	d
PNG_ALLOCATED	C++\ege-13.04.02-full\src\lpng\pngconf.h	366;"	d
PNG_ALLOCATED	C++\ege-13.04.02-full\src\lpng\pngconf.h	403;"	d
PNG_ALLOCATED	C++\ege-13.04.02-full\src\lpng\pngconf.h	441;"	d
PNG_CALLBACK	C++\ege-13.04.02-full\src\lpng\pngconf.h	332;"	d
PNG_CONST	C++\ege-13.04.02-full\src\lpng\pngconf.h	475;"	d
PNG_DEPRECATED	C++\ege-13.04.02-full\src\lpng\pngconf.h	375;"	d
PNG_DEPRECATED	C++\ege-13.04.02-full\src\lpng\pngconf.h	416;"	d
PNG_DEPRECATED	C++\ege-13.04.02-full\src\lpng\pngconf.h	432;"	d
PNG_DEPSTRUCT	C++\ege-13.04.02-full\src\lpng\pngconf.h	378;"	d
PNG_DEPSTRUCT	C++\ege-13.04.02-full\src\lpng\pngconf.h	422;"	d
PNG_DEPSTRUCT	C++\ege-13.04.02-full\src\lpng\pngconf.h	444;"	d
PNG_DLL_EXPORT	C++\ege-13.04.02-full\src\lpng\pngconf.h	230;"	d
PNG_EXPORT	C++\ege-13.04.02-full\src\lpng\pngconf.h	323;"	d
PNG_EXPORTA	C++\ege-13.04.02-full\src\lpng\pngconf.h	318;"	d
PNG_EXPORT_TYPE	C++\ege-13.04.02-full\src\lpng\pngconf.h	228;"	d
PNG_EXPORT_TYPE	C++\ege-13.04.02-full\src\lpng\pngconf.h	310;"	d
PNG_FIXED_EXPORT	C++\ege-13.04.02-full\src\lpng\pngconf.h	459;"	d
PNG_FP_EXPORT	C++\ege-13.04.02-full\src\lpng\pngconf.h	451;"	d
PNG_FUNCTION	C++\ege-13.04.02-full\src\lpng\pngconf.h	296;"	d
PNG_IMPEXP	C++\ege-13.04.02-full\src\lpng\pngconf.h	275;"	d
PNG_IMPEXP	C++\ege-13.04.02-full\src\lpng\pngconf.h	286;"	d
PNG_MAX_MALLOC_64K	C++\ege-13.04.02-full\src\lpng\pngconf.h	527;"	d
PNG_NORETURN	C++\ege-13.04.02-full\src\lpng\pngconf.h	360;"	d
PNG_NORETURN	C++\ege-13.04.02-full\src\lpng\pngconf.h	396;"	d
PNG_NORETURN	C++\ege-13.04.02-full\src\lpng\pngconf.h	438;"	d
PNG_PEDANTIC_WARNINGS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pngconf.h	345;"	d
PNG_PRIVATE	C++\ege-13.04.02-full\src\lpng\pngconf.h	385;"	d
PNG_PRIVATE	C++\ege-13.04.02-full\src\lpng\pngconf.h	425;"	d
PNG_PRIVATE	C++\ege-13.04.02-full\src\lpng\pngconf.h	447;"	d
PNG_PTR_NORETURN	C++\ege-13.04.02-full\src\lpng\pngconf.h	363;"	d
PNG_PTR_NORETURN	C++\ege-13.04.02-full\src\lpng\pngconf.h	399;"	d
PNG_REMOVED	C++\ege-13.04.02-full\src\lpng\pngconf.h	328;"	d
PNG_USE_READ_MACROS	C++\ege-13.04.02-full\src\lpng\pngconf.h	57;"	d
PNG_USE_READ_MACROS	C++\ege-13.04.02-full\src\lpng\pngconf.h	61;"	d
PNG_USE_RESULT	C++\ege-13.04.02-full\src\lpng\pngconf.h	357;"	d
PNG_USE_RESULT	C++\ege-13.04.02-full\src\lpng\pngconf.h	393;"	d
PNG_USE_RESULT	C++\ege-13.04.02-full\src\lpng\pngconf.h	435;"	d
USE_FAR_KEYWORD	C++\ege-13.04.02-full\src\lpng\pngconf.h	532;"	d
USE_FAR_KEYWORD	C++\ege-13.04.02-full\src\lpng\pngconf.h	551;"	d
png_FILE_p	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef FILE            * png_FILE_p;$/;"	t
png_alloc_size_t	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^       typedef DWORD         png_alloc_size_t;$/;"	t
png_alloc_size_t	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^       typedef png_size_t    png_alloc_size_t;$/;"	t
png_alloc_size_t	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^     typedef unsigned long    png_alloc_size_t;$/;"	t
png_alloc_size_t	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^   typedef unsigned long png_alloc_size_t;$/;"	t
png_byte	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef unsigned char png_byte;$/;"	t
png_bytep	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef png_byte                  FAR * png_bytep;$/;"	t
png_bytepp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef png_byte        FAR * FAR * png_bytepp;$/;"	t
png_charp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef char                      FAR * png_charp;$/;"	t
png_charpp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef char            FAR * FAR * png_charpp;$/;"	t
png_charppp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef char            FAR * FAR * FAR * png_charppp;$/;"	t
png_const_bytep	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef PNG_CONST png_byte        FAR * png_const_bytep;$/;"	t
png_const_charp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef PNG_CONST char            FAR * png_const_charp;$/;"	t
png_const_charpp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef PNG_CONST char  FAR * FAR * png_const_charpp;$/;"	t
png_const_doublep	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef PNG_CONST double FAR * png_const_doublep;$/;"	t
png_const_fixed_point_p	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef PNG_CONST png_fixed_point FAR * png_const_fixed_point_p;$/;"	t
png_const_int_16p	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef PNG_CONST png_int_16      FAR * png_const_int_16p;$/;"	t
png_const_int_32p	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef PNG_CONST png_int_32      FAR * png_const_int_32p;$/;"	t
png_const_size_tp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef PNG_CONST png_size_t      FAR * png_const_size_tp;$/;"	t
png_const_uint_16p	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef PNG_CONST png_uint_16     FAR * png_const_uint_16p;$/;"	t
png_const_uint_32p	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef PNG_CONST png_uint_32     FAR * png_const_uint_32p;$/;"	t
png_const_voidp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef PNG_CONST void            FAR * png_const_voidp;$/;"	t
png_doublep	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef double           FAR * png_doublep;$/;"	t
png_doublepp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef double          FAR * FAR * png_doublepp;$/;"	t
png_fixed_point	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef png_int_32 png_fixed_point;$/;"	t
png_fixed_point_p	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef png_fixed_point           FAR * png_fixed_point_p;$/;"	t
png_fixed_point_pp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef png_fixed_point FAR * FAR * png_fixed_point_pp;$/;"	t
png_int_16	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef short png_int_16;$/;"	t
png_int_16p	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef png_int_16                FAR * png_int_16p;$/;"	t
png_int_16pp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef png_int_16      FAR * FAR * png_int_16pp;$/;"	t
png_int_32	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef int png_int_32;$/;"	t
png_int_32p	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef png_int_32                FAR * png_int_32p;$/;"	t
png_int_32pp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef png_int_32      FAR * FAR * png_int_32pp;$/;"	t
png_size_t	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef size_t png_size_t;$/;"	t
png_size_t	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef unsigned int png_size_t;$/;"	t
png_size_tp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef png_size_t                FAR * png_size_tp;$/;"	t
png_sizeof	C++\ege-13.04.02-full\src\lpng\pngconf.h	505;"	d
png_uint_16	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef unsigned short png_uint_16;$/;"	t
png_uint_16p	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef png_uint_16               FAR * png_uint_16p;$/;"	t
png_uint_16pp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef png_uint_16     FAR * FAR * png_uint_16pp;$/;"	t
png_uint_32	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef unsigned int png_uint_32;$/;"	t
png_uint_32p	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef png_uint_32               FAR * png_uint_32p;$/;"	t
png_uint_32pp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef png_uint_32     FAR * FAR * png_uint_32pp;$/;"	t
png_voidp	C++\ege-13.04.02-full\src\lpng\pngconf.h	/^typedef void                      FAR * png_voidp;$/;"	t
PNGDEBUG_H	C++\ege-13.04.02-full\src\lpng\pngdebug.h	36;"	d
PNG_DEBUG_FILE	C++\ege-13.04.02-full\src\lpng\pngdebug.h	76;"	d
PNG_LITERAL_LEFT_SQUARE_BRACKET	C++\ege-13.04.02-full\src\lpng\pngdebug.h	43;"	d
PNG_LITERAL_RIGHT_SQUARE_BRACKET	C++\ege-13.04.02-full\src\lpng\pngdebug.h	46;"	d
PNG_LITERAL_SHARP	C++\ege-13.04.02-full\src\lpng\pngdebug.h	40;"	d
PNG_STRING_NEWLINE	C++\ege-13.04.02-full\src\lpng\pngdebug.h	49;"	d
_DEBUG	C++\ege-13.04.02-full\src\lpng\pngdebug.h	58;"	d
png_debug	C++\ege-13.04.02-full\src\lpng\pngdebug.h	110;"	d
png_debug	C++\ege-13.04.02-full\src\lpng\pngdebug.h	149;"	d
png_debug	C++\ege-13.04.02-full\src\lpng\pngdebug.h	61;"	d
png_debug	C++\ege-13.04.02-full\src\lpng\pngdebug.h	85;"	d
png_debug1	C++\ege-13.04.02-full\src\lpng\pngdebug.h	121;"	d
png_debug1	C++\ege-13.04.02-full\src\lpng\pngdebug.h	152;"	d
png_debug1	C++\ege-13.04.02-full\src\lpng\pngdebug.h	64;"	d
png_debug1	C++\ege-13.04.02-full\src\lpng\pngdebug.h	93;"	d
png_debug2	C++\ege-13.04.02-full\src\lpng\pngdebug.h	101;"	d
png_debug2	C++\ege-13.04.02-full\src\lpng\pngdebug.h	132;"	d
png_debug2	C++\ege-13.04.02-full\src\lpng\pngdebug.h	155;"	d
png_debug2	C++\ege-13.04.02-full\src\lpng\pngdebug.h	67;"	d
PNG_FUNCTION	C++\ege-13.04.02-full\src\lpng\pngerror.c	/^PNG_FUNCTION(void,$/;"	f
PNG_FUNCTION	C++\ege-13.04.02-full\src\lpng\pngerror.c	/^PNG_FUNCTION(void,PNGAPI$/;"	f
PNG_FUNCTION	C++\ege-13.04.02-full\src\lpng\pngerror.c	/^static PNG_FUNCTION(void \/* PRIVATE *\/,$/;"	f	file:
PNG_MAX_ERROR_TEXT	C++\ege-13.04.02-full\src\lpng\pngerror.c	160;"	d	file:
fixed_message	C++\ege-13.04.02-full\src\lpng\pngerror.c	250;"	d	file:
fixed_message_ln	C++\ege-13.04.02-full\src\lpng\pngerror.c	251;"	d	file:
isnonalpha	C++\ege-13.04.02-full\src\lpng\pngerror.c	154;"	d	file:
png_benign_error	C++\ege-13.04.02-full\src\lpng\pngerror.c	/^png_benign_error(png_structp png_ptr, png_const_charp error_message)$/;"	f
png_chunk_benign_error	C++\ege-13.04.02-full\src\lpng\pngerror.c	/^png_chunk_benign_error(png_structp png_ptr, png_const_charp error_message)$/;"	f
png_chunk_warning	C++\ege-13.04.02-full\src\lpng\pngerror.c	/^png_chunk_warning(png_structp png_ptr, png_const_charp warning_message)$/;"	f
png_default_warning	C++\ege-13.04.02-full\src\lpng\pngerror.c	/^png_default_warning(png_structp png_ptr, png_const_charp warning_message)$/;"	f	file:
png_digit	C++\ege-13.04.02-full\src\lpng\pngerror.c	/^static PNG_CONST char png_digit[16] = {$/;"	v	file:
png_format_buffer	C++\ege-13.04.02-full\src\lpng\pngerror.c	/^png_format_buffer(png_structp png_ptr, png_charp buffer, png_const_charp$/;"	f	file:
png_get_error_ptr	C++\ege-13.04.02-full\src\lpng\pngerror.c	/^png_get_error_ptr(png_const_structp png_ptr)$/;"	f
png_set_error_fn	C++\ege-13.04.02-full\src\lpng\pngerror.c	/^png_set_error_fn(png_structp png_ptr, png_voidp error_ptr,$/;"	f
png_set_longjmp_fn	C++\ege-13.04.02-full\src\lpng\pngerror.c	/^png_set_longjmp_fn(png_structp png_ptr, png_longjmp_ptr longjmp_fn,$/;"	f
png_set_strip_error_numbers	C++\ege-13.04.02-full\src\lpng\pngerror.c	/^png_set_strip_error_numbers(png_structp png_ptr, png_uint_32 strip_mode)$/;"	f
png_warning	C++\ege-13.04.02-full\src\lpng\pngerror.c	/^png_warning(png_structp png_ptr, png_const_charp warning_message)$/;"	f
png_fixed_inches_from_microns	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_fixed_inches_from_microns(png_structp png_ptr, png_int_32 microns)$/;"	f	file:
png_get_IHDR	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_IHDR(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_PLTE	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_PLTE(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_bKGD	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_bKGD(png_const_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_bit_depth	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_bit_depth(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_cHRM	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_cHRM(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_cHRM_fixed	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_cHRM_fixed(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_channels	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_channels(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_chunk_cache_max	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_chunk_cache_max (png_const_structp png_ptr)$/;"	f
png_get_chunk_malloc_max	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_chunk_malloc_max (png_const_structp png_ptr)$/;"	f
png_get_color_type	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_color_type(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_compression_buffer_size	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_compression_buffer_size(png_const_structp png_ptr)$/;"	f
png_get_compression_type	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_compression_type(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_filter_type	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_filter_type(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_gAMA	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_gAMA(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_gAMA_fixed	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_gAMA_fixed(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_hIST	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_hIST(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_iCCP	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_iCCP(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_image_height	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_image_height(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_image_width	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_image_width(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_interlace_type	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_interlace_type(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_io_chunk_name	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_io_chunk_name (png_structp png_ptr)$/;"	f
png_get_io_chunk_type	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_io_chunk_type (png_const_structp png_ptr)$/;"	f
png_get_io_state	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_io_state (png_structp png_ptr)$/;"	f
png_get_oFFs	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_oFFs(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_pCAL	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_pCAL(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_pHYs	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_pHYs(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_pHYs_dpi	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_pHYs_dpi(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_pixel_aspect_ratio	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_pixel_aspect_ratio(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_pixel_aspect_ratio_fixed	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_pixel_aspect_ratio_fixed(png_const_structp png_ptr,$/;"	f
png_get_pixels_per_inch	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_pixels_per_inch(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_pixels_per_meter	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_pixels_per_meter(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_rgb_to_gray_status	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_rgb_to_gray_status (png_const_structp png_ptr)$/;"	f
png_get_rowbytes	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_rowbytes(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_rows	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_rows(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_sBIT	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_sBIT(png_const_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_sCAL	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_sCAL(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_sCAL_fixed	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_sCAL_fixed(png_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_sCAL_s	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_sCAL_s(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_sPLT	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_sPLT(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_sRGB	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_sRGB(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_signature	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_signature(png_const_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_tIME	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_tIME(png_const_structp png_ptr, png_infop info_ptr, png_timep *mod_time)$/;"	f
png_get_tRNS	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_tRNS(png_const_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_text	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_text(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_unknown_chunks	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_unknown_chunks(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_user_chunk_ptr	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_user_chunk_ptr(png_const_structp png_ptr)$/;"	f
png_get_user_height_max	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_user_height_max (png_const_structp png_ptr)$/;"	f
png_get_user_width_max	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_user_width_max (png_const_structp png_ptr)$/;"	f
png_get_valid	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_valid(png_const_structp png_ptr, png_const_infop info_ptr,$/;"	f
png_get_x_offset_inches	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_x_offset_inches(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_x_offset_inches_fixed	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_x_offset_inches_fixed(png_structp png_ptr,$/;"	f
png_get_x_offset_microns	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_x_offset_microns(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_x_offset_pixels	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_x_offset_pixels(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_x_pixels_per_inch	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_x_pixels_per_inch(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_x_pixels_per_meter	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_x_pixels_per_meter(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_y_offset_inches	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_y_offset_inches(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_y_offset_inches_fixed	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_y_offset_inches_fixed(png_structp png_ptr,$/;"	f
png_get_y_offset_microns	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_y_offset_microns(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_y_offset_pixels	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_y_offset_pixels(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_y_pixels_per_inch	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_y_pixels_per_inch(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
png_get_y_pixels_per_meter	C++\ege-13.04.02-full\src\lpng\pngget.c	/^png_get_y_pixels_per_meter(png_const_structp png_ptr, png_const_infop info_ptr)$/;"	f
ppi_from_ppm	C++\ege-13.04.02-full\src\lpng\pngget.c	/^ppi_from_ppm(png_uint_32 ppm)$/;"	f	file:
PNGINFO_H	C++\ege-13.04.02-full\src\lpng\pnginfo.h	54;"	d
background	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_color_16 background;$/;"	m	struct:png_info_def
bit_depth	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte bit_depth;      \/* 1, 2, 4, 8, or 16 bits\/channel (from IHDR) *\/$/;"	m	struct:png_info_def
channels	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte channels;       \/* number of data channels per pixel (1, 2, 3, 4) *\/$/;"	m	struct:png_info_def
color_type	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte color_type;     \/* see PNG_COLOR_TYPE_ below (from IHDR) *\/$/;"	m	struct:png_info_def
compression_type	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte compression_type; \/* must be PNG_COMPRESSION_TYPE_BASE (IHDR) *\/$/;"	m	struct:png_info_def
filter_type	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte filter_type;    \/* must be PNG_FILTER_TYPE_BASE (from IHDR) *\/$/;"	m	struct:png_info_def
free_me	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_uint_32 free_me;     \/* flags items libpng is responsible for freeing *\/$/;"	m	struct:png_info_def
gamma	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_fixed_point gamma;$/;"	m	struct:png_info_def
height	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_uint_32 height; \/* height of image in pixels (from IHDR) *\/$/;"	m	struct:png_info_def
hist	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_uint_16p hist;$/;"	m	struct:png_info_def
iccp_compression	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte iccp_compression; \/* Always zero *\/$/;"	m	struct:png_info_def
iccp_name	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_charp iccp_name;     \/* profile name *\/$/;"	m	struct:png_info_def
iccp_profile	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_bytep iccp_profile;  \/* International Color Consortium profile data *\/$/;"	m	struct:png_info_def
iccp_proflen	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_uint_32 iccp_proflen;  \/* ICC profile data length *\/$/;"	m	struct:png_info_def
interlace_type	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte interlace_type; \/* One of PNG_INTERLACE_NONE, PNG_INTERLACE_ADAM7 *\/$/;"	m	struct:png_info_def
max_text	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   int max_text; \/* current size of text array *\/$/;"	m	struct:png_info_def
mod_time	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_time mod_time;$/;"	m	struct:png_info_def
num_palette	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_uint_16 num_palette; \/* number of color entries in "palette" (PLTE) *\/$/;"	m	struct:png_info_def
num_text	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   int num_text; \/* number of comments read or comments to write *\/$/;"	m	struct:png_info_def
num_trans	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_uint_16 num_trans;   \/* number of transparent palette color (tRNS) *\/$/;"	m	struct:png_info_def
offset_unit_type	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte offset_unit_type; \/* offset units type *\/$/;"	m	struct:png_info_def
palette	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_colorp palette;      \/* array of color values (valid & PNG_INFO_PLTE) *\/$/;"	m	struct:png_info_def
pcal_X0	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_int_32 pcal_X0;      \/* minimum value *\/$/;"	m	struct:png_info_def
pcal_X1	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_int_32 pcal_X1;      \/* maximum value *\/$/;"	m	struct:png_info_def
pcal_nparams	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte pcal_nparams;   \/* number of parameters given in pcal_params *\/$/;"	m	struct:png_info_def
pcal_params	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_charpp pcal_params;  \/* ASCII strings containing parameter values *\/$/;"	m	struct:png_info_def
pcal_purpose	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_charp pcal_purpose;  \/* pCAL chunk description string *\/$/;"	m	struct:png_info_def
pcal_type	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte pcal_type;      \/* equation type (see PNG_EQUATION_ below) *\/$/;"	m	struct:png_info_def
pcal_units	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_charp pcal_units;    \/* Latin-1 string giving physical units *\/$/;"	m	struct:png_info_def
phys_unit_type	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte phys_unit_type; \/* resolution type (see PNG_RESOLUTION_ below) *\/$/;"	m	struct:png_info_def
pixel_depth	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte pixel_depth;    \/* number of bits per pixel *\/$/;"	m	struct:png_info_def
png_info_def	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^struct png_info_def$/;"	s
row_pointers	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_bytepp row_pointers;        \/* the image bits *\/$/;"	m	struct:png_info_def
rowbytes	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_size_t rowbytes; \/* bytes needed to hold an untransformed row *\/$/;"	m	struct:png_info_def
scal_s_height	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_charp scal_s_height;    \/* string containing width *\/$/;"	m	struct:png_info_def
scal_s_width	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_charp scal_s_width;     \/* string containing height *\/$/;"	m	struct:png_info_def
scal_unit	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte scal_unit;         \/* unit of physical scale *\/$/;"	m	struct:png_info_def
sig_bit	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_color_8 sig_bit; \/* significant bits in color channels *\/$/;"	m	struct:png_info_def
signature	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte signature[8];   \/* magic bytes read by libpng from start of file *\/$/;"	m	struct:png_info_def
spare_byte	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte spare_byte;     \/* to align the data, and for future use *\/$/;"	m	struct:png_info_def
splt_palettes	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_sPLT_tp splt_palettes;$/;"	m	struct:png_info_def
splt_palettes_num	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_uint_32 splt_palettes_num;$/;"	m	struct:png_info_def
srgb_intent	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_byte srgb_intent; \/* sRGB rendering intent [0, 1, 2, or 3] *\/$/;"	m	struct:png_info_def
text	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_textp text; \/* array of comments read or comments to write *\/$/;"	m	struct:png_info_def
trans	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_bytep trans;    \/* alpha values for paletted image *\/$/;"	m	struct:png_info_def
trans_alpha	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_bytep trans_alpha;    \/* alpha values for paletted image *\/$/;"	m	struct:png_info_def
trans_color	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_color_16 trans_color; \/* transparent color for non-palette image *\/$/;"	m	struct:png_info_def
unknown_chunks	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_unknown_chunkp unknown_chunks;$/;"	m	struct:png_info_def
unknown_chunks_num	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   int unknown_chunks_num;$/;"	m	struct:png_info_def
valid	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_uint_32 valid;  \/* valid chunk data (see PNG_INFO_ below) *\/$/;"	m	struct:png_info_def
width	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_uint_32 width;  \/* width of image in pixels (from IHDR) *\/$/;"	m	struct:png_info_def
x_blue	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_fixed_point x_blue;$/;"	m	struct:png_info_def
x_green	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_fixed_point x_green;$/;"	m	struct:png_info_def
x_offset	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_int_32 x_offset; \/* x offset on page *\/$/;"	m	struct:png_info_def
x_pixels_per_unit	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_uint_32 x_pixels_per_unit; \/* horizontal pixel density *\/$/;"	m	struct:png_info_def
x_red	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_fixed_point x_red;$/;"	m	struct:png_info_def
x_white	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_fixed_point x_white;$/;"	m	struct:png_info_def
y_blue	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_fixed_point y_blue;$/;"	m	struct:png_info_def
y_green	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_fixed_point y_green;$/;"	m	struct:png_info_def
y_offset	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_int_32 y_offset; \/* y offset on page *\/$/;"	m	struct:png_info_def
y_pixels_per_unit	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_uint_32 y_pixels_per_unit; \/* vertical pixel density *\/$/;"	m	struct:png_info_def
y_red	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_fixed_point y_red;$/;"	m	struct:png_info_def
y_white	C++\ege-13.04.02-full\src\lpng\pnginfo.h	/^   png_fixed_point y_white;$/;"	m	struct:png_info_def
PNGLCONF_H	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	18;"	d
PNG_16BIT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	144;"	d
PNG_ALIGN_MEMORY_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	47;"	d
PNG_API_RULE	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	25;"	d
PNG_BENIGN_ERRORS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	56;"	d
PNG_CALLOC_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	21;"	d
PNG_CHECK_cHRM_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	165;"	d
PNG_CONSOLE_IO_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	131;"	d
PNG_CONVERT_tIME_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	103;"	d
PNG_COST_SHIFT	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	30;"	d
PNG_DEFAULT_READ_MACROS	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	33;"	d
PNG_EASY_ACCESS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	46;"	d
PNG_ERROR_TEXT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	53;"	d
PNG_FIXED_POINT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	51;"	d
PNG_FLOATING_ARITHMETIC_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	42;"	d
PNG_FLOATING_POINT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	60;"	d
PNG_GAMMA_THRESHOLD_FIXED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	35;"	d
PNG_HANDLE_AS_UNKNOWN_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	39;"	d
PNG_INCH_CONVERSIONS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	61;"	d
PNG_INFO_IMAGE_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	38;"	d
PNG_IO_STATE_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	65;"	d
PNG_MAX_GAMMA_8	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	20;"	d
PNG_MNG_FEATURES_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	59;"	d
PNG_POINTER_INDEXING_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	40;"	d
PNG_PROGRESSIVE_READ_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	101;"	d
PNG_QUANTIZE_BLUE_BITS	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	26;"	d
PNG_QUANTIZE_GREEN_BITS	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	24;"	d
PNG_QUANTIZE_RED_BITS	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	22;"	d
PNG_READ_16BIT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	108;"	d
PNG_READ_16_TO_8_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	142;"	d
PNG_READ_ANCILLARY_CHUNKS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	67;"	d
PNG_READ_BACKGROUND_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	112;"	d
PNG_READ_BGR_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	146;"	d
PNG_READ_COMPOSITE_NODIV_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	110;"	d
PNG_READ_EXPAND_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	121;"	d
PNG_READ_FILLER_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	133;"	d
PNG_READ_GAMMA_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	74;"	d
PNG_READ_GRAY_TO_RGB_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	82;"	d
PNG_READ_INTERLACING_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	91;"	d
PNG_READ_INT_FUNCTIONS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	105;"	d
PNG_READ_INVERT_ALPHA_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	84;"	d
PNG_READ_INVERT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	141;"	d
PNG_READ_OPT_PLTE_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	79;"	d
PNG_READ_PACKSWAP_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	116;"	d
PNG_READ_PACK_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	87;"	d
PNG_READ_QUANTIZE_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	113;"	d
PNG_READ_RGB_TO_GRAY_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	95;"	d
PNG_READ_SHIFT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	102;"	d
PNG_READ_STRIP_ALPHA_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	115;"	d
PNG_READ_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	54;"	d
PNG_READ_SWAP_ALPHA_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	109;"	d
PNG_READ_SWAP_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	123;"	d
PNG_READ_TEXT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	128;"	d
PNG_READ_TRANSFORMS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	73;"	d
PNG_READ_UNKNOWN_CHUNKS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	63;"	d
PNG_READ_USER_CHUNKS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	106;"	d
PNG_READ_USER_TRANSFORM_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	104;"	d
PNG_READ_bKGD_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	75;"	d
PNG_READ_cHRM_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	89;"	d
PNG_READ_gAMA_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	119;"	d
PNG_READ_hIST_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	107;"	d
PNG_READ_iCCP_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	114;"	d
PNG_READ_iTXt_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	168;"	d
PNG_READ_oFFs_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	97;"	d
PNG_READ_pCAL_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	120;"	d
PNG_READ_pHYs_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	125;"	d
PNG_READ_sBIT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	86;"	d
PNG_READ_sCAL_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	77;"	d
PNG_READ_sPLT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	136;"	d
PNG_READ_sRGB_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	117;"	d
PNG_READ_tEXt_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	139;"	d
PNG_READ_tIME_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	124;"	d
PNG_READ_tRNS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	92;"	d
PNG_READ_zTXt_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	162;"	d
PNG_SAVE_INT_32_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	170;"	d
PNG_SEQUENTIAL_READ_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	111;"	d
PNG_SET_CHUNK_CACHE_LIMIT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	71;"	d
PNG_SET_CHUNK_MALLOC_LIMIT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	80;"	d
PNG_SET_USER_LIMITS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	66;"	d
PNG_STDIO_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	62;"	d
PNG_TEXT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	169;"	d
PNG_TIME_RFC1123_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	127;"	d
PNG_UNKNOWN_CHUNKS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	76;"	d
PNG_USER_CHUNKS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	130;"	d
PNG_USER_CHUNK_CACHE_MAX	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	27;"	d
PNG_USER_CHUNK_MALLOC_MAX	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	32;"	d
PNG_USER_HEIGHT_MAX	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	28;"	d
PNG_USER_LIMITS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	50;"	d
PNG_USER_MEM_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	64;"	d
PNG_USER_TRANSFORM_INFO_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	158;"	d
PNG_USER_TRANSFORM_PTR_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	157;"	d
PNG_USER_WIDTH_MAX	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	23;"	d
PNG_WARNINGS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	41;"	d
PNG_WEIGHT_SHIFT	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	31;"	d
PNG_WRITE_16BIT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	45;"	d
PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	69;"	d
PNG_WRITE_BGR_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	129;"	d
PNG_WRITE_FILLER_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	98;"	d
PNG_WRITE_FILTER_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	70;"	d
PNG_WRITE_FLUSH_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	58;"	d
PNG_WRITE_INTERLACING_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	44;"	d
PNG_WRITE_INT_FUNCTIONS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	68;"	d
PNG_WRITE_INVERT_ALPHA_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	148;"	d
PNG_WRITE_INVERT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	94;"	d
PNG_WRITE_PACKSWAP_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	147;"	d
PNG_WRITE_PACK_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	132;"	d
PNG_WRITE_SHIFT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	100;"	d
PNG_WRITE_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	43;"	d
PNG_WRITE_SWAP_ALPHA_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	126;"	d
PNG_WRITE_SWAP_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	88;"	d
PNG_WRITE_TEXT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	99;"	d
PNG_WRITE_TRANSFORMS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	85;"	d
PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	49;"	d
PNG_WRITE_USER_TRANSFORM_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	145;"	d
PNG_WRITE_WEIGHTED_FILTER_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	48;"	d
PNG_WRITE_bKGD_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	134;"	d
PNG_WRITE_cHRM_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	143;"	d
PNG_WRITE_gAMA_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	81;"	d
PNG_WRITE_hIST_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	78;"	d
PNG_WRITE_iCCP_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	72;"	d
PNG_WRITE_iTXt_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	155;"	d
PNG_WRITE_oFFs_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	138;"	d
PNG_WRITE_pCAL_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	83;"	d
PNG_WRITE_pHYs_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	93;"	d
PNG_WRITE_sBIT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	140;"	d
PNG_WRITE_sCAL_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	137;"	d
PNG_WRITE_sPLT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	122;"	d
PNG_WRITE_sRGB_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	96;"	d
PNG_WRITE_tEXt_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	118;"	d
PNG_WRITE_tIME_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	90;"	d
PNG_WRITE_tRNS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	135;"	d
PNG_WRITE_zTXt_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	150;"	d
PNG_ZBUF_SIZE	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	34;"	d
PNG_bKGD_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	153;"	d
PNG_cHRM_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	152;"	d
PNG_gAMA_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	163;"	d
PNG_hIST_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	159;"	d
PNG_iCCP_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	160;"	d
PNG_iTXt_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	174;"	d
PNG_oFFs_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	156;"	d
PNG_pCAL_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	164;"	d
PNG_pHYs_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	167;"	d
PNG_sBIT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	151;"	d
PNG_sCAL_PRECISION	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	29;"	d
PNG_sCAL_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	149;"	d
PNG_sPLT_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	171;"	d
PNG_sRGB_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	161;"	d
PNG_tEXt_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	172;"	d
PNG_tIME_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	166;"	d
PNG_tRNS_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	154;"	d
PNG_zTXt_SUPPORTED	C++\ege-13.04.02-full\src\lpng\pnglibconf.h	173;"	d
PNG_FUNCTION	C++\ege-13.04.02-full\src\lpng\pngmem.c	/^PNG_FUNCTION(png_voidp \/* PRIVATE *\/,$/;"	f
PNG_FUNCTION	C++\ege-13.04.02-full\src\lpng\pngmem.c	/^PNG_FUNCTION(png_voidp,PNGAPI$/;"	f
png_destroy_struct	C++\ege-13.04.02-full\src\lpng\pngmem.c	/^png_destroy_struct(png_voidp struct_ptr)$/;"	f
png_destroy_struct_2	C++\ege-13.04.02-full\src\lpng\pngmem.c	/^png_destroy_struct_2(png_voidp struct_ptr, png_free_ptr free_fn,$/;"	f
png_free	C++\ege-13.04.02-full\src\lpng\pngmem.c	/^png_free(png_structp png_ptr, png_voidp ptr)$/;"	f
png_free_default	C++\ege-13.04.02-full\src\lpng\pngmem.c	/^png_free_default(png_structp png_ptr, png_voidp ptr)$/;"	f
png_get_mem_ptr	C++\ege-13.04.02-full\src\lpng\pngmem.c	/^png_get_mem_ptr(png_const_structp png_ptr)$/;"	f
png_set_mem_fn	C++\ege-13.04.02-full\src\lpng\pngmem.c	/^png_set_mem_fn(png_structp png_ptr, png_voidp mem_ptr, png_malloc_ptr$/;"	f
PNG_ERROR_MODE	C++\ege-13.04.02-full\src\lpng\pngpread.c	27;"	d	file:
PNG_READ_CHUNK_MODE	C++\ege-13.04.02-full\src\lpng\pngpread.c	20;"	d	file:
PNG_READ_DONE_MODE	C++\ege-13.04.02-full\src\lpng\pngpread.c	25;"	d	file:
PNG_READ_IDAT_MODE	C++\ege-13.04.02-full\src\lpng\pngpread.c	21;"	d	file:
PNG_READ_SIG_MODE	C++\ege-13.04.02-full\src\lpng\pngpread.c	19;"	d	file:
PNG_READ_iTXt_MODE	C++\ege-13.04.02-full\src\lpng\pngpread.c	26;"	d	file:
PNG_READ_tEXt_MODE	C++\ege-13.04.02-full\src\lpng\pngpread.c	23;"	d	file:
PNG_READ_zTXt_MODE	C++\ege-13.04.02-full\src\lpng\pngpread.c	24;"	d	file:
PNG_SKIP_MODE	C++\ege-13.04.02-full\src\lpng\pngpread.c	22;"	d	file:
png_get_progressive_ptr	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_get_progressive_ptr(png_const_structp png_ptr)$/;"	f
png_process_IDAT_data	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_process_IDAT_data(png_structp png_ptr, png_bytep buffer,$/;"	f
png_process_data	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_process_data(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_process_data_pause	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_process_data_pause(png_structp png_ptr, int save)$/;"	f
png_process_data_skip	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_process_data_skip(png_structp png_ptr)$/;"	f
png_process_some_data	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_process_some_data(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_progressive_combine_row	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_progressive_combine_row (png_structp png_ptr, png_bytep old_row,$/;"	f
png_push_crc_finish	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_crc_finish(png_structp png_ptr)$/;"	f
png_push_crc_skip	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_crc_skip(png_structp png_ptr, png_uint_32 skip)$/;"	f
png_push_fill_buffer	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_fill_buffer(png_structp png_ptr, png_bytep buffer, png_size_t length)$/;"	f
png_push_handle_iTXt	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_handle_iTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32$/;"	f
png_push_handle_tEXt	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_handle_tEXt(png_structp png_ptr, png_infop info_ptr, png_uint_32$/;"	f
png_push_handle_unknown	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_handle_unknown(png_structp png_ptr, png_infop info_ptr, png_uint_32$/;"	f
png_push_handle_zTXt	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_handle_zTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32$/;"	f
png_push_have_end	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_have_end(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_push_have_info	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_have_info(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_push_have_row	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_have_row(png_structp png_ptr, png_bytep row)$/;"	f
png_push_process_row	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_process_row(png_structp png_ptr)$/;"	f
png_push_read_IDAT	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_read_IDAT(png_structp png_ptr)$/;"	f
png_push_read_chunk	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_read_chunk(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_push_read_iTXt	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_read_iTXt(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_push_read_sig	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_read_sig(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_push_read_tEXt	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_read_tEXt(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_push_read_zTXt	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_read_zTXt(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_push_restore_buffer	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_restore_buffer(png_structp png_ptr, png_bytep buffer,$/;"	f
png_push_save_buffer	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_push_save_buffer(png_structp png_ptr)$/;"	f
png_read_push_finish_row	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_read_push_finish_row(png_structp png_ptr)$/;"	f
png_set_progressive_read_fn	C++\ege-13.04.02-full\src\lpng\pngpread.c	/^png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr,$/;"	f
CHECK	C++\ege-13.04.02-full\src\lpng\pngpriv.h	197;"	d
CVT_PTR	C++\ege-13.04.02-full\src\lpng\pngpriv.h	199;"	d
CVT_PTR	C++\ege-13.04.02-full\src\lpng\pngpriv.h	210;"	d
CVT_PTR	C++\ege-13.04.02-full\src\lpng\pngpriv.h	220;"	d
CVT_PTR_NOCHECK	C++\ege-13.04.02-full\src\lpng\pngpriv.h	200;"	d
CVT_PTR_NOCHECK	C++\ege-13.04.02-full\src\lpng\pngpriv.h	211;"	d
CVT_PTR_NOCHECK	C++\ege-13.04.02-full\src\lpng\pngpriv.h	221;"	d
NOCHECK	C++\ege-13.04.02-full\src\lpng\pngpriv.h	198;"	d
PNGFAPI	C++\ege-13.04.02-full\src\lpng\pngpriv.h	131;"	d
PNGFAPI	C++\ege-13.04.02-full\src\lpng\pngpriv.h	133;"	d
PNGLIB_BUILD	C++\ege-13.04.02-full\src\lpng\pngpriv.h	33;"	d
PNGPRIV_H	C++\ege-13.04.02-full\src\lpng\pngpriv.h	26;"	d
PNG_16_TO_8	C++\ege-13.04.02-full\src\lpng\pngpriv.h	290;"	d
PNG_ABORT	C++\ege-13.04.02-full\src\lpng\pngpriv.h	189;"	d
PNG_ABORT	C++\ege-13.04.02-full\src\lpng\pngpriv.h	191;"	d
PNG_ADD_ALPHA	C++\ege-13.04.02-full\src\lpng\pngpriv.h	305;"	d
PNG_AFTER_IDAT	C++\ege-13.04.02-full\src\lpng\pngpriv.h	267;"	d
PNG_BACKGROUND	C++\ege-13.04.02-full\src\lpng\pngpriv.h	287;"	d
PNG_BACKGROUND_EXPAND	C++\ege-13.04.02-full\src\lpng\pngpriv.h	288;"	d
PNG_BACKGROUND_IS_GRAY	C++\ege-13.04.02-full\src\lpng\pngpriv.h	275;"	d
PNG_BGR	C++\ege-13.04.02-full\src\lpng\pngpriv.h	280;"	d
PNG_COLOR_DIST	C++\ege-13.04.02-full\src\lpng\pngpriv.h	377;"	d
PNG_COST_FACTOR	C++\ege-13.04.02-full\src\lpng\pngpriv.h	319;"	d
PNG_EXPAND	C++\ege-13.04.02-full\src\lpng\pngpriv.h	292;"	d
PNG_EXPAND_tRNS	C++\ege-13.04.02-full\src\lpng\pngpriv.h	306;"	d
PNG_EXTERN	C++\ege-13.04.02-full\src\lpng\pngpriv.h	123;"	d
PNG_FILLER	C++\ege-13.04.02-full\src\lpng\pngpriv.h	295;"	d
PNG_FLAG_ADD_ALPHA	C++\ege-13.04.02-full\src\lpng\pngpriv.h	343;"	d
PNG_FLAG_BENIGN_ERRORS_WARN	C++\ege-13.04.02-full\src\lpng\pngpriv.h	345;"	d
PNG_FLAG_CRC_ANCILLARY_MASK	C++\ege-13.04.02-full\src\lpng\pngpriv.h	354;"	d
PNG_FLAG_CRC_ANCILLARY_NOWARN	C++\ege-13.04.02-full\src\lpng\pngpriv.h	331;"	d
PNG_FLAG_CRC_ANCILLARY_USE	C++\ege-13.04.02-full\src\lpng\pngpriv.h	330;"	d
PNG_FLAG_CRC_CRITICAL_IGNORE	C++\ege-13.04.02-full\src\lpng\pngpriv.h	333;"	d
PNG_FLAG_CRC_CRITICAL_MASK	C++\ege-13.04.02-full\src\lpng\pngpriv.h	357;"	d
PNG_FLAG_CRC_CRITICAL_USE	C++\ege-13.04.02-full\src\lpng\pngpriv.h	332;"	d
PNG_FLAG_CRC_MASK	C++\ege-13.04.02-full\src\lpng\pngpriv.h	360;"	d
PNG_FLAG_FILLER_AFTER	C++\ege-13.04.02-full\src\lpng\pngpriv.h	329;"	d
PNG_FLAG_KEEP_UNKNOWN_CHUNKS	C++\ege-13.04.02-full\src\lpng\pngpriv.h	337;"	d
PNG_FLAG_KEEP_UNSAFE_CHUNKS	C++\ege-13.04.02-full\src\lpng\pngpriv.h	338;"	d
PNG_FLAG_LIBRARY_MISMATCH	C++\ege-13.04.02-full\src\lpng\pngpriv.h	339;"	d
PNG_FLAG_MALLOC_NULL_MEM_OK	C++\ege-13.04.02-full\src\lpng\pngpriv.h	342;"	d
PNG_FLAG_ROW_INIT	C++\ege-13.04.02-full\src\lpng\pngpriv.h	328;"	d
PNG_FLAG_STRIP_ALPHA	C++\ege-13.04.02-full\src\lpng\pngpriv.h	344;"	d
PNG_FLAG_STRIP_ERROR_NUMBERS	C++\ege-13.04.02-full\src\lpng\pngpriv.h	340;"	d
PNG_FLAG_STRIP_ERROR_TEXT	C++\ege-13.04.02-full\src\lpng\pngpriv.h	341;"	d
PNG_FLAG_ZLIB_CUSTOM_LEVEL	C++\ege-13.04.02-full\src\lpng\pngpriv.h	323;"	d
PNG_FLAG_ZLIB_CUSTOM_MEM_LEVEL	C++\ege-13.04.02-full\src\lpng\pngpriv.h	324;"	d
PNG_FLAG_ZLIB_CUSTOM_METHOD	C++\ege-13.04.02-full\src\lpng\pngpriv.h	326;"	d
PNG_FLAG_ZLIB_CUSTOM_STRATEGY	C++\ege-13.04.02-full\src\lpng\pngpriv.h	322;"	d
PNG_FLAG_ZLIB_CUSTOM_WINDOW_BITS	C++\ege-13.04.02-full\src\lpng\pngpriv.h	325;"	d
PNG_FLAG_ZLIB_FINISHED	C++\ege-13.04.02-full\src\lpng\pngpriv.h	327;"	d
PNG_FP_EXPONENT	C++\ege-13.04.02-full\src\lpng\pngpriv.h	1137;"	d
PNG_FP_FRACTION	C++\ege-13.04.02-full\src\lpng\pngpriv.h	1136;"	d
PNG_FP_INTEGER	C++\ege-13.04.02-full\src\lpng\pngpriv.h	1135;"	d
PNG_FP_INVALID	C++\ege-13.04.02-full\src\lpng\pngpriv.h	1145;"	d
PNG_FP_MAYBE	C++\ege-13.04.02-full\src\lpng\pngpriv.h	1150;"	d
PNG_FP_OK	C++\ege-13.04.02-full\src\lpng\pngpriv.h	1151;"	d
PNG_FP_SAW_ANY	C++\ege-13.04.02-full\src\lpng\pngpriv.h	1143;"	d
PNG_FP_SAW_DIGIT	C++\ege-13.04.02-full\src\lpng\pngpriv.h	1140;"	d
PNG_FP_SAW_DOT	C++\ege-13.04.02-full\src\lpng\pngpriv.h	1141;"	d
PNG_FP_SAW_E	C++\ege-13.04.02-full\src\lpng\pngpriv.h	1142;"	d
PNG_FP_SAW_SIGN	C++\ege-13.04.02-full\src\lpng\pngpriv.h	1139;"	d
PNG_FP_STATE	C++\ege-13.04.02-full\src\lpng\pngpriv.h	1138;"	d
PNG_FP_WAS_VALID	C++\ege-13.04.02-full\src\lpng\pngpriv.h	1144;"	d
PNG_GAMMA	C++\ege-13.04.02-full\src\lpng\pngpriv.h	293;"	d
PNG_GRAY_TO_RGB	C++\ege-13.04.02-full\src\lpng\pngpriv.h	294;"	d
PNG_HAVE_CHUNK_AFTER_IDAT	C++\ege-13.04.02-full\src\lpng\pngpriv.h	277;"	d
PNG_HAVE_CHUNK_HEADER	C++\ege-13.04.02-full\src\lpng\pngpriv.h	272;"	d
PNG_HAVE_IDAT	C++\ege-13.04.02-full\src\lpng\pngpriv.h	266;"	d
PNG_HAVE_IEND	C++\ege-13.04.02-full\src\lpng\pngpriv.h	268;"	d
PNG_HAVE_IHDR	C++\ege-13.04.02-full\src\lpng\pngpriv.h	264;"	d
PNG_HAVE_PLTE	C++\ege-13.04.02-full\src\lpng\pngpriv.h	265;"	d
PNG_HAVE_PNG_SIGNATURE	C++\ege-13.04.02-full\src\lpng\pngpriv.h	276;"	d
PNG_HAVE_cHRM	C++\ege-13.04.02-full\src\lpng\pngpriv.h	270;"	d
PNG_HAVE_gAMA	C++\ege-13.04.02-full\src\lpng\pngpriv.h	269;"	d
PNG_HAVE_sRGB	C++\ege-13.04.02-full\src\lpng\pngpriv.h	271;"	d
PNG_IDAT	C++\ege-13.04.02-full\src\lpng\pngpriv.h	439;"	d
PNG_IEND	C++\ege-13.04.02-full\src\lpng\pngpriv.h	440;"	d
PNG_IHDR	C++\ege-13.04.02-full\src\lpng\pngpriv.h	438;"	d
PNG_INTERLACE	C++\ege-13.04.02-full\src\lpng\pngpriv.h	281;"	d
PNG_INVERT_ALPHA	C++\ege-13.04.02-full\src\lpng\pngpriv.h	299;"	d
PNG_INVERT_MONO	C++\ege-13.04.02-full\src\lpng\pngpriv.h	285;"	d
PNG_MAX_MALLOC_64K	C++\ege-13.04.02-full\src\lpng\pngpriv.h	83;"	d
PNG_OUT_OF_RANGE	C++\ege-13.04.02-full\src\lpng\pngpriv.h	392;"	d
PNG_PACK	C++\ege-13.04.02-full\src\lpng\pngpriv.h	282;"	d
PNG_PACKSWAP	C++\ege-13.04.02-full\src\lpng\pngpriv.h	296;"	d
PNG_PLTE	C++\ege-13.04.02-full\src\lpng\pngpriv.h	441;"	d
PNG_QUANTIZE	C++\ege-13.04.02-full\src\lpng\pngpriv.h	286;"	d
PNG_RGBA	C++\ege-13.04.02-full\src\lpng\pngpriv.h	291;"	d
PNG_RGB_TO_GRAY	C++\ege-13.04.02-full\src\lpng\pngpriv.h	303;"	d
PNG_RGB_TO_GRAY_ERR	C++\ege-13.04.02-full\src\lpng\pngpriv.h	301;"	d
PNG_RGB_TO_GRAY_WARN	C++\ege-13.04.02-full\src\lpng\pngpriv.h	302;"	d
PNG_ROWBYTES	C++\ege-13.04.02-full\src\lpng\pngpriv.h	382;"	d
PNG_SHIFT	C++\ege-13.04.02-full\src\lpng\pngpriv.h	283;"	d
PNG_STRIP_ALPHA	C++\ege-13.04.02-full\src\lpng\pngpriv.h	298;"	d
PNG_STRUCT_INFO	C++\ege-13.04.02-full\src\lpng\pngpriv.h	315;"	d
PNG_STRUCT_PNG	C++\ege-13.04.02-full\src\lpng\pngpriv.h	314;"	d
PNG_SWAP_ALPHA	C++\ege-13.04.02-full\src\lpng\pngpriv.h	297;"	d
PNG_SWAP_BYTES	C++\ege-13.04.02-full\src\lpng\pngpriv.h	284;"	d
PNG_UNUSED	C++\ege-13.04.02-full\src\lpng\pngpriv.h	92;"	d
PNG_USER_DLLFNAME_POSTFIX	C++\ege-13.04.02-full\src\lpng\pngpriv.h	41;"	d
PNG_USER_PRIVATEBUILD	C++\ege-13.04.02-full\src\lpng\pngpriv.h	38;"	d
PNG_USER_TRANSFORM	C++\ege-13.04.02-full\src\lpng\pngpriv.h	300;"	d
PNG_WEIGHT_FACTOR	C++\ege-13.04.02-full\src\lpng\pngpriv.h	318;"	d
PNG_WROTE_INFO_BEFORE_PLTE	C++\ege-13.04.02-full\src\lpng\pngpriv.h	274;"	d
PNG_WROTE_tIME	C++\ege-13.04.02-full\src\lpng\pngpriv.h	273;"	d
PNG_ZBUF_SIZE	C++\ege-13.04.02-full\src\lpng\pngpriv.h	98;"	d
PNG_ZBUF_SIZE	C++\ege-13.04.02-full\src\lpng\pngpriv.h	99;"	d
PNG_bKGD	C++\ege-13.04.02-full\src\lpng\pngpriv.h	442;"	d
PNG_cHRM	C++\ege-13.04.02-full\src\lpng\pngpriv.h	443;"	d
PNG_gAMA	C++\ege-13.04.02-full\src\lpng\pngpriv.h	444;"	d
PNG_hIST	C++\ege-13.04.02-full\src\lpng\pngpriv.h	445;"	d
PNG_iCCP	C++\ege-13.04.02-full\src\lpng\pngpriv.h	446;"	d
PNG_iTXt	C++\ege-13.04.02-full\src\lpng\pngpriv.h	447;"	d
PNG_oFFs	C++\ege-13.04.02-full\src\lpng\pngpriv.h	448;"	d
PNG_pCAL	C++\ege-13.04.02-full\src\lpng\pngpriv.h	449;"	d
PNG_pHYs	C++\ege-13.04.02-full\src\lpng\pngpriv.h	451;"	d
PNG_sBIT	C++\ege-13.04.02-full\src\lpng\pngpriv.h	452;"	d
PNG_sCAL	C++\ege-13.04.02-full\src\lpng\pngpriv.h	450;"	d
PNG_sCAL_MAX_DIGITS	C++\ege-13.04.02-full\src\lpng\pngpriv.h	1091;"	d
PNG_sPLT	C++\ege-13.04.02-full\src\lpng\pngpriv.h	453;"	d
PNG_sRGB	C++\ege-13.04.02-full\src\lpng\pngpriv.h	454;"	d
PNG_sTER	C++\ege-13.04.02-full\src\lpng\pngpriv.h	455;"	d
PNG_tEXt	C++\ege-13.04.02-full\src\lpng\pngpriv.h	456;"	d
PNG_tIME	C++\ege-13.04.02-full\src\lpng\pngpriv.h	457;"	d
PNG_tRNS	C++\ege-13.04.02-full\src\lpng\pngpriv.h	458;"	d
PNG_zTXt	C++\ege-13.04.02-full\src\lpng\pngpriv.h	459;"	d
ZLIB_IO_MAX	C++\ege-13.04.02-full\src\lpng\pngpriv.h	372;"	d
png_chunk_error	C++\ege-13.04.02-full\src\lpng\pngpriv.h	111;"	d
png_chunk_warning	C++\ege-13.04.02-full\src\lpng\pngpriv.h	107;"	d
png_const_uint_16pp	C++\ege-13.04.02-full\src\lpng\pngpriv.h	/^typedef PNG_CONST png_uint_16p FAR * png_const_uint_16pp;$/;"	t
png_error	C++\ege-13.04.02-full\src\lpng\pngpriv.h	110;"	d
png_fixed	C++\ege-13.04.02-full\src\lpng\pngpriv.h	426;"	d
png_fixed_error	C++\ege-13.04.02-full\src\lpng\pngpriv.h	112;"	d
png_float	C++\ege-13.04.02-full\src\lpng\pngpriv.h	407;"	d
png_memcmp	C++\ege-13.04.02-full\src\lpng\pngpriv.h	204;"	d
png_memcmp	C++\ege-13.04.02-full\src\lpng\pngpriv.h	215;"	d
png_memcmp	C++\ege-13.04.02-full\src\lpng\pngpriv.h	225;"	d
png_memcpy	C++\ege-13.04.02-full\src\lpng\pngpriv.h	205;"	d
png_memcpy	C++\ege-13.04.02-full\src\lpng\pngpriv.h	216;"	d
png_memcpy	C++\ege-13.04.02-full\src\lpng\pngpriv.h	226;"	d
png_memset	C++\ege-13.04.02-full\src\lpng\pngpriv.h	206;"	d
png_memset	C++\ege-13.04.02-full\src\lpng\pngpriv.h	217;"	d
png_memset	C++\ege-13.04.02-full\src\lpng\pngpriv.h	227;"	d
png_snprintf	C++\ege-13.04.02-full\src\lpng\pngpriv.h	235;"	d
png_snprintf	C++\ege-13.04.02-full\src\lpng\pngpriv.h	239;"	d
png_snprintf	C++\ege-13.04.02-full\src\lpng\pngpriv.h	250;"	d
png_snprintf2	C++\ege-13.04.02-full\src\lpng\pngpriv.h	236;"	d
png_snprintf2	C++\ege-13.04.02-full\src\lpng\pngpriv.h	240;"	d
png_snprintf2	C++\ege-13.04.02-full\src\lpng\pngpriv.h	251;"	d
png_snprintf6	C++\ege-13.04.02-full\src\lpng\pngpriv.h	237;"	d
png_snprintf6	C++\ege-13.04.02-full\src\lpng\pngpriv.h	241;"	d
png_snprintf6	C++\ege-13.04.02-full\src\lpng\pngpriv.h	252;"	d
png_sprintf	C++\ege-13.04.02-full\src\lpng\pngpriv.h	207;"	d
png_sprintf	C++\ege-13.04.02-full\src\lpng\pngpriv.h	218;"	d
png_sprintf	C++\ege-13.04.02-full\src\lpng\pngpriv.h	228;"	d
png_strcpy	C++\ege-13.04.02-full\src\lpng\pngpriv.h	201;"	d
png_strcpy	C++\ege-13.04.02-full\src\lpng\pngpriv.h	212;"	d
png_strcpy	C++\ege-13.04.02-full\src\lpng\pngpriv.h	222;"	d
png_strlen	C++\ege-13.04.02-full\src\lpng\pngpriv.h	203;"	d
png_strlen	C++\ege-13.04.02-full\src\lpng\pngpriv.h	214;"	d
png_strlen	C++\ege-13.04.02-full\src\lpng\pngpriv.h	224;"	d
png_strncpy	C++\ege-13.04.02-full\src\lpng\pngpriv.h	202;"	d
png_strncpy	C++\ege-13.04.02-full\src\lpng\pngpriv.h	213;"	d
png_strncpy	C++\ege-13.04.02-full\src\lpng\pngpriv.h	223;"	d
png_warning	C++\ege-13.04.02-full\src\lpng\pngpriv.h	106;"	d
PNG_FUNCTION	C++\ege-13.04.02-full\src\lpng\pngread.c	/^PNG_FUNCTION(png_structp,PNGAPI$/;"	f
png_destroy_read_struct	C++\ege-13.04.02-full\src\lpng\pngread.c	/^png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr,$/;"	f
png_read_destroy	C++\ege-13.04.02-full\src\lpng\pngread.c	/^png_read_destroy(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_read_end	C++\ege-13.04.02-full\src\lpng\pngread.c	/^png_read_end(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_read_image	C++\ege-13.04.02-full\src\lpng\pngread.c	/^png_read_image(png_structp png_ptr, png_bytepp image)$/;"	f
png_read_info	C++\ege-13.04.02-full\src\lpng\pngread.c	/^png_read_info(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_read_png	C++\ege-13.04.02-full\src\lpng\pngread.c	/^png_read_png(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_read_row	C++\ege-13.04.02-full\src\lpng\pngread.c	/^png_read_row(png_structp png_ptr, png_bytep row, png_bytep dsp_row)$/;"	f
png_read_rows	C++\ege-13.04.02-full\src\lpng\pngread.c	/^png_read_rows(png_structp png_ptr, png_bytepp row,$/;"	f
png_read_update_info	C++\ege-13.04.02-full\src\lpng\pngread.c	/^png_read_update_info(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_set_read_status_fn	C++\ege-13.04.02-full\src\lpng\pngread.c	/^png_set_read_status_fn(png_structp png_ptr, png_read_status_ptr read_row_fn)$/;"	f
png_start_read_image	C++\ege-13.04.02-full\src\lpng\pngread.c	/^png_start_read_image(png_structp png_ptr)$/;"	f
MIN	C++\ege-13.04.02-full\src\lpng\pngrio.c	73;"	d	file:
NEAR_BUF_SIZE	C++\ege-13.04.02-full\src\lpng\pngrio.c	72;"	d	file:
png_default_read_data	C++\ege-13.04.02-full\src\lpng\pngrio.c	/^png_default_read_data(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f	file:
png_default_read_data	C++\ege-13.04.02-full\src\lpng\pngrio.c	/^png_default_read_data(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f
png_read_data	C++\ege-13.04.02-full\src\lpng\pngrio.c	/^png_read_data(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f
png_set_read_fn	C++\ege-13.04.02-full\src\lpng\pngrio.c	/^png_set_read_fn(png_structp png_ptr, png_voidp io_ptr,$/;"	f
left	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^   png_byte left;$/;"	m	struct:png_dsort_struct	file:
next	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^   struct png_dsort_struct FAR * next;$/;"	m	struct:png_dsort_struct	typeref:struct:png_dsort_struct::FAR	file:
png_build_grayscale_palette	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_build_grayscale_palette(int bit_depth, png_colorp palette)$/;"	f
png_do_background	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_do_background(png_row_infop row_info, png_bytep row,$/;"	f
png_do_chop	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_do_chop(png_row_infop row_info, png_bytep row)$/;"	f
png_do_expand	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_do_expand(png_row_infop row_info, png_bytep row,$/;"	f
png_do_expand_palette	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_do_expand_palette(png_row_infop row_info, png_bytep row,$/;"	f
png_do_gamma	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_do_gamma(png_row_infop row_info, png_bytep row,$/;"	f
png_do_gray_to_rgb	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_do_gray_to_rgb(png_row_infop row_info, png_bytep row)$/;"	f
png_do_quantize	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_do_quantize(png_row_infop row_info, png_bytep row,$/;"	f
png_do_read_filler	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_do_read_filler(png_row_infop row_info, png_bytep row,$/;"	f
png_do_read_intrapixel	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_do_read_intrapixel(png_row_infop row_info, png_bytep row)$/;"	f
png_do_read_invert_alpha	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_do_read_invert_alpha(png_row_infop row_info, png_bytep row)$/;"	f
png_do_read_swap_alpha	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_do_read_swap_alpha(png_row_infop row_info, png_bytep row)$/;"	f
png_do_read_transformations	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_do_read_transformations(png_structp png_ptr)$/;"	f
png_do_rgb_to_gray	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_do_rgb_to_gray(png_structp png_ptr, png_row_infop row_info, png_bytep row)$/;"	f
png_do_unpack	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_do_unpack(png_row_infop row_info, png_bytep row)$/;"	f
png_do_unshift	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_do_unshift(png_row_infop row_info, png_bytep row,$/;"	f
png_dsort	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^} png_dsort;$/;"	t	typeref:struct:png_dsort_struct	file:
png_dsort_struct	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^typedef struct png_dsort_struct$/;"	s	file:
png_dsortp	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^typedef png_dsort FAR *       png_dsortp;$/;"	t	file:
png_dsortpp	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^typedef png_dsort FAR * FAR * png_dsortpp;$/;"	t	file:
png_gamma_threshold	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_gamma_threshold(png_fixed_point scrn_gamma, png_fixed_point file_gamma)$/;"	f	file:
png_init_read_transformations	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_init_read_transformations(png_structp png_ptr)$/;"	f
png_read_transform_info	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_read_transform_info(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_set_background	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_background(png_structp png_ptr,$/;"	f
png_set_background_fixed	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_background_fixed(png_structp png_ptr,$/;"	f
png_set_crc_action	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_crc_action(png_structp png_ptr, int crit_action, int ancil_action)$/;"	f
png_set_expand	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_expand(png_structp png_ptr)$/;"	f
png_set_expand_gray_1_2_4_to_8	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_expand_gray_1_2_4_to_8(png_structp png_ptr)$/;"	f
png_set_gamma	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_gamma(png_structp png_ptr, double scrn_gamma, double file_gamma)$/;"	f
png_set_gamma_fixed	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_gamma_fixed(png_structp png_ptr, png_fixed_point scrn_gamma,$/;"	f
png_set_gray_to_rgb	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_gray_to_rgb(png_structp png_ptr)$/;"	f
png_set_palette_to_rgb	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_palette_to_rgb(png_structp png_ptr)$/;"	f
png_set_quantize	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_quantize(png_structp png_ptr, png_colorp palette,$/;"	f
png_set_read_user_transform_fn	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_read_user_transform_fn(png_structp png_ptr, png_user_transform_ptr$/;"	f
png_set_rgb_to_gray	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_rgb_to_gray(png_structp png_ptr, int error_action, double red,$/;"	f
png_set_rgb_to_gray_fixed	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_rgb_to_gray_fixed(png_structp png_ptr, int error_action,$/;"	f
png_set_strip_16	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_strip_16(png_structp png_ptr)$/;"	f
png_set_strip_alpha	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_strip_alpha(png_structp png_ptr)$/;"	f
png_set_tRNS_to_alpha	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^png_set_tRNS_to_alpha(png_structp png_ptr)$/;"	f
right	C++\ege-13.04.02-full\src\lpng\pngrtran.c	/^   png_byte right;$/;"	m	struct:png_dsort_struct	file:
PNG_FIXED_ERROR	C++\ege-13.04.02-full\src\lpng\pngrutil.c	40;"	d	file:
isnonalpha	C++\ege-13.04.02-full\src\lpng\pngrutil.c	2635;"	d	file:
png_check_chunk_name	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_check_chunk_name(png_structp png_ptr, png_const_bytep chunk_name)$/;"	f
png_combine_row	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_combine_row(png_structp png_ptr, png_bytep row, int mask)$/;"	f
png_crc_error	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_crc_error(png_structp png_ptr)$/;"	f
png_crc_finish	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_crc_finish(png_structp png_ptr, png_uint_32 skip)$/;"	f
png_crc_read	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_crc_read(png_structp png_ptr, png_bytep buf, png_size_t length)$/;"	f
png_decompress_chunk	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_decompress_chunk(png_structp png_ptr, int comp_type,$/;"	f
png_do_read_interlace	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_do_read_interlace(png_structp png_ptr)$/;"	f
png_get_fixed_point	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_get_fixed_point(png_structp png_ptr, png_const_bytep buf)$/;"	f	file:
png_get_int_32	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_get_int_32)(png_const_bytep buf)$/;"	f
png_get_uint_16	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_get_uint_16)(png_const_bytep buf)$/;"	f
png_get_uint_31	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_get_uint_31(png_structp png_ptr, png_const_bytep buf)$/;"	f
png_get_uint_32	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_get_uint_32)(png_const_bytep buf)$/;"	f
png_handle_IEND	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_IEND(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_IHDR	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_PLTE	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_PLTE(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_bKGD	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_bKGD(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_cHRM	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_cHRM(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_gAMA	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_gAMA(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_hIST	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_iCCP	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_iCCP(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_iTXt	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_iTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_oFFs	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_oFFs(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_pCAL	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_pCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_pHYs	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_pHYs(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_sBIT	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_sBIT(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_sCAL	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_sCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_sPLT	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_sPLT(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_sRGB	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_sRGB(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_tEXt	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_tEXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_tIME	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_tIME(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_tRNS	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_tRNS(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_unknown	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_unknown(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_zTXt	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_handle_zTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_inflate	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_inflate(png_structp png_ptr, png_bytep data, png_size_t size,$/;"	f	file:
png_read_chunk_header	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_read_chunk_header(png_structp png_ptr)$/;"	f
png_read_filter_row	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_read_filter_row(png_structp png_ptr, png_row_infop row_info, png_bytep row,$/;"	f
png_read_finish_row	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_read_finish_row(png_structp png_ptr)$/;"	f
png_read_sig	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_read_sig(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_read_start_row	C++\ege-13.04.02-full\src\lpng\pngrutil.c	/^png_read_start_row(png_structp png_ptr)$/;"	f
png_strtod	C++\ege-13.04.02-full\src\lpng\pngrutil.c	21;"	d	file:
png_permit_mng_features	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_permit_mng_features (png_structp png_ptr, png_uint_32 mng_features)$/;"	f
png_set_IHDR	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_IHDR(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_PLTE	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_PLTE(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_bKGD	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_bKGD(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_benign_errors	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_benign_errors(png_structp png_ptr, int allowed)$/;"	f
png_set_cHRM	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_cHRM(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_cHRM_fixed	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_cHRM_fixed(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_chunk_cache_max	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_chunk_cache_max (png_structp png_ptr,$/;"	f
png_set_chunk_malloc_max	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_chunk_malloc_max (png_structp png_ptr,$/;"	f
png_set_compression_buffer_size	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_compression_buffer_size(png_structp png_ptr, png_size_t size)$/;"	f
png_set_gAMA	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_gAMA(png_structp png_ptr, png_infop info_ptr, double file_gamma)$/;"	f
png_set_gAMA_fixed	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_gAMA_fixed(png_structp png_ptr, png_infop info_ptr, png_fixed_point$/;"	f
png_set_hIST	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_hIST(png_structp png_ptr, png_infop info_ptr, png_const_uint_16p hist)$/;"	f
png_set_iCCP	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_iCCP(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_invalid	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_invalid(png_structp png_ptr, png_infop info_ptr, int mask)$/;"	f
png_set_keep_unknown_chunks	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_keep_unknown_chunks(png_structp png_ptr, int keep, png_const_bytep$/;"	f
png_set_oFFs	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_oFFs(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_pCAL	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_pCAL(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_pHYs	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_pHYs(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_read_user_chunk_fn	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_read_user_chunk_fn(png_structp png_ptr, png_voidp user_chunk_ptr,$/;"	f
png_set_rows	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_rows(png_structp png_ptr, png_infop info_ptr, png_bytepp row_pointers)$/;"	f
png_set_sBIT	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_sBIT(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_sCAL	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_sCAL(png_structp png_ptr, png_infop info_ptr, int unit, double width,$/;"	f
png_set_sCAL_fixed	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_sCAL_fixed(png_structp png_ptr, png_infop info_ptr, int unit,$/;"	f
png_set_sCAL_s	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_sCAL_s(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_sPLT	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_sPLT(png_structp png_ptr,$/;"	f
png_set_sRGB	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_sRGB(png_structp png_ptr, png_infop info_ptr, int srgb_intent)$/;"	f
png_set_sRGB_gAMA_and_cHRM	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_sRGB_gAMA_and_cHRM(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_tIME	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_tIME(png_structp png_ptr, png_infop info_ptr, png_const_timep mod_time)$/;"	f
png_set_tRNS	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_tRNS(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_text	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_text(png_structp png_ptr, png_infop info_ptr, png_const_textp text_ptr,$/;"	f
png_set_text_2	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_text_2(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_unknown_chunk_location	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_unknown_chunk_location(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_unknown_chunks	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_unknown_chunks(png_structp png_ptr,$/;"	f
png_set_user_limits	C++\ege-13.04.02-full\src\lpng\pngset.c	/^png_set_user_limits (png_structp png_ptr, png_uint_32 user_width_max,$/;"	f
PNGSTRUCT_H	C++\ege-13.04.02-full\src\lpng\pngstruct.h	22;"	d
avg_row	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep avg_row;         \/* buffer to save "avg" row when filtering *\/$/;"	m	struct:png_struct_def
background	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_color_16 background;   \/* background color in screen gamma space *\/$/;"	m	struct:png_struct_def
background_1	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_color_16 background_1; \/* background normalized to gamma 1.0 *\/$/;"	m	struct:png_struct_def
background_gamma	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_fixed_point background_gamma;$/;"	m	struct:png_struct_def
background_gamma_type	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte background_gamma_type;$/;"	m	struct:png_struct_def
big_row_buf	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep big_row_buf;         \/* buffer to save current (unfiltered) row *\/$/;"	m	struct:png_struct_def
bit_depth	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte bit_depth;        \/* bit depth of file *\/$/;"	m	struct:png_struct_def
buffer_size	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_size_t buffer_size;           \/* total amount of available input data *\/$/;"	m	struct:png_struct_def
channels	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte channels;         \/* number of channels in file *\/$/;"	m	struct:png_struct_def
chunk_list	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep chunk_list;$/;"	m	struct:png_struct_def
chunk_name	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte chunk_name[5];    \/* null-terminated name of current chunk *\/$/;"	m	struct:png_struct_def
chunkdata	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^  png_charp chunkdata;  \/* buffer for reading chunk data *\/$/;"	m	struct:png_struct_def
color_type	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte color_type;       \/* color type of file *\/$/;"	m	struct:png_struct_def
compression	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte compression;      \/* file compression type (always 0) *\/$/;"	m	struct:png_struct_def
compression_type	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte compression_type;$/;"	m	struct:png_struct_def
crc	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 crc;           \/* current chunk CRC value *\/$/;"	m	struct:png_struct_def
cur_palette	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   int cur_palette;                  \/* current push library palette index *\/$/;"	m	struct:png_struct_def
current_buffer	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep current_buffer;         \/* buffer for recently used data *\/$/;"	m	struct:png_struct_def
current_buffer_ptr	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep current_buffer_ptr;     \/* current location in current_buffer *\/$/;"	m	struct:png_struct_def
current_buffer_size	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_size_t current_buffer_size;   \/* amount of data now in current_buffer *\/$/;"	m	struct:png_struct_def
current_text	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^     png_charp current_text;         \/* current text chunk buffer *\/$/;"	m	struct:png_struct_def
current_text_left	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^     png_size_t current_text_left;   \/* how much text left to read in input *\/$/;"	m	struct:png_struct_def
current_text_ptr	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^     png_charp current_text_ptr;     \/* current location in current_text *\/$/;"	m	struct:png_struct_def
current_text_size	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^     png_size_t current_text_size;   \/* current size of text input data *\/$/;"	m	struct:png_struct_def
do_filter	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte do_filter;        \/* row filter flags (see PNG_FILTER_ below ) *\/$/;"	m	struct:png_struct_def
end_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_progressive_end_ptr end_fn;   \/* called after image is complete *\/$/;"	m	struct:png_struct_def
error_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_error_ptr error_fn;    \/* function for printing errors and aborting *\/$/;"	m	struct:png_struct_def
error_ptr	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_voidp error_ptr;       \/* user supplied struct for error functions *\/$/;"	m	struct:png_struct_def
filler	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16 filler;           \/* filler bytes for pixel expansion *\/$/;"	m	struct:png_struct_def
filter	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte filter;           \/* file filter type (always 0) *\/$/;"	m	struct:png_struct_def
filter_costs	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16p filter_costs;        \/* relative filter calculation cost *\/$/;"	m	struct:png_struct_def
filter_type	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte filter_type;$/;"	m	struct:png_struct_def
filter_weights	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16p filter_weights;      \/* weight(s) for previous line(s) *\/$/;"	m	struct:png_struct_def
flags	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 flags;         \/* flags indicating various things to libpng *\/$/;"	m	struct:png_struct_def
flush_dist	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 flush_dist;    \/* how many rows apart to flush, 0 - no flush *\/$/;"	m	struct:png_struct_def
flush_rows	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 flush_rows;    \/* number of rows written since last flush *\/$/;"	m	struct:png_struct_def
free_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_free_ptr free_fn;          \/* function for freeing memory *\/$/;"	m	struct:png_struct_def
free_me	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 free_me;    \/* flags items libpng is responsible for freeing *\/$/;"	m	struct:png_struct_def
gamma	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_fixed_point gamma;        \/* file gamma value *\/$/;"	m	struct:png_struct_def
gamma_16_from_1	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16pp gamma_16_from_1; \/* converts from 1.0 to screen *\/$/;"	m	struct:png_struct_def
gamma_16_table	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16pp gamma_16_table; \/* gamma table for 16-bit depth files *\/$/;"	m	struct:png_struct_def
gamma_16_to_1	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16pp gamma_16_to_1; \/* converts from file to 1.0 *\/$/;"	m	struct:png_struct_def
gamma_from_1	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep gamma_from_1;    \/* converts from 1.0 to screen *\/$/;"	m	struct:png_struct_def
gamma_shift	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   int gamma_shift;      \/* number of "insignificant" bits in 16-bit gamma *\/$/;"	m	struct:png_struct_def
gamma_table	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep gamma_table;     \/* gamma table for 8-bit depth files *\/$/;"	m	struct:png_struct_def
gamma_to_1	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep gamma_to_1;      \/* converts from file to 1.0 *\/$/;"	m	struct:png_struct_def
height	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 height;        \/* height of image in pixels *\/$/;"	m	struct:png_struct_def
heuristic_method	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte heuristic_method;        \/* heuristic for row filter selection *\/$/;"	m	struct:png_struct_def
hist	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16p hist;                \/* histogram *\/$/;"	m	struct:png_struct_def
idat_size	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 idat_size;     \/* current IDAT size for read *\/$/;"	m	struct:png_struct_def
index_to_palette	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep index_to_palette;       \/* where the original index currently is$/;"	m	struct:png_struct_def
info_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_progressive_info_ptr info_fn; \/* called after header data fully read *\/$/;"	m	struct:png_struct_def
interlaced	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte interlaced;       \/* PNG_INTERLACE_NONE, PNG_INTERLACE_ADAM7 *\/$/;"	m	struct:png_struct_def
inv_filter_costs	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16p inv_filter_costs;    \/* 1\/relative filter calculation cost *\/$/;"	m	struct:png_struct_def
inv_filter_weights	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16p inv_filter_weights;  \/* 1\/weight(s) for previous line(s) *\/$/;"	m	struct:png_struct_def
io_ptr	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_voidp io_ptr;          \/* ptr to application struct for I\/O functions *\/$/;"	m	struct:png_struct_def
io_state	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 io_state;$/;"	m	struct:png_struct_def
iwidth	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 iwidth;        \/* width of current interlaced row in pixels *\/$/;"	m	struct:png_struct_def
longjmp_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_longjmp_ptr longjmp_fn;\/* setjmp non-local goto function. *\/$/;"	m	struct:png_struct_def
malloc_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_malloc_ptr malloc_fn;      \/* function for allocating memory *\/$/;"	m	struct:png_struct_def
mem_ptr	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_voidp mem_ptr;             \/* user supplied struct for mem functions *\/$/;"	m	struct:png_struct_def
mng_features_permitted	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 mng_features_permitted;$/;"	m	struct:png_struct_def
mode	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 mode;          \/* tells us where we are in the PNG file *\/$/;"	m	struct:png_struct_def
num_chunk_list	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   int num_chunk_list;$/;"	m	struct:png_struct_def
num_palette	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16 num_palette;   \/* number of color entries in palette *\/$/;"	m	struct:png_struct_def
num_prev_filters	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte num_prev_filters;        \/* number of weights for previous rows *\/$/;"	m	struct:png_struct_def
num_rows	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 num_rows;      \/* number of rows in current pass *\/$/;"	m	struct:png_struct_def
num_trans	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16 num_trans;     \/* number of transparency values *\/$/;"	m	struct:png_struct_def
offset_table	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep offset_table;$/;"	m	struct:png_struct_def
offset_table_count	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16 offset_table_count;$/;"	m	struct:png_struct_def
offset_table_count_free	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16 offset_table_count_free;$/;"	m	struct:png_struct_def
offset_table_number	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16 offset_table_number;$/;"	m	struct:png_struct_def
offset_table_ptr	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytepp offset_table_ptr;$/;"	m	struct:png_struct_def
old_big_row_buf_size	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^  png_size_t old_big_row_buf_size;$/;"	m	struct:png_struct_def
old_prev_row_size	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^  png_size_t old_prev_row_size;$/;"	m	struct:png_struct_def
output_flush_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_flush_ptr output_flush_fn; \/* Function for flushing output *\/$/;"	m	struct:png_struct_def
paeth_row	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep paeth_row;       \/* buffer to save "Paeth" row when filtering *\/$/;"	m	struct:png_struct_def
palette	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_colorp palette;        \/* palette from the input file *\/$/;"	m	struct:png_struct_def
palette_lookup	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep palette_lookup; \/* lookup table for quantizing *\/$/;"	m	struct:png_struct_def
palette_to_index	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep palette_to_index;       \/* which original index points to this$/;"	m	struct:png_struct_def
pass	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte pass;             \/* current interlace pass (0 - 6) *\/$/;"	m	struct:png_struct_def
pixel_depth	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte pixel_depth;      \/* number of bits per pixel *\/$/;"	m	struct:png_struct_def
png_jmpbuf	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   jmp_buf png_jmpbuf;            \/* used in png_error *\/$/;"	m	struct:png_struct_def
png_struct_def	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^struct png_struct_def$/;"	s
prev_filters	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep prev_filters;           \/* filter type(s) of previous row(s) *\/$/;"	m	struct:png_struct_def
prev_row	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep prev_row;        \/* buffer to save previous (unfiltered) row *\/$/;"	m	struct:png_struct_def
process_mode	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   int process_mode;                 \/* what push library is currently doing *\/$/;"	m	struct:png_struct_def
push_length	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 push_length;          \/* size of current input chunk *\/$/;"	m	struct:png_struct_def
quantize_index	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep quantize_index; \/* index translation for palette files *\/$/;"	m	struct:png_struct_def
quantize_sort	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep quantize_sort;          \/* working sort array *\/$/;"	m	struct:png_struct_def
read_data_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_rw_ptr read_data_fn;   \/* function for reading input data *\/$/;"	m	struct:png_struct_def
read_row_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_read_status_ptr read_row_fn;   \/* called after each row is decoded *\/$/;"	m	struct:png_struct_def
read_user_chunk_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_user_chunk_ptr read_user_chunk_fn; \/* user read chunk handler *\/$/;"	m	struct:png_struct_def
read_user_transform_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_user_transform_ptr read_user_transform_fn; \/* user read transform *\/$/;"	m	struct:png_struct_def
rgb_to_gray_blue_coeff	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16 rgb_to_gray_blue_coeff;$/;"	m	struct:png_struct_def
rgb_to_gray_green_coeff	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16 rgb_to_gray_green_coeff;$/;"	m	struct:png_struct_def
rgb_to_gray_red_coeff	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_16 rgb_to_gray_red_coeff;$/;"	m	struct:png_struct_def
rgb_to_gray_status	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte rgb_to_gray_status;$/;"	m	struct:png_struct_def
row_buf	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep row_buf;         \/* buffer to save current (unfiltered) row *\/$/;"	m	struct:png_struct_def
row_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_progressive_row_ptr row_fn;   \/* called after a prog. row is decoded *\/$/;"	m	struct:png_struct_def
row_info	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_row_info row_info;     \/* used for transformation routines *\/$/;"	m	struct:png_struct_def
row_number	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 row_number;    \/* current row in interlace pass *\/$/;"	m	struct:png_struct_def
rowbytes	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_size_t rowbytes;       \/* size of row in bytes *\/$/;"	m	struct:png_struct_def
save_buffer	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep save_buffer;            \/* buffer for previously read data *\/$/;"	m	struct:png_struct_def
save_buffer_max	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_size_t save_buffer_max;       \/* total size of save_buffer *\/$/;"	m	struct:png_struct_def
save_buffer_ptr	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep save_buffer_ptr;        \/* current location in save_buffer *\/$/;"	m	struct:png_struct_def
save_buffer_size	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_size_t save_buffer_size;      \/* amount of data now in save_buffer *\/$/;"	m	struct:png_struct_def
screen_gamma	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_fixed_point screen_gamma; \/* screen gamma value (display_exponent) *\/$/;"	m	struct:png_struct_def
shift	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_color_8 shift;         \/* shift for significant bit tranformation *\/$/;"	m	struct:png_struct_def
sig_bit	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_color_8 sig_bit;       \/* significant bits in each available channel *\/$/;"	m	struct:png_struct_def
sig_bytes	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte sig_bytes;        \/* magic bytes read\/written from start of file *\/$/;"	m	struct:png_struct_def
skip_length	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 skip_length;          \/* bytes to skip in input data *\/$/;"	m	struct:png_struct_def
sub_row	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep sub_row;         \/* buffer to save "sub" row when filtering *\/$/;"	m	struct:png_struct_def
time_buffer	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_charp time_buffer; \/* String to hold RFC 1123 time text *\/$/;"	m	struct:png_struct_def
trans_alpha	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep trans_alpha;           \/* alpha values for paletted files *\/$/;"	m	struct:png_struct_def
trans_color	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_color_16 trans_color;  \/* transparent color for non-paletted files *\/$/;"	m	struct:png_struct_def
transformations	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 transformations; \/* which transformations to perform *\/$/;"	m	struct:png_struct_def
unknown_chunk	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_unknown_chunk unknown_chunk;$/;"	m	struct:png_struct_def
up_row	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep up_row;          \/* buffer to save "up" row when filtering *\/$/;"	m	struct:png_struct_def
user_chunk_cache_max	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 user_chunk_cache_max;$/;"	m	struct:png_struct_def
user_chunk_malloc_max	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_alloc_size_t user_chunk_malloc_max;$/;"	m	struct:png_struct_def
user_chunk_ptr	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_voidp user_chunk_ptr;$/;"	m	struct:png_struct_def
user_height_max	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 user_height_max;$/;"	m	struct:png_struct_def
user_transform_channels	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte user_transform_channels; \/* channels in user transformed pixels *\/$/;"	m	struct:png_struct_def
user_transform_depth	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte user_transform_depth;    \/* bit depth of user transformed pixels *\/$/;"	m	struct:png_struct_def
user_transform_ptr	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_voidp user_transform_ptr; \/* user supplied struct for user transform *\/$/;"	m	struct:png_struct_def
user_width_max	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 user_width_max;$/;"	m	struct:png_struct_def
usr_bit_depth	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte usr_bit_depth;    \/* bit depth of users row *\/$/;"	m	struct:png_struct_def
usr_channels	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_byte usr_channels;     \/* channels at start of write *\/$/;"	m	struct:png_struct_def
usr_width	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 usr_width;     \/* width of row at start of write *\/$/;"	m	struct:png_struct_def
warning_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_error_ptr warning_fn;  \/* function for printing warnings *\/$/;"	m	struct:png_struct_def
width	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_uint_32 width;         \/* width of image in pixels *\/$/;"	m	struct:png_struct_def
write_data_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_rw_ptr write_data_fn;  \/* function for writing output data *\/$/;"	m	struct:png_struct_def
write_row_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_write_status_ptr write_row_fn; \/* called after each row is encoded *\/$/;"	m	struct:png_struct_def
write_user_transform_fn	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_user_transform_ptr write_user_transform_fn; \/* user write transform *\/$/;"	m	struct:png_struct_def
zbuf	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   png_bytep zbuf;            \/* buffer for zlib *\/$/;"	m	struct:png_struct_def
zbuf_size	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   uInt zbuf_size;            \/* size of zbuf (typically 65536) *\/$/;"	m	struct:png_struct_def
zlib_level	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   int zlib_level;            \/* holds zlib compression level *\/$/;"	m	struct:png_struct_def
zlib_mem_level	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   int zlib_mem_level;        \/* holds zlib compression memory level *\/$/;"	m	struct:png_struct_def
zlib_method	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   int zlib_method;           \/* holds zlib compression method *\/$/;"	m	struct:png_struct_def
zlib_strategy	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   int zlib_strategy;         \/* holds zlib compression strategy *\/$/;"	m	struct:png_struct_def
zlib_window_bits	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   int zlib_window_bits;      \/* holds zlib compression window bits *\/$/;"	m	struct:png_struct_def
zstream	C++\ege-13.04.02-full\src\lpng\pngstruct.h	/^   z_stream zstream;          \/* pointer to decompression structure (below) *\/$/;"	m	struct:png_struct_def
fourbppswaptable	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^static PNG_CONST png_byte fourbppswaptable[256] = {$/;"	v	file:
onebppswaptable	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^static PNG_CONST png_byte onebppswaptable[256] = {$/;"	v	file:
png_do_bgr	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_do_bgr(png_row_infop row_info, png_bytep row)$/;"	f
png_do_invert	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_do_invert(png_row_infop row_info, png_bytep row)$/;"	f
png_do_packswap	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_do_packswap(png_row_infop row_info, png_bytep row)$/;"	f
png_do_strip_filler	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_do_strip_filler(png_row_infop row_info, png_bytep row, png_uint_32 flags)$/;"	f
png_do_swap	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_do_swap(png_row_infop row_info, png_bytep row)$/;"	f
png_get_current_pass_number	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_get_current_pass_number(png_const_structp png_ptr)$/;"	f
png_get_current_row_number	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_get_current_row_number(png_const_structp png_ptr)$/;"	f
png_get_user_transform_ptr	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_get_user_transform_ptr(png_const_structp png_ptr)$/;"	f
png_set_add_alpha	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_set_add_alpha(png_structp png_ptr, png_uint_32 filler, int filler_loc)$/;"	f
png_set_bgr	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_set_bgr(png_structp png_ptr)$/;"	f
png_set_filler	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_set_filler(png_structp png_ptr, png_uint_32 filler, int filler_loc)$/;"	f
png_set_interlace_handling	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_set_interlace_handling(png_structp png_ptr)$/;"	f
png_set_invert_alpha	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_set_invert_alpha(png_structp png_ptr)$/;"	f
png_set_invert_mono	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_set_invert_mono(png_structp png_ptr)$/;"	f
png_set_packing	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_set_packing(png_structp png_ptr)$/;"	f
png_set_packswap	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_set_packswap(png_structp png_ptr)$/;"	f
png_set_shift	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_set_shift(png_structp png_ptr, png_const_color_8p true_bits)$/;"	f
png_set_swap	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_set_swap(png_structp png_ptr)$/;"	f
png_set_swap_alpha	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_set_swap_alpha(png_structp png_ptr)$/;"	f
png_set_user_transform_info	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^png_set_user_transform_info(png_structp png_ptr, png_voidp$/;"	f
twobppswaptable	C++\ege-13.04.02-full\src\lpng\pngtrans.c	/^static PNG_CONST png_byte twobppswaptable[256] = {$/;"	v	file:
MIN	C++\ege-13.04.02-full\src\lpng\pngwio.c	70;"	d	file:
NEAR_BUF_SIZE	C++\ege-13.04.02-full\src\lpng\pngwio.c	69;"	d	file:
png_default_flush	C++\ege-13.04.02-full\src\lpng\pngwio.c	/^png_default_flush(png_structp png_ptr)$/;"	f
png_default_write_data	C++\ege-13.04.02-full\src\lpng\pngwio.c	/^png_default_write_data(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f
png_far_to_near	C++\ege-13.04.02-full\src\lpng\pngwio.c	/^void *png_far_to_near(png_structp png_ptr, png_voidp ptr, int check)$/;"	f
png_flush	C++\ege-13.04.02-full\src\lpng\pngwio.c	/^png_flush(png_structp png_ptr)$/;"	f
png_set_write_fn	C++\ege-13.04.02-full\src\lpng\pngwio.c	/^png_set_write_fn(png_structp png_ptr, png_voidp io_ptr,$/;"	f
png_write_data	C++\ege-13.04.02-full\src\lpng\pngwio.c	/^png_write_data(png_structp png_ptr, png_const_bytep data, png_size_t length)$/;"	f
PNG_FUNCTION	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^PNG_FUNCTION(png_structp,PNGAPI$/;"	f
png_convert_from_struct_tm	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_convert_from_struct_tm(png_timep ptime, PNG_CONST struct tm FAR * ttime)$/;"	f
png_convert_from_time_t	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_convert_from_time_t(png_timep ptime, time_t ttime)$/;"	f
png_destroy_write_struct	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_destroy_write_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr)$/;"	f
png_init_filter_heuristics	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_init_filter_heuristics(png_structp png_ptr, int heuristic_method,$/;"	f	file:
png_reset_filter_heuristics	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_reset_filter_heuristics(png_structp png_ptr)$/;"	f	file:
png_set_compression_level	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_set_compression_level(png_structp png_ptr, int level)$/;"	f
png_set_compression_mem_level	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_set_compression_mem_level(png_structp png_ptr, int mem_level)$/;"	f
png_set_compression_method	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_set_compression_method(png_structp png_ptr, int method)$/;"	f
png_set_compression_strategy	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_set_compression_strategy(png_structp png_ptr, int strategy)$/;"	f
png_set_compression_window_bits	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_set_compression_window_bits(png_structp png_ptr, int window_bits)$/;"	f
png_set_filter	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_set_filter(png_structp png_ptr, int method, int filters)$/;"	f
png_set_filter_heuristics	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_set_filter_heuristics(png_structp png_ptr, int heuristic_method,$/;"	f
png_set_filter_heuristics_fixed	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_set_filter_heuristics_fixed(png_structp png_ptr, int heuristic_method,$/;"	f
png_set_flush	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_set_flush(png_structp png_ptr, int nrows)$/;"	f
png_set_write_status_fn	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_set_write_status_fn(png_structp png_ptr, png_write_status_ptr write_row_fn)$/;"	f
png_set_write_user_transform_fn	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_set_write_user_transform_fn(png_structp png_ptr, png_user_transform_ptr$/;"	f
png_write_destroy	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_write_destroy(png_structp png_ptr)$/;"	f
png_write_end	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_write_end(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_write_flush	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_write_flush(png_structp png_ptr)$/;"	f
png_write_image	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_write_image(png_structp png_ptr, png_bytepp image)$/;"	f
png_write_info	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_write_info(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_write_info_before_PLTE	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_write_info_before_PLTE(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_write_png	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_write_png(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_write_row	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_write_row(png_structp png_ptr, png_const_bytep row)$/;"	f
png_write_rows	C++\ege-13.04.02-full\src\lpng\pngwrite.c	/^png_write_rows(png_structp png_ptr, png_bytepp row,$/;"	f
png_do_pack	C++\ege-13.04.02-full\src\lpng\pngwtran.c	/^png_do_pack(png_row_infop row_info, png_bytep row, png_uint_32 bit_depth)$/;"	f
png_do_shift	C++\ege-13.04.02-full\src\lpng\pngwtran.c	/^png_do_shift(png_row_infop row_info, png_bytep row,$/;"	f
png_do_write_intrapixel	C++\ege-13.04.02-full\src\lpng\pngwtran.c	/^png_do_write_intrapixel(png_row_infop row_info, png_bytep row)$/;"	f
png_do_write_invert_alpha	C++\ege-13.04.02-full\src\lpng\pngwtran.c	/^png_do_write_invert_alpha(png_row_infop row_info, png_bytep row)$/;"	f
png_do_write_swap_alpha	C++\ege-13.04.02-full\src\lpng\pngwtran.c	/^png_do_write_swap_alpha(png_row_infop row_info, png_bytep row)$/;"	f
png_do_write_transformations	C++\ege-13.04.02-full\src\lpng\pngwtran.c	/^png_do_write_transformations(png_structp png_ptr)$/;"	f
PNG_HIMASK	C++\ege-13.04.02-full\src\lpng\pngwutil.c	2187;"	d	file:
PNG_HISHIFT	C++\ege-13.04.02-full\src\lpng\pngwutil.c	2185;"	d	file:
PNG_LOMASK	C++\ege-13.04.02-full\src\lpng\pngwutil.c	2186;"	d	file:
PNG_MAXSUM	C++\ege-13.04.02-full\src\lpng\pngwutil.c	2184;"	d	file:
compression_state	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^} compression_state;$/;"	t	typeref:struct:__anon29	file:
input	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^   png_const_bytep input;   \/* The uncompressed input data *\/$/;"	m	struct:__anon29	file:
input_len	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^   png_size_t input_len;    \/* Its length *\/$/;"	m	struct:__anon29	file:
max_output_ptr	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^   int max_output_ptr;      \/* Size of output_ptr *\/$/;"	m	struct:__anon29	file:
num_output_ptr	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^   int num_output_ptr;      \/* Number of output pointers used *\/$/;"	m	struct:__anon29	file:
output_ptr	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^   png_bytep *output_ptr;   \/* Array of pointers to output *\/$/;"	m	struct:__anon29	file:
png_check_keyword	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_check_keyword(png_structp png_ptr, png_const_charp key, png_charpp new_key)$/;"	f
png_do_write_interlace	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_do_write_interlace(png_row_infop row_info, png_bytep row, int pass)$/;"	f
png_save_int_32	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_save_int_32(png_bytep buf, png_int_32 i)$/;"	f
png_save_uint_16	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_save_uint_16(png_bytep buf, unsigned int i)$/;"	f
png_save_uint_32	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_save_uint_32(png_bytep buf, png_uint_32 i)$/;"	f
png_text_compress	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_text_compress(png_structp png_ptr,$/;"	f	file:
png_write_IDAT	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_IDAT(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f
png_write_IEND	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_IEND(png_structp png_ptr)$/;"	f
png_write_IHDR	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_IHDR(png_structp png_ptr, png_uint_32 width, png_uint_32 height,$/;"	f
png_write_PLTE	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_PLTE(png_structp png_ptr, png_const_colorp palette,$/;"	f
png_write_bKGD	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_bKGD(png_structp png_ptr, png_const_color_16p back, int color_type)$/;"	f
png_write_cHRM_fixed	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_cHRM_fixed(png_structp png_ptr, png_fixed_point white_x,$/;"	f
png_write_chunk	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_chunk(png_structp png_ptr, png_const_bytep chunk_name,$/;"	f
png_write_chunk_data	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_chunk_data(png_structp png_ptr, png_const_bytep data,$/;"	f
png_write_chunk_end	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_chunk_end(png_structp png_ptr)$/;"	f
png_write_chunk_start	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_chunk_start(png_structp png_ptr, png_const_bytep chunk_name,$/;"	f
png_write_compressed_data_out	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_compressed_data_out(png_structp png_ptr, compression_state *comp)$/;"	f	file:
png_write_filtered_row	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_filtered_row(png_structp png_ptr, png_bytep filtered_row)$/;"	f
png_write_find_filter	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_find_filter(png_structp png_ptr, png_row_infop row_info)$/;"	f
png_write_finish_row	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_finish_row(png_structp png_ptr)$/;"	f
png_write_gAMA_fixed	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_gAMA_fixed(png_structp png_ptr, png_fixed_point file_gamma)$/;"	f
png_write_hIST	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_hIST(png_structp png_ptr, png_const_uint_16p hist, int num_hist)$/;"	f
png_write_iCCP	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_iCCP(png_structp png_ptr, png_const_charp name, int compression_type,$/;"	f
png_write_iTXt	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_iTXt(png_structp png_ptr, int compression, png_const_charp key,$/;"	f
png_write_oFFs	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_oFFs(png_structp png_ptr, png_int_32 x_offset, png_int_32 y_offset,$/;"	f
png_write_pCAL	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_pCAL(png_structp png_ptr, png_charp purpose, png_int_32 X0,$/;"	f
png_write_pHYs	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_pHYs(png_structp png_ptr, png_uint_32 x_pixels_per_unit,$/;"	f
png_write_sBIT	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_sBIT(png_structp png_ptr, png_const_color_8p sbit, int color_type)$/;"	f
png_write_sCAL_s	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_sCAL_s(png_structp png_ptr, int unit, png_const_charp width,$/;"	f
png_write_sPLT	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_sPLT(png_structp png_ptr, png_const_sPLT_tp spalette)$/;"	f
png_write_sRGB	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_sRGB(png_structp png_ptr, int srgb_intent)$/;"	f
png_write_sig	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_sig(png_structp png_ptr)$/;"	f
png_write_start_row	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_start_row(png_structp png_ptr)$/;"	f
png_write_tEXt	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_tEXt(png_structp png_ptr, png_const_charp key, png_const_charp text,$/;"	f
png_write_tIME	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_tIME(png_structp png_ptr, png_const_timep mod_time)$/;"	f
png_write_tRNS	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_tRNS(png_structp png_ptr, png_const_bytep trans_alpha,$/;"	f
png_write_zTXt	C++\ege-13.04.02-full\src\lpng\pngwutil.c	/^png_write_zTXt(png_structp png_ptr, png_const_charp key, png_const_charp text,$/;"	f
Buf_size	C++\ege-13.04.02-full\src\lpng\trees.c	77;"	d	file:
DIST_CODE_LEN	C++\ege-13.04.02-full\src\lpng\trees.c	86;"	d	file:
END_BLOCK	C++\ege-13.04.02-full\src\lpng\trees.c	50;"	d	file:
MAX_BL_BITS	C++\ege-13.04.02-full\src\lpng\trees.c	47;"	d	file:
REPZ_11_138	C++\ege-13.04.02-full\src\lpng\trees.c	59;"	d	file:
REPZ_3_10	C++\ege-13.04.02-full\src\lpng\trees.c	56;"	d	file:
REP_3_6	C++\ege-13.04.02-full\src\lpng\trees.c	53;"	d	file:
SEPARATOR	C++\ege-13.04.02-full\src\lpng\trees.c	329;"	d	file:
SMALLEST	C++\ege-13.04.02-full\src\lpng\trees.c	430;"	d	file:
_dist_code	C++\ege-13.04.02-full\src\lpng\trees.c	/^uch _dist_code[DIST_CODE_LEN];$/;"	v
_length_code	C++\ege-13.04.02-full\src\lpng\trees.c	/^uch _length_code[MAX_MATCH-MIN_MATCH+1];$/;"	v
_tr_align	C++\ege-13.04.02-full\src\lpng\trees.c	/^void ZLIB_INTERNAL _tr_align(s)$/;"	f
_tr_flush_block	C++\ege-13.04.02-full\src\lpng\trees.c	/^void ZLIB_INTERNAL _tr_flush_block(s, buf, stored_len, last)$/;"	f
_tr_init	C++\ege-13.04.02-full\src\lpng\trees.c	/^void ZLIB_INTERNAL _tr_init(s)$/;"	f
_tr_stored_block	C++\ege-13.04.02-full\src\lpng\trees.c	/^void ZLIB_INTERNAL _tr_stored_block(s, buf, stored_len, last)$/;"	f
_tr_tally	C++\ege-13.04.02-full\src\lpng\trees.c	/^int ZLIB_INTERNAL _tr_tally (s, dist, lc)$/;"	f
base_dist	C++\ege-13.04.02-full\src\lpng\trees.c	/^local int base_dist[D_CODES];$/;"	v
base_length	C++\ege-13.04.02-full\src\lpng\trees.c	/^local int base_length[LENGTH_CODES];$/;"	v
bi_flush	C++\ege-13.04.02-full\src\lpng\trees.c	/^local void bi_flush(s)$/;"	f
bi_reverse	C++\ege-13.04.02-full\src\lpng\trees.c	/^local unsigned bi_reverse(code, len)$/;"	f
bi_windup	C++\ege-13.04.02-full\src\lpng\trees.c	/^local void bi_windup(s)$/;"	f
bl_order	C++\ege-13.04.02-full\src\lpng\trees.c	/^local const uch bl_order[BL_CODES]$/;"	v
build_bl_tree	C++\ege-13.04.02-full\src\lpng\trees.c	/^local int build_bl_tree(s)$/;"	f
build_tree	C++\ege-13.04.02-full\src\lpng\trees.c	/^local void build_tree(s, desc)$/;"	f
compress_block	C++\ege-13.04.02-full\src\lpng\trees.c	/^local void compress_block(s, ltree, dtree)$/;"	f
copy_block	C++\ege-13.04.02-full\src\lpng\trees.c	/^local void copy_block(s, buf, len, header)$/;"	f
detect_data_type	C++\ege-13.04.02-full\src\lpng\trees.c	/^local int detect_data_type(s)$/;"	f
elems	C++\ege-13.04.02-full\src\lpng\trees.c	/^    int     elems;               \/* max number of elements in the tree *\/$/;"	m	struct:static_tree_desc_s	file:
extra_base	C++\ege-13.04.02-full\src\lpng\trees.c	/^    int     extra_base;          \/* base index for extra_bits *\/$/;"	m	struct:static_tree_desc_s	file:
extra_bits	C++\ege-13.04.02-full\src\lpng\trees.c	/^    const intf *extra_bits;      \/* extra bits for each code or NULL *\/$/;"	m	struct:static_tree_desc_s	file:
extra_blbits	C++\ege-13.04.02-full\src\lpng\trees.c	/^local const int extra_blbits[BL_CODES]\/* extra bits for each bit length code *\/$/;"	v
extra_dbits	C++\ege-13.04.02-full\src\lpng\trees.c	/^local const int extra_dbits[D_CODES] \/* extra bits for each distance code *\/$/;"	v
extra_lbits	C++\ege-13.04.02-full\src\lpng\trees.c	/^local const int extra_lbits[LENGTH_CODES] \/* extra bits for each length code *\/$/;"	v
gen_bitlen	C++\ege-13.04.02-full\src\lpng\trees.c	/^local void gen_bitlen(s, desc)$/;"	f
gen_codes	C++\ege-13.04.02-full\src\lpng\trees.c	/^local void gen_codes (tree, max_code, bl_count)$/;"	f
gen_trees_header	C++\ege-13.04.02-full\src\lpng\trees.c	/^void gen_trees_header()$/;"	f
init_block	C++\ege-13.04.02-full\src\lpng\trees.c	/^local void init_block(s)$/;"	f
max_length	C++\ege-13.04.02-full\src\lpng\trees.c	/^    int     max_length;          \/* max bit length for the codes *\/$/;"	m	struct:static_tree_desc_s	file:
pqdownheap	C++\ege-13.04.02-full\src\lpng\trees.c	/^local void pqdownheap(s, tree, k)$/;"	f
pqremove	C++\ege-13.04.02-full\src\lpng\trees.c	438;"	d	file:
put_short	C++\ege-13.04.02-full\src\lpng\trees.c	181;"	d	file:
scan_tree	C++\ege-13.04.02-full\src\lpng\trees.c	/^local void scan_tree (s, tree, max_code)$/;"	f
send_all_trees	C++\ege-13.04.02-full\src\lpng\trees.c	/^local void send_all_trees(s, lcodes, dcodes, blcodes)$/;"	f
send_bits	C++\ege-13.04.02-full\src\lpng\trees.c	/^local void send_bits(s, value, length)$/;"	f
send_bits	C++\ege-13.04.02-full\src\lpng\trees.c	218;"	d	file:
send_code	C++\ege-13.04.02-full\src\lpng\trees.c	168;"	d	file:
send_code	C++\ege-13.04.02-full\src\lpng\trees.c	172;"	d	file:
send_tree	C++\ege-13.04.02-full\src\lpng\trees.c	/^local void send_tree (s, tree, max_code)$/;"	f
smaller	C++\ege-13.04.02-full\src\lpng\trees.c	449;"	d	file:
static_bl_desc	C++\ege-13.04.02-full\src\lpng\trees.c	/^local static_tree_desc  static_bl_desc =$/;"	v
static_d_desc	C++\ege-13.04.02-full\src\lpng\trees.c	/^local static_tree_desc  static_d_desc =$/;"	v
static_dtree	C++\ege-13.04.02-full\src\lpng\trees.c	/^local ct_data static_dtree[D_CODES];$/;"	v
static_l_desc	C++\ege-13.04.02-full\src\lpng\trees.c	/^local static_tree_desc  static_l_desc =$/;"	v
static_ltree	C++\ege-13.04.02-full\src\lpng\trees.c	/^local ct_data static_ltree[L_CODES+2];$/;"	v
static_tree	C++\ege-13.04.02-full\src\lpng\trees.c	/^    const ct_data *static_tree;  \/* static tree or NULL *\/$/;"	m	struct:static_tree_desc_s	file:
static_tree_desc_s	C++\ege-13.04.02-full\src\lpng\trees.c	/^struct static_tree_desc_s {$/;"	s	file:
tr_static_init	C++\ege-13.04.02-full\src\lpng\trees.c	/^local void tr_static_init()$/;"	f
_dist_code	C++\ege-13.04.02-full\src\lpng\trees.h	/^const uch ZLIB_INTERNAL _dist_code[DIST_CODE_LEN] = {$/;"	v
_length_code	C++\ege-13.04.02-full\src\lpng\trees.h	/^const uch ZLIB_INTERNAL _length_code[MAX_MATCH-MIN_MATCH+1]= {$/;"	v
base_dist	C++\ege-13.04.02-full\src\lpng\trees.h	/^local const int base_dist[D_CODES] = {$/;"	v
base_length	C++\ege-13.04.02-full\src\lpng\trees.h	/^local const int base_length[LENGTH_CODES] = {$/;"	v
static_dtree	C++\ege-13.04.02-full\src\lpng\trees.h	/^local const ct_data static_dtree[D_CODES] = {$/;"	v
static_ltree	C++\ege-13.04.02-full\src\lpng\trees.h	/^local const ct_data static_ltree[L_CODES+2] = {$/;"	v
ZLIB_INTERNAL	C++\ege-13.04.02-full\src\lpng\uncompr.c	8;"	d	file:
uncompress	C++\ege-13.04.02-full\src\lpng\uncompr.c	/^int ZEXPORT uncompress (dest, destLen, source, sourceLen)$/;"	f
Byte	C++\ege-13.04.02-full\src\lpng\zconf.h	/^typedef unsigned char  Byte;  \/* 8 bits *\/$/;"	t
Byte	C++\ege-13.04.02-full\src\lpng\zconf.h	109;"	d
Bytef	C++\ege-13.04.02-full\src\lpng\zconf.h	/^   typedef Byte  FAR Bytef;$/;"	t
Bytef	C++\ege-13.04.02-full\src\lpng\zconf.h	110;"	d
Bytef	C++\ege-13.04.02-full\src\lpng\zconf.h	340;"	d
FAR	C++\ege-13.04.02-full\src\lpng\zconf.h	257;"	d
FAR	C++\ege-13.04.02-full\src\lpng\zconf.h	259;"	d
FAR	C++\ege-13.04.02-full\src\lpng\zconf.h	266;"	d
FAR	C++\ege-13.04.02-full\src\lpng\zconf.h	268;"	d
FAR	C++\ege-13.04.02-full\src\lpng\zconf.h	292;"	d
FAR	C++\ege-13.04.02-full\src\lpng\zconf.h	329;"	d
MAXSEG_64K	C++\ege-13.04.02-full\src\lpng\zconf.h	161;"	d
MAX_MEM_LEVEL	C++\ege-13.04.02-full\src\lpng\zconf.h	208;"	d
MAX_MEM_LEVEL	C++\ege-13.04.02-full\src\lpng\zconf.h	210;"	d
MAX_WBITS	C++\ege-13.04.02-full\src\lpng\zconf.h	220;"	d
MSDOS	C++\ege-13.04.02-full\src\lpng\zconf.h	135;"	d
NO_DUMMY_DECL	C++\ege-13.04.02-full\src\lpng\zconf.h	202;"	d
NO_vsnprintf	C++\ege-13.04.02-full\src\lpng\zconf.h	404;"	d
NO_vsnprintf	C++\ege-13.04.02-full\src\lpng\zconf.h	408;"	d
OF	C++\ege-13.04.02-full\src\lpng\zconf.h	240;"	d
OF	C++\ege-13.04.02-full\src\lpng\zconf.h	242;"	d
OS2	C++\ege-13.04.02-full\src\lpng\zconf.h	138;"	d
SEEK_CUR	C++\ege-13.04.02-full\src\lpng\zconf.h	389;"	d
SEEK_END	C++\ege-13.04.02-full\src\lpng\zconf.h	390;"	d
SEEK_SET	C++\ege-13.04.02-full\src\lpng\zconf.h	388;"	d
SMALL_MEDIUM	C++\ege-13.04.02-full\src\lpng\zconf.h	255;"	d
SMALL_MEDIUM	C++\ege-13.04.02-full\src\lpng\zconf.h	264;"	d
STDC	C++\ege-13.04.02-full\src\lpng\zconf.h	169;"	d
STDC	C++\ege-13.04.02-full\src\lpng\zconf.h	178;"	d
STDC	C++\ege-13.04.02-full\src\lpng\zconf.h	181;"	d
STDC	C++\ege-13.04.02-full\src\lpng\zconf.h	184;"	d
STDC	C++\ege-13.04.02-full\src\lpng\zconf.h	187;"	d
STDC	C++\ege-13.04.02-full\src\lpng\zconf.h	191;"	d
STDC99	C++\ege-13.04.02-full\src\lpng\zconf.h	173;"	d
SYS16BIT	C++\ege-13.04.02-full\src\lpng\zconf.h	151;"	d
UNALIGNED_OK	C++\ege-13.04.02-full\src\lpng\zconf.h	164;"	d
WIN32	C++\ege-13.04.02-full\src\lpng\zconf.h	145;"	d
WINDOWS	C++\ege-13.04.02-full\src\lpng\zconf.h	141;"	d
ZCONF_H	C++\ege-13.04.02-full\src\lpng\zconf.h	9;"	d
ZEXPORT	C++\ege-13.04.02-full\src\lpng\zconf.h	297;"	d
ZEXPORT	C++\ege-13.04.02-full\src\lpng\zconf.h	309;"	d
ZEXPORT	C++\ege-13.04.02-full\src\lpng\zconf.h	312;"	d
ZEXPORT	C++\ege-13.04.02-full\src\lpng\zconf.h	322;"	d
ZEXPORTVA	C++\ege-13.04.02-full\src\lpng\zconf.h	299;"	d
ZEXPORTVA	C++\ege-13.04.02-full\src\lpng\zconf.h	301;"	d
ZEXPORTVA	C++\ege-13.04.02-full\src\lpng\zconf.h	310;"	d
ZEXPORTVA	C++\ege-13.04.02-full\src\lpng\zconf.h	313;"	d
ZEXPORTVA	C++\ege-13.04.02-full\src\lpng\zconf.h	325;"	d
ZEXTERN	C++\ege-13.04.02-full\src\lpng\zconf.h	280;"	d
ZEXTERN	C++\ege-13.04.02-full\src\lpng\zconf.h	282;"	d
ZEXTERN	C++\ege-13.04.02-full\src\lpng\zconf.h	319;"	d
Z_HAVE_UNISTD_H	C++\ege-13.04.02-full\src\lpng\zconf.h	360;"	d
_LARGEFILE64_SOURCE	C++\ege-13.04.02-full\src\lpng\zconf.h	374;"	d
_dist_code	C++\ege-13.04.02-full\src\lpng\zconf.h	20;"	d
_length_code	C++\ege-13.04.02-full\src\lpng\zconf.h	21;"	d
_tr_align	C++\ege-13.04.02-full\src\lpng\zconf.h	22;"	d
_tr_flush_block	C++\ege-13.04.02-full\src\lpng\zconf.h	23;"	d
_tr_init	C++\ege-13.04.02-full\src\lpng\zconf.h	24;"	d
_tr_stored_block	C++\ege-13.04.02-full\src\lpng\zconf.h	25;"	d
_tr_tally	C++\ege-13.04.02-full\src\lpng\zconf.h	26;"	d
adler32	C++\ege-13.04.02-full\src\lpng\zconf.h	27;"	d
adler32_combine	C++\ege-13.04.02-full\src\lpng\zconf.h	28;"	d
adler32_combine64	C++\ege-13.04.02-full\src\lpng\zconf.h	29;"	d
alloc_func	C++\ege-13.04.02-full\src\lpng\zconf.h	111;"	d
charf	C++\ege-13.04.02-full\src\lpng\zconf.h	/^typedef char  FAR charf;$/;"	t
charf	C++\ege-13.04.02-full\src\lpng\zconf.h	112;"	d
compress	C++\ege-13.04.02-full\src\lpng\zconf.h	30;"	d
compress2	C++\ege-13.04.02-full\src\lpng\zconf.h	31;"	d
compressBound	C++\ege-13.04.02-full\src\lpng\zconf.h	32;"	d
const	C++\ege-13.04.02-full\src\lpng\zconf.h	196;"	d
crc32	C++\ege-13.04.02-full\src\lpng\zconf.h	33;"	d
crc32_combine	C++\ege-13.04.02-full\src\lpng\zconf.h	34;"	d
crc32_combine64	C++\ege-13.04.02-full\src\lpng\zconf.h	35;"	d
deflate	C++\ege-13.04.02-full\src\lpng\zconf.h	36;"	d
deflateBound	C++\ege-13.04.02-full\src\lpng\zconf.h	37;"	d
deflateCopy	C++\ege-13.04.02-full\src\lpng\zconf.h	38;"	d
deflateEnd	C++\ege-13.04.02-full\src\lpng\zconf.h	39;"	d
deflateInit2_	C++\ege-13.04.02-full\src\lpng\zconf.h	40;"	d
deflateInit_	C++\ege-13.04.02-full\src\lpng\zconf.h	41;"	d
deflateParams	C++\ege-13.04.02-full\src\lpng\zconf.h	42;"	d
deflatePrime	C++\ege-13.04.02-full\src\lpng\zconf.h	43;"	d
deflateReset	C++\ege-13.04.02-full\src\lpng\zconf.h	44;"	d
deflateSetDictionary	C++\ege-13.04.02-full\src\lpng\zconf.h	45;"	d
deflateSetHeader	C++\ege-13.04.02-full\src\lpng\zconf.h	46;"	d
deflateTune	C++\ege-13.04.02-full\src\lpng\zconf.h	47;"	d
deflate_copyright	C++\ege-13.04.02-full\src\lpng\zconf.h	48;"	d
free_func	C++\ege-13.04.02-full\src\lpng\zconf.h	113;"	d
get_crc_table	C++\ege-13.04.02-full\src\lpng\zconf.h	49;"	d
gzFile	C++\ege-13.04.02-full\src\lpng\zconf.h	114;"	d
gz_error	C++\ege-13.04.02-full\src\lpng\zconf.h	50;"	d
gz_header	C++\ege-13.04.02-full\src\lpng\zconf.h	115;"	d
gz_header_s	C++\ege-13.04.02-full\src\lpng\zconf.h	129;"	d
gz_headerp	C++\ege-13.04.02-full\src\lpng\zconf.h	116;"	d
gz_intmax	C++\ege-13.04.02-full\src\lpng\zconf.h	51;"	d
gz_strwinerror	C++\ege-13.04.02-full\src\lpng\zconf.h	52;"	d
gzbuffer	C++\ege-13.04.02-full\src\lpng\zconf.h	53;"	d
gzclearerr	C++\ege-13.04.02-full\src\lpng\zconf.h	54;"	d
gzclose	C++\ege-13.04.02-full\src\lpng\zconf.h	55;"	d
gzclose_r	C++\ege-13.04.02-full\src\lpng\zconf.h	56;"	d
gzclose_w	C++\ege-13.04.02-full\src\lpng\zconf.h	57;"	d
gzdirect	C++\ege-13.04.02-full\src\lpng\zconf.h	58;"	d
gzdopen	C++\ege-13.04.02-full\src\lpng\zconf.h	59;"	d
gzeof	C++\ege-13.04.02-full\src\lpng\zconf.h	60;"	d
gzerror	C++\ege-13.04.02-full\src\lpng\zconf.h	61;"	d
gzflush	C++\ege-13.04.02-full\src\lpng\zconf.h	62;"	d
gzgetc	C++\ege-13.04.02-full\src\lpng\zconf.h	63;"	d
gzgets	C++\ege-13.04.02-full\src\lpng\zconf.h	64;"	d
gzoffset	C++\ege-13.04.02-full\src\lpng\zconf.h	65;"	d
gzoffset64	C++\ege-13.04.02-full\src\lpng\zconf.h	66;"	d
gzopen	C++\ege-13.04.02-full\src\lpng\zconf.h	67;"	d
gzopen64	C++\ege-13.04.02-full\src\lpng\zconf.h	68;"	d
gzprintf	C++\ege-13.04.02-full\src\lpng\zconf.h	69;"	d
gzputc	C++\ege-13.04.02-full\src\lpng\zconf.h	70;"	d
gzputs	C++\ege-13.04.02-full\src\lpng\zconf.h	71;"	d
gzread	C++\ege-13.04.02-full\src\lpng\zconf.h	72;"	d
gzrewind	C++\ege-13.04.02-full\src\lpng\zconf.h	73;"	d
gzseek	C++\ege-13.04.02-full\src\lpng\zconf.h	74;"	d
gzseek64	C++\ege-13.04.02-full\src\lpng\zconf.h	75;"	d
gzsetparams	C++\ege-13.04.02-full\src\lpng\zconf.h	76;"	d
gztell	C++\ege-13.04.02-full\src\lpng\zconf.h	77;"	d
gztell64	C++\ege-13.04.02-full\src\lpng\zconf.h	78;"	d
gzungetc	C++\ege-13.04.02-full\src\lpng\zconf.h	79;"	d
gzwrite	C++\ege-13.04.02-full\src\lpng\zconf.h	80;"	d
in_func	C++\ege-13.04.02-full\src\lpng\zconf.h	117;"	d
inflate	C++\ege-13.04.02-full\src\lpng\zconf.h	81;"	d
inflateBack	C++\ege-13.04.02-full\src\lpng\zconf.h	82;"	d
inflateBackEnd	C++\ege-13.04.02-full\src\lpng\zconf.h	83;"	d
inflateBackInit_	C++\ege-13.04.02-full\src\lpng\zconf.h	84;"	d
inflateCopy	C++\ege-13.04.02-full\src\lpng\zconf.h	85;"	d
inflateEnd	C++\ege-13.04.02-full\src\lpng\zconf.h	86;"	d
inflateGetHeader	C++\ege-13.04.02-full\src\lpng\zconf.h	87;"	d
inflateInit2_	C++\ege-13.04.02-full\src\lpng\zconf.h	88;"	d
inflateInit_	C++\ege-13.04.02-full\src\lpng\zconf.h	89;"	d
inflateMark	C++\ege-13.04.02-full\src\lpng\zconf.h	90;"	d
inflatePrime	C++\ege-13.04.02-full\src\lpng\zconf.h	91;"	d
inflateReset	C++\ege-13.04.02-full\src\lpng\zconf.h	92;"	d
inflateReset2	C++\ege-13.04.02-full\src\lpng\zconf.h	93;"	d
inflateSetDictionary	C++\ege-13.04.02-full\src\lpng\zconf.h	94;"	d
inflateSync	C++\ege-13.04.02-full\src\lpng\zconf.h	95;"	d
inflateSyncPoint	C++\ege-13.04.02-full\src\lpng\zconf.h	96;"	d
inflateUndermine	C++\ege-13.04.02-full\src\lpng\zconf.h	97;"	d
inflate_copyright	C++\ege-13.04.02-full\src\lpng\zconf.h	98;"	d
inflate_fast	C++\ege-13.04.02-full\src\lpng\zconf.h	99;"	d
inflate_table	C++\ege-13.04.02-full\src\lpng\zconf.h	100;"	d
internal_state	C++\ege-13.04.02-full\src\lpng\zconf.h	130;"	d
intf	C++\ege-13.04.02-full\src\lpng\zconf.h	/^typedef int   FAR intf;$/;"	t
intf	C++\ege-13.04.02-full\src\lpng\zconf.h	118;"	d
out_func	C++\ege-13.04.02-full\src\lpng\zconf.h	119;"	d
uInt	C++\ege-13.04.02-full\src\lpng\zconf.h	/^typedef unsigned int   uInt;  \/* 16 bits or more *\/$/;"	t
uInt	C++\ege-13.04.02-full\src\lpng\zconf.h	120;"	d
uIntf	C++\ege-13.04.02-full\src\lpng\zconf.h	/^typedef uInt  FAR uIntf;$/;"	t
uIntf	C++\ege-13.04.02-full\src\lpng\zconf.h	121;"	d
uLong	C++\ege-13.04.02-full\src\lpng\zconf.h	/^typedef unsigned long  uLong; \/* 32 bits or more *\/$/;"	t
uLong	C++\ege-13.04.02-full\src\lpng\zconf.h	122;"	d
uLongf	C++\ege-13.04.02-full\src\lpng\zconf.h	/^typedef uLong FAR uLongf;$/;"	t
uLongf	C++\ege-13.04.02-full\src\lpng\zconf.h	123;"	d
uncompress	C++\ege-13.04.02-full\src\lpng\zconf.h	101;"	d
voidp	C++\ege-13.04.02-full\src\lpng\zconf.h	/^   typedef Byte       *voidp;$/;"	t
voidp	C++\ege-13.04.02-full\src\lpng\zconf.h	/^   typedef void       *voidp;$/;"	t
voidp	C++\ege-13.04.02-full\src\lpng\zconf.h	124;"	d
voidpc	C++\ege-13.04.02-full\src\lpng\zconf.h	/^   typedef Byte const *voidpc;$/;"	t
voidpc	C++\ege-13.04.02-full\src\lpng\zconf.h	/^   typedef void const *voidpc;$/;"	t
voidpc	C++\ege-13.04.02-full\src\lpng\zconf.h	125;"	d
voidpf	C++\ege-13.04.02-full\src\lpng\zconf.h	/^   typedef Byte FAR   *voidpf;$/;"	t
voidpf	C++\ege-13.04.02-full\src\lpng\zconf.h	/^   typedef void FAR   *voidpf;$/;"	t
voidpf	C++\ege-13.04.02-full\src\lpng\zconf.h	126;"	d
zError	C++\ege-13.04.02-full\src\lpng\zconf.h	102;"	d
z_off64_t	C++\ege-13.04.02-full\src\lpng\zconf.h	398;"	d
z_off64_t	C++\ege-13.04.02-full\src\lpng\zconf.h	400;"	d
z_off_t	C++\ege-13.04.02-full\src\lpng\zconf.h	383;"	d
z_off_t	C++\ege-13.04.02-full\src\lpng\zconf.h	394;"	d
zcalloc	C++\ege-13.04.02-full\src\lpng\zconf.h	103;"	d
zcfree	C++\ege-13.04.02-full\src\lpng\zconf.h	104;"	d
zlibCompileFlags	C++\ege-13.04.02-full\src\lpng\zconf.h	105;"	d
zlibVersion	C++\ege-13.04.02-full\src\lpng\zconf.h	106;"	d
ZLIB_H	C++\ege-13.04.02-full\src\lpng\zlib.h	32;"	d
ZLIB_VERNUM	C++\ege-13.04.02-full\src\lpng\zlib.h	41;"	d
ZLIB_VERSION	C++\ege-13.04.02-full\src\lpng\zlib.h	40;"	d
ZLIB_VER_MAJOR	C++\ege-13.04.02-full\src\lpng\zlib.h	42;"	d
ZLIB_VER_MINOR	C++\ege-13.04.02-full\src\lpng\zlib.h	43;"	d
ZLIB_VER_REVISION	C++\ege-13.04.02-full\src\lpng\zlib.h	44;"	d
ZLIB_VER_SUBREVISION	C++\ege-13.04.02-full\src\lpng\zlib.h	45;"	d
Z_ASCII	C++\ege-13.04.02-full\src\lpng\zlib.h	201;"	d
Z_BEST_COMPRESSION	C++\ege-13.04.02-full\src\lpng\zlib.h	188;"	d
Z_BEST_SPEED	C++\ege-13.04.02-full\src\lpng\zlib.h	187;"	d
Z_BINARY	C++\ege-13.04.02-full\src\lpng\zlib.h	199;"	d
Z_BLOCK	C++\ege-13.04.02-full\src\lpng\zlib.h	169;"	d
Z_BUF_ERROR	C++\ege-13.04.02-full\src\lpng\zlib.h	180;"	d
Z_DATA_ERROR	C++\ege-13.04.02-full\src\lpng\zlib.h	178;"	d
Z_DEFAULT_COMPRESSION	C++\ege-13.04.02-full\src\lpng\zlib.h	189;"	d
Z_DEFAULT_STRATEGY	C++\ege-13.04.02-full\src\lpng\zlib.h	196;"	d
Z_DEFLATED	C++\ege-13.04.02-full\src\lpng\zlib.h	205;"	d
Z_ERRNO	C++\ege-13.04.02-full\src\lpng\zlib.h	176;"	d
Z_FILTERED	C++\ege-13.04.02-full\src\lpng\zlib.h	192;"	d
Z_FINISH	C++\ege-13.04.02-full\src\lpng\zlib.h	168;"	d
Z_FIXED	C++\ege-13.04.02-full\src\lpng\zlib.h	195;"	d
Z_FULL_FLUSH	C++\ege-13.04.02-full\src\lpng\zlib.h	167;"	d
Z_HUFFMAN_ONLY	C++\ege-13.04.02-full\src\lpng\zlib.h	193;"	d
Z_MEM_ERROR	C++\ege-13.04.02-full\src\lpng\zlib.h	179;"	d
Z_NEED_DICT	C++\ege-13.04.02-full\src\lpng\zlib.h	175;"	d
Z_NO_COMPRESSION	C++\ege-13.04.02-full\src\lpng\zlib.h	186;"	d
Z_NO_FLUSH	C++\ege-13.04.02-full\src\lpng\zlib.h	164;"	d
Z_NULL	C++\ege-13.04.02-full\src\lpng\zlib.h	208;"	d
Z_OK	C++\ege-13.04.02-full\src\lpng\zlib.h	173;"	d
Z_PARTIAL_FLUSH	C++\ege-13.04.02-full\src\lpng\zlib.h	165;"	d
Z_RLE	C++\ege-13.04.02-full\src\lpng\zlib.h	194;"	d
Z_STREAM_END	C++\ege-13.04.02-full\src\lpng\zlib.h	174;"	d
Z_STREAM_ERROR	C++\ege-13.04.02-full\src\lpng\zlib.h	177;"	d
Z_SYNC_FLUSH	C++\ege-13.04.02-full\src\lpng\zlib.h	166;"	d
Z_TEXT	C++\ege-13.04.02-full\src\lpng\zlib.h	200;"	d
Z_TREES	C++\ege-13.04.02-full\src\lpng\zlib.h	170;"	d
Z_UNKNOWN	C++\ege-13.04.02-full\src\lpng\zlib.h	202;"	d
Z_VERSION_ERROR	C++\ege-13.04.02-full\src\lpng\zlib.h	181;"	d
adler	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    uLong   adler;      \/* adler32 value of the uncompressed data *\/$/;"	m	struct:z_stream_s
adler32_combine	C++\ege-13.04.02-full\src\lpng\zlib.h	1579;"	d
alloc_func	C++\ege-13.04.02-full\src\lpng\zlib.h	/^typedef voidpf (*alloc_func) OF((voidpf opaque, uInt items, uInt size));$/;"	t
avail_in	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    uInt     avail_in;  \/* number of bytes available at next_in *\/$/;"	m	struct:z_stream_s
avail_out	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    uInt     avail_out; \/* remaining free space at next_out *\/$/;"	m	struct:z_stream_s
comm_max	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    uInt    comm_max;   \/* space at comment (only when reading header) *\/$/;"	m	struct:gz_header_s
comment	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    Bytef   *comment;   \/* pointer to zero-terminated comment or Z_NULL *\/$/;"	m	struct:gz_header_s
crc32_combine	C++\ege-13.04.02-full\src\lpng\zlib.h	1580;"	d
data_type	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    int     data_type;  \/* best guess about the data type: binary or text *\/$/;"	m	struct:z_stream_s
deflateInit	C++\ege-13.04.02-full\src\lpng\zlib.h	1546;"	d
deflateInit2	C++\ege-13.04.02-full\src\lpng\zlib.h	1550;"	d
done	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    int     done;       \/* true when done reading gzip header (not used$/;"	m	struct:gz_header_s
dummy	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    struct internal_state {int dummy;};$/;"	m	struct:internal_state
extra	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    Bytef   *extra;     \/* pointer to extra field or Z_NULL if none *\/$/;"	m	struct:gz_header_s
extra_len	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    uInt    extra_len;  \/* extra field length (valid if extra != Z_NULL) *\/$/;"	m	struct:gz_header_s
extra_max	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    uInt    extra_max;  \/* space at extra (only when reading header) *\/$/;"	m	struct:gz_header_s
free_func	C++\ege-13.04.02-full\src\lpng\zlib.h	/^typedef void   (*free_func)  OF((voidpf opaque, voidpf address));$/;"	t
gzFile	C++\ege-13.04.02-full\src\lpng\zlib.h	/^typedef voidp gzFile;       \/* opaque gzip file descriptor *\/$/;"	t
gz_header	C++\ege-13.04.02-full\src\lpng\zlib.h	/^} gz_header;$/;"	t	typeref:struct:gz_header_s
gz_header_s	C++\ege-13.04.02-full\src\lpng\zlib.h	/^typedef struct gz_header_s {$/;"	s
gz_headerp	C++\ege-13.04.02-full\src\lpng\zlib.h	/^typedef gz_header FAR *gz_headerp;$/;"	t
gzoffset	C++\ege-13.04.02-full\src\lpng\zlib.h	1578;"	d
gzopen	C++\ege-13.04.02-full\src\lpng\zlib.h	1575;"	d
gzseek	C++\ege-13.04.02-full\src\lpng\zlib.h	1576;"	d
gztell	C++\ege-13.04.02-full\src\lpng\zlib.h	1577;"	d
hcrc	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    int     hcrc;       \/* true if there was or will be a header crc *\/$/;"	m	struct:gz_header_s
in_func	C++\ege-13.04.02-full\src\lpng\zlib.h	/^typedef unsigned (*in_func) OF((void FAR *, unsigned char FAR * FAR *));$/;"	t
inflateBackInit	C++\ege-13.04.02-full\src\lpng\zlib.h	1555;"	d
inflateInit	C++\ege-13.04.02-full\src\lpng\zlib.h	1548;"	d
inflateInit2	C++\ege-13.04.02-full\src\lpng\zlib.h	1553;"	d
internal_state	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    struct internal_state {int dummy;};$/;"	s
msg	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    char     *msg;      \/* last error message, NULL if no error *\/$/;"	m	struct:z_stream_s
name	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    Bytef   *name;      \/* pointer to zero-terminated file name or Z_NULL *\/$/;"	m	struct:gz_header_s
name_max	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    uInt    name_max;   \/* space at name (only when reading header) *\/$/;"	m	struct:gz_header_s
next_in	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    Bytef    *next_in;  \/* next input byte *\/$/;"	m	struct:z_stream_s
next_out	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    Bytef    *next_out; \/* next output byte should be put there *\/$/;"	m	struct:z_stream_s
opaque	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    voidpf     opaque;  \/* private data object passed to zalloc and zfree *\/$/;"	m	struct:z_stream_s
os	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    int     os;         \/* operating system *\/$/;"	m	struct:gz_header_s
out_func	C++\ege-13.04.02-full\src\lpng\zlib.h	/^typedef int (*out_func) OF((void FAR *, unsigned char FAR *, unsigned));$/;"	t
reserved	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    uLong   reserved;   \/* reserved for future use *\/$/;"	m	struct:z_stream_s
state	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    struct internal_state FAR *state; \/* not visible by applications *\/$/;"	m	struct:z_stream_s	typeref:struct:z_stream_s::FAR
text	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    int     text;       \/* true if compressed data believed to be text *\/$/;"	m	struct:gz_header_s
time	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    uLong   time;       \/* modification time *\/$/;"	m	struct:gz_header_s
total_in	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    uLong    total_in;  \/* total nb of input bytes read so far *\/$/;"	m	struct:z_stream_s
total_out	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    uLong    total_out; \/* total nb of bytes output so far *\/$/;"	m	struct:z_stream_s
xflags	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    int     xflags;     \/* extra flags (not used when writing a gzip file) *\/$/;"	m	struct:gz_header_s
z_stream	C++\ege-13.04.02-full\src\lpng\zlib.h	/^} z_stream;$/;"	t	typeref:struct:z_stream_s
z_stream_s	C++\ege-13.04.02-full\src\lpng\zlib.h	/^typedef struct z_stream_s {$/;"	s
z_streamp	C++\ege-13.04.02-full\src\lpng\zlib.h	/^typedef z_stream FAR *z_streamp;$/;"	t
zalloc	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    alloc_func zalloc;  \/* used to allocate the internal state *\/$/;"	m	struct:z_stream_s
zfree	C++\ege-13.04.02-full\src\lpng\zlib.h	/^    free_func  zfree;   \/* used to free the internal state *\/$/;"	m	struct:z_stream_s
zlib_version	C++\ege-13.04.02-full\src\lpng\zlib.h	210;"	d
MAX_PTR	C++\ege-13.04.02-full\src\lpng\zutil.c	198;"	d	file:
MY_ZCALLOC	C++\ege-13.04.02-full\src\lpng\zutil.c	190;"	d	file:
MY_ZCALLOC	C++\ege-13.04.02-full\src\lpng\zutil.c	268;"	d	file:
_halloc	C++\ege-13.04.02-full\src\lpng\zutil.c	271;"	d	file:
_hfree	C++\ege-13.04.02-full\src\lpng\zutil.c	272;"	d	file:
dummy	C++\ege-13.04.02-full\src\lpng\zutil.c	/^struct internal_state      {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:internal_state	file:
errno	C++\ege-13.04.02-full\src\lpng\zutil.c	/^    int errno = 0;$/;"	v
internal_state	C++\ege-13.04.02-full\src\lpng\zutil.c	/^struct internal_state      {int dummy;}; \/* for buggy compilers *\/$/;"	s	file:
new_ptr	C++\ege-13.04.02-full\src\lpng\zutil.c	/^    voidpf new_ptr;$/;"	m	struct:ptr_table_s	file:
next_ptr	C++\ege-13.04.02-full\src\lpng\zutil.c	/^local int next_ptr = 0;$/;"	v
org_ptr	C++\ege-13.04.02-full\src\lpng\zutil.c	/^    voidpf org_ptr;$/;"	m	struct:ptr_table_s	file:
ptr_table	C++\ege-13.04.02-full\src\lpng\zutil.c	/^} ptr_table;$/;"	t	typeref:struct:ptr_table_s	file:
ptr_table_s	C++\ege-13.04.02-full\src\lpng\zutil.c	/^typedef struct ptr_table_s {$/;"	s	file:
table	C++\ege-13.04.02-full\src\lpng\zutil.c	/^local ptr_table table[MAX_PTR];$/;"	v
verbose	C++\ege-13.04.02-full\src\lpng\zutil.c	118;"	d	file:
zError	C++\ege-13.04.02-full\src\lpng\zutil.c	/^const char * ZEXPORT zError(err)$/;"	f
z_errmsg	C++\ege-13.04.02-full\src\lpng\zutil.c	/^const char * const z_errmsg[10] = {$/;"	v
z_error	C++\ege-13.04.02-full\src\lpng\zutil.c	/^void ZLIB_INTERNAL z_error (m)$/;"	f
z_verbose	C++\ege-13.04.02-full\src\lpng\zutil.c	/^int ZLIB_INTERNAL z_verbose = verbose;$/;"	v
zcalloc	C++\ege-13.04.02-full\src\lpng\zutil.c	/^voidpf ZLIB_INTERNAL zcalloc (opaque, items, size)$/;"	f
zcalloc	C++\ege-13.04.02-full\src\lpng\zutil.c	/^voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, uInt items, uInt size)$/;"	f
zcalloc	C++\ege-13.04.02-full\src\lpng\zutil.c	/^voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, unsigned items, unsigned size)$/;"	f
zcfree	C++\ege-13.04.02-full\src\lpng\zutil.c	/^void ZLIB_INTERNAL zcfree (opaque, ptr)$/;"	f
zcfree	C++\ege-13.04.02-full\src\lpng\zutil.c	/^void ZLIB_INTERNAL zcfree (voidpf opaque, voidpf ptr)$/;"	f
zlibCompileFlags	C++\ege-13.04.02-full\src\lpng\zutil.c	/^uLong ZEXPORT zlibCompileFlags()$/;"	f
zlibVersion	C++\ege-13.04.02-full\src\lpng\zutil.c	/^const char * ZEXPORT zlibVersion()$/;"	f
zmemcmp	C++\ege-13.04.02-full\src\lpng\zutil.c	/^int ZLIB_INTERNAL zmemcmp(s1, s2, len)$/;"	f
zmemcpy	C++\ege-13.04.02-full\src\lpng\zutil.c	/^void ZLIB_INTERNAL zmemcpy(dest, source, len)$/;"	f
zmemzero	C++\ege-13.04.02-full\src\lpng\zutil.c	/^void ZLIB_INTERNAL zmemzero(dest, len)$/;"	f
Assert	C++\ege-13.04.02-full\src\lpng\zutil.h	249;"	d
Assert	C++\ege-13.04.02-full\src\lpng\zutil.h	256;"	d
DEF_MEM_LEVEL	C++\ege-13.04.02-full\src\lpng\zutil.h	60;"	d
DEF_MEM_LEVEL	C++\ege-13.04.02-full\src\lpng\zutil.h	62;"	d
DEF_WBITS	C++\ege-13.04.02-full\src\lpng\zutil.h	55;"	d
DYN_TREES	C++\ege-13.04.02-full\src\lpng\zutil.h	68;"	d
ERR_MSG	C++\ege-13.04.02-full\src\lpng\zutil.h	46;"	d
ERR_RETURN	C++\ege-13.04.02-full\src\lpng\zutil.h	48;"	d
F_OPEN	C++\ege-13.04.02-full\src\lpng\zutil.h	100;"	d
F_OPEN	C++\ege-13.04.02-full\src\lpng\zutil.h	175;"	d
HAVE_MEMCPY	C++\ege-13.04.02-full\src\lpng\zutil.h	226;"	d
HAVE_VSNPRINTF	C++\ege-13.04.02-full\src\lpng\zutil.h	182;"	d
HAVE_VSNPRINTF	C++\ege-13.04.02-full\src\lpng\zutil.h	187;"	d
MAX_MATCH	C++\ege-13.04.02-full\src\lpng\zutil.h	72;"	d
MIN_MATCH	C++\ege-13.04.02-full\src\lpng\zutil.h	71;"	d
NO_MEMCPY	C++\ege-13.04.02-full\src\lpng\zutil.h	216;"	d
NO_MEMCPY	C++\ege-13.04.02-full\src\lpng\zutil.h	223;"	d
NO_vsnprintf	C++\ege-13.04.02-full\src\lpng\zutil.h	194;"	d
NO_vsnprintf	C++\ege-13.04.02-full\src\lpng\zutil.h	197;"	d
NO_vsnprintf	C++\ege-13.04.02-full\src\lpng\zutil.h	208;"	d
NO_vsnprintf	C++\ege-13.04.02-full\src\lpng\zutil.h	212;"	d
OS_CODE	C++\ege-13.04.02-full\src\lpng\zutil.h	105;"	d
OS_CODE	C++\ege-13.04.02-full\src\lpng\zutil.h	109;"	d
OS_CODE	C++\ege-13.04.02-full\src\lpng\zutil.h	116;"	d
OS_CODE	C++\ege-13.04.02-full\src\lpng\zutil.h	127;"	d
OS_CODE	C++\ege-13.04.02-full\src\lpng\zutil.h	132;"	d
OS_CODE	C++\ege-13.04.02-full\src\lpng\zutil.h	137;"	d
OS_CODE	C++\ege-13.04.02-full\src\lpng\zutil.h	171;"	d
OS_CODE	C++\ege-13.04.02-full\src\lpng\zutil.h	80;"	d
OS_CODE	C++\ege-13.04.02-full\src\lpng\zutil.h	95;"	d
OS_CODE	C++\ege-13.04.02-full\src\lpng\zutil.h	99;"	d
PRESET_DICT	C++\ege-13.04.02-full\src\lpng\zutil.h	75;"	d
STATIC_TREES	C++\ege-13.04.02-full\src\lpng\zutil.h	67;"	d
STORED_BLOCK	C++\ege-13.04.02-full\src\lpng\zutil.h	66;"	d
TRY_FREE	C++\ege-13.04.02-full\src\lpng\zutil.h	272;"	d
Trace	C++\ege-13.04.02-full\src\lpng\zutil.h	250;"	d
Trace	C++\ege-13.04.02-full\src\lpng\zutil.h	257;"	d
Tracec	C++\ege-13.04.02-full\src\lpng\zutil.h	253;"	d
Tracec	C++\ege-13.04.02-full\src\lpng\zutil.h	260;"	d
Tracecv	C++\ege-13.04.02-full\src\lpng\zutil.h	254;"	d
Tracecv	C++\ege-13.04.02-full\src\lpng\zutil.h	261;"	d
Tracev	C++\ege-13.04.02-full\src\lpng\zutil.h	251;"	d
Tracev	C++\ege-13.04.02-full\src\lpng\zutil.h	258;"	d
Tracevv	C++\ege-13.04.02-full\src\lpng\zutil.h	252;"	d
Tracevv	C++\ege-13.04.02-full\src\lpng\zutil.h	259;"	d
ZALLOC	C++\ege-13.04.02-full\src\lpng\zutil.h	269;"	d
ZFREE	C++\ege-13.04.02-full\src\lpng\zutil.h	271;"	d
ZLIB_INTERNAL	C++\ege-13.04.02-full\src\lpng\zutil.h	17;"	d
ZLIB_INTERNAL	C++\ege-13.04.02-full\src\lpng\zutil.h	19;"	d
ZUTIL_H	C++\ege-13.04.02-full\src\lpng\zutil.h	14;"	d
_PTRDIFF_T_DEFINED	C++\ege-13.04.02-full\src\lpng\zutil.h	149;"	d
fdopen	C++\ege-13.04.02-full\src\lpng\zutil.h	121;"	d
fdopen	C++\ege-13.04.02-full\src\lpng\zutil.h	141;"	d
fdopen	C++\ege-13.04.02-full\src\lpng\zutil.h	146;"	d
fdopen	C++\ege-13.04.02-full\src\lpng\zutil.h	152;"	d
local	C++\ege-13.04.02-full\src\lpng\zutil.h	33;"	d
ptrdiff_t	C++\ege-13.04.02-full\src\lpng\zutil.h	/^       typedef int ptrdiff_t;$/;"	t
uch	C++\ege-13.04.02-full\src\lpng\zutil.h	/^typedef unsigned char  uch;$/;"	t
uchf	C++\ege-13.04.02-full\src\lpng\zutil.h	/^typedef uch FAR uchf;$/;"	t
ulg	C++\ege-13.04.02-full\src\lpng\zutil.h	/^typedef unsigned long  ulg;$/;"	t
ush	C++\ege-13.04.02-full\src\lpng\zutil.h	/^typedef unsigned short ush;$/;"	t
ushf	C++\ege-13.04.02-full\src\lpng\zutil.h	/^typedef ush FAR ushf;$/;"	t
vsnprintf	C++\ege-13.04.02-full\src\lpng\zutil.h	203;"	d
zmemcmp	C++\ege-13.04.02-full\src\lpng\zutil.h	231;"	d
zmemcmp	C++\ege-13.04.02-full\src\lpng\zutil.h	235;"	d
zmemcpy	C++\ege-13.04.02-full\src\lpng\zutil.h	230;"	d
zmemcpy	C++\ege-13.04.02-full\src\lpng\zutil.h	234;"	d
zmemzero	C++\ege-13.04.02-full\src\lpng\zutil.h	232;"	d
zmemzero	C++\ege-13.04.02-full\src\lpng\zutil.h	236;"	d
MINGWDIR	C++\ege-13.04.02-full\src\make-ege-mingw32-4.7.2.bat	/^set MINGWDIR=%MINGW32_472DIR%$/;"	v
MINGWPATH	C++\ege-13.04.02-full\src\make-ege-mingw32-4.7.2.bat	/^set MINGWPATH=%MINGW32_472PATH%$/;"	v
path	C++\ege-13.04.02-full\src\make-ege-mingw32-4.7.2.bat	/^set path=%MINGWPATH%\\bin;%MINGWPATH%\\mingw32\\bin$/;"	v
MINGWDIR	C++\ege-13.04.02-full\src\make-ege-mingw32-4.8.1.bat	/^set MINGWDIR=%MINGW32_481DIR%$/;"	v
MINGWPATH	C++\ege-13.04.02-full\src\make-ege-mingw32-4.8.1.bat	/^set MINGWPATH=%MINGW32_481PATH%$/;"	v
path	C++\ege-13.04.02-full\src\make-ege-mingw32-4.8.1.bat	/^set path=%MINGWPATH%\\bin;%MINGWPATH%\\mingw32\\bin$/;"	v
MINGW32PATH	C++\ege-13.04.02-full\src\make-ege-mingw32.bat	/^rem set MINGW32PATH=C:\\Program Files (x86)\\Dev-Cpp\\MinGW32$/;"	v
MINGW32PATH	C++\ege-13.04.02-full\src\make-ege-mingw32.bat	/^rem set MINGW32PATH=D:\\mingw\\mingw4.7.1$/;"	v
MINGWDIR	C++\ege-13.04.02-full\src\make-ege-mingw32.bat	/^set MINGWDIR=%MINGW32_DIR%$/;"	v
MINGWPATH	C++\ege-13.04.02-full\src\make-ege-mingw32.bat	/^set MINGWPATH=%MINGW32_PATH%$/;"	v
path	C++\ege-13.04.02-full\src\make-ege-mingw32.bat	/^set path=%MINGWPATH%\\bin;%MINGWPATH%\\mingw32\\bin$/;"	v
CCMODE32	C++\ege-13.04.02-full\src\make-ege-mingw64-4.9.2.bat	/^    set CCMODE32=�ɹ�$/;"	v
CCMODE32	C++\ege-13.04.02-full\src\make-ege-mingw64-4.9.2.bat	/^    set CCMODE32=ʧ�� $/;"	v
CCMODE32	C++\ege-13.04.02-full\src\make-ege-mingw64-4.9.2.bat	/^set CCMODE32=0$/;"	v
CCMODE64	C++\ege-13.04.02-full\src\make-ege-mingw64-4.9.2.bat	/^	set CCMODE64=�ɹ�$/;"	v
CCMODE64	C++\ege-13.04.02-full\src\make-ege-mingw64-4.9.2.bat	/^    set CCMODE64=ʧ�� $/;"	v
CCMODE64	C++\ege-13.04.02-full\src\make-ege-mingw64-4.9.2.bat	/^set CCMODE64=0$/;"	v
MINGWDIR	C++\ege-13.04.02-full\src\make-ege-mingw64-4.9.2.bat	/^set MINGWDIR=%MINGW64_492DIR%$/;"	v
MINGWPATH	C++\ege-13.04.02-full\src\make-ege-mingw64-4.9.2.bat	/^set MINGWPATH=%MINGW64_492PATH%$/;"	v
path	C++\ege-13.04.02-full\src\make-ege-mingw64-4.9.2.bat	/^set path=%MINGWPATH%\\bin;%MINGWPATH%\\x86_64-w64-mingw32\\bin$/;"	v
CCMODE32	C++\ege-13.04.02-full\src\make-ege-mingw64.bat	/^    set CCMODE32=�ɹ�$/;"	v
CCMODE32	C++\ege-13.04.02-full\src\make-ege-mingw64.bat	/^    set CCMODE32=ʧ�� $/;"	v
CCMODE32	C++\ege-13.04.02-full\src\make-ege-mingw64.bat	/^set CCMODE32=0$/;"	v
CCMODE64	C++\ege-13.04.02-full\src\make-ege-mingw64.bat	/^	set CCMODE64=�ɹ�$/;"	v
CCMODE64	C++\ege-13.04.02-full\src\make-ege-mingw64.bat	/^    set CCMODE64=ʧ�� $/;"	v
CCMODE64	C++\ege-13.04.02-full\src\make-ege-mingw64.bat	/^set CCMODE64=0$/;"	v
MINGW64PATH	C++\ege-13.04.02-full\src\make-ege-mingw64.bat	/^rem set MINGW64PATH=C:\\Program Files (x86)\\Dev-Cpp\\MinGW64$/;"	v
MINGWDIR	C++\ege-13.04.02-full\src\make-ege-mingw64.bat	/^set MINGWDIR=%MINGW64_DIR%$/;"	v
MINGWPATH	C++\ege-13.04.02-full\src\make-ege-mingw64.bat	/^set MINGWPATH=%MINGW64_PATH%$/;"	v
path	C++\ege-13.04.02-full\src\make-ege-mingw64.bat	/^set path=%MINGWPATH%\\bin;%MINGWPATH%\\x86_64-w64-mingw32\\bin$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-ege-vc10.bat	/^set CCMODE=$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-ege-vc10.bat	/^set CCMODE=Release-Win32$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-ege-vc10.bat	/^set CCMODE=Release-x64$/;"	v
FAILOR	C++\ege-13.04.02-full\src\make-ege-vc10.bat	/^    set FAILOR=%FAILOR%  %CCMODE%$/;"	v
FAILOR	C++\ege-13.04.02-full\src\make-ege-vc10.bat	/^set FAILOR=$/;"	v
PROJECT_DIR	C++\ege-13.04.02-full\src\make-ege-vc10.bat	/^set PROJECT_DIR=vc2010$/;"	v
PROJECT_NAME	C++\ege-13.04.02-full\src\make-ege-vc10.bat	/^set PROJECT_NAME=graphics10.sln$/;"	v
SUCCESSOR	C++\ege-13.04.02-full\src\make-ege-vc10.bat	/^	set SUCCESSOR=%SUCCESSOR%  %CCMODE%$/;"	v
SUCCESSOR	C++\ege-13.04.02-full\src\make-ege-vc10.bat	/^set SUCCESSOR=$/;"	v
VCPATH	C++\ege-13.04.02-full\src\make-ege-vc10.bat	/^set VCPATH=%VC10PATH%$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-ege-vc12.bat	/^set CCMODE=$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-ege-vc12.bat	/^set CCMODE=Release-Win32$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-ege-vc12.bat	/^set CCMODE=Release-x64$/;"	v
FAILOR	C++\ege-13.04.02-full\src\make-ege-vc12.bat	/^    set FAILOR=%FAILOR%  %CCMODE%$/;"	v
FAILOR	C++\ege-13.04.02-full\src\make-ege-vc12.bat	/^set FAILOR=$/;"	v
PROJECT_DIR	C++\ege-13.04.02-full\src\make-ege-vc12.bat	/^set PROJECT_DIR=vc2012$/;"	v
PROJECT_NAME	C++\ege-13.04.02-full\src\make-ege-vc12.bat	/^set PROJECT_NAME=graphics12.sln$/;"	v
SUCCESSOR	C++\ege-13.04.02-full\src\make-ege-vc12.bat	/^	set SUCCESSOR=%SUCCESSOR%  %CCMODE%$/;"	v
SUCCESSOR	C++\ege-13.04.02-full\src\make-ege-vc12.bat	/^set SUCCESSOR=$/;"	v
VCPATH	C++\ege-13.04.02-full\src\make-ege-vc12.bat	/^set VCPATH=%VC12PATH%$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-ege-vc13.bat	/^set CCMODE=$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-ege-vc13.bat	/^set CCMODE=Release-Win32$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-ege-vc13.bat	/^set CCMODE=Release-x64$/;"	v
FAILOR	C++\ege-13.04.02-full\src\make-ege-vc13.bat	/^    set FAILOR=%FAILOR%  %CCMODE%$/;"	v
FAILOR	C++\ege-13.04.02-full\src\make-ege-vc13.bat	/^set FAILOR=$/;"	v
PROJECT_DIR	C++\ege-13.04.02-full\src\make-ege-vc13.bat	/^set PROJECT_DIR=vc2013$/;"	v
PROJECT_NAME	C++\ege-13.04.02-full\src\make-ege-vc13.bat	/^set PROJECT_NAME=graphics13.sln$/;"	v
SUCCESSOR	C++\ege-13.04.02-full\src\make-ege-vc13.bat	/^	set SUCCESSOR=%SUCCESSOR%  %CCMODE%$/;"	v
SUCCESSOR	C++\ege-13.04.02-full\src\make-ege-vc13.bat	/^set SUCCESSOR=$/;"	v
VCPATH	C++\ege-13.04.02-full\src\make-ege-vc13.bat	/^set VCPATH=%VC13PATH%$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-ege-vc13express.bat	/^	set CCMODE=Win32 Release$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-ege-vc13express.bat	/^	set CCMODE=x64 Release$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-ege-vc13express.bat	/^set CCMODE=0$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-ege-vc13express.bat	/^set COMPILER=MS Build 2013 (replace "VC2013 Express for Desktop")$/;"	v
end	C++\ege-13.04.02-full\src\make-ege-vc13express.bat	/^:end$/;"	l
endfail	C++\ege-13.04.02-full\src\make-ege-vc13express.bat	/^:endfail$/;"	l
CCMODE	C++\ege-13.04.02-full\src\make-ege-vc15.bat	/^set CCMODE=$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-ege-vc15.bat	/^set CCMODE=Release-Win32$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-ege-vc15.bat	/^set CCMODE=Release-x64$/;"	v
FAILOR	C++\ege-13.04.02-full\src\make-ege-vc15.bat	/^    set FAILOR=%FAILOR%  %CCMODE%$/;"	v
FAILOR	C++\ege-13.04.02-full\src\make-ege-vc15.bat	/^set FAILOR=$/;"	v
PROJECT_DIR	C++\ege-13.04.02-full\src\make-ege-vc15.bat	/^set PROJECT_DIR=vc2015$/;"	v
PROJECT_NAME	C++\ege-13.04.02-full\src\make-ege-vc15.bat	/^set PROJECT_NAME=graphics15.sln$/;"	v
SUCCESSOR	C++\ege-13.04.02-full\src\make-ege-vc15.bat	/^	set SUCCESSOR=%SUCCESSOR%  %CCMODE%$/;"	v
SUCCESSOR	C++\ege-13.04.02-full\src\make-ege-vc15.bat	/^set SUCCESSOR=$/;"	v
VCPATH	C++\ege-13.04.02-full\src\make-ege-vc15.bat	/^set VCPATH=%VC15PATH%$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-mingw32-4.7.2.bat	/^	set COMPILER=%MINGWDIR%$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-mingw32-4.7.2.bat	/^set COMPILER=0$/;"	v
MINGWDIR	C++\ege-13.04.02-full\src\make-egetest-mingw32-4.7.2.bat	/^set MINGWDIR=%MINGW32_472DIR%$/;"	v
MINGWPATH	C++\ege-13.04.02-full\src\make-egetest-mingw32-4.7.2.bat	/^set MINGWPATH=%MINGW32_472PATH%$/;"	v
end1	C++\ege-13.04.02-full\src\make-egetest-mingw32-4.7.2.bat	/^:end1$/;"	l
end2	C++\ege-13.04.02-full\src\make-egetest-mingw32-4.7.2.bat	/^:end2$/;"	l
path	C++\ege-13.04.02-full\src\make-egetest-mingw32-4.7.2.bat	/^set path=%MINGWPATH%\\bin;%MINGWPATH%\\mingw32\\bin$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-mingw32-4.8.1.bat	/^	set COMPILER=%MINGWDIR%$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-mingw32-4.8.1.bat	/^set COMPILER=0$/;"	v
MINGWDIR	C++\ege-13.04.02-full\src\make-egetest-mingw32-4.8.1.bat	/^set MINGWDIR=%MINGW32_481DIR%$/;"	v
MINGWPATH	C++\ege-13.04.02-full\src\make-egetest-mingw32-4.8.1.bat	/^set MINGWPATH=%MINGW32_481PATH%$/;"	v
end1	C++\ege-13.04.02-full\src\make-egetest-mingw32-4.8.1.bat	/^:end1$/;"	l
end2	C++\ege-13.04.02-full\src\make-egetest-mingw32-4.8.1.bat	/^:end2$/;"	l
path	C++\ege-13.04.02-full\src\make-egetest-mingw32-4.8.1.bat	/^set path=%MINGWPATH%\\bin;%MINGWPATH%\\mingw32\\bin$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-mingw64-4.9.2.bat	/^	set COMPILER=%MINGWDIR%$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-mingw64-4.9.2.bat	/^set COMPILER=$/;"	v
MINGWDIR	C++\ege-13.04.02-full\src\make-egetest-mingw64-4.9.2.bat	/^set MINGWDIR=%MINGW64_492DIR%$/;"	v
MINGWPATH	C++\ege-13.04.02-full\src\make-egetest-mingw64-4.9.2.bat	/^set MINGWPATH=%MINGW64_492PATH%$/;"	v
end1	C++\ege-13.04.02-full\src\make-egetest-mingw64-4.9.2.bat	/^:end1$/;"	l
end2	C++\ege-13.04.02-full\src\make-egetest-mingw64-4.9.2.bat	/^:end2$/;"	l
path	C++\ege-13.04.02-full\src\make-egetest-mingw64-4.9.2.bat	/^set path=%MINGWPATH%\\bin;%MINGWPATH%\\x86_64-w64-mingw32\\bin$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc-all.bat	/^set COMPILER=$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc-all.bat	/^set COMPILER=mingw32-4.7.2$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc-all.bat	/^set COMPILER=mingw32-4.8.1$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc-all.bat	/^set COMPILER=mingw32-4.9.2$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc-all.bat	/^set COMPILER=vc10$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc-all.bat	/^set COMPILER=vc12$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc-all.bat	/^set COMPILER=vc13$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc-all.bat	/^set COMPILER=vc15$/;"	v
FAILOR	C++\ege-13.04.02-full\src\make-egetest-vc-all.bat	/^    set FAILOR=%FAILOR%  %COMPILER%$/;"	v
FAILOR	C++\ege-13.04.02-full\src\make-egetest-vc-all.bat	/^set FAILOR=$/;"	v
SUCCESSOR	C++\ege-13.04.02-full\src\make-egetest-vc-all.bat	/^	set SUCCESSOR=%SUCCESSOR%  %COMPILER%$/;"	v
SUCCESSOR	C++\ege-13.04.02-full\src\make-egetest-vc-all.bat	/^set SUCCESSOR=$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc10.bat	/^	set COMPILER=VC2010 release x64$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc10.bat	/^	set COMPILER=VC2010 release$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc10.bat	/^set COMPILER=$/;"	v
end1	C++\ege-13.04.02-full\src\make-egetest-vc10.bat	/^:end1$/;"	l
end2	C++\ege-13.04.02-full\src\make-egetest-vc10.bat	/^:end2$/;"	l
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc12.bat	/^	set COMPILER=VC2012 release x64$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc12.bat	/^	set COMPILER=VC2012 release$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc12.bat	/^set COMPILER=$/;"	v
end1	C++\ege-13.04.02-full\src\make-egetest-vc12.bat	/^:end1$/;"	l
end2	C++\ege-13.04.02-full\src\make-egetest-vc12.bat	/^:end2$/;"	l
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc13.bat	/^	set COMPILER=VC2013 release x64$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc13.bat	/^	set COMPILER=VC2013 release$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc13.bat	/^set COMPILER=$/;"	v
end1	C++\ege-13.04.02-full\src\make-egetest-vc13.bat	/^:end1$/;"	l
end2	C++\ege-13.04.02-full\src\make-egetest-vc13.bat	/^:end2$/;"	l
CCMODE	C++\ege-13.04.02-full\src\make-egetest-vc13express.bat	/^set CCMODE=$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-egetest-vc13express.bat	/^set CCMODE=Release-Win32$/;"	v
CCMODE	C++\ege-13.04.02-full\src\make-egetest-vc13express.bat	/^set CCMODE=Release-x64$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc13express.bat	/^set COMPILER=MS Build 2013 (replace "VC2013 Express for Desktop")$/;"	v
FAILOR	C++\ege-13.04.02-full\src\make-egetest-vc13express.bat	/^    set FAILOR=%FAILOR%  %CCMODE%$/;"	v
FAILOR	C++\ege-13.04.02-full\src\make-egetest-vc13express.bat	/^set FAILOR=$/;"	v
SUCCESSOR	C++\ege-13.04.02-full\src\make-egetest-vc13express.bat	/^	set SUCCESSOR=%SUCCESSOR%  %CCMODE%$/;"	v
SUCCESSOR	C++\ege-13.04.02-full\src\make-egetest-vc13express.bat	/^set SUCCESSOR=$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc15.bat	/^	set COMPILER=VC2015 release x64$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc15.bat	/^	set COMPILER=VC2015 release$/;"	v
COMPILER	C++\ege-13.04.02-full\src\make-egetest-vc15.bat	/^set COMPILER=$/;"	v
end1	C++\ege-13.04.02-full\src\make-egetest-vc15.bat	/^:end1$/;"	l
end2	C++\ege-13.04.02-full\src\make-egetest-vc15.bat	/^:end2$/;"	l
GetAngel	C++\ege-13.04.02-full\src\math.cpp	/^VECTOR3D::GetAngel(const VECTOR3D& _e, const VECTOR3D& _s) {$/;"	f	class:ege::VECTOR3D
GetModule	C++\ege-13.04.02-full\src\math.cpp	/^VECTOR3D::GetModule() const {$/;"	f	class:ege::VECTOR3D
Rotate	C++\ege-13.04.02-full\src\math.cpp	/^VECTOR3D::Rotate(const VECTOR3D& _e, const VECTOR3D& _s) {$/;"	f	class:ege::VECTOR3D
Rotate	C++\ege-13.04.02-full\src\math.cpp	/^VECTOR3D::Rotate(float rad, const VECTOR3D& v) {$/;"	f	class:ege::VECTOR3D
ege	C++\ege-13.04.02-full\src\math.cpp	/^namespace ege {$/;"	n	file:
operator &	C++\ege-13.04.02-full\src\math.cpp	/^VECTOR3D::operator & (const VECTOR3D& _fp) const {$/;"	f	class:ege::VECTOR3D
operator &=	C++\ege-13.04.02-full\src\math.cpp	/^VECTOR3D::operator &= (const VECTOR3D& _fp) {$/;"	f	class:ege::VECTOR3D
operator *	C++\ege-13.04.02-full\src\math.cpp	/^VECTOR3D::operator * (const VECTOR3D& _fp) const {$/;"	f	class:ege::VECTOR3D
operator *	C++\ege-13.04.02-full\src\math.cpp	/^VECTOR3D::operator * (float f) const {$/;"	f	class:ege::VECTOR3D
operator *=	C++\ege-13.04.02-full\src\math.cpp	/^VECTOR3D::operator *= (float f) {$/;"	f	class:ege::VECTOR3D
operator +	C++\ege-13.04.02-full\src\math.cpp	/^VECTOR3D::operator + (const VECTOR3D& _fp) const {$/;"	f	class:ege::VECTOR3D
operator +=	C++\ege-13.04.02-full\src\math.cpp	/^VECTOR3D::operator += (const VECTOR3D& _fp) {$/;"	f	class:ege::VECTOR3D
operator -	C++\ege-13.04.02-full\src\math.cpp	/^VECTOR3D::operator - (const VECTOR3D& _fp) const {$/;"	f	class:ege::VECTOR3D
operator -=	C++\ege-13.04.02-full\src\math.cpp	/^VECTOR3D::operator -= (const VECTOR3D& _fp) {$/;"	f	class:ege::VECTOR3D
rotate_point3d_x	C++\ege-13.04.02-full\src\math.cpp	/^rotate_point3d_x(VECTOR3D * pt, float r) {$/;"	f	namespace:ege
rotate_point3d_y	C++\ege-13.04.02-full\src\math.cpp	/^rotate_point3d_y(VECTOR3D * pt, float r) {$/;"	f	namespace:ege
rotate_point3d_z	C++\ege-13.04.02-full\src\math.cpp	/^rotate_point3d_z(VECTOR3D * pt, float r) {$/;"	f	namespace:ege
Close	C++\ege-13.04.02-full\src\music.cpp	/^DWORD MUSIC::Close() {$/;"	f	class:ege::MUSIC
GetLength	C++\ege-13.04.02-full\src\music.cpp	/^DWORD MUSIC::GetLength() {$/;"	f	class:ege::MUSIC
GetPlayStatus	C++\ege-13.04.02-full\src\music.cpp	/^DWORD MUSIC::GetPlayStatus() {$/;"	f	class:ege::MUSIC
GetPosition	C++\ege-13.04.02-full\src\music.cpp	/^DWORD MUSIC::GetPosition() {$/;"	f	class:ege::MUSIC
MCI_DGV_SETAUDIO_ITEM	C++\ege-13.04.02-full\src\music.cpp	32;"	d	file:
MCI_DGV_SETAUDIO_PARMS	C++\ege-13.04.02-full\src\music.cpp	/^typedef MCI_DGV_SETAUDIO_PARMSA MCI_DGV_SETAUDIO_PARMS;$/;"	t	file:
MCI_DGV_SETAUDIO_PARMS	C++\ege-13.04.02-full\src\music.cpp	/^typedef MCI_DGV_SETAUDIO_PARMSW MCI_DGV_SETAUDIO_PARMS;$/;"	t	file:
MCI_DGV_SETAUDIO_PARMSA	C++\ege-13.04.02-full\src\music.cpp	/^} MCI_DGV_SETAUDIO_PARMSA;$/;"	t	typeref:struct:__anon30	file:
MCI_DGV_SETAUDIO_PARMSW	C++\ege-13.04.02-full\src\music.cpp	/^} MCI_DGV_SETAUDIO_PARMSW;$/;"	t	typeref:struct:__anon31	file:
MCI_DGV_SETAUDIO_VALUE	C++\ege-13.04.02-full\src\music.cpp	33;"	d	file:
MCI_DGV_SETAUDIO_VOLUME	C++\ege-13.04.02-full\src\music.cpp	35;"	d	file:
MCI_SETAUDIO	C++\ege-13.04.02-full\src\music.cpp	36;"	d	file:
MUSIC	C++\ege-13.04.02-full\src\music.cpp	/^MUSIC::MUSIC() {$/;"	f	class:ege::MUSIC
OpenFile	C++\ege-13.04.02-full\src\music.cpp	/^DWORD MUSIC::OpenFile(LPCSTR _szStr) {$/;"	f	class:ege::MUSIC
OpenFile	C++\ege-13.04.02-full\src\music.cpp	/^DWORD MUSIC::OpenFile(LPCWSTR _szStr) {$/;"	f	class:ege::MUSIC
Pause	C++\ege-13.04.02-full\src\music.cpp	/^DWORD MUSIC::Pause() {$/;"	f	class:ege::MUSIC
Play	C++\ege-13.04.02-full\src\music.cpp	/^DWORD MUSIC::Play(DWORD dwFrom, DWORD dwTo) {$/;"	f	class:ege::MUSIC
Seek	C++\ege-13.04.02-full\src\music.cpp	/^DWORD MUSIC::Seek(DWORD dwTo) {$/;"	f	class:ege::MUSIC
SetVolume	C++\ege-13.04.02-full\src\music.cpp	/^DWORD MUSIC::SetVolume(float value) {$/;"	f	class:ege::MUSIC
Stop	C++\ege-13.04.02-full\src\music.cpp	/^DWORD MUSIC::Stop() {$/;"	f	class:ege::MUSIC
dwCallback	C++\ege-13.04.02-full\src\music.cpp	/^	DWORD_PTR   dwCallback;$/;"	m	struct:__anon30	file:
dwCallback	C++\ege-13.04.02-full\src\music.cpp	/^	DWORD_PTR   dwCallback;$/;"	m	struct:__anon31	file:
dwItem	C++\ege-13.04.02-full\src\music.cpp	/^	DWORD   dwItem;$/;"	m	struct:__anon30	file:
dwItem	C++\ege-13.04.02-full\src\music.cpp	/^	DWORD   dwItem;$/;"	m	struct:__anon31	file:
dwOver	C++\ege-13.04.02-full\src\music.cpp	/^	DWORD   dwOver;$/;"	m	struct:__anon30	file:
dwOver	C++\ege-13.04.02-full\src\music.cpp	/^	DWORD   dwOver;$/;"	m	struct:__anon31	file:
dwValue	C++\ege-13.04.02-full\src\music.cpp	/^	DWORD   dwValue;$/;"	m	struct:__anon30	file:
dwValue	C++\ege-13.04.02-full\src\music.cpp	/^	DWORD   dwValue;$/;"	m	struct:__anon31	file:
ege	C++\ege-13.04.02-full\src\music.cpp	/^namespace ege {$/;"	n	file:
lpstrAlgorithm	C++\ege-13.04.02-full\src\music.cpp	/^	LPSTR   lpstrAlgorithm;$/;"	m	struct:__anon30	file:
lpstrAlgorithm	C++\ege-13.04.02-full\src\music.cpp	/^	LPWSTR  lpstrAlgorithm;$/;"	m	struct:__anon31	file:
lpstrQuality	C++\ege-13.04.02-full\src\music.cpp	/^	LPSTR   lpstrQuality;$/;"	m	struct:__anon30	file:
lpstrQuality	C++\ege-13.04.02-full\src\music.cpp	/^	LPWSTR  lpstrQuality;$/;"	m	struct:__anon31	file:
~MUSIC	C++\ege-13.04.02-full\src\music.cpp	/^MUSIC::~MUSIC() {$/;"	f	class:ege::MUSIC
M	C++\ege-13.04.02-full\src\random.cpp	146;"	d	file:
M	C++\ege-13.04.02-full\src\random.cpp	41;"	d	file:
N	C++\ege-13.04.02-full\src\random.cpp	145;"	d	file:
N	C++\ege-13.04.02-full\src\random.cpp	40;"	d	file:
ege	C++\ege-13.04.02-full\src\random.cpp	/^namespace ege {$/;"	n	file:
init	C++\ege-13.04.02-full\src\random.cpp	/^	void init(uint32 seed = 19650218UL) {$/;"	f	class:ege::mtrandom	file:
left	C++\ege-13.04.02-full\src\random.cpp	/^	uint32 left;$/;"	m	class:ege::mtrandom	file:
mixbits	C++\ege-13.04.02-full\src\random.cpp	/^	uint32 mixbits(uint32 u, uint32 v) const {$/;"	f	class:ege::mtrandom	file:
mtdrand	C++\ege-13.04.02-full\src\random.cpp	/^extern double mtdrand() { return mtrand_help()(1.0); }$/;"	f	namespace:ege
mtirand	C++\ege-13.04.02-full\src\random.cpp	/^extern uint32 mtirand() { return mtrand_help()(); }$/;"	f	namespace:ege
mtrand_help	C++\ege-13.04.02-full\src\random.cpp	/^	mtrand_help() {}$/;"	f	class:ege::mtrand_help
mtrand_help	C++\ege-13.04.02-full\src\random.cpp	/^class mtrand_help {$/;"	c	namespace:ege	file:
mtrandom	C++\ege-13.04.02-full\src\random.cpp	/^	explicit mtrandom(uint32 seed) : left(1) {    init(seed);    }$/;"	f	class:ege::mtrandom
mtrandom	C++\ege-13.04.02-full\src\random.cpp	/^	mtrandom() : left(1) { init(); }$/;"	f	class:ege::mtrandom
mtrandom	C++\ege-13.04.02-full\src\random.cpp	/^	mtrandom(uint32* init_key, int key_length) : left(1) {$/;"	f	class:ege::mtrandom
mtrandom	C++\ege-13.04.02-full\src\random.cpp	/^class mtrandom {$/;"	c	namespace:ege	file:
mtsrand	C++\ege-13.04.02-full\src\random.cpp	/^extern void mtsrand(uint32 s) { mtrand_help()(s); }$/;"	f	namespace:ege
next	C++\ege-13.04.02-full\src\random.cpp	/^	uint32* next;$/;"	m	class:ege::mtrandom	file:
next_state	C++\ege-13.04.02-full\src\random.cpp	/^	void next_state() {$/;"	f	class:ege::mtrandom	file:
operator ()	C++\ege-13.04.02-full\src\random.cpp	/^	double operator()(double) { return r.real(); }$/;"	f	class:ege::mtrand_help
operator ()	C++\ege-13.04.02-full\src\random.cpp	/^	uint32 operator()() const { return r.rand(); }$/;"	f	class:ege::mtrand_help
operator ()	C++\ege-13.04.02-full\src\random.cpp	/^	void operator()(uint32 s) { r.reset(s); }$/;"	f	class:ege::mtrand_help
r	C++\ege-13.04.02-full\src\random.cpp	/^	static mtrandom r;$/;"	m	class:ege::mtrand_help	file:
r	C++\ege-13.04.02-full\src\random.cpp	/^mtrandom mtrand_help:: r;$/;"	m	class:ege::mtrand_help	file:
rand	C++\ege-13.04.02-full\src\random.cpp	/^	uint32 rand() {$/;"	f	class:ege::mtrandom
random	C++\ege-13.04.02-full\src\random.cpp	/^random(unsigned int n) {$/;"	f	namespace:ege
randomf	C++\ege-13.04.02-full\src\random.cpp	/^randomf() {$/;"	f	namespace:ege
randomize	C++\ege-13.04.02-full\src\random.cpp	/^randomize() {$/;"	f	namespace:ege
real	C++\ege-13.04.02-full\src\random.cpp	/^	double real()    {    return (double)rand() \/ ((double)(unsigned long)(-1L) + 1);    }$/;"	f	class:ege::mtrandom
res53	C++\ege-13.04.02-full\src\random.cpp	/^	double res53() {$/;"	f	class:ege::mtrandom
reset	C++\ege-13.04.02-full\src\random.cpp	/^	void reset(uint32 rs) {$/;"	f	class:ege::mtrandom
state	C++\ege-13.04.02-full\src\random.cpp	/^	uint32 state[N];$/;"	m	class:ege::mtrandom	file:
twist	C++\ege-13.04.02-full\src\random.cpp	/^	uint32 twist(uint32 u, uint32 v) const {$/;"	f	class:ege::mtrandom	file:
MINGW32PATH	C++\ege-13.04.02-full\src\setenv.bat	/^set MINGW32PATH=C:\\Program Files (x86)\\Dev-Cpp\\MinGW32$/;"	v
MINGW32_472DIR	C++\ege-13.04.02-full\src\setenv.bat	/^set MINGW32_472DIR=mingw-4.7.2$/;"	v
MINGW32_472PATH	C++\ege-13.04.02-full\src\setenv.bat	/^set MINGW32_472PATH=%MINGW_BASE_PATH%\\%MINGW32_472DIR%$/;"	v
MINGW32_481DIR	C++\ege-13.04.02-full\src\setenv.bat	/^set MINGW32_481DIR=mingw-4.8.1$/;"	v
MINGW32_481PATH	C++\ege-13.04.02-full\src\setenv.bat	/^set MINGW32_481PATH=%MINGW_BASE_PATH%\\%MINGW32_481DIR%$/;"	v
MINGW32_DIR	C++\ege-13.04.02-full\src\setenv.bat	/^set MINGW32_DIR=mingw32$/;"	v
MINGW64PATH	C++\ege-13.04.02-full\src\setenv.bat	/^set MINGW64PATH=C:\\Program Files (x86)\\Dev-Cpp\\MinGW64/;"	v
MINGW64_492DIR	C++\ege-13.04.02-full\src\setenv.bat	/^rem set MINGW64_492DIR=mingw64-4.9.2$/;"	v
MINGW64_492DIR	C++\ege-13.04.02-full\src\setenv.bat	/^set MINGW64_492DIR=TDM-GCC-64$/;"	v
MINGW64_492PATH	C++\ege-13.04.02-full\src\setenv.bat	/^rem set MINGW64_492PATH=%MINGW_BASE_PATH%\\%MINGW64_492DIR%$/;"	v
MINGW64_492PATH	C++\ege-13.04.02-full\src\setenv.bat	/^set MINGW64_492PATH=%MINGW_BASE_PATH%\\%MINGW64_492DIR%$/;"	v
MINGW64_DIR	C++\ege-13.04.02-full\src\setenv.bat	/^set MINGW64_DIR=mingw64$/;"	v
MINGWMAKEFILE	C++\ege-13.04.02-full\src\setenv.bat	/^rem set MINGWMAKEFILE=mingw$/;"	v
MINGWPATH	C++\ege-13.04.02-full\src\setenv.bat	/^rem set MINGWPATH=C:\\Dev-Cpp$/;"	v
MINGW_BASE_PATH	C++\ege-13.04.02-full\src\setenv.bat	/^set MINGW_BASE_PATH=D:\\mingw$/;"	v
MSBUILD10PATH	C++\ege-13.04.02-full\src\setenv.bat	/^set MSBUILD10PATH=C:\\Program Files (x86)\\MSBuild\\10.0$/;"	v
MSBUILD12PATH	C++\ege-13.04.02-full\src\setenv.bat	/^set MSBUILD12PATH=C:\\Program Files (x86)\\MSBuild\\11.0$/;"	v
MSBUILD13PATH	C++\ege-13.04.02-full\src\setenv.bat	/^set MSBUILD13PATH=C:\\Program Files (x86)\\MSBuild\\12.0$/;"	v
MSBUILD15PATH	C++\ege-13.04.02-full\src\setenv.bat	/^set MSBUILD15PATH=C:\\Program Files (x86)\\MSBuild\\13.0$/;"	v
VC10PATH	C++\ege-13.04.02-full\src\setenv.bat	/^set VC10PATH=C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC$/;"	v
VC12PATH	C++\ege-13.04.02-full\src\setenv.bat	/^set VC12PATH=C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC$/;"	v
VC13PATH	C++\ege-13.04.02-full\src\setenv.bat	/^set VC13PATH=C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC$/;"	v
VC15PATH	C++\ege-13.04.02-full\src\setenv.bat	/^set VC15PATH=C:\\Program Files (x86)\\Microsoft Visual Studio 13.0\\VC$/;"	v
INT16_C	C++\ege-13.04.02-full\src\stdint.h	192;"	d
INT16_MAX	C++\ege-13.04.02-full\src\stdint.h	93;"	d
INT16_MIN	C++\ege-13.04.02-full\src\stdint.h	88;"	d
INT32_C	C++\ege-13.04.02-full\src\stdint.h	195;"	d
INT32_MAX	C++\ege-13.04.02-full\src\stdint.h	94;"	d
INT32_MIN	C++\ege-13.04.02-full\src\stdint.h	89;"	d
INT64_C	C++\ege-13.04.02-full\src\stdint.h	197;"	d
INT64_MAX	C++\ege-13.04.02-full\src\stdint.h	95;"	d
INT64_MIN	C++\ege-13.04.02-full\src\stdint.h	90;"	d
INT8_C	C++\ege-13.04.02-full\src\stdint.h	190;"	d
INT8_MAX	C++\ege-13.04.02-full\src\stdint.h	92;"	d
INT8_MIN	C++\ege-13.04.02-full\src\stdint.h	87;"	d
INTMAX_C	C++\ege-13.04.02-full\src\stdint.h	201;"	d
INTMAX_MAX	C++\ege-13.04.02-full\src\stdint.h	148;"	d
INTMAX_MIN	C++\ege-13.04.02-full\src\stdint.h	147;"	d
INTPTR_MAX	C++\ege-13.04.02-full\src\stdint.h	138;"	d
INTPTR_MAX	C++\ege-13.04.02-full\src\stdint.h	142;"	d
INTPTR_MIN	C++\ege-13.04.02-full\src\stdint.h	137;"	d
INTPTR_MIN	C++\ege-13.04.02-full\src\stdint.h	141;"	d
INT_FAST16_MAX	C++\ege-13.04.02-full\src\stdint.h	125;"	d
INT_FAST16_MIN	C++\ege-13.04.02-full\src\stdint.h	120;"	d
INT_FAST32_MAX	C++\ege-13.04.02-full\src\stdint.h	126;"	d
INT_FAST32_MIN	C++\ege-13.04.02-full\src\stdint.h	121;"	d
INT_FAST64_MAX	C++\ege-13.04.02-full\src\stdint.h	127;"	d
INT_FAST64_MIN	C++\ege-13.04.02-full\src\stdint.h	122;"	d
INT_FAST8_MAX	C++\ege-13.04.02-full\src\stdint.h	124;"	d
INT_FAST8_MIN	C++\ege-13.04.02-full\src\stdint.h	119;"	d
INT_LEAST16_MAX	C++\ege-13.04.02-full\src\stdint.h	109;"	d
INT_LEAST16_MIN	C++\ege-13.04.02-full\src\stdint.h	104;"	d
INT_LEAST32_MAX	C++\ege-13.04.02-full\src\stdint.h	110;"	d
INT_LEAST32_MIN	C++\ege-13.04.02-full\src\stdint.h	105;"	d
INT_LEAST64_MAX	C++\ege-13.04.02-full\src\stdint.h	111;"	d
INT_LEAST64_MIN	C++\ege-13.04.02-full\src\stdint.h	106;"	d
INT_LEAST8_MAX	C++\ege-13.04.02-full\src\stdint.h	108;"	d
INT_LEAST8_MIN	C++\ege-13.04.02-full\src\stdint.h	103;"	d
PTRDIFF_MAX	C++\ege-13.04.02-full\src\stdint.h	153;"	d
PTRDIFF_MIN	C++\ege-13.04.02-full\src\stdint.h	152;"	d
SIG_ATOMIC_MAX	C++\ege-13.04.02-full\src\stdint.h	156;"	d
SIG_ATOMIC_MIN	C++\ege-13.04.02-full\src\stdint.h	155;"	d
SIZE_MAX	C++\ege-13.04.02-full\src\stdint.h	158;"	d
UINT16_C	C++\ege-13.04.02-full\src\stdint.h	193;"	d
UINT16_MAX	C++\ege-13.04.02-full\src\stdint.h	98;"	d
UINT32_C	C++\ege-13.04.02-full\src\stdint.h	196;"	d
UINT32_MAX	C++\ege-13.04.02-full\src\stdint.h	99;"	d
UINT64_C	C++\ege-13.04.02-full\src\stdint.h	198;"	d
UINT64_MAX	C++\ege-13.04.02-full\src\stdint.h	100;"	d
UINT8_C	C++\ege-13.04.02-full\src\stdint.h	191;"	d
UINT8_MAX	C++\ege-13.04.02-full\src\stdint.h	97;"	d
UINTMAX_C	C++\ege-13.04.02-full\src\stdint.h	202;"	d
UINTMAX_MAX	C++\ege-13.04.02-full\src\stdint.h	149;"	d
UINTPTR_MAX	C++\ege-13.04.02-full\src\stdint.h	139;"	d
UINTPTR_MAX	C++\ege-13.04.02-full\src\stdint.h	143;"	d
UINT_FAST16_MAX	C++\ege-13.04.02-full\src\stdint.h	130;"	d
UINT_FAST32_MAX	C++\ege-13.04.02-full\src\stdint.h	131;"	d
UINT_FAST64_MAX	C++\ege-13.04.02-full\src\stdint.h	132;"	d
UINT_FAST8_MAX	C++\ege-13.04.02-full\src\stdint.h	129;"	d
UINT_LEAST16_MAX	C++\ege-13.04.02-full\src\stdint.h	114;"	d
UINT_LEAST32_MAX	C++\ege-13.04.02-full\src\stdint.h	115;"	d
UINT_LEAST64_MAX	C++\ege-13.04.02-full\src\stdint.h	116;"	d
UINT_LEAST8_MAX	C++\ege-13.04.02-full\src\stdint.h	113;"	d
WCHAR_MAX	C++\ege-13.04.02-full\src\stdint.h	162;"	d
WCHAR_MIN	C++\ege-13.04.02-full\src\stdint.h	161;"	d
WINT_MAX	C++\ege-13.04.02-full\src\stdint.h	169;"	d
WINT_MIN	C++\ege-13.04.02-full\src\stdint.h	168;"	d
_INTPTR_T_DEFINED	C++\ege-13.04.02-full\src\stdint.h	62;"	d
_STDINT_H	C++\ege-13.04.02-full\src\stdint.h	21;"	d
_UINTPTR_T_DEFINED	C++\ege-13.04.02-full\src\stdint.h	71;"	d
__need_wchar_t	C++\ege-13.04.02-full\src\stdint.h	23;"	d
__need_wint_t	C++\ege-13.04.02-full\src\stdint.h	22;"	d
int16_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef short  int16_t;$/;"	t
int32_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef int  int32_t;$/;"	t
int64_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef long long  int64_t;$/;"	t
int8_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef signed char int8_t;$/;"	t
int_fast16_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef short  int_fast16_t;$/;"	t
int_fast32_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef int  int_fast32_t;$/;"	t
int_fast64_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef long long  int_fast64_t;$/;"	t
int_fast8_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef char int_fast8_t;$/;"	t
int_least16_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef short  int_least16_t;$/;"	t
int_least32_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef int  int_least32_t;$/;"	t
int_least64_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef long long  int_least64_t;$/;"	t
int_least8_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef signed char int_least8_t;$/;"	t
intmax_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef long long  intmax_t;$/;"	t
intptr_t	C++\ege-13.04.02-full\src\stdint.h	/^  typedef __int64 intptr_t;$/;"	t
intptr_t	C++\ege-13.04.02-full\src\stdint.h	/^  typedef int intptr_t;$/;"	t
uint16_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef unsigned short  uint16_t;$/;"	t
uint32_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef unsigned   uint32_t;$/;"	t
uint64_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef unsigned long long   uint64_t;$/;"	t
uint8_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef unsigned char   uint8_t;$/;"	t
uint_fast16_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef unsigned short  uint_fast16_t;$/;"	t
uint_fast32_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef unsigned  int  uint_fast32_t;$/;"	t
uint_fast64_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef unsigned long long   uint_fast64_t;$/;"	t
uint_fast8_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef unsigned char uint_fast8_t;$/;"	t
uint_least16_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef unsigned short  uint_least16_t;$/;"	t
uint_least32_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef unsigned   uint_least32_t;$/;"	t
uint_least64_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef unsigned long long   uint_least64_t;$/;"	t
uint_least8_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef unsigned char   uint_least8_t;$/;"	t
uintmax_t	C++\ege-13.04.02-full\src\stdint.h	/^typedef unsigned long long uintmax_t;$/;"	t
uintptr_t	C++\ege-13.04.02-full\src\stdint.h	/^  typedef unsigned __int64 uintptr_t;$/;"	t
uintptr_t	C++\ege-13.04.02-full\src\stdint.h	/^  typedef unsigned int uintptr_t;$/;"	t
Lock	C++\ege-13.04.02-full\src\thread_queue.h	/^	Lock(LPCRITICAL_SECTION p_) : _psection(p_) {$/;"	f	class:ege::Lock
Lock	C++\ege-13.04.02-full\src\thread_queue.h	/^class Lock$/;"	c	namespace:ege
QUEUE_LEN	C++\ege-13.04.02-full\src\thread_queue.h	5;"	d
_last	C++\ege-13.04.02-full\src\thread_queue.h	/^	T _last;$/;"	m	class:ege::thread_queue
_psection	C++\ege-13.04.02-full\src\thread_queue.h	/^	LPCRITICAL_SECTION _psection;$/;"	m	class:ege::Lock
_queue	C++\ege-13.04.02-full\src\thread_queue.h	/^	T _queue[QUEUE_LEN];$/;"	m	class:ege::thread_queue
_r	C++\ege-13.04.02-full\src\thread_queue.h	/^	int _r, _w;$/;"	m	class:ege::thread_queue
_section	C++\ege-13.04.02-full\src\thread_queue.h	/^	CRITICAL_SECTION _section;$/;"	m	class:ege::thread_queue
_w	C++\ege-13.04.02-full\src\thread_queue.h	/^	int _r, _w;$/;"	m	class:ege::thread_queue
ege	C++\ege-13.04.02-full\src\thread_queue.h	/^namespace ege {$/;"	n
empty	C++\ege-13.04.02-full\src\thread_queue.h	/^	bool empty() {$/;"	f	class:ege::thread_queue
last	C++\ege-13.04.02-full\src\thread_queue.h	/^	T last() {$/;"	f	class:ege::thread_queue
pop	C++\ege-13.04.02-full\src\thread_queue.h	/^	int pop(T& d_) {$/;"	f	class:ege::thread_queue
process	C++\ege-13.04.02-full\src\thread_queue.h	/^	void process(void (*process_func)(T&)) {$/;"	f	class:ege::thread_queue
push	C++\ege-13.04.02-full\src\thread_queue.h	/^	void push(const T& d_) {$/;"	f	class:ege::thread_queue
thread_queue	C++\ege-13.04.02-full\src\thread_queue.h	/^	thread_queue(void) {$/;"	f	class:ege::thread_queue
thread_queue	C++\ege-13.04.02-full\src\thread_queue.h	/^class thread_queue$/;"	c	namespace:ege
unpop	C++\ege-13.04.02-full\src\thread_queue.h	/^	int unpop() {$/;"	f	class:ege::thread_queue
~Lock	C++\ege-13.04.02-full\src\thread_queue.h	/^	~Lock() {$/;"	f	class:ege::Lock
~thread_queue	C++\ege-13.04.02-full\src\thread_queue.h	/^	~thread_queue(void) {$/;"	f	class:ege::thread_queue
BASEITERATIONS	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	9;"	d	file:
COLORMASK	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	12;"	d	file:
COMPLEX	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    COMPLEX()$/;"	f	struct:COMPLEX
COMPLEX	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^struct COMPLEX$/;"	s	file:
COMPLEXI	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^struct COMPLEXI$/;"	s	file:
Color	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^int Color[COLORMASK+1];$/;"	v
Draw	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^void Draw(Float fromx, Float fromy, Float tox, Float toy, int mode = 0, COMPLEX _c = COMPLEX())$/;"	f
DrawEx	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^void DrawEx(Float fromx, Float fromy, Float tox, Float toy, int mode = 0, COMPLEX _c = COMPLEX())$/;"	f
Float	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^typedef mpf_class Float;$/;"	t	file:
ITERATIONS	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	10;"	d	file:
InitColor	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^void InitColor()$/;"	f
MAXCOLOR	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	11;"	d	file:
Mandelbrot	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^int Mandelbrot(COMPLEX z, COMPLEX c, int x, int y)$/;"	f
MandelbrotEx	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^int MandelbrotEx(PIXEL& z, COMPLEX& c)$/;"	f
PIXEL	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^typedef struct PIXEL$/;"	s	file:
PIXEL	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^}PIXEL;$/;"	t	typeref:struct:PIXEL	file:
SC_H	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	15;"	d	file:
SC_W	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	14;"	d	file:
WIDTH	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	144;"	d	file:
W_B	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	143;"	d	file:
WinMain	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^int WinMain()$/;"	f
abs	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^double abs(const COMPLEX& c)$/;"	f
addpoint	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^void addpoint(int x, int y)$/;"	f
calc	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    int calc;$/;"	m	struct:PIXEL	file:
clear	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    void clear()$/;"	f	struct:updatelist
ed	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    int ed;$/;"	m	struct:PIXEL	file:
fixcolor	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^void fixcolor(int* color)$/;"	f
func	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	352;"	d	file:
g_miniter	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^int g_miniter;$/;"	v
g_prec	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^mp_bitcnt_t g_prec = 64;$/;"	v
g_pudlist	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^}*g_pudlist = new updatelist;$/;"	v	typeref:struct:updatelist
g_udlist	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^updatelist& g_udlist = *g_pudlist;$/;"	v
im	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    Float im;$/;"	m	struct:COMPLEX	file:
im	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    int im;$/;"	m	struct:COMPLEXI	file:
imag	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    Float& imag() { return im; }$/;"	f	struct:COMPLEX
interations	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^int interations = ITERATIONS;$/;"	v
last	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    COMPLEX last;$/;"	m	struct:PIXEL	file:
m_list	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    POINT m_list[2][SC_H*SC_W];$/;"	m	struct:updatelist	file:
nBeg	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    int nBeg, nLen;$/;"	m	struct:updatelist	file:
nIter	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    int nIter;$/;"	m	struct:PIXEL	file:
nLen	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    int nBeg, nLen;$/;"	m	struct:updatelist	file:
nLen_n	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    int nLen_n;$/;"	m	struct:updatelist	file:
operator *	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^COMPLEX operator * (const COMPLEX& a, const COMPLEX& b)$/;"	f
operator *	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^COMPLEX operator * (const COMPLEX& a, const double& b)$/;"	f
operator *=	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^COMPLEX& operator *= (COMPLEX& a, const COMPLEX& b)$/;"	f
operator +	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^COMPLEX operator + (const COMPLEX& a, const COMPLEX& b)$/;"	f
operator +	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^COMPLEX operator + (const COMPLEX& a, const double& b)$/;"	f
operator +=	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^COMPLEX& operator += (COMPLEX& a, const COMPLEX& b)$/;"	f
operator /	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^COMPLEX operator \/ (const COMPLEX& a, const double& b)$/;"	f
p	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    POINT *p, *pn;$/;"	m	struct:updatelist	file:
pMap	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^PIXEL (*pMap)[WIDTH] = new PIXEL[SC_H][WIDTH];$/;"	v
pn	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    POINT *p, *pn;$/;"	m	struct:updatelist	file:
pop	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    int pop(int *x, int *y)$/;"	f	struct:updatelist
push	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    void push(int x, int y)$/;"	f	struct:updatelist
re	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    Float re;$/;"	m	struct:COMPLEX	file:
re	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    int re;$/;"	m	struct:COMPLEXI	file:
real	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    Float& real() { return re; }$/;"	f	struct:COMPLEX
setgprec	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^void setgprec(Float f)$/;"	f
setinitcolor	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^void setinitcolor(int* color, int len, int h1, int h2)$/;"	f
setprec	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    void setprec()$/;"	f	struct:COMPLEX
swap	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    void swap()$/;"	f	struct:updatelist
updatelist	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^    updatelist()$/;"	f	struct:updatelist
updatelist	C++\ege-13.04.02-full\src\tools\MandelbrotSet.cpp	/^struct updatelist$/;"	s	file:
BASEITERATIONS	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	12;"	d	file:
COLORMASK	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	15;"	d	file:
COMPLEX	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    COMPLEX()$/;"	f	struct:COMPLEX
COMPLEX	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^struct COMPLEX$/;"	s	file:
COMPLEXI	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^struct COMPLEXI$/;"	s	file:
COMPLEXPOOL	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^struct COMPLEXPOOL$/;"	s	file:
CPPOOLSIZE	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	207;"	d	file:
Color	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^int Color[COLORMASK+1];$/;"	v
DrawEx	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^int DrawEx(Float& fromx, Float& fromy, Float& tox, Float& toy, int mode = 0)$/;"	f
Float	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^typedef double Float;$/;"	t	file:
Float	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^typedef mpf_class Float;$/;"	t	file:
ITERATIONS	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	13;"	d	file:
InitColor	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^void InitColor()$/;"	f
MAXCOLOR	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	14;"	d	file:
MandelbrotEx	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^int MandelbrotEx(PIXEL& z)$/;"	f
PIXEL	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    PIXEL()$/;"	f	struct:PIXEL
PIXEL	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^typedef struct PIXEL$/;"	s	file:
PIXEL	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^}PIXEL;$/;"	t	typeref:struct:PIXEL	file:
SC_H	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	18;"	d	file:
SC_W	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	17;"	d	file:
USINGDOUBLE	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	10;"	d	file:
WinMain	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^int WinMain()$/;"	f
abs	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^double abs(const COMPLEX& c)$/;"	f
abs4	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^bool abs4(const COMPLEX& c)$/;"	f
addpoint	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^void addpoint(int x, int y, int it = -1)$/;"	f
c	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    COMPLEX* c;$/;"	m	struct:PIXEL	file:
calc	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    int calc;$/;"	m	struct:PIXEL	file:
clear	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    void clear()$/;"	f	struct:updatelist
delete_cp	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^void delete_cp(COMPLEX** p)$/;"	f
ed	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    int ed;$/;"	m	struct:PIXEL	file:
fill_map	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^int fill_map()$/;"	f
fixcolor	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^void fixcolor(int* color)$/;"	f
for	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	20;"	d	file:
func	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	386;"	d	file:
g_b_update_mark	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^int g_b_update_mark;$/;"	v
g_base_iters	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^int g_base_iters = BASEITERATIONS;$/;"	v
g_cp_pool_index	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^int g_cp_pool_index;$/;"	v
g_cpnum_pool	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^COMPLEXPOOL* g_cpnum_pool = new COMPLEXPOOL[CPPOOLSIZE];$/;"	v
g_dx_iters	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^int g_dx_iters;$/;"	v
g_iters	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^int g_iters = ITERATIONS;$/;"	v
g_max_iter	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^unsigned int g_max_iter;$/;"	v
g_max_iter_last	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^unsigned int g_max_iter_last;$/;"	v
g_min_iter_last	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^unsigned int g_min_iter_last;$/;"	v
g_prec	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^mp_bitcnt_t g_prec = 64;$/;"	v
g_pudlist	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^}*g_pudlist = new updatelist;$/;"	v	typeref:struct:updatelist
g_udlist	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^updatelist& g_udlist = *g_pudlist;$/;"	v
im	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    Float im;$/;"	m	struct:COMPLEX	file:
im	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    int im;$/;"	m	struct:COMPLEXI	file:
imag	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    Float& imag() { return im; }$/;"	f	struct:COMPLEX
initqueue	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^void initqueue(int bcross)$/;"	f
last	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    COMPLEX* last;$/;"	m	struct:PIXEL	file:
last2	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    COMPLEX* last2;$/;"	m	struct:PIXEL	file:
m_list	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    POINT m_list[2][SC_H*SC_W];$/;"	m	struct:updatelist	file:
mp_bitcnt_t	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^typedef int mp_bitcnt_t;$/;"	t	file:
nBeg	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    int nBeg, nLen;$/;"	m	struct:updatelist	file:
nIter	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    int nIter;$/;"	m	struct:PIXEL	file:
nLastIter	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    int nLastIter;$/;"	m	struct:PIXEL	file:
nLen	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    int nBeg, nLen;$/;"	m	struct:updatelist	file:
nLen_n	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    int nLen_n;$/;"	m	struct:updatelist	file:
nMinIter	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    int nMinIter;$/;"	m	struct:PIXEL	file:
new_cp	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^COMPLEX* new_cp()$/;"	f
operator *	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^COMPLEX operator * (const COMPLEX& a, const COMPLEX& b)$/;"	f
operator *	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^COMPLEX operator * (const COMPLEX& a, const double& b)$/;"	f
operator *=	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^COMPLEX& operator *= (COMPLEX& a, const COMPLEX& b)$/;"	f
operator +	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^COMPLEX operator + (const COMPLEX& a, const COMPLEX& b)$/;"	f
operator +	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^COMPLEX operator + (const COMPLEX& a, const double& b)$/;"	f
operator +=	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^COMPLEX& operator += (COMPLEX& a, const COMPLEX& b)$/;"	f
operator /	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^COMPLEX operator \/ (const COMPLEX& a, const double& b)$/;"	f
p	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    POINT *p, *pn;$/;"	m	struct:updatelist	file:
pMap	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^PIXEL (*pMap)[SC_W] = new PIXEL[SC_H][SC_W];$/;"	v
pn	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    POINT *p, *pn;$/;"	m	struct:updatelist	file:
pop	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    int pop(int *x, int *y)$/;"	f	struct:updatelist
push	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    void push(int x, int y)$/;"	f	struct:updatelist
re	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    Float re;$/;"	m	struct:COMPLEX	file:
re	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    int re;$/;"	m	struct:COMPLEXI	file:
real	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    Float& real() { return re; }$/;"	f	struct:COMPLEX
setgprec	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^void setgprec(Float f)$/;"	f
setinitcolor	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^void setinitcolor(int* color, int len, int h1, int h2, float s = 0.8f)$/;"	f
setprec	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    void setprec()$/;"	f	struct:COMPLEX
setzero	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    void setzero()$/;"	f	struct:COMPLEX
str2float	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^Float& str2float (Float& f, const char str[])$/;"	f
swap	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    void swap()$/;"	f	struct:updatelist
updatelist	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    updatelist()$/;"	f	struct:updatelist
updatelist	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^struct updatelist$/;"	s	file:
use	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    int use;$/;"	m	struct:COMPLEXPOOL	file:
z	C++\ege-13.04.02-full\src\tools\MandelbrotSetAni.cpp	/^    COMPLEX z;$/;"	m	struct:COMPLEXPOOL	file:
BASEITERATIONS	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	8;"	d	file:
COLORMASK	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	11;"	d	file:
COMPLEX	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    COMPLEX()$/;"	f	struct:COMPLEX
COMPLEX	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^struct COMPLEX$/;"	s	file:
COMPLEXI	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^struct COMPLEXI$/;"	s	file:
COMPLEXPOOL	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^struct COMPLEXPOOL$/;"	s	file:
CPPOOLSIZE	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	170;"	d	file:
Color	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^int Color[COLORMASK+1];$/;"	v
DrawEx	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^int DrawEx(Float& fromx, Float& fromy, Float& tox, Float& toy, int mode = 0)$/;"	f
Float	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^typedef mpf_class Float;$/;"	t	file:
ITERATIONS	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	9;"	d	file:
InitColor	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^void InitColor()$/;"	f
MAXCOLOR	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	10;"	d	file:
MandelbrotEx	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^int MandelbrotEx(PIXEL& z)$/;"	f
PIXEL	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    PIXEL()$/;"	f	struct:PIXEL
PIXEL	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^typedef struct PIXEL$/;"	s	file:
PIXEL	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^}PIXEL;$/;"	t	typeref:struct:PIXEL	file:
SC_H	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	14;"	d	file:
SC_W	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	13;"	d	file:
WinMain	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^int WinMain()$/;"	f
abs4	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^bool abs4(const COMPLEX& c)$/;"	f
addpoint	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^void addpoint(int x, int y, int it = -1)$/;"	f
c	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    COMPLEX* c;$/;"	m	struct:PIXEL	file:
calc	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    int calc;$/;"	m	struct:PIXEL	file:
clear	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    void clear()$/;"	f	struct:updatelist
delete_cp	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^void delete_cp(COMPLEX** p)$/;"	f
ed	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    int ed;$/;"	m	struct:PIXEL	file:
fill_map	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^int fill_map()$/;"	f
fixcolor	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^void fixcolor(int* color)$/;"	f
for	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	16;"	d	file:
func	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	349;"	d	file:
g_b_update_mark	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^int g_b_update_mark;$/;"	v
g_base_iters	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^int g_base_iters = BASEITERATIONS;$/;"	v
g_cp_pool_index	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^int g_cp_pool_index;$/;"	v
g_cpnum_pool	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^COMPLEXPOOL* g_cpnum_pool = new COMPLEXPOOL[CPPOOLSIZE];$/;"	v
g_dx_iters	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^int g_dx_iters;$/;"	v
g_iters	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^int g_iters = ITERATIONS;$/;"	v
g_max_iter	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^unsigned int g_max_iter;$/;"	v
g_max_iter_last	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^unsigned int g_max_iter_last;$/;"	v
g_min_iter_last	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^unsigned int g_min_iter_last;$/;"	v
g_prec	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^mp_bitcnt_t g_prec = 64;$/;"	v
g_pudlist	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^}*g_pudlist = new updatelist;$/;"	v	typeref:struct:updatelist
g_udlist	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^updatelist& g_udlist = *g_pudlist;$/;"	v
im	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    Float im;$/;"	m	struct:COMPLEX	file:
im	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    int im;$/;"	m	struct:COMPLEXI	file:
imag	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    Float& imag() { return im; }$/;"	f	struct:COMPLEX
initqueue	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^void initqueue(int bcross)$/;"	f
last	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    COMPLEX* last;$/;"	m	struct:PIXEL	file:
last2	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    COMPLEX* last2;$/;"	m	struct:PIXEL	file:
m_list	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    POINT m_list[2][SC_H*SC_W];$/;"	m	struct:updatelist	file:
nBeg	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    int nBeg, nLen;$/;"	m	struct:updatelist	file:
nIter	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    int nIter;$/;"	m	struct:PIXEL	file:
nLastIter	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    int nLastIter;$/;"	m	struct:PIXEL	file:
nLen	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    int nBeg, nLen;$/;"	m	struct:updatelist	file:
nLen_n	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    int nLen_n;$/;"	m	struct:updatelist	file:
nMinIter	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    int nMinIter;$/;"	m	struct:PIXEL	file:
new_cp	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^COMPLEX* new_cp()$/;"	f
operator *	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^COMPLEX operator * (const COMPLEX& a, const COMPLEX& b)$/;"	f
operator *	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^COMPLEX operator * (const COMPLEX& a, const double& b)$/;"	f
operator *=	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^COMPLEX& operator *= (COMPLEX& a, const COMPLEX& b)$/;"	f
operator +	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^COMPLEX operator + (const COMPLEX& a, const COMPLEX& b)$/;"	f
operator +	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^COMPLEX operator + (const COMPLEX& a, const double& b)$/;"	f
operator +=	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^COMPLEX& operator += (COMPLEX& a, const COMPLEX& b)$/;"	f
operator /	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^COMPLEX operator \/ (const COMPLEX& a, const double& b)$/;"	f
p	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    POINT *p, *pn;$/;"	m	struct:updatelist	file:
pMap	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^PIXEL (*pMap)[SC_W] = new PIXEL[SC_H][SC_W];$/;"	v
pn	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    POINT *p, *pn;$/;"	m	struct:updatelist	file:
pop	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    int pop(int *x, int *y)$/;"	f	struct:updatelist
push	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    void push(int x, int y)$/;"	f	struct:updatelist
re	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    Float re;$/;"	m	struct:COMPLEX	file:
re	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    int re;$/;"	m	struct:COMPLEXI	file:
real	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    Float& real() { return re; }$/;"	f	struct:COMPLEX
setgprec	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^void setgprec(Float f)$/;"	f
setinitcolor	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^void setinitcolor(int* color, int len, int h1, int h2, float s = 0.8f)$/;"	f
setprec	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    void setprec()$/;"	f	struct:COMPLEX
setzero	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    void setzero()$/;"	f	struct:COMPLEX
swap	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    void swap()$/;"	f	struct:updatelist
updatelist	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    updatelist()$/;"	f	struct:updatelist
updatelist	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^struct updatelist$/;"	s	file:
use	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    int use;$/;"	m	struct:COMPLEXPOOL	file:
z	C++\ege-13.04.02-full\src\tools\MandelbrotSetAniLarge.cpp	/^    COMPLEX z;$/;"	m	struct:COMPLEXPOOL	file:
Mira	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    Mira(int w, int h)$/;"	f	class:Mira
Mira	C++\ege-13.04.02-full\src\tools\setup.cpp	/^class Mira$/;"	c	file:
SC_H	C++\ege-13.04.02-full\src\tools\setup.cpp	15;"	d	file:
SC_W	C++\ege-13.04.02-full\src\tools\setup.cpp	14;"	d	file:
copyfile	C++\ege-13.04.02-full\src\tools\setup.cpp	/^int copyfile(char* path1, char* pathnew, char* dir,char* file)$/;"	f
drawpixel	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    void drawpixel(double _x, double _y, int color)$/;"	f	class:Mira
g_output	C++\ege-13.04.02-full\src\tools\setup.cpp	/^char g_output[1024 * 16];$/;"	v
g_zoom	C++\ege-13.04.02-full\src\tools\setup.cpp	/^double g_zoom = 0.1;$/;"	v
getpath_scene	C++\ege-13.04.02-full\src\tools\setup.cpp	/^int getpath_scene()$/;"	f
info_scene	C++\ege-13.04.02-full\src\tools\setup.cpp	/^int info_scene()$/;"	f
installpath	C++\ege-13.04.02-full\src\tools\setup.cpp	/^char installpath[8][MAX_PATH];$/;"	v
m_a	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    double m_a, m_b;$/;"	m	class:Mira	file:
m_b	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    double m_a, m_b;$/;"	m	class:Mira	file:
m_cr	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    double m_cr, m_tt;$/;"	m	class:Mira	file:
m_da	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    double m_da, m_db;$/;"	m	class:Mira	file:
m_db	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    double m_da, m_db;$/;"	m	class:Mira	file:
m_h	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    int m_w, m_h;$/;"	m	class:Mira	file:
m_tt	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    double m_cr, m_tt;$/;"	m	class:Mira	file:
m_w	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    int m_w, m_h;$/;"	m	class:Mira	file:
m_zoom	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    double m_zoom;$/;"	m	class:Mira	file:
main	C++\ege-13.04.02-full\src\tools\setup.cpp	/^int main()$/;"	f
mira	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    int mira(double a, double b, double x, double y, int niter, int color)$/;"	f	class:Mira
pmira	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    PIMAGE pmira;$/;"	m	class:Mira	file:
render	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    int render(int _x, int _y)$/;"	f	class:Mira
setup	C++\ege-13.04.02-full\src\tools\setup.cpp	/^void setup()$/;"	f
setup_scene	C++\ege-13.04.02-full\src\tools\setup.cpp	/^int setup_scene()$/;"	f
strbasepath	C++\ege-13.04.02-full\src\tools\setup.cpp	/^char strbasepath[] = "SOFTWARE\\\\";$/;"	v
update	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    int update()$/;"	f	class:Mira
ver	C++\ege-13.04.02-full\src\tools\setup.cpp	/^char ver[8][64] = { "Microsoft\\\\VisualStudio\\\\6.0\\\\Setup\\\\Microsoft Viaual C++",$/;"	v
~Mira	C++\ege-13.04.02-full\src\tools\setup.cpp	/^    ~Mira()$/;"	f	class:Mira
CTL_PREINIT	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	CTL_PREINIT(alphafilter, ege::egeControlBase) {$/;"	f	class:alphafilter
CTL_PREINIT	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	CTL_PREINIT(input, egeControlBase) {$/;"	f	class:input
CTL_PREINIT	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	CTL_PREINIT(input2, input) {$/;"	f	class:input2
CTL_PREINITEND	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	} CTL_PREINITEND;$/;"	m	class:alphafilter	file:
CTL_PREINITEND	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	} CTL_PREINITEND;$/;"	m	class:input	file:
CTL_PREINITEND	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	} CTL_PREINITEND;$/;"	m	class:input2	file:
IniParser	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	IniParser() {}$/;"	f	class:IniParser
IniParser	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^class IniParser {$/;"	c	file:
InitStar	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^void InitStar( int i ) {$/;"	f
MAXSTAR	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	269;"	d	file:
MoveStar	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^void MoveStar( int i, double dt ) {$/;"	f
STAR	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^struct STAR {$/;"	s	file:
_TUTORIAL_	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	4;"	d	file:
_data	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	std::map<str_t, key_val_ptr > _data;$/;"	m	class:IniParser	file:
_h	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	float _h;$/;"	m	class:alphafilter	file:
_x	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	float _x, _y;$/;"	m	class:alphafilter	file:
_y	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	float _x, _y;$/;"	m	class:alphafilter	file:
alphafilter	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	alphafilter(CTL_DEFPARAM) : CTL_INITBASE(ege::egeControlBase) {$/;"	f	class:alphafilter
alphafilter	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^class alphafilter : public ege::egeControlBase$/;"	c	file:
clear	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	void clear() {$/;"	f	class:IniParser
color	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	int color;$/;"	m	struct:STAR	file:
draw	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	void draw() const {$/;"	f	class:alphafilter
g_max	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^int g_max;$/;"	v
input	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	input(CTL_DEFPARAM) : CTL_INITBASE(egeControlBase) {$/;"	f	class:input
input	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^class input : public egeControlBase$/;"	c	file:
input2	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	input2(CTL_DEFPARAM) : CTL_INITBASE(input) {$/;"	f	class:input2
input2	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^class input2 : public input$/;"	c	file:
key_val_ptr	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	typedef std::map<str_t, str_t> * key_val_ptr;$/;"	t	class:IniParser	file:
m_key	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	int m_key;$/;"	m	class:input	file:
main	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^int main( int argc, char* argv[] ) {$/;"	f
main	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^int main() {$/;"	f
main	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^int main()$/;"	f
onDraw	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	void onDraw(PIMAGE pimg) const {$/;"	f	class:input
onDraw	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	void onDraw(PIMAGE pimg) const {$/;"	f	class:input2
onDraw	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	void onDraw(ege::PIMAGE pimg) const {$/;"	f	class:alphafilter
onKeyDown	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	int  onKeyDown(int key, int flag) {$/;"	f	class:input
onKeyUp	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	int  onKeyUp(int key, int flag) {$/;"	f	class:input
onMouse	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	int  onMouse(int x, int y, int flag) {$/;"	f	class:alphafilter
onUpdate	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	int  onUpdate() {$/;"	f	class:alphafilter
preinit	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^int preinit( int argc, char* argv[] ) {$/;"	f
sc_heigh	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^int sc_width, sc_heigh; \/\/ ��¼���ڿ���$/;"	v
sc_width	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^int sc_width, sc_heigh; \/\/ ��¼���ڿ���$/;"	v
star	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^} star[MAXSTAR];$/;"	v	typeref:struct:STAR
step	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	double step;$/;"	m	struct:STAR	file:
w	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	input w;$/;"	m	class:input2	file:
x	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	double x;$/;"	m	struct:STAR	file:
y	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	int y;$/;"	m	struct:STAR	file:
~IniParser	C++\ege-13.04.02-full\src\tutorial\tutorial.cpp	/^	virtual ~IniParser() {}$/;"	f	class:IniParser
COMPILER_VER	C++\ege-13.04.02-full\src\version.h	28;"	d
COMPILER_VER	C++\ege-13.04.02-full\src\version.h	30;"	d
COMPILER_VER	C++\ege-13.04.02-full\src\version.h	32;"	d
COMPILER_VER	C++\ege-13.04.02-full\src\version.h	34;"	d
COMPILER_VER	C++\ege-13.04.02-full\src\version.h	36;"	d
COMPILER_VER	C++\ege-13.04.02-full\src\version.h	38;"	d
COMPILER_VER	C++\ege-13.04.02-full\src\version.h	40;"	d
COMPILER_VER	C++\ege-13.04.02-full\src\version.h	46;"	d
EGE_TITLE	C++\ege-13.04.02-full\src\version.h	51;"	d
GCC_VER	C++\ege-13.04.02-full\src\version.h	45;"	d
SYSBITS	C++\ege-13.04.02-full\src\version.h	21;"	d
SYSBITS	C++\ege-13.04.02-full\src\version.h	23;"	d
TOSTRING	C++\ege-13.04.02-full\src\version.h	44;"	d
TOSTRING_	C++\ege-13.04.02-full\src\version.h	43;"	d
VERSION_H	C++\ege-13.04.02-full\src\version.h	2;"	d
count	C++\password.cpp	/^void count(const string& s) {$/;"	f
initString	C++\password.cpp	/^void initString(string& s) {$/;"	f
main	C++\password.cpp	/^int main() {$/;"	f
main	C++\test.cpp	/^int main() {$/;"	f
ALOHAWORLD_PRIVATE_H	C++\������������ҵ\4_1 - ���� (2)\AlohaWorld_private.h	5;"	d
COMPANY_NAME	C++\������������ҵ\4_1 - ���� (2)\AlohaWorld_private.h	13;"	d
FILE_DESCRIPTION	C++\������������ҵ\4_1 - ���� (2)\AlohaWorld_private.h	15;"	d
FILE_VERSION	C++\������������ҵ\4_1 - ���� (2)\AlohaWorld_private.h	14;"	d
INTERNAL_NAME	C++\������������ҵ\4_1 - ���� (2)\AlohaWorld_private.h	16;"	d
LEGAL_COPYRIGHT	C++\������������ҵ\4_1 - ���� (2)\AlohaWorld_private.h	17;"	d
LEGAL_TRADEMARKS	C++\������������ҵ\4_1 - ���� (2)\AlohaWorld_private.h	18;"	d
ORIGINAL_FILENAME	C++\������������ҵ\4_1 - ���� (2)\AlohaWorld_private.h	19;"	d
PRODUCT_NAME	C++\������������ҵ\4_1 - ���� (2)\AlohaWorld_private.h	20;"	d
PRODUCT_VERSION	C++\������������ҵ\4_1 - ���� (2)\AlohaWorld_private.h	21;"	d
VER_BUILD	C++\������������ҵ\4_1 - ���� (2)\AlohaWorld_private.h	12;"	d
VER_MAJOR	C++\������������ҵ\4_1 - ���� (2)\AlohaWorld_private.h	9;"	d
VER_MINOR	C++\������������ҵ\4_1 - ���� (2)\AlohaWorld_private.h	10;"	d
VER_RELEASE	C++\������������ҵ\4_1 - ���� (2)\AlohaWorld_private.h	11;"	d
VER_STRING	C++\������������ҵ\4_1 - ���� (2)\AlohaWorld_private.h	8;"	d
Draw	C++\������������ҵ\4_1 - ���� (2)\MyCircle.cpp	/^void MyCircle::Draw(){$/;"	f	class:MyCircle
MyCircle	C++\������������ҵ\4_1 - ���� (2)\MyCircle.cpp	/^MyCircle::MyCircle(){$/;"	f	class:MyCircle
MyCircle	C++\������������ҵ\4_1 - ���� (2)\MyCircle.cpp	/^MyCircle::MyCircle(const MyCircle& mycircle){$/;"	f	class:MyCircle
MyCircle	C++\������������ҵ\4_1 - ���� (2)\MyCircle.cpp	/^MyCircle::MyCircle(int x,int y,int r){$/;"	f	class:MyCircle
setCenter	C++\������������ҵ\4_1 - ���� (2)\MyCircle.cpp	/^void MyCircle::setCenter(int x, int y){$/;"	f	class:MyCircle
setColor	C++\������������ҵ\4_1 - ���� (2)\MyCircle.cpp	/^void MyCircle::setColor(int R,int G,int B){$/;"	f	class:MyCircle
setRadius	C++\������������ҵ\4_1 - ���� (2)\MyCircle.cpp	/^void MyCircle::setRadius(int r){$/;"	f	class:MyCircle
B	C++\������������ҵ\4_1 - ���� (2)\MyCircle.h	/^		int R,G,B;$/;"	m	class:MyCircle
G	C++\������������ҵ\4_1 - ���� (2)\MyCircle.h	/^		int R,G,B;$/;"	m	class:MyCircle
MyCircle	C++\������������ҵ\4_1 - ���� (2)\MyCircle.h	/^class MyCircle{$/;"	c
R	C++\������������ҵ\4_1 - ���� (2)\MyCircle.h	/^		int R,G,B;$/;"	m	class:MyCircle
r	C++\������������ҵ\4_1 - ���� (2)\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
x	C++\������������ҵ\4_1 - ���� (2)\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
y	C++\������������ҵ\4_1 - ���� (2)\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
Draw	C++\������������ҵ\4_1 - ���� (2)\MyRectangle.cpp	/^void MyRectangle::Draw() {$/;"	f	class:MyRectangle
MyRectangle	C++\������������ҵ\4_1 - ���� (2)\MyRectangle.cpp	/^MyRectangle::MyRectangle() {$/;"	f	class:MyRectangle
MyRectangle	C++\������������ҵ\4_1 - ���� (2)\MyRectangle.cpp	/^MyRectangle::MyRectangle(int leftX, int leftY, int rightX, int rightY){$/;"	f	class:MyRectangle
setColor	C++\������������ҵ\4_1 - ���� (2)\MyRectangle.cpp	/^void MyRectangle::setColor(int R, int G, int B){$/;"	f	class:MyRectangle
setCoordinations	C++\������������ҵ\4_1 - ���� (2)\MyRectangle.cpp	/^void MyRectangle::setCoordinations(int leftX, int leftY, int rightX, int rightY) {$/;"	f	class:MyRectangle
B	C++\������������ҵ\4_1 - ���� (2)\MyRectangle.h	/^	int R,G,B;$/;"	m	class:MyRectangle
G	C++\������������ҵ\4_1 - ���� (2)\MyRectangle.h	/^	int R,G,B;$/;"	m	class:MyRectangle
MyRectangle	C++\������������ҵ\4_1 - ���� (2)\MyRectangle.h	/^class MyRectangle {$/;"	c
R	C++\������������ҵ\4_1 - ���� (2)\MyRectangle.h	/^	int R,G,B;$/;"	m	class:MyRectangle
leftX	C++\������������ҵ\4_1 - ���� (2)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
leftY	C++\������������ҵ\4_1 - ���� (2)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
rightX	C++\������������ҵ\4_1 - ���� (2)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
rightY	C++\������������ҵ\4_1 - ���� (2)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
Screen	C++\������������ҵ\4_1 - ���� (2)\Screen.cpp	/^Screen::Screen() {$/;"	f	class:Screen
Screen	C++\������������ҵ\4_1 - ���� (2)\Screen.cpp	/^Screen::Screen(int width, int height) {$/;"	f	class:Screen
deleteInstance	C++\������������ҵ\4_1 - ���� (2)\Screen.cpp	/^void Screen::deleteInstance(){$/;"	f	class:Screen
getHeight	C++\������������ҵ\4_1 - ���� (2)\Screen.cpp	/^int Screen::getHeight() const {$/;"	f	class:Screen
getInstance	C++\������������ҵ\4_1 - ���� (2)\Screen.cpp	/^ Screen* Screen::getInstance(int width,int height){$/;"	f	class:Screen
getWidth	C++\������������ҵ\4_1 - ���� (2)\Screen.cpp	/^int Screen::getWidth() const {$/;"	f	class:Screen
height	C++\������������ҵ\4_1 - ���� (2)\Screen.cpp	/^int Screen::height = 480;$/;"	m	class:Screen	file:
setScreen	C++\������������ҵ\4_1 - ���� (2)\Screen.cpp	/^void Screen::setScreen(int width, int height) {$/;"	f	class:Screen
width	C++\������������ҵ\4_1 - ���� (2)\Screen.cpp	/^int Screen::width = 640;$/;"	m	class:Screen	file:
~Screen	C++\������������ҵ\4_1 - ���� (2)\Screen.cpp	/^Screen::~Screen(){$/;"	f	class:Screen
Screen	C++\������������ҵ\4_1 - ���� (2)\Screen.h	/^class Screen {$/;"	c
enter	C++\������������ҵ\4_1 - ���� (2)\Screen.h	/^	string enter;$/;"	m	class:Screen
height	C++\������������ҵ\4_1 - ���� (2)\Screen.h	/^	static int height;$/;"	m	class:Screen
instance	C++\������������ҵ\4_1 - ���� (2)\Screen.h	/^	static Screen* instance;$/;"	m	class:Screen
leave	C++\������������ҵ\4_1 - ���� (2)\Screen.h	/^	string leave;$/;"	m	class:Screen
width	C++\������������ҵ\4_1 - ���� (2)\Screen.h	/^	static int width;$/;"	m	class:Screen
main	C++\������������ҵ\4_1 - ���� (2)\main.cpp	/^int main() {$/;"	f
count	C++\������������ҵ\4_1 - ���� (2)\password.cpp	/^void count(const string& s) {$/;"	f
initString	C++\������������ҵ\4_1 - ���� (2)\password.cpp	/^void initString(string& s) {$/;"	f
main	C++\������������ҵ\4_1 - ���� (2)\password.cpp	/^int main() {$/;"	f
ALOHAWORLD_PRIVATE_H	C++\������������ҵ\4_1 - ���� (3)\AlohaWorld_private.h	5;"	d
COMPANY_NAME	C++\������������ҵ\4_1 - ���� (3)\AlohaWorld_private.h	13;"	d
FILE_DESCRIPTION	C++\������������ҵ\4_1 - ���� (3)\AlohaWorld_private.h	15;"	d
FILE_VERSION	C++\������������ҵ\4_1 - ���� (3)\AlohaWorld_private.h	14;"	d
INTERNAL_NAME	C++\������������ҵ\4_1 - ���� (3)\AlohaWorld_private.h	16;"	d
LEGAL_COPYRIGHT	C++\������������ҵ\4_1 - ���� (3)\AlohaWorld_private.h	17;"	d
LEGAL_TRADEMARKS	C++\������������ҵ\4_1 - ���� (3)\AlohaWorld_private.h	18;"	d
ORIGINAL_FILENAME	C++\������������ҵ\4_1 - ���� (3)\AlohaWorld_private.h	19;"	d
PRODUCT_NAME	C++\������������ҵ\4_1 - ���� (3)\AlohaWorld_private.h	20;"	d
PRODUCT_VERSION	C++\������������ҵ\4_1 - ���� (3)\AlohaWorld_private.h	21;"	d
VER_BUILD	C++\������������ҵ\4_1 - ���� (3)\AlohaWorld_private.h	12;"	d
VER_MAJOR	C++\������������ҵ\4_1 - ���� (3)\AlohaWorld_private.h	9;"	d
VER_MINOR	C++\������������ҵ\4_1 - ���� (3)\AlohaWorld_private.h	10;"	d
VER_RELEASE	C++\������������ҵ\4_1 - ���� (3)\AlohaWorld_private.h	11;"	d
VER_STRING	C++\������������ҵ\4_1 - ���� (3)\AlohaWorld_private.h	8;"	d
Draw	C++\������������ҵ\4_1 - ���� (3)\MyCircle.cpp	/^void MyCircle::Draw(){$/;"	f	class:MyCircle
MyCircle	C++\������������ҵ\4_1 - ���� (3)\MyCircle.cpp	/^MyCircle::MyCircle(){$/;"	f	class:MyCircle
MyCircle	C++\������������ҵ\4_1 - ���� (3)\MyCircle.cpp	/^MyCircle::MyCircle(const MyCircle& mycircle){$/;"	f	class:MyCircle
MyCircle	C++\������������ҵ\4_1 - ���� (3)\MyCircle.cpp	/^MyCircle::MyCircle(int x,int y,int r){$/;"	f	class:MyCircle
setCenter	C++\������������ҵ\4_1 - ���� (3)\MyCircle.cpp	/^void MyCircle::setCenter(int x, int y){$/;"	f	class:MyCircle
setRadius	C++\������������ҵ\4_1 - ���� (3)\MyCircle.cpp	/^void MyCircle::setRadius(int r){$/;"	f	class:MyCircle
MyCircle	C++\������������ҵ\4_1 - ���� (3)\MyCircle.h	/^class MyCircle:public MyShape{$/;"	c
r	C++\������������ҵ\4_1 - ���� (3)\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
x	C++\������������ҵ\4_1 - ���� (3)\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
y	C++\������������ҵ\4_1 - ���� (3)\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
Draw	C++\������������ҵ\4_1 - ���� (3)\MyRectangle.cpp	/^void MyRectangle::Draw() {$/;"	f	class:MyRectangle
MyRectangle	C++\������������ҵ\4_1 - ���� (3)\MyRectangle.cpp	/^MyRectangle::MyRectangle() {$/;"	f	class:MyRectangle
MyRectangle	C++\������������ҵ\4_1 - ���� (3)\MyRectangle.cpp	/^MyRectangle::MyRectangle(int leftX, int leftY, int rightX, int rightY){$/;"	f	class:MyRectangle
setCoordinations	C++\������������ҵ\4_1 - ���� (3)\MyRectangle.cpp	/^void MyRectangle::setCoordinations(int leftX, int leftY, int rightX, int rightY) {$/;"	f	class:MyRectangle
MyRectangle	C++\������������ҵ\4_1 - ���� (3)\MyRectangle.h	/^class MyRectangle :public MyShape {$/;"	c
leftX	C++\������������ҵ\4_1 - ���� (3)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
leftY	C++\������������ҵ\4_1 - ���� (3)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
rightX	C++\������������ҵ\4_1 - ���� (3)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
rightY	C++\������������ҵ\4_1 - ���� (3)\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
MyShape	C++\������������ҵ\4_1 - ���� (3)\MyShape.cpp	/^MyShape::MyShape(){$/;"	f	class:MyShape
getB	C++\������������ҵ\4_1 - ���� (3)\MyShape.cpp	/^int MyShape::getB() const{$/;"	f	class:MyShape
getG	C++\������������ҵ\4_1 - ���� (3)\MyShape.cpp	/^int MyShape::getG() const{$/;"	f	class:MyShape
getR	C++\������������ҵ\4_1 - ���� (3)\MyShape.cpp	/^int MyShape::getR() const{$/;"	f	class:MyShape
setColor	C++\������������ҵ\4_1 - ���� (3)\MyShape.cpp	/^void MyShape::setColor(int R,int G,int B){$/;"	f	class:MyShape
B	C++\������������ҵ\4_1 - ���� (3)\MyShape.h	/^		int R,G,B;$/;"	m	class:MyShape
G	C++\������������ҵ\4_1 - ���� (3)\MyShape.h	/^		int R,G,B;$/;"	m	class:MyShape
MyShape	C++\������������ҵ\4_1 - ���� (3)\MyShape.h	/^class MyShape{$/;"	c
R	C++\������������ҵ\4_1 - ���� (3)\MyShape.h	/^		int R,G,B;$/;"	m	class:MyShape
enter	C++\������������ҵ\4_1 - ���� (3)\MyShape.h	/^		string enter;$/;"	m	class:MyShape
leave	C++\������������ҵ\4_1 - ���� (3)\MyShape.h	/^		string leave;$/;"	m	class:MyShape
Screen	C++\������������ҵ\4_1 - ���� (3)\Screen.cpp	/^Screen::Screen() {$/;"	f	class:Screen
Screen	C++\������������ҵ\4_1 - ���� (3)\Screen.cpp	/^Screen::Screen(int width, int height) {$/;"	f	class:Screen
deleteInstance	C++\������������ҵ\4_1 - ���� (3)\Screen.cpp	/^void Screen::deleteInstance(){$/;"	f	class:Screen
getHeight	C++\������������ҵ\4_1 - ���� (3)\Screen.cpp	/^int Screen::getHeight() const {$/;"	f	class:Screen
getInstance	C++\������������ҵ\4_1 - ���� (3)\Screen.cpp	/^ Screen* Screen::getInstance(int width,int height){$/;"	f	class:Screen
getWidth	C++\������������ҵ\4_1 - ���� (3)\Screen.cpp	/^int Screen::getWidth() const {$/;"	f	class:Screen
height	C++\������������ҵ\4_1 - ���� (3)\Screen.cpp	/^int Screen::height = 480;$/;"	m	class:Screen	file:
setScreen	C++\������������ҵ\4_1 - ���� (3)\Screen.cpp	/^void Screen::setScreen(int width, int height) {$/;"	f	class:Screen
width	C++\������������ҵ\4_1 - ���� (3)\Screen.cpp	/^int Screen::width = 640;$/;"	m	class:Screen	file:
~Screen	C++\������������ҵ\4_1 - ���� (3)\Screen.cpp	/^Screen::~Screen(){$/;"	f	class:Screen
Screen	C++\������������ҵ\4_1 - ���� (3)\Screen.h	/^class Screen {$/;"	c
enter	C++\������������ҵ\4_1 - ���� (3)\Screen.h	/^	string enter;$/;"	m	class:Screen
height	C++\������������ҵ\4_1 - ���� (3)\Screen.h	/^	static int height;$/;"	m	class:Screen
instance	C++\������������ҵ\4_1 - ���� (3)\Screen.h	/^	static Screen* instance;$/;"	m	class:Screen
leave	C++\������������ҵ\4_1 - ���� (3)\Screen.h	/^	string leave;$/;"	m	class:Screen
width	C++\������������ҵ\4_1 - ���� (3)\Screen.h	/^	static int width;$/;"	m	class:Screen
createShape	C++\������������ҵ\4_1 - ���� (3)\main.cpp	/^MyShape* createShape(char shapeType){$/;"	f
main	C++\������������ҵ\4_1 - ���� (3)\main.cpp	/^int main() {$/;"	f
count	C++\������������ҵ\4_1 - ���� (3)\password.cpp	/^void count(const string& s) {$/;"	f
initString	C++\������������ҵ\4_1 - ���� (3)\password.cpp	/^void initString(string& s) {$/;"	f
main	C++\������������ҵ\4_1 - ���� (3)\password.cpp	/^int main() {$/;"	f
ALOHAWORLD_PRIVATE_H	C++\������������ҵ\4_1 - ����\AlohaWorld_private.h	5;"	d
COMPANY_NAME	C++\������������ҵ\4_1 - ����\AlohaWorld_private.h	13;"	d
FILE_DESCRIPTION	C++\������������ҵ\4_1 - ����\AlohaWorld_private.h	15;"	d
FILE_VERSION	C++\������������ҵ\4_1 - ����\AlohaWorld_private.h	14;"	d
INTERNAL_NAME	C++\������������ҵ\4_1 - ����\AlohaWorld_private.h	16;"	d
LEGAL_COPYRIGHT	C++\������������ҵ\4_1 - ����\AlohaWorld_private.h	17;"	d
LEGAL_TRADEMARKS	C++\������������ҵ\4_1 - ����\AlohaWorld_private.h	18;"	d
ORIGINAL_FILENAME	C++\������������ҵ\4_1 - ����\AlohaWorld_private.h	19;"	d
PRODUCT_NAME	C++\������������ҵ\4_1 - ����\AlohaWorld_private.h	20;"	d
PRODUCT_VERSION	C++\������������ҵ\4_1 - ����\AlohaWorld_private.h	21;"	d
VER_BUILD	C++\������������ҵ\4_1 - ����\AlohaWorld_private.h	12;"	d
VER_MAJOR	C++\������������ҵ\4_1 - ����\AlohaWorld_private.h	9;"	d
VER_MINOR	C++\������������ҵ\4_1 - ����\AlohaWorld_private.h	10;"	d
VER_RELEASE	C++\������������ҵ\4_1 - ����\AlohaWorld_private.h	11;"	d
VER_STRING	C++\������������ҵ\4_1 - ����\AlohaWorld_private.h	8;"	d
Draw	C++\������������ҵ\4_1 - ����\MyRectangle.cpp	/^void MyRectangle::Draw() {$/;"	f	class:MyRectangle
MyRectangle	C++\������������ҵ\4_1 - ����\MyRectangle.cpp	/^MyRectangle::MyRectangle() {$/;"	f	class:MyRectangle
MyRectangle	C++\������������ҵ\4_1 - ����\MyRectangle.cpp	/^MyRectangle::MyRectangle(int leftX, int leftY, int rightX, int rightY, Screen* pScreen){$/;"	f	class:MyRectangle
setCoordinations	C++\������������ҵ\4_1 - ����\MyRectangle.cpp	/^void MyRectangle::setCoordinations(int leftX, int leftY, int rightX, int rightY) {$/;"	f	class:MyRectangle
setScreen	C++\������������ҵ\4_1 - ����\MyRectangle.cpp	/^void MyRectangle::setScreen(const Screen& screen) {$/;"	f	class:MyRectangle
MyRectangle	C++\������������ҵ\4_1 - ����\MyRectangle.h	/^class MyRectangle {$/;"	c
leftX	C++\������������ҵ\4_1 - ����\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
leftY	C++\������������ҵ\4_1 - ����\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
pScreen	C++\������������ҵ\4_1 - ����\MyRectangle.h	/^	Screen* pScreen;$/;"	m	class:MyRectangle
rightX	C++\������������ҵ\4_1 - ����\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
rightY	C++\������������ҵ\4_1 - ����\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
Screen	C++\������������ҵ\4_1 - ����\Screen.cpp	/^Screen::Screen() {$/;"	f	class:Screen
Screen	C++\������������ҵ\4_1 - ����\Screen.cpp	/^Screen::Screen(int width, int height) {$/;"	f	class:Screen
getHeight	C++\������������ҵ\4_1 - ����\Screen.cpp	/^int Screen::getHeight() const {$/;"	f	class:Screen
getWidth	C++\������������ҵ\4_1 - ����\Screen.cpp	/^int Screen::getWidth() const {$/;"	f	class:Screen
setScreen	C++\������������ҵ\4_1 - ����\Screen.cpp	/^void Screen::setScreen(int width, int height) {$/;"	f	class:Screen
~Screen	C++\������������ҵ\4_1 - ����\Screen.cpp	/^Screen::~Screen(){$/;"	f	class:Screen
Screen	C++\������������ҵ\4_1 - ����\Screen.h	/^class Screen {$/;"	c
height	C++\������������ҵ\4_1 - ����\Screen.h	/^	 int height;$/;"	m	class:Screen
width	C++\������������ҵ\4_1 - ����\Screen.h	/^	 int width;$/;"	m	class:Screen
main	C++\������������ҵ\4_1 - ����\main.cpp	/^int main() {$/;"	f
count	C++\������������ҵ\4_1 - ����\password.cpp	/^void count(const string& s) {$/;"	f
initString	C++\������������ҵ\4_1 - ����\password.cpp	/^void initString(string& s) {$/;"	f
main	C++\������������ҵ\4_1 - ����\password.cpp	/^int main() {$/;"	f
ALOHAWORLD_PRIVATE_H	C++\������������ҵ\4_1\AlohaWorld_private.h	5;"	d
COMPANY_NAME	C++\������������ҵ\4_1\AlohaWorld_private.h	13;"	d
FILE_DESCRIPTION	C++\������������ҵ\4_1\AlohaWorld_private.h	15;"	d
FILE_VERSION	C++\������������ҵ\4_1\AlohaWorld_private.h	14;"	d
INTERNAL_NAME	C++\������������ҵ\4_1\AlohaWorld_private.h	16;"	d
LEGAL_COPYRIGHT	C++\������������ҵ\4_1\AlohaWorld_private.h	17;"	d
LEGAL_TRADEMARKS	C++\������������ҵ\4_1\AlohaWorld_private.h	18;"	d
ORIGINAL_FILENAME	C++\������������ҵ\4_1\AlohaWorld_private.h	19;"	d
PRODUCT_NAME	C++\������������ҵ\4_1\AlohaWorld_private.h	20;"	d
PRODUCT_VERSION	C++\������������ҵ\4_1\AlohaWorld_private.h	21;"	d
VER_BUILD	C++\������������ҵ\4_1\AlohaWorld_private.h	12;"	d
VER_MAJOR	C++\������������ҵ\4_1\AlohaWorld_private.h	9;"	d
VER_MINOR	C++\������������ҵ\4_1\AlohaWorld_private.h	10;"	d
VER_RELEASE	C++\������������ҵ\4_1\AlohaWorld_private.h	11;"	d
VER_STRING	C++\������������ҵ\4_1\AlohaWorld_private.h	8;"	d
Draw	C++\������������ҵ\4_1\MyCircle.cpp	/^void MyCircle::Draw(){$/;"	f	class:MyCircle
MyCircle	C++\������������ҵ\4_1\MyCircle.cpp	/^MyCircle::MyCircle(){$/;"	f	class:MyCircle
MyCircle	C++\������������ҵ\4_1\MyCircle.cpp	/^MyCircle::MyCircle(const MyCircle& mycircle){$/;"	f	class:MyCircle
MyCircle	C++\������������ҵ\4_1\MyCircle.cpp	/^MyCircle::MyCircle(int x,int y,int r){$/;"	f	class:MyCircle
setCenter	C++\������������ҵ\4_1\MyCircle.cpp	/^void MyCircle::setCenter(int x, int y){$/;"	f	class:MyCircle
setRadius	C++\������������ҵ\4_1\MyCircle.cpp	/^void MyCircle::setRadius(int r){$/;"	f	class:MyCircle
MyCircle	C++\������������ҵ\4_1\MyCircle.h	/^class MyCircle:public MyShape{$/;"	c
r	C++\������������ҵ\4_1\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
x	C++\������������ҵ\4_1\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
y	C++\������������ҵ\4_1\MyCircle.h	/^		int x,y,r;$/;"	m	class:MyCircle
Draw	C++\������������ҵ\4_1\MyRectangle.cpp	/^void MyRectangle::Draw() {$/;"	f	class:MyRectangle
MyRectangle	C++\������������ҵ\4_1\MyRectangle.cpp	/^MyRectangle::MyRectangle() {$/;"	f	class:MyRectangle
MyRectangle	C++\������������ҵ\4_1\MyRectangle.cpp	/^MyRectangle::MyRectangle(int leftX, int leftY, int rightX, int rightY){$/;"	f	class:MyRectangle
instance	C++\������������ҵ\4_1\MyRectangle.cpp	/^static Screen* instance;$/;"	v	file:
setCoordinations	C++\������������ҵ\4_1\MyRectangle.cpp	/^void MyRectangle::setCoordinations(int leftX, int leftY, int rightX, int rightY) {$/;"	f	class:MyRectangle
MyRectangle	C++\������������ҵ\4_1\MyRectangle.h	/^class MyRectangle :public MyShape {$/;"	c
leftX	C++\������������ҵ\4_1\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
leftY	C++\������������ҵ\4_1\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
rightX	C++\������������ҵ\4_1\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
rightY	C++\������������ҵ\4_1\MyRectangle.h	/^	int leftX, leftY, rightX, rightY;$/;"	m	class:MyRectangle
MyShape	C++\������������ҵ\4_1\MyShape.cpp	/^MyShape::MyShape(){$/;"	f	class:MyShape
getB	C++\������������ҵ\4_1\MyShape.cpp	/^int MyShape::getB() const{$/;"	f	class:MyShape
getG	C++\������������ҵ\4_1\MyShape.cpp	/^int MyShape::getG() const{$/;"	f	class:MyShape
getR	C++\������������ҵ\4_1\MyShape.cpp	/^int MyShape::getR() const{$/;"	f	class:MyShape
setColor	C++\������������ҵ\4_1\MyShape.cpp	/^void MyShape::setColor(int R,int G,int B){$/;"	f	class:MyShape
B	C++\������������ҵ\4_1\MyShape.h	/^		int R,G,B;$/;"	m	class:MyShape
G	C++\������������ҵ\4_1\MyShape.h	/^		int R,G,B;$/;"	m	class:MyShape
MyShape	C++\������������ҵ\4_1\MyShape.h	/^class MyShape{$/;"	c
R	C++\������������ҵ\4_1\MyShape.h	/^		int R,G,B;$/;"	m	class:MyShape
enter	C++\������������ҵ\4_1\MyShape.h	/^		string enter;$/;"	m	class:MyShape
leave	C++\������������ҵ\4_1\MyShape.h	/^		string leave;$/;"	m	class:MyShape
Screen	C++\������������ҵ\4_1\Screen.cpp	/^Screen::Screen() {$/;"	f	class:Screen
Screen	C++\������������ҵ\4_1\Screen.cpp	/^Screen::Screen(const Screen& screen){$/;"	f	class:Screen
Screen	C++\������������ҵ\4_1\Screen.cpp	/^Screen::Screen(int width, int height) {$/;"	f	class:Screen
deleteInstance	C++\������������ҵ\4_1\Screen.cpp	/^void Screen::deleteInstance(){$/;"	f	class:Screen
getHeight	C++\������������ҵ\4_1\Screen.cpp	/^int Screen::getHeight() const {$/;"	f	class:Screen
getInstance	C++\������������ҵ\4_1\Screen.cpp	/^ Screen* Screen::getInstance(int width,int height){$/;"	f	class:Screen
getWidth	C++\������������ҵ\4_1\Screen.cpp	/^int Screen::getWidth() const {$/;"	f	class:Screen
height	C++\������������ҵ\4_1\Screen.cpp	/^int Screen::height = 480;$/;"	m	class:Screen	file:
instance	C++\������������ҵ\4_1\Screen.cpp	/^static Screen* instance;$/;"	v	file:
setScreen	C++\������������ҵ\4_1\Screen.cpp	/^void Screen::setScreen(int width, int height) {$/;"	f	class:Screen
width	C++\������������ҵ\4_1\Screen.cpp	/^int Screen::width = 640;$/;"	m	class:Screen	file:
~Screen	C++\������������ҵ\4_1\Screen.cpp	/^Screen::~Screen(){$/;"	f	class:Screen
Screen	C++\������������ҵ\4_1\Screen.h	/^class Screen {$/;"	c
enter	C++\������������ҵ\4_1\Screen.h	/^	string enter;$/;"	m	class:Screen
height	C++\������������ҵ\4_1\Screen.h	/^	static int height;$/;"	m	class:Screen
instance	C++\������������ҵ\4_1\Screen.h	/^	static Screen* instance;$/;"	m	class:Screen
leave	C++\������������ҵ\4_1\Screen.h	/^	string leave;$/;"	m	class:Screen
width	C++\������������ҵ\4_1\Screen.h	/^	static int width;$/;"	m	class:Screen
createShape	C++\������������ҵ\4_1\main.cpp	/^MyShape* createShape(char shapeType){$/;"	f
main	C++\������������ҵ\4_1\main.cpp	/^int main() {$/;"	f
count	C++\������������ҵ\4_1\password.cpp	/^void count(const string& s) {$/;"	f
initString	C++\������������ҵ\4_1\password.cpp	/^void initString(string& s) {$/;"	f
main	C++\������������ҵ\4_1\password.cpp	/^int main() {$/;"	f
SIZE	C_basic\test.c	15;"	d	file:
data	C_basic\test.c	/^struct data$/;"	s	file:
day	C_basic\test.c	/^	int day;$/;"	m	struct:data	file:
hour	C_basic\test.c	/^	int hour;$/;"	m	struct:data	file:
main	C_basic\test.c	/^int main ()$/;"	f
year	C_basic\test.c	/^	int year;$/;"	m	struct:data	file:
main	C_basic\week_2\2_1.c	/^int main() {$/;"	f
main	C_basic\week_2\2_2.c	/^int main() {$/;"	f
main	C_basic\week_2\test.c	/^int main()$/;"	f
print	C_basic\week_2\test.c	/^void print(int x) \/\/�������Ҷ����������ִ��������ͬ�����Էֱ�дһ������Ϊ��ʵ����Ӧ����$/;"	f
print_final	C_basic\week_2\test.c	/^void print_final(int x)$/;"	f
print_part	C_basic\week_2\test.c	/^void print_part(int x)$/;"	f
isprime	C_basic\week_4\4_1.c	/^int isprime(int x) {$/;"	f
main	C_basic\week_4\4_1.c	/^int main() {$/;"	f
main	C_basic\week_4\4_2.c	/^int main() {$/;"	f
print	C_basic\week_4\4_2.c	/^void print(int x) { \/\/由于最右端与其他部分处理情况不同，可以分别写一个函数为其实现相应功能$/;"	f
print_final	C_basic\week_4\4_2.c	/^void print_final(int x) {$/;"	f
print_part	C_basic\week_4\4_2.c	/^void print_part(int x) {$/;"	f
main	C_basic\week_4\test.c	/^int main()$/;"	f
print	C_basic\week_4\test.c	/^void print(int x) \/\/由于最右端与其他部分处理情况不同，可以分别写一个函数为其实现相应功能$/;"	f
print_final	C_basic\week_4\test.c	/^void print_final(int x)$/;"	f
print_part	C_basic\week_4\test.c	/^void print_part(int x)$/;"	f
isprime	C_basic\week_5\5_1.c	/^int isprime(int x) {$/;"	f
main	C_basic\week_5\5_1.c	/^int main() {$/;"	f
main	C_basic\week_5\5_2.c	/^int main() {$/;"	f
sum	C_basic\week_5\5_2.c	/^int sum = 0;$/;"	v
main	C_basic\week_5\5_3.c	/^int main() {$/;"	f
revert	C_basic\week_5\5_3.c	/^int revert(int x) {$/;"	f
MAXNUM	C_basic\week_5\5_4.c	14;"	d	file:
main	C_basic\week_5\5_4.c	/^int main() {$/;"	f
MAX_POWER	C_basic\week_6\6_1.c	33;"	d	file:
main	C_basic\week_6\6_1.c	/^int main() {$/;"	f
FALSE	C_basic\week_7\7_1.c	29;"	d	file:
TRUE	C_basic\week_7\7_1.c	30;"	d	file:
main	C_basic\week_7\7_1.c	/^int main() {$/;"	f
Integer_parseInt	C_basic\week_7\7_2.c	/^int Integer_parseInt(char x)$/;"	f
main	C_basic\week_7\7_2.c	/^int main(void)$/;"	f
gcd	C_practice\GCD.c	/^int gcd(int x, int y) {$/;"	f
main	C_practice\GCD.c	/^int main() {$/;"	f
main	C_pre-intermediate\week_1\1.c	/^int main() {$/;"	f
Delete	C_pre-intermediate\week_2\2_1.c	/^void Delete(char *s1, char *s2) {$/;"	f
LENTH	C_pre-intermediate\week_2\2_1.c	31;"	d	file:
main	C_pre-intermediate\week_2\2_1.c	/^int main() {$/;"	f
main	C_pre-intermediate\week_2\2_2.c	/^int main() {$/;"	f
NUMBER	C_pre-intermediate\week_3\3_1.c	45;"	d	file:
Student	C_pre-intermediate\week_3\3_1.c	/^} Student;$/;"	t	typeref:struct:__anon36	file:
main	C_pre-intermediate\week_3\3_1.c	/^int main() {$/;"	f
name	C_pre-intermediate\week_3\3_1.c	/^	char name[20];$/;"	m	struct:__anon36	file:
score	C_pre-intermediate\week_3\3_1.c	/^	int score[3];$/;"	m	struct:__anon36	file:
student_average	C_pre-intermediate\week_3\3_1.c	/^double student_average(const Student *pStudent)$/;"	f
student_get_score	C_pre-intermediate\week_3\3_1.c	/^int student_get_score(const Student *pStudent, int index) {$/;"	f
student_input	C_pre-intermediate\week_3\3_1.c	/^Student* student_input(Student *pStudent) {$/;"	f
student_print	C_pre-intermediate\week_3\3_1.c	/^void student_print(const Student *pStudent)$/;"	f
ACL_ASSERT	C_pre-intermediate\week_4\test\acllib.c	50;"	d	file:
ACL_ASSERT	C_pre-intermediate\week_4\test\acllib.c	52;"	d	file:
ACL_ASSERT_BEGIN_PAINT	C_pre-intermediate\week_4\test\acllib.c	57;"	d	file:
ACL_ASSERT_HWND	C_pre-intermediate\week_4\test\acllib.c	55;"	d	file:
CINTERFACE	C_pre-intermediate\week_4\test\acllib.c	29;"	d	file:
UNICODE	C_pre-intermediate\week_4\test\acllib.c	35;"	d	file:
WinMain	C_pre-intermediate\week_4\test\acllib.c	/^int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, int iCmdShow)$/;"	f
WndProc	C_pre-intermediate\week_4\test\acllib.c	/^LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f
_CRT_NON_CONFORMING_SWPRINTFS	C_pre-intermediate\week_4\test\acllib.c	27;"	d	file:
_CRT_SECURE_NO_WARNINGS	C_pre-intermediate\week_4\test\acllib.c	26;"	d	file:
_UNICODE	C_pre-intermediate\week_4\test\acllib.c	32;"	d	file:
acl_error	C_pre-intermediate\week_4\test\acllib.c	/^void acl_error(char *errStr)$/;"	f
arc	C_pre-intermediate\week_4\test\acllib.c	/^void arc(int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4)$/;"	f
beginPaint	C_pre-intermediate\week_4\test\acllib.c	/^void beginPaint()$/;"	f
cancelTimer	C_pre-intermediate\week_4\test\acllib.c	/^void cancelTimer(int id)$/;"	f
chrod	C_pre-intermediate\week_4\test\acllib.c	/^void chrod(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4)$/;"	f
clearDevice	C_pre-intermediate\week_4\test\acllib.c	/^void clearDevice(void)$/;"	f
ellipse	C_pre-intermediate\week_4\test\acllib.c	/^void ellipse(int left,int top,int right, int bottom)$/;"	f
endPaint	C_pre-intermediate\week_4\test\acllib.c	/^void endPaint()$/;"	f
freeImage	C_pre-intermediate\week_4\test\acllib.c	/^void freeImage(ACL_Image *mapbuf)$/;"	f
g_brush	C_pre-intermediate\week_4\test\acllib.c	/^HBRUSH g_brush = NULL;$/;"	v
g_brushColor	C_pre-intermediate\week_4\test\acllib.c	/^ACL_Color g_brushColor = BLACK;$/;"	v
g_brushStyle	C_pre-intermediate\week_4\test\acllib.c	/^int g_brushStyle = BRUSH_STYLE_SOLID;$/;"	v
g_caretHeight	C_pre-intermediate\week_4\test\acllib.c	/^int g_caretHeight = 12;$/;"	v
g_caretWidth	C_pre-intermediate\week_4\test\acllib.c	/^int g_caretWidth = 6;$/;"	v
g_caretX	C_pre-intermediate\week_4\test\acllib.c	/^int g_caretX = 0;$/;"	v
g_caretY	C_pre-intermediate\week_4\test\acllib.c	/^int g_caretY = 0;$/;"	v
g_char	C_pre-intermediate\week_4\test\acllib.c	/^CharEventCallback g_char = NULL;$/;"	v
g_font	C_pre-intermediate\week_4\test\acllib.c	/^HFONT g_font = NULL;$/;"	v
g_fontName	C_pre-intermediate\week_4\test\acllib.c	/^char g_fontName[256] = "����";$/;"	v
g_hInstance	C_pre-intermediate\week_4\test\acllib.c	/^HINSTANCE g_hInstance;$/;"	v
g_hWnd	C_pre-intermediate\week_4\test\acllib.c	/^HWND g_hWnd = NULL;$/;"	v
g_hbitmap	C_pre-intermediate\week_4\test\acllib.c	/^HBITMAP g_hbitmap = NULL;$/;"	v
g_hmemdc	C_pre-intermediate\week_4\test\acllib.c	/^HDC g_hmemdc = NULL;$/;"	v
g_keyboard	C_pre-intermediate\week_4\test\acllib.c	/^KeyboardEventCallback g_keyboard = NULL;$/;"	v
g_libName	C_pre-intermediate\week_4\test\acllib.c	/^const char g_libName[] = "ACLLIB";$/;"	v
g_mouse	C_pre-intermediate\week_4\test\acllib.c	/^MouseEventCallback g_mouse = NULL;$/;"	v
g_pen	C_pre-intermediate\week_4\test\acllib.c	/^HPEN g_pen = NULL;$/;"	v
g_penColor	C_pre-intermediate\week_4\test\acllib.c	/^ACL_Color g_penColor = BLACK;$/;"	v
g_penStyle	C_pre-intermediate\week_4\test\acllib.c	/^int g_penStyle = PEN_STYLE_SOLID;$/;"	v
g_penWidth	C_pre-intermediate\week_4\test\acllib.c	/^int g_penWidth = 1;$/;"	v
g_soundID	C_pre-intermediate\week_4\test\acllib.c	/^int g_soundID = 0;$/;"	v
g_textBkColor	C_pre-intermediate\week_4\test\acllib.c	/^ACL_Color g_textBkColor = WHITE;$/;"	v
g_textColor	C_pre-intermediate\week_4\test\acllib.c	/^ACL_Color g_textColor = BLACK;$/;"	v
g_textSize	C_pre-intermediate\week_4\test\acllib.c	/^int g_textSize = 12;$/;"	v
g_timer	C_pre-intermediate\week_4\test\acllib.c	/^TimerEventCallback g_timer = NULL;$/;"	v
g_wndClassName	C_pre-intermediate\week_4\test\acllib.c	/^const char g_wndClassName[] = "ACL_WND_CLASS";$/;"	v
g_wndHeight	C_pre-intermediate\week_4\test\acllib.c	/^int g_wndHeight;$/;"	v
g_wndWidth	C_pre-intermediate\week_4\test\acllib.c	/^int g_wndWidth;$/;"	v
getHeight	C_pre-intermediate\week_4\test\acllib.c	/^int getHeight(void)$/;"	f
getPixel	C_pre-intermediate\week_4\test\acllib.c	/^ACL_Color getPixel(int x, int y)$/;"	f
getWidth	C_pre-intermediate\week_4\test\acllib.c	/^int getWidth(void)$/;"	f
getX	C_pre-intermediate\week_4\test\acllib.c	/^int getX(void)$/;"	f
getY	C_pre-intermediate\week_4\test\acllib.c	/^int getY(void)$/;"	f
hideCaret	C_pre-intermediate\week_4\test\acllib.c	/^void hideCaret()$/;"	f
initConsole	C_pre-intermediate\week_4\test\acllib.c	/^void initConsole(void)$/;"	f
initWindow	C_pre-intermediate\week_4\test\acllib.c	/^void initWindow(const char *wndName, int x, int y, int width, int height)$/;"	f
line	C_pre-intermediate\week_4\test\acllib.c	/^void line(int x0, int y0, int x1, int y1)$/;"	f
lineRel	C_pre-intermediate\week_4\test\acllib.c	/^void lineRel(int dx, int dy)$/;"	f
lineTo	C_pre-intermediate\week_4\test\acllib.c	/^void lineTo(int x, int y)$/;"	f
loadImage	C_pre-intermediate\week_4\test\acllib.c	/^void loadImage(const char *image, ACL_Image *mapbuf)$/;"	f
loadSound	C_pre-intermediate\week_4\test\acllib.c	/^void loadSound(const char *fileName,ACL_Sound *pSound)$/;"	f
moveRel	C_pre-intermediate\week_4\test\acllib.c	/^void moveRel(int dx, int dy)$/;"	f
moveTo	C_pre-intermediate\week_4\test\acllib.c	/^void moveTo(int x, int y)$/;"	f
msgBox	C_pre-intermediate\week_4\test\acllib.c	/^void msgBox(const char title[],const char text[],int flag)$/;"	f
paintText	C_pre-intermediate\week_4\test\acllib.c	/^void paintText(int x, int y, const char *textstring)$/;"	f
pie	C_pre-intermediate\week_4\test\acllib.c	/^void pie(int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2)$/;"	f
playSound	C_pre-intermediate\week_4\test\acllib.c	/^void playSound(int sid,int repeat)$/;"	f
polyBezier	C_pre-intermediate\week_4\test\acllib.c	/^void polyBezier(const POINT *lppt,int cPoints)$/;"	f
polyLine	C_pre-intermediate\week_4\test\acllib.c	/^void polyLine(const POINT *lppt, int cPoints)$/;"	f
polygon	C_pre-intermediate\week_4\test\acllib.c	/^void polygon(const POINT *apt,int cpt)$/;"	f
polyline	C_pre-intermediate\week_4\test\acllib.c	/^void polyline(POINT *apt,int cpt)$/;"	f
putImage	C_pre-intermediate\week_4\test\acllib.c	/^void putImage(ACL_Image *pImage, int x, int y)$/;"	f
putImageScale	C_pre-intermediate\week_4\test\acllib.c	/^void putImageScale(ACL_Image *pImage,int x,int y,int width,int height)$/;"	f
putImageTransparent	C_pre-intermediate\week_4\test\acllib.c	/^void putImageTransparent(ACL_Image *pImage,int x,int y,int width,int height, ACL_Color bkColor)$/;"	f
putPixel	C_pre-intermediate\week_4\test\acllib.c	/^void putPixel(int x, int y, ACL_Color color)$/;"	f
rectangle	C_pre-intermediate\week_4\test\acllib.c	/^void rectangle(int left,int top,int right,int bottom)$/;"	f
registerCharEvent	C_pre-intermediate\week_4\test\acllib.c	/^void registerCharEvent(CharEventCallback callback)$/;"	f
registerKeyboardEvent	C_pre-intermediate\week_4\test\acllib.c	/^void registerKeyboardEvent(KeyboardEventCallback callback)$/;"	f
registerMouseEvent	C_pre-intermediate\week_4\test\acllib.c	/^void registerMouseEvent(MouseEventCallback callback)$/;"	f
registerTimerEvent	C_pre-intermediate\week_4\test\acllib.c	/^void registerTimerEvent(TimerEventCallback callback)$/;"	f
roundrect	C_pre-intermediate\week_4\test\acllib.c	/^void roundrect(int left,int top,int right,int bottom,int width,int height)$/;"	f
setBrushColor	C_pre-intermediate\week_4\test\acllib.c	/^void setBrushColor(ACL_Color newColor)$/;"	f
setBrushStyle	C_pre-intermediate\week_4\test\acllib.c	/^void setBrushStyle(ACL_Brush_Style newStyle)$/;"	f
setCaretPos	C_pre-intermediate\week_4\test\acllib.c	/^void setCaretPos(int x,int y)$/;"	f
setCaretSize	C_pre-intermediate\week_4\test\acllib.c	/^void setCaretSize(int w,int h)$/;"	f
setPenColor	C_pre-intermediate\week_4\test\acllib.c	/^void setPenColor(ACL_Color newColor)$/;"	f
setPenStyle	C_pre-intermediate\week_4\test\acllib.c	/^void setPenStyle(ACL_Pen_Style newStyle)$/;"	f
setPenWidth	C_pre-intermediate\week_4\test\acllib.c	/^void setPenWidth(int width)$/;"	f
setTextBkColor	C_pre-intermediate\week_4\test\acllib.c	/^void setTextBkColor(ACL_Color color)$/;"	f
setTextColor	C_pre-intermediate\week_4\test\acllib.c	/^void setTextColor(ACL_Color color)$/;"	f
setTextFont	C_pre-intermediate\week_4\test\acllib.c	/^void setTextFont(const char *pfn)$/;"	f
setTextSize	C_pre-intermediate\week_4\test\acllib.c	/^void setTextSize(int size)$/;"	f
showCaret	C_pre-intermediate\week_4\test\acllib.c	/^void showCaret()$/;"	f
startTimer	C_pre-intermediate\week_4\test\acllib.c	/^void startTimer(int id,int timeinterval)$/;"	f
stopSound	C_pre-intermediate\week_4\test\acllib.c	/^void stopSound(int sid)$/;"	f
updateBrush	C_pre-intermediate\week_4\test\acllib.c	/^void updateBrush()$/;"	f
updateFont	C_pre-intermediate\week_4\test\acllib.c	/^void updateFont()$/;"	f
updatePen	C_pre-intermediate\week_4\test\acllib.c	/^void updatePen()$/;"	f
ACL_Brush_Style	C_pre-intermediate\week_4\test\acllib.h	/^} ACL_Brush_Style;$/;"	t	typeref:enum:__anon38
ACL_Color	C_pre-intermediate\week_4\test\acllib.h	/^typedef COLORREF ACL_Color;$/;"	t
ACL_Image	C_pre-intermediate\week_4\test\acllib.h	/^} ACL_Image;$/;"	t	typeref:struct:__anon42
ACL_Keyboard_Event	C_pre-intermediate\week_4\test\acllib.h	/^} ACL_Keyboard_Event;$/;"	t	typeref:enum:__anon41
ACL_Mouse_Button	C_pre-intermediate\week_4\test\acllib.h	/^} ACL_Mouse_Button;$/;"	t	typeref:enum:__anon39
ACL_Mouse_Event	C_pre-intermediate\week_4\test\acllib.h	/^} ACL_Mouse_Event;$/;"	t	typeref:enum:__anon40
ACL_Pen_Style	C_pre-intermediate\week_4\test\acllib.h	/^} ACL_Pen_Style;$/;"	t	typeref:enum:__anon37
ACL_Sound	C_pre-intermediate\week_4\test\acllib.h	/^typedef int ACL_Sound;$/;"	t
BLACK	C_pre-intermediate\week_4\test\acllib.h	52;"	d
BLUE	C_pre-intermediate\week_4\test\acllib.h	55;"	d
BRUSH_STYLE_BDIAGONAL	C_pre-intermediate\week_4\test\acllib.h	/^	BRUSH_STYLE_BDIAGONAL,		\/* \/\/\/\/\/ *\/$/;"	e	enum:__anon38
BRUSH_STYLE_CROSS	C_pre-intermediate\week_4\test\acllib.h	/^	BRUSH_STYLE_CROSS,			\/* +++++ *\/$/;"	e	enum:__anon38
BRUSH_STYLE_DIAGCROSS	C_pre-intermediate\week_4\test\acllib.h	/^	BRUSH_STYLE_DIAGCROSS,		\/* xxxxx *\/$/;"	e	enum:__anon38
BRUSH_STYLE_FDIAGONAL	C_pre-intermediate\week_4\test\acllib.h	/^	BRUSH_STYLE_FDIAGONAL,		\/* \\\\\\\\\\ *\/$/;"	e	enum:__anon38
BRUSH_STYLE_HORIZONTAL	C_pre-intermediate\week_4\test\acllib.h	/^	BRUSH_STYLE_HORIZONTAL,		\/* ----- *\/$/;"	e	enum:__anon38
BRUSH_STYLE_NULL	C_pre-intermediate\week_4\test\acllib.h	/^	BRUSH_STYLE_NULL$/;"	e	enum:__anon38
BRUSH_STYLE_SOLID	C_pre-intermediate\week_4\test\acllib.h	/^	BRUSH_STYLE_SOLID = -1,$/;"	e	enum:__anon38
BRUSH_STYLE_VERTICAL	C_pre-intermediate\week_4\test\acllib.h	/^	BRUSH_STYLE_VERTICAL,		\/* ||||| *\/$/;"	e	enum:__anon38
BUTTON_DOUBLECLICK	C_pre-intermediate\week_4\test\acllib.h	/^	BUTTON_DOUBLECLICK,$/;"	e	enum:__anon40
BUTTON_DOWN	C_pre-intermediate\week_4\test\acllib.h	/^	BUTTON_DOWN,$/;"	e	enum:__anon40
BUTTON_UP	C_pre-intermediate\week_4\test\acllib.h	/^	BUTTON_UP,$/;"	e	enum:__anon40
CYAN	C_pre-intermediate\week_4\test\acllib.h	56;"	d
CharEventCallback	C_pre-intermediate\week_4\test\acllib.h	/^typedef void(*CharEventCallback) (char c);$/;"	t
DEFAULT	C_pre-intermediate\week_4\test\acllib.h	62;"	d
EMPTY	C_pre-intermediate\week_4\test\acllib.h	61;"	d
GREEN	C_pre-intermediate\week_4\test\acllib.h	54;"	d
KEY_DOWN	C_pre-intermediate\week_4\test\acllib.h	/^	KEY_DOWN,$/;"	e	enum:__anon41
KEY_UP	C_pre-intermediate\week_4\test\acllib.h	/^	KEY_UP$/;"	e	enum:__anon41
KeyboardEventCallback	C_pre-intermediate\week_4\test\acllib.h	/^typedef void(*KeyboardEventCallback) (int key, int event);$/;"	t
LEFT_BUTTON	C_pre-intermediate\week_4\test\acllib.h	/^	LEFT_BUTTON,$/;"	e	enum:__anon39
MAGENTA	C_pre-intermediate\week_4\test\acllib.h	57;"	d
MIDDLE_BUTTON	C_pre-intermediate\week_4\test\acllib.h	/^	MIDDLE_BUTTON,$/;"	e	enum:__anon39
MOUSEMOVE	C_pre-intermediate\week_4\test\acllib.h	/^	MOUSEMOVE$/;"	e	enum:__anon40
MouseEventCallback	C_pre-intermediate\week_4\test\acllib.h	/^typedef void(*MouseEventCallback) (int x, int y, int button, int event);$/;"	t
NO_BUTTON	C_pre-intermediate\week_4\test\acllib.h	/^	NO_BUTTON = 0,$/;"	e	enum:__anon39
PEN_STYLE_DASH	C_pre-intermediate\week_4\test\acllib.h	/^	PEN_STYLE_DASH,			\/* -------  *\/$/;"	e	enum:__anon37
PEN_STYLE_DASHDOT	C_pre-intermediate\week_4\test\acllib.h	/^	PEN_STYLE_DASHDOT,		\/* _._._._  *\/$/;"	e	enum:__anon37
PEN_STYLE_DASHDOTDOT	C_pre-intermediate\week_4\test\acllib.h	/^	PEN_STYLE_DASHDOTDOT,	\/* _.._.._  *\/$/;"	e	enum:__anon37
PEN_STYLE_DOT	C_pre-intermediate\week_4\test\acllib.h	/^	PEN_STYLE_DOT,			\/* .......  *\/$/;"	e	enum:__anon37
PEN_STYLE_NULL	C_pre-intermediate\week_4\test\acllib.h	/^	PEN_STYLE_NULL$/;"	e	enum:__anon37
PEN_STYLE_SOLID	C_pre-intermediate\week_4\test\acllib.h	/^	PEN_STYLE_SOLID,$/;"	e	enum:__anon37
RED	C_pre-intermediate\week_4\test\acllib.h	53;"	d
RIGHT_BUTTON	C_pre-intermediate\week_4\test\acllib.h	/^	RIGHT_BUTTON$/;"	e	enum:__anon39
ROLL_DOWN	C_pre-intermediate\week_4\test\acllib.h	/^	ROLL_DOWN,$/;"	e	enum:__anon40
ROLL_UP	C_pre-intermediate\week_4\test\acllib.h	/^	ROLL_UP,$/;"	e	enum:__anon40
TimerEventCallback	C_pre-intermediate\week_4\test\acllib.h	/^typedef void(*TimerEventCallback) (int timerID);$/;"	t
UNICODE	C_pre-intermediate\week_4\test\acllib.h	47;"	d
WHITE	C_pre-intermediate\week_4\test\acllib.h	59;"	d
YELLOW	C_pre-intermediate\week_4\test\acllib.h	58;"	d
_UNICODE	C_pre-intermediate\week_4\test\acllib.h	44;"	d
__ACLLIB_H__	C_pre-intermediate\week_4\test\acllib.h	41;"	d
hbitmap	C_pre-intermediate\week_4\test\acllib.h	/^	HBITMAP hbitmap;$/;"	m	struct:__anon42
height	C_pre-intermediate\week_4\test\acllib.h	/^	int height;$/;"	m	struct:__anon42
width	C_pre-intermediate\week_4\test\acllib.h	/^	int width;$/;"	m	struct:__anon42
Setup	C_pre-intermediate\week_4\test\main.c	/^int Setup()$/;"	f
keyListener	C_pre-intermediate\week_4\test\main.c	/^void keyListener(int key, int event)$/;"	f
mouseListener	C_pre-intermediate\week_4\test\main.c	/^void mouseListener(int x, int y, int button, int event)$/;"	f
timerListener	C_pre-intermediate\week_4\test\main.c	/^void timerListener(int id)$/;"	f
main	C_pre-intermediate\week_5\5_1.c	/^int main() {$/;"	f
Add	DataStructure\Course\week_2\Add_Two_Polynomials.c	/^Polynomial Add( Polynomial a, Polynomial b ) {$/;"	f
Coefficient	DataStructure\Course\week_2\Add_Two_Polynomials.c	/^	int Coefficient;$/;"	m	struct:Node	file:
Exponent	DataStructure\Course\week_2\Add_Two_Polynomials.c	/^	int Exponent;$/;"	m	struct:Node	file:
Next	DataStructure\Course\week_2\Add_Two_Polynomials.c	/^	PtrToNode Next;$/;"	m	struct:Node	file:
Node	DataStructure\Course\week_2\Add_Two_Polynomials.c	/^struct Node  {$/;"	s	file:
Polynomial	DataStructure\Course\week_2\Add_Two_Polynomials.c	/^typedef PtrToNode Polynomial;$/;"	t	file:
Print	DataStructure\Course\week_2\Add_Two_Polynomials.c	/^void Print( Polynomial p ) {$/;"	f
PtrToNode	DataStructure\Course\week_2\Add_Two_Polynomials.c	/^typedef struct Node *PtrToNode;$/;"	t	typeref:struct:Node	file:
Read	DataStructure\Course\week_2\Add_Two_Polynomials.c	/^Polynomial Read() {$/;"	f
main	DataStructure\Course\week_2\Add_Two_Polynomials.c	/^int main() {$/;"	f
Element	DataStructure\Course\week_2\Reverse_Linked_List.c	/^	ElementType Element;$/;"	m	struct:Node	file:
List	DataStructure\Course\week_2\Reverse_Linked_List.c	/^typedef PtrToNode List;$/;"	t	file:
Next	DataStructure\Course\week_2\Reverse_Linked_List.c	/^	Position Next;$/;"	m	struct:Node	file:
Node	DataStructure\Course\week_2\Reverse_Linked_List.c	/^struct Node {$/;"	s	file:
Position	DataStructure\Course\week_2\Reverse_Linked_List.c	/^typedef PtrToNode Position;$/;"	t	file:
PtrToNode	DataStructure\Course\week_2\Reverse_Linked_List.c	/^typedef struct Node *PtrToNode;$/;"	t	typeref:struct:Node	file:
Reverse	DataStructure\Course\week_2\Reverse_Linked_List.c	/^List Reverse( List L ) {$/;"	f
main	DataStructure\On_reading\SourceCode\BankOne.cpp	/^int main() {$/;"	f
option	DataStructure\On_reading\SourceCode\BankOne.cpp	/^int option(int percents[]) {$/;"	f
f1	DataStructure\On_reading\SourceCode\Figure1-4.cpp	/^bool f1(int n) {$/;"	f
main	DataStructure\On_reading\SourceCode\Figure1-4.cpp	/^int main() {$/;"	f
printVector	DataStructure\On_reading\SourceCode\Figure1-4.cpp	/^void printVector(char *s, const vector<T>& v) {$/;"	f
main	DataStructure\On_reading\SourceCode\Figure3-25.cpp	/^int main() {$/;"	f
printList	DataStructure\On_reading\SourceCode\Figure3-25.cpp	/^void printList(const list<T>& lst, char *s) {$/;"	f
main	DataStructure\On_reading\SourceCode\Figure4-16.cpp	/^int main() {$/;"	f
main	DataStructure\On_reading\SourceCode\Figure4-18.cpp	/^int main() {$/;"	f
main	DataStructure\On_reading\SourceCode\Figure4-20.cpp	/^int main() {$/;"	f
printDeque	DataStructure\On_reading\SourceCode\Figure4-20.cpp	/^void printDeque(const deque<T>& lst, char *s) {$/;"	f
Person	DataStructure\On_reading\SourceCode\Figure7-35.cpp	/^    Person(char *n = "", int a = 0) {$/;"	f	class:Person
Person	DataStructure\On_reading\SourceCode\Figure7-35.cpp	/^class Person {$/;"	c	file:
Union	DataStructure\On_reading\SourceCode\Figure7-35.cpp	/^void Union(const set<T>& st1, const set<T>& st2, set<T>& st3) {$/;"	f
age	DataStructure\On_reading\SourceCode\Figure7-35.cpp	/^    int age;$/;"	m	class:Person	file:
lesserAge	DataStructure\On_reading\SourceCode\Figure7-35.cpp	/^class lesserAge {$/;"	c	file:
main	DataStructure\On_reading\SourceCode\Figure7-35.cpp	/^int main() {$/;"	f
name	DataStructure\On_reading\SourceCode\Figure7-35.cpp	/^    char *name;$/;"	m	class:Person	file:
operator ()	DataStructure\On_reading\SourceCode\Figure7-35.cpp	/^    int operator()(const Person& p1, const Person& p2) const {$/;"	f	class:lesserAge
operator <	DataStructure\On_reading\SourceCode\Figure7-35.cpp	/^    bool operator<(const Person& p) const {$/;"	f	class:Person
operator <<	DataStructure\On_reading\SourceCode\Figure7-35.cpp	/^    friend ostream& operator<< (ostream& out, const Person& p) {$/;"	f	class:Person	file:
operator ==	DataStructure\On_reading\SourceCode\Figure7-35.cpp	/^    bool operator==(const Person& p) const {$/;"	f	class:Person
printMSet	DataStructure\On_reading\SourceCode\Figure7-35.cpp	/^void printMSet(const multiset<int>& s, char *c) {$/;"	f
printSet	DataStructure\On_reading\SourceCode\Figure7-35.cpp	/^void printSet(const set<int>& s, char *c) {$/;"	f
Person	DataStructure\On_reading\SourceCode\Figure7-37.cpp	/^    Person(char *n = "", int a = 0) {$/;"	f	class:Person
Person	DataStructure\On_reading\SourceCode\Figure7-37.cpp	/^class Person {$/;"	c	file:
age	DataStructure\On_reading\SourceCode\Figure7-37.cpp	/^    int age;$/;"	m	class:Person	file:
main	DataStructure\On_reading\SourceCode\Figure7-37.cpp	/^int main() {$/;"	f
name	DataStructure\On_reading\SourceCode\Figure7-37.cpp	/^    char *name;$/;"	m	class:Person	file:
operator <	DataStructure\On_reading\SourceCode\Figure7-37.cpp	/^    bool operator<(const Person& p) const {$/;"	f	class:Person
operator <<	DataStructure\On_reading\SourceCode\Figure7-37.cpp	/^    friend ostream& operator<< (ostream& out, const Person& p) {$/;"	f	class:Person	file:
operator ==	DataStructure\On_reading\SourceCode\Figure7-37.cpp	/^    bool operator==(const Person& p) const {$/;"	f	class:Person
Person	DataStructure\On_reading\SourceCode\Figure9-18.cpp	/^    Person(char *n = "", int a = 0) {$/;"	f	class:Person
Person	DataStructure\On_reading\SourceCode\Figure9-18.cpp	/^class Person {$/;"	c	file:
age	DataStructure\On_reading\SourceCode\Figure9-18.cpp	/^    int age;$/;"	m	class:Person	file:
f1	DataStructure\On_reading\SourceCode\Figure9-18.cpp	/^bool f1(int n) {$/;"	f
main	DataStructure\On_reading\SourceCode\Figure9-18.cpp	/^int main() {$/;"	f
name	DataStructure\On_reading\SourceCode\Figure9-18.cpp	/^    char *name;$/;"	m	class:Person	file:
operator <	DataStructure\On_reading\SourceCode\Figure9-18.cpp	/^    bool operator<(const Person& p) const {$/;"	f	class:Person
operator <<	DataStructure\On_reading\SourceCode\Figure9-18.cpp	/^    friend ostream& operator<< (ostream& out, const Person& p) {$/;"	f	class:Person	file:
operator ==	DataStructure\On_reading\SourceCode\Figure9-18.cpp	/^    bool operator==(const Person& p) const {$/;"	f	class:Person
printVector	DataStructure\On_reading\SourceCode\Figure9-18.cpp	/^void printVector(char *s, const vector<T>& v) {$/;"	f
ASCII	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    const unsigned int bytes, bits, ASCII;$/;"	m	class:HuffmanCoding
DataRec	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    DataRec() {$/;"	f	class:DataRec
DataRec	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^class DataRec {$/;"	c
HuffmanCoding	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    HuffmanCoding() : mask(0xff), bytes(4), bits(8), ASCII(256) {$/;"	f	class:HuffmanCoding
HuffmanCoding	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^class HuffmanCoding {$/;"	c
HuffmanNode	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    HuffmanNode() {$/;"	f	class:HuffmanNode
HuffmanNode	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    HuffmanNode(char s, unsigned long f, unsigned int r, $/;"	f	class:HuffmanNode
HuffmanNode	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^class HuffmanNode {$/;"	c
HuffmanTree	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    HuffmanNode *HuffmanTree, **chars;$/;"	m	class:HuffmanCoding
ListNode	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    ListNode() {$/;"	f	class:ListNode
ListNode	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    ListNode(ListNode *p, ListNode *n) {$/;"	f	class:ListNode
ListNode	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^class ListNode {$/;"	c
bits	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    const unsigned int bytes, bits, ASCII;$/;"	m	class:HuffmanCoding
bytes	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    const unsigned int bytes, bits, ASCII;$/;"	m	class:HuffmanCoding
charCnt	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    unsigned long charCnt;$/;"	m	class:HuffmanCoding
chars	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    HuffmanNode *HuffmanTree, **chars;$/;"	m	class:HuffmanCoding
codeword	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    unsigned long codeword, freq;$/;"	m	class:HuffmanNode
codewordLen	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    unsigned int runLen, codewordLen;$/;"	m	class:HuffmanNode
compress	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^void HuffmanCoding::compress(char *inFileName, ifstream& fIn) {$/;"	f	class:HuffmanCoding
createCodewords	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^void HuffmanCoding::createCodewords(HuffmanNode *p, unsigned long codeword, int level) {$/;"	f	class:HuffmanCoding
createHuffmanTree	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^void HuffmanCoding::createHuffmanTree() {$/;"	f	class:HuffmanCoding
data	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    vector<DataRec> data;$/;"	m	class:HuffmanCoding
dataSize	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    unsigned int dataSize;$/;"	m	class:HuffmanCoding
decode	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^void HuffmanCoding::decode(ifstream& fIn) {$/;"	f	class:HuffmanCoding
decompress	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^void HuffmanCoding::decompress(char *inFileName, ifstream& fIn) {$/;"	f	class:HuffmanCoding
encode	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^void HuffmanCoding::encode(ifstream& fIn) {$/;"	f	class:HuffmanCoding
error	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    void error(char *s) {$/;"	f	class:HuffmanCoding
fOut	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    ofstream fOut;$/;"	m	class:HuffmanCoding
freq	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    unsigned long codeword, freq;$/;"	m	class:HuffmanNode
freq	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    unsigned long freq;$/;"	m	class:DataRec
garnerData	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^void HuffmanCoding::garnerData(ifstream& fIn) {$/;"	f	class:HuffmanCoding
inputFrequencies	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^void HuffmanCoding::inputFrequencies(ifstream& fIn) {$/;"	f	class:HuffmanCoding
left	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    HuffmanNode *left, *right;$/;"	m	class:HuffmanNode
mask	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    const unsigned long mask;$/;"	m	class:HuffmanCoding
next	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    ListNode *next, *prev;$/;"	m	class:ListNode
operator <	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    bool operator< (const DataRec& dr) const {  \/\/ used by sort();$/;"	f	class:DataRec
operator ==	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    bool operator== (const DataRec& dr) const { \/\/ used by find();$/;"	f	class:DataRec
output	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^void HuffmanCoding::output(unsigned long pack) {$/;"	f	class:HuffmanCoding
outputFrequencies	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^void HuffmanCoding::outputFrequencies(ifstream& fIn) {$/;"	f	class:HuffmanCoding
prev	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    ListNode *next, *prev;$/;"	m	class:ListNode
read2ByteNum	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^void HuffmanCoding::read2ByteNum(unsigned int& num, ifstream& fIn) {$/;"	f	class:HuffmanCoding
read4ByteNum	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^void HuffmanCoding::read4ByteNum(unsigned long& num, ifstream& fIn) {$/;"	f	class:HuffmanCoding
right	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    HuffmanNode *left, *right;$/;"	m	class:HuffmanNode
runLen	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    unsigned int runLen, codewordLen;$/;"	m	class:HuffmanNode
runLen	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    unsigned int runLen;$/;"	m	class:DataRec
symbol	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    char symbol;$/;"	m	class:DataRec
symbol	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    char symbol;$/;"	m	class:HuffmanNode
transformTreeToArrayOfLists	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^void HuffmanCoding::transformTreeToArrayOfLists(HuffmanNode *p) {$/;"	f	class:HuffmanCoding
tree	DataStructure\On_reading\SourceCode\HuffmanCoding.h	/^    HuffmanNode *tree;$/;"	m	class:ListNode
main	DataStructure\On_reading\SourceCode\HuffmanDecoder.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	DataStructure\On_reading\SourceCode\HuffmanEncoder.cpp	/^int main(int argc, char* argv[]) {$/;"	f
Class1	DataStructure\On_reading\SourceCode\Page21.cpp	/^class Class1 {$/;"	c	file:
Class2	DataStructure\On_reading\SourceCode\Page21.cpp	/^class Class2 {$/;"	c	file:
Class3	DataStructure\On_reading\SourceCode\Page21.cpp	/^class Class3 {$/;"	c	file:
f	DataStructure\On_reading\SourceCode\Page21.cpp	/^    virtual void f() {$/;"	f	class:Class1
f	DataStructure\On_reading\SourceCode\Page21.cpp	/^    virtual void f() {$/;"	f	class:Class2
g	DataStructure\On_reading\SourceCode\Page21.cpp	/^    void g() {$/;"	f	class:Class1
g	DataStructure\On_reading\SourceCode\Page21.cpp	/^    void g() {$/;"	f	class:Class2
h	DataStructure\On_reading\SourceCode\Page21.cpp	/^    void h() {$/;"	f	class:Class3
main	DataStructure\On_reading\SourceCode\Page21.cpp	/^int main() {$/;"	f
BaseClass	DataStructure\On_reading\SourceCode\Page6.cpp	/^    BaseClass() { }$/;"	f	class:BaseClass
BaseClass	DataStructure\On_reading\SourceCode\Page6.cpp	/^class BaseClass {$/;"	c	file:
Derived1Level1	DataStructure\On_reading\SourceCode\Page6.cpp	/^class Derived1Level1 : public virtual BaseClass {$/;"	c	file:
Derived2Level1	DataStructure\On_reading\SourceCode\Page6.cpp	/^class Derived2Level1 : public virtual BaseClass {$/;"	c	file:
DerivedLevel2	DataStructure\On_reading\SourceCode\Page6.cpp	/^class DerivedLevel2 : public Derived1Level1, public Derived2Level1 {$/;"	c	file:
f	DataStructure\On_reading\SourceCode\Page6.cpp	/^    void f(char *s = "unknown") {$/;"	f	class:BaseClass
f	DataStructure\On_reading\SourceCode\Page6.cpp	/^    void f(char *s = "unknown") {$/;"	f	class:Derived1Level1
f	DataStructure\On_reading\SourceCode\Page6.cpp	/^    void f(char *s = "unknown") {$/;"	f	class:Derived2Level1
f	DataStructure\On_reading\SourceCode\Page6.cpp	/^void f(char *s = "unknown") {$/;"	f	class:DerivedLevel2
g	DataStructure\On_reading\SourceCode\Page6.cpp	/^    void g(char *s = "unknown") {$/;"	f	class:BaseClass
h	DataStructure\On_reading\SourceCode\Page6.cpp	/^    void h() {$/;"	f	class:BaseClass	file:
h	DataStructure\On_reading\SourceCode\Page6.cpp	/^    void h(char *s = "unknown") {$/;"	f	class:Derived1Level1
main	DataStructure\On_reading\SourceCode\Page6.cpp	/^int main() {$/;"	f
Polynomial	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    Polynomial() {$/;"	f	class:Polynomial
Polynomial	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^class Polynomial {$/;"	c	file:
Term	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    Term() {$/;"	f	class:Term
Term	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^class Term {$/;"	c	file:
Variable	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    Variable() { \/\/ required by <vector>;$/;"	f	class:Variable
Variable	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    Variable(char c, int i) {$/;"	f	class:Variable
Variable	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^class Variable {$/;"	c	file:
coeff	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    int coeff;$/;"	m	class:Term	file:
error	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    void error(char *s) {$/;"	f	class:Polynomial
exp	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    int exp;$/;"	m	class:Variable	file:
id	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    char id;$/;"	m	class:Variable	file:
main	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^int main() {$/;"	f
min	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    int min(int n, int m) const {$/;"	f	class:Term
operator !=	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    bool operator!= (const Term& term) const { \/\/ required by <list>$/;"	f	class:Term
operator +	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^Polynomial Polynomial::operator+ (Polynomial& polyn2) {$/;"	f	class:Polynomial
operator <	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    bool operator< (const Variable& v) const { \/\/ used by sort();$/;"	f	class:Variable
operator <	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^bool Term::operator< (const Term& term2) const { \/\/ used by sort();$/;"	f	class:Term
operator <<	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    friend ostream& operator<< (ostream& out, const Polynomial& polyn) {$/;"	f	class:Polynomial	file:
operator ==	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    bool operator== (const Variable& v) const {$/;"	f	class:Variable
operator ==	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^bool Term::operator== (const Term& term) const {$/;"	f	class:Term
operator >	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    bool operator> (const Term& term) const {  \/\/ required by <list>$/;"	f	class:Term
operator >>	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    friend istream& operator>> (istream& in, Polynomial& polyn) {$/;"	f	class:Polynomial	file:
terms	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    list<Term> terms;$/;"	m	class:Polynomial	file:
vars	DataStructure\On_reading\SourceCode\addPolynomials.cpp	/^    vector<Variable> vars;$/;"	m	class:Term	file:
main	DataStructure\On_reading\SourceCode\collector.cpp	/^int main() {$/;"	f
program	DataStructure\On_reading\SourceCode\collector.cpp	/^void program() {$/;"	f
Database	DataStructure\On_reading\SourceCode\database.cpp	/^Database<T>::Database() {$/;"	f	class:Database
add	DataStructure\On_reading\SourceCode\database.cpp	/^void Database<T>::add(T& d) {$/;"	f	class:Database
find	DataStructure\On_reading\SourceCode\database.cpp	/^bool Database<T>::find(const T& d) {$/;"	f	class:Database
main	DataStructure\On_reading\SourceCode\database.cpp	/^int main() {$/;"	f
modify	DataStructure\On_reading\SourceCode\database.cpp	/^void Database<T>::modify(const T& d) {$/;"	f	class:Database
print	DataStructure\On_reading\SourceCode\database.cpp	/^ostream& Database<T>::print(ostream& out) {$/;"	f	class:Database
run	DataStructure\On_reading\SourceCode\database.cpp	/^void Database<T>::run() {$/;"	f	class:Database
DATABASE	DataStructure\On_reading\SourceCode\database.h	2;"	d
Database	DataStructure\On_reading\SourceCode\database.h	/^class Database {$/;"	c
database	DataStructure\On_reading\SourceCode\database.h	/^    fstream database;$/;"	m	class:Database
fName	DataStructure\On_reading\SourceCode\database.h	/^    char fName[20];$/;"	m	class:Database
operator <<	DataStructure\On_reading\SourceCode\database.h	/^    friend ostream& operator<<(ostream& out, Database& db) {$/;"	f	class:Database
FordFulkersonMaxFlow	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^void Network::FordFulkersonMaxFlow() {$/;"	f	class:Network
Labeled	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    bool Labeled(Vertex *v) const {$/;"	f	class:Network	file:
LocalTree	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^class LocalTree : public BST<NetTreeNode> {$/;"	c	file:
NetTreeNode	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    NetTreeNode(VertexArrayRec **v = 0) {$/;"	f	class:NetTreeNode
NetTreeNode	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^class NetTreeNode {$/;"	c	file:
Network	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    Network() : sink(1), source(0), none(-1), numOfVertices(2) {$/;"	f	class:Network
Network	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^class Network {$/;"	c	file:
Vertex	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    Vertex() {$/;"	f	class:Vertex
Vertex	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    Vertex(int id, int c, int ef, bool f, Vertex *t = 0) {$/;"	f	class:Vertex
Vertex	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^class Vertex {$/;"	c	file:
VertexArrayRec	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    VertexArrayRec() {$/;"	f	class:VertexArrayRec
VertexArrayRec	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^class VertexArrayRec {$/;"	c	file:
adjacent	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    list<Vertex> *adjacent; \/\/ list of adjacent vertices with the same$/;"	m	class:VertexArrayRec	file:
adjacent	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    list<Vertex> *adjacent;$/;"	m	class:NetTreeNode	file:
augmentPath	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^void Network::augmentPath() {$/;"	f	class:Network
capacity	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    int idNum, capacity, edgeFlow;$/;"	m	class:Vertex	file:
corrVer	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    Vertex *corrVer;        \/\/ corresponding vertex: vertex on parent's$/;"	m	class:VertexArrayRec	file:
edgeFlow	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    int idNum, capacity, edgeFlow;$/;"	m	class:Vertex	file:
edgeSlack	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    int edgeSlack(Vertex *u) const {$/;"	f	class:Network	file:
forward	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    bool forward;   \/\/ direction;$/;"	m	class:Vertex	file:
idName	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    char *idName;$/;"	m	class:NetTreeNode	file:
idName	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    char *idName;$/;"	m	class:VertexArrayRec	file:
idNum	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    int idNum, capacity, edgeFlow;$/;"	m	class:Vertex	file:
idNum	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    int idNum;$/;"	m	class:NetTreeNode	file:
label	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^void Network::label(Vertex *u, int v) {$/;"	f	class:Network
labeled	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    bool labeled;$/;"	m	class:VertexArrayRec	file:
main	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^int main(int argc, char* argv[]) {$/;"	f
min	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    int min(int n, int m) const {$/;"	f	class:Network	file:
none	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    const int sink, source, none;$/;"	m	class:Network	file:
numOfVertices	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    int numOfVertices;$/;"	m	class:Network	file:
operator !=	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    bool operator!= (const Vertex& v) const { \/\/ required$/;"	f	class:Vertex
operator <	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    bool operator<  (const NetTreeNode& tr) const {$/;"	f	class:NetTreeNode
operator <	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    bool operator< (const Vertex& v) const {  \/\/ by the compiler;$/;"	f	class:Vertex
operator <<	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^ostream& operator<< (ostream& out, const NetTreeNode& tr) {$/;"	f
operator <<	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^ostream& operator<< (ostream& out, const Network& net) {$/;"	f
operator <<	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^ostream& operator<< (ostream& out, const Vertex& vr) {$/;"	f
operator ==	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    bool operator== (const NetTreeNode& tr) const {$/;"	f	class:NetTreeNode
operator ==	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    bool operator== (const Vertex& v) const {$/;"	f	class:Vertex
operator >	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    bool operator> (const Vertex& v) const {$/;"	f	class:Vertex
parent	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    int parent;$/;"	m	class:VertexArrayRec	file:
readCommittees	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^void Network::readCommittees(char *fileName) {$/;"	f	class:Network
sink	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    const int sink, source, none;$/;"	m	class:Network	file:
source	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    const int sink, source, none;$/;"	m	class:Network	file:
twin	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    Vertex *twin;   \/\/ edge in the opposite direction;$/;"	m	class:Vertex	file:
vertexFlow	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    int vertexFlow;$/;"	m	class:VertexArrayRec	file:
vertices	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    VertexArrayRec *vertices;$/;"	m	class:Network	file:
verticesPtr	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    VertexArrayRec **verticesPtr; \/\/ used by visit() in LocalTree to update vertices;$/;"	m	class:Network	file:
verticesPtr	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    VertexArrayRec **verticesPtr;$/;"	m	class:NetTreeNode	file:
visit	DataStructure\On_reading\SourceCode\distinctRepresentatives.cpp	/^    void visit(BSTNode<NetTreeNode>* p) {$/;"	f	class:LocalTree	file:
ARRAY_QUEUE	DataStructure\On_reading\SourceCode\genArrayQueue.h	4;"	d
ArrayQueue	DataStructure\On_reading\SourceCode\genArrayQueue.h	/^    ArrayQueue() { $/;"	f	class:ArrayQueue
ArrayQueue	DataStructure\On_reading\SourceCode\genArrayQueue.h	/^class ArrayQueue {$/;"	c
dequeue	DataStructure\On_reading\SourceCode\genArrayQueue.h	/^T ArrayQueue<T,size>::dequeue() {   $/;"	f	class:ArrayQueue
enqueue	DataStructure\On_reading\SourceCode\genArrayQueue.h	/^void ArrayQueue<T,size>::enqueue(T el) {$/;"	f	class:ArrayQueue
first	DataStructure\On_reading\SourceCode\genArrayQueue.h	/^    int first, last;$/;"	m	class:ArrayQueue
isEmpty	DataStructure\On_reading\SourceCode\genArrayQueue.h	/^    bool isEmpty() { $/;"	f	class:ArrayQueue
isFull	DataStructure\On_reading\SourceCode\genArrayQueue.h	/^    bool isFull()  { $/;"	f	class:ArrayQueue
last	DataStructure\On_reading\SourceCode\genArrayQueue.h	/^    int first, last;$/;"	m	class:ArrayQueue
storage	DataStructure\On_reading\SourceCode\genArrayQueue.h	/^    T storage[size];$/;"	m	class:ArrayQueue
BINARY_SEARCH_TREE	DataStructure\On_reading\SourceCode\genBST.h	8;"	d
BST	DataStructure\On_reading\SourceCode\genBST.h	/^    BST() {$/;"	f	class:BST
BST	DataStructure\On_reading\SourceCode\genBST.h	/^class BST {$/;"	c
BSTNode	DataStructure\On_reading\SourceCode\genBST.h	/^    BSTNode() {$/;"	f	class:BSTNode
BSTNode	DataStructure\On_reading\SourceCode\genBST.h	/^    BSTNode(const T& e, BSTNode<T> *l = 0, BSTNode<T> *r = 0) {$/;"	f	class:BSTNode
BSTNode	DataStructure\On_reading\SourceCode\genBST.h	/^class BSTNode {$/;"	c
MorrisInorder	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::MorrisInorder() {$/;"	f	class:BST
MorrisPostorder	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::MorrisPostorder() {$/;"	f	class:BST
MorrisPreorder	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::MorrisPreorder() {$/;"	f	class:BST
Queue	DataStructure\On_reading\SourceCode\genBST.h	/^class Queue : public queue<T> {$/;"	c
Stack	DataStructure\On_reading\SourceCode\genBST.h	/^class Stack : public stack<T> {$/;"	c
balance	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::balance (T data[], int first, int last) {$/;"	f	class:BST
breadthFirst	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::breadthFirst() {$/;"	f	class:BST
clear	DataStructure\On_reading\SourceCode\genBST.h	/^    void clear() {$/;"	f	class:BST
clear	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::clear(BSTNode<T> *p) {$/;"	f	class:BST
deleteByCopying	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::deleteByCopying(BSTNode<T>*& node) {$/;"	f	class:BST
deleteByMerging	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::deleteByMerging(BSTNode<T>*& node) {$/;"	f	class:BST
dequeue	DataStructure\On_reading\SourceCode\genBST.h	/^    T dequeue() {$/;"	f	class:Queue
el	DataStructure\On_reading\SourceCode\genBST.h	/^    T el;$/;"	m	class:BSTNode
enqueue	DataStructure\On_reading\SourceCode\genBST.h	/^    void enqueue(const T& el) {$/;"	f	class:Queue
findAndDeleteByCopying	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::findAndDeleteByCopying(const T& el) {$/;"	f	class:BST
findAndDeleteByMerging	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::findAndDeleteByMerging(const T& el) {$/;"	f	class:BST
inorder	DataStructure\On_reading\SourceCode\genBST.h	/^    void inorder() {$/;"	f	class:BST
inorder	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::inorder(BSTNode<T> *p) {$/;"	f	class:BST
insert	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::insert(const T& el) {$/;"	f	class:BST
isEmpty	DataStructure\On_reading\SourceCode\genBST.h	/^    bool isEmpty() const {$/;"	f	class:BST
iterativeInorder	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::iterativeInorder() {$/;"	f	class:BST
iterativePostorder	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::iterativePostorder() {$/;"	f	class:BST
iterativePreorder	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::iterativePreorder() {$/;"	f	class:BST
left	DataStructure\On_reading\SourceCode\genBST.h	/^    BSTNode<T> *left, *right;$/;"	m	class:BSTNode
pop	DataStructure\On_reading\SourceCode\genBST.h	/^    T pop() {$/;"	f	class:Stack
postorder	DataStructure\On_reading\SourceCode\genBST.h	/^    void postorder() {$/;"	f	class:BST
postorder	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::postorder(BSTNode<T>* p) {$/;"	f	class:BST
preorder	DataStructure\On_reading\SourceCode\genBST.h	/^    void preorder() {$/;"	f	class:BST
preorder	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::preorder(BSTNode<T> *p) {$/;"	f	class:BST
recursiveInsert	DataStructure\On_reading\SourceCode\genBST.h	/^    void recursiveInsert(const T& el) {$/;"	f	class:BST
recursiveInsert	DataStructure\On_reading\SourceCode\genBST.h	/^void BST<T>::recursiveInsert(BSTNode<T>*& p, const T& el) {$/;"	f	class:BST
recursiveSearch	DataStructure\On_reading\SourceCode\genBST.h	/^    T* recursiveSearch(const T& el) const {$/;"	f	class:BST
recursiveSearch	DataStructure\On_reading\SourceCode\genBST.h	/^T* BST<T>::recursiveSearch(BSTNode<T>* p, const T& el) const {$/;"	f	class:BST
right	DataStructure\On_reading\SourceCode\genBST.h	/^    BSTNode<T> *left, *right;$/;"	m	class:BSTNode
root	DataStructure\On_reading\SourceCode\genBST.h	/^    BSTNode<T>* root;$/;"	m	class:BST
search	DataStructure\On_reading\SourceCode\genBST.h	/^    T* search(const T& el) const {$/;"	f	class:BST
search	DataStructure\On_reading\SourceCode\genBST.h	/^T* BST<T>::search(BSTNode<T>* p, const T& el) const {$/;"	f	class:BST
visit	DataStructure\On_reading\SourceCode\genBST.h	/^    virtual void visit(BSTNode<T>* p) {$/;"	f	class:BST
~BST	DataStructure\On_reading\SourceCode\genBST.h	/^    ~BST() {$/;"	f	class:BST
DLLNode	DataStructure\On_reading\SourceCode\genDLList.h	/^    DLLNode() {$/;"	f	class:DLLNode
DLLNode	DataStructure\On_reading\SourceCode\genDLList.h	/^    DLLNode(const T& el, DLLNode<T> *n = 0, DLLNode<T> *p = 0) {$/;"	f	class:DLLNode
DLLNode	DataStructure\On_reading\SourceCode\genDLList.h	/^class DLLNode {$/;"	c
DOUBLY_LINKED_LIST	DataStructure\On_reading\SourceCode\genDLList.h	2;"	d
DoublyLinkedList	DataStructure\On_reading\SourceCode\genDLList.h	/^    DoublyLinkedList() {$/;"	f	class:DoublyLinkedList
DoublyLinkedList	DataStructure\On_reading\SourceCode\genDLList.h	/^class DoublyLinkedList {$/;"	c
addToDLLHead	DataStructure\On_reading\SourceCode\genDLList.h	/^void DoublyLinkedList<T>::addToDLLHead(const T& el) {$/;"	f	class:DoublyLinkedList
addToDLLTail	DataStructure\On_reading\SourceCode\genDLList.h	/^void DoublyLinkedList<T>::addToDLLTail(const T& el) {$/;"	f	class:DoublyLinkedList
clear	DataStructure\On_reading\SourceCode\genDLList.h	/^void DoublyLinkedList<T>::clear() {$/;"	f	class:DoublyLinkedList
deleteFromDLLHead	DataStructure\On_reading\SourceCode\genDLList.h	/^T DoublyLinkedList<T>::deleteFromDLLHead() {$/;"	f	class:DoublyLinkedList
deleteFromDLLTail	DataStructure\On_reading\SourceCode\genDLList.h	/^T DoublyLinkedList<T>::deleteFromDLLTail() {$/;"	f	class:DoublyLinkedList
find	DataStructure\On_reading\SourceCode\genDLList.h	/^T* DoublyLinkedList<T>::find(const T& el) const {$/;"	f	class:DoublyLinkedList
firstEl	DataStructure\On_reading\SourceCode\genDLList.h	/^T& DoublyLinkedList<T>::firstEl() {$/;"	f	class:DoublyLinkedList
head	DataStructure\On_reading\SourceCode\genDLList.h	/^    DLLNode<T> *head, *tail;$/;"	m	class:DoublyLinkedList
info	DataStructure\On_reading\SourceCode\genDLList.h	/^    T info;$/;"	m	class:DLLNode
isEmpty	DataStructure\On_reading\SourceCode\genDLList.h	/^    bool isEmpty() const {$/;"	f	class:DoublyLinkedList
next	DataStructure\On_reading\SourceCode\genDLList.h	/^    DLLNode<T> *next, *prev;$/;"	m	class:DLLNode
operator <<	DataStructure\On_reading\SourceCode\genDLList.h	/^    friend ostream& operator<<(ostream& out, const DoublyLinkedList<T>& dll) {$/;"	f	class:DoublyLinkedList
prev	DataStructure\On_reading\SourceCode\genDLList.h	/^    DLLNode<T> *next, *prev;$/;"	m	class:DLLNode
setToNull	DataStructure\On_reading\SourceCode\genDLList.h	/^    void setToNull() {$/;"	f	class:DoublyLinkedList
tail	DataStructure\On_reading\SourceCode\genDLList.h	/^    DLLNode<T> *head, *tail;$/;"	m	class:DoublyLinkedList
~DoublyLinkedList	DataStructure\On_reading\SourceCode\genDLList.h	/^    ~DoublyLinkedList() {$/;"	f	class:DoublyLinkedList
LLStack	DataStructure\On_reading\SourceCode\genListStack.h	/^    LLStack() { $/;"	f	class:LLStack
LLStack	DataStructure\On_reading\SourceCode\genListStack.h	/^class LLStack {$/;"	c
LL_STACK	DataStructure\On_reading\SourceCode\genListStack.h	5;"	d
clear	DataStructure\On_reading\SourceCode\genListStack.h	/^    void clear() {$/;"	f	class:LLStack
isEmpty	DataStructure\On_reading\SourceCode\genListStack.h	/^    bool isEmpty() const { $/;"	f	class:LLStack
lst	DataStructure\On_reading\SourceCode\genListStack.h	/^    list<T> lst;$/;"	m	class:LLStack
pop	DataStructure\On_reading\SourceCode\genListStack.h	/^    T pop() { $/;"	f	class:LLStack
push	DataStructure\On_reading\SourceCode\genListStack.h	/^    void push(const T& el) { $/;"	f	class:LLStack
topEl	DataStructure\On_reading\SourceCode\genListStack.h	/^    T& topEl() { $/;"	f	class:LLStack
DLL_QUEUE	DataStructure\On_reading\SourceCode\genQueue.h	5;"	d
Queue	DataStructure\On_reading\SourceCode\genQueue.h	/^    Queue() { $/;"	f	class:Queue
Queue	DataStructure\On_reading\SourceCode\genQueue.h	/^class Queue {$/;"	c
clear	DataStructure\On_reading\SourceCode\genQueue.h	/^    void clear() {$/;"	f	class:Queue
dequeue	DataStructure\On_reading\SourceCode\genQueue.h	/^    T dequeue() {$/;"	f	class:Queue
enqueue	DataStructure\On_reading\SourceCode\genQueue.h	/^    void enqueue(const T& el) {$/;"	f	class:Queue
front	DataStructure\On_reading\SourceCode\genQueue.h	/^    T& front() { $/;"	f	class:Queue
isEmpty	DataStructure\On_reading\SourceCode\genQueue.h	/^    bool isEmpty() const { $/;"	f	class:Queue
lst	DataStructure\On_reading\SourceCode\genQueue.h	/^    list<T> lst;$/;"	m	class:Queue
SkipList	DataStructure\On_reading\SourceCode\genSkipL.h	/^SkipList<T>::SkipList() {$/;"	f	class:SkipList
SkipList	DataStructure\On_reading\SourceCode\genSkipL.h	/^class SkipList {$/;"	c
SkipListNode	DataStructure\On_reading\SourceCode\genSkipL.h	/^    SkipListNode() {$/;"	f	class:SkipListNode
SkipListNode	DataStructure\On_reading\SourceCode\genSkipL.h	/^class SkipListNode {$/;"	c
chooseLevel	DataStructure\On_reading\SourceCode\genSkipL.h	/^int SkipList<T>::chooseLevel() {$/;"	f	class:SkipList
choosePowers	DataStructure\On_reading\SourceCode\genSkipL.h	/^void SkipList<T>::choosePowers() {$/;"	f	class:SkipList
isEmpty	DataStructure\On_reading\SourceCode\genSkipL.h	/^bool SkipList<T>::isEmpty() const {$/;"	f	class:SkipList
key	DataStructure\On_reading\SourceCode\genSkipL.h	/^    T key;$/;"	m	class:SkipListNode
maxLevel	DataStructure\On_reading\SourceCode\genSkipL.h	/^const int maxLevel = 4;$/;"	v
next	DataStructure\On_reading\SourceCode\genSkipL.h	/^    SkipListNode **next;$/;"	m	class:SkipListNode
nodePtr	DataStructure\On_reading\SourceCode\genSkipL.h	/^    typedef SkipListNode<T> *nodePtr;$/;"	t	class:SkipList
powers	DataStructure\On_reading\SourceCode\genSkipL.h	/^    int powers[maxLevel];$/;"	m	class:SkipList
root	DataStructure\On_reading\SourceCode\genSkipL.h	/^    nodePtr root[maxLevel];$/;"	m	class:SkipList
skipListInsert	DataStructure\On_reading\SourceCode\genSkipL.h	/^void SkipList<T>::skipListInsert(const T& key) {$/;"	f	class:SkipList
skipListSearch	DataStructure\On_reading\SourceCode\genSkipL.h	/^T* SkipList<T>::skipListSearch(const T& key) {$/;"	f	class:SkipList
SPLAYING	DataStructure\On_reading\SourceCode\genSplay.h	5;"	d
SplayTree	DataStructure\On_reading\SourceCode\genSplay.h	/^    SplayTree() {$/;"	f	class:SplayTree
SplayTree	DataStructure\On_reading\SourceCode\genSplay.h	/^class SplayTree {$/;"	c
SplayingNode	DataStructure\On_reading\SourceCode\genSplay.h	/^    SplayingNode() {$/;"	f	class:SplayingNode
SplayingNode	DataStructure\On_reading\SourceCode\genSplay.h	/^    SplayingNode(const T& el, SplayingNode *l = 0, SplayingNode *r = 0,$/;"	f	class:SplayingNode
SplayingNode	DataStructure\On_reading\SourceCode\genSplay.h	/^class SplayingNode {$/;"	c
continueRotation	DataStructure\On_reading\SourceCode\genSplay.h	/^void SplayTree<T>::continueRotation(SplayingNode<T>* gr, SplayingNode<T>* par,$/;"	f	class:SplayTree
info	DataStructure\On_reading\SourceCode\genSplay.h	/^    T info;$/;"	m	class:SplayingNode
inorder	DataStructure\On_reading\SourceCode\genSplay.h	/^    void inorder() {$/;"	f	class:SplayTree
inorder	DataStructure\On_reading\SourceCode\genSplay.h	/^void SplayTree<T>::inorder(SplayingNode<T> *p) {$/;"	f	class:SplayTree
insert	DataStructure\On_reading\SourceCode\genSplay.h	/^void SplayTree<T>::insert(const T& el) {$/;"	f	class:SplayTree
left	DataStructure\On_reading\SourceCode\genSplay.h	/^    SplayingNode *left, *right, *parent;$/;"	m	class:SplayingNode
parent	DataStructure\On_reading\SourceCode\genSplay.h	/^    SplayingNode *left, *right, *parent;$/;"	m	class:SplayingNode
right	DataStructure\On_reading\SourceCode\genSplay.h	/^    SplayingNode *left, *right, *parent;$/;"	m	class:SplayingNode
root	DataStructure\On_reading\SourceCode\genSplay.h	/^    SplayingNode<T> *root;$/;"	m	class:SplayTree
rotateL	DataStructure\On_reading\SourceCode\genSplay.h	/^void SplayTree<T>::rotateL(SplayingNode<T>* p) {$/;"	f	class:SplayTree
rotateR	DataStructure\On_reading\SourceCode\genSplay.h	/^void SplayTree<T>::rotateR(SplayingNode<T>* p) {$/;"	f	class:SplayTree
search	DataStructure\On_reading\SourceCode\genSplay.h	/^T* SplayTree<T>::search(const T& el) {$/;"	f	class:SplayTree
semisplay	DataStructure\On_reading\SourceCode\genSplay.h	/^void SplayTree<T>::semisplay(SplayingNode<T>* p) {$/;"	f	class:SplayTree
visit	DataStructure\On_reading\SourceCode\genSplay.h	/^    void virtual visit(SplayingNode<T>*) {$/;"	f	class:SplayTree
STACK	DataStructure\On_reading\SourceCode\genStack.h	5;"	d
Stack	DataStructure\On_reading\SourceCode\genStack.h	/^    Stack() {$/;"	f	class:Stack
Stack	DataStructure\On_reading\SourceCode\genStack.h	/^class Stack {$/;"	c
clear	DataStructure\On_reading\SourceCode\genStack.h	/^    void clear() { $/;"	f	class:Stack
isEmpty	DataStructure\On_reading\SourceCode\genStack.h	/^    bool isEmpty() const { $/;"	f	class:Stack
pool	DataStructure\On_reading\SourceCode\genStack.h	/^    vector<T> pool;$/;"	m	class:Stack
pop	DataStructure\On_reading\SourceCode\genStack.h	/^    T pop() { $/;"	f	class:Stack
push	DataStructure\On_reading\SourceCode\genStack.h	/^    void push(const T& el) { $/;"	f	class:Stack
topEl	DataStructure\On_reading\SourceCode\genStack.h	/^    T& topEl() { $/;"	f	class:Stack
THREADED_TREE	DataStructure\On_reading\SourceCode\genThreaded.h	5;"	d
ThreadedNode	DataStructure\On_reading\SourceCode\genThreaded.h	/^  ThreadedNode() {$/;"	f	class:ThreadedNode
ThreadedNode	DataStructure\On_reading\SourceCode\genThreaded.h	/^  ThreadedNode(const T& el, ThreadedNode *l = 0, ThreadedNode *r = 0) {$/;"	f	class:ThreadedNode
ThreadedNode	DataStructure\On_reading\SourceCode\genThreaded.h	/^class ThreadedNode {$/;"	c
ThreadedTree	DataStructure\On_reading\SourceCode\genThreaded.h	/^  ThreadedTree()  {$/;"	f	class:ThreadedTree
ThreadedTree	DataStructure\On_reading\SourceCode\genThreaded.h	/^class ThreadedTree {$/;"	c
clear	DataStructure\On_reading\SourceCode\genThreaded.h	/^  void clear() {$/;"	f	class:ThreadedTree
clear	DataStructure\On_reading\SourceCode\genThreaded.h	/^void ThreadedTree<T>::clear(ThreadedNode<T>*p)$/;"	f	class:ThreadedTree
inorder	DataStructure\On_reading\SourceCode\genThreaded.h	/^void ThreadedTree<T>::inorder() {$/;"	f	class:ThreadedTree
insert	DataStructure\On_reading\SourceCode\genThreaded.h	/^void ThreadedTree<T>::insert(const T& el) {$/;"	f	class:ThreadedTree
key	DataStructure\On_reading\SourceCode\genThreaded.h	/^  T key;$/;"	m	class:ThreadedNode
left	DataStructure\On_reading\SourceCode\genThreaded.h	/^  ThreadedNode *left, *right;$/;"	m	class:ThreadedNode
postorder	DataStructure\On_reading\SourceCode\genThreaded.h	/^void ThreadedTree<T>::postorder() {$/;"	f	class:ThreadedTree
preorder	DataStructure\On_reading\SourceCode\genThreaded.h	/^void ThreadedTree<T>::preorder() {$/;"	f	class:ThreadedTree
right	DataStructure\On_reading\SourceCode\genThreaded.h	/^  ThreadedNode *left, *right;$/;"	m	class:ThreadedNode
root	DataStructure\On_reading\SourceCode\genThreaded.h	/^  ThreadedNode<T>* root;$/;"	m	class:ThreadedTree
visit	DataStructure\On_reading\SourceCode\genThreaded.h	/^  void virtual visit(ThreadedNode<T>* p) {$/;"	f	class:ThreadedTree
~ThreadedTree	DataStructure\On_reading\SourceCode\genThreaded.h	/^  ~ThreadedTree() {$/;"	f	class:ThreadedTree
File	DataStructure\On_reading\SourceCode\hash.cpp	/^    File() : empty('*'), delMarker('#') {$/;"	f	class:File
File	DataStructure\On_reading\SourceCode\hash.cpp	/^class File {$/;"	c	file:
QSort	DataStructure\On_reading\SourceCode\hash.cpp	/^void File::QSort(int low, int high) {$/;"	f	class:File
bucketSize	DataStructure\On_reading\SourceCode\hash.cpp	/^const int bucketSize = 2, tableSize = 3, strLen = 20;$/;"	v
combineFiles	DataStructure\On_reading\SourceCode\hash.cpp	/^void File::combineFiles() {$/;"	f	class:File
delMarker	DataStructure\On_reading\SourceCode\hash.cpp	/^    const char empty, delMarker;$/;"	m	class:File	file:
empty	DataStructure\On_reading\SourceCode\hash.cpp	/^    const char empty, delMarker;$/;"	m	class:File	file:
excise	DataStructure\On_reading\SourceCode\hash.cpp	/^void File::excise(char line[]) {$/;"	f	class:File
getName	DataStructure\On_reading\SourceCode\hash.cpp	/^void File::getName(char line[]) {$/;"	f	class:File
hash	DataStructure\On_reading\SourceCode\hash.cpp	/^unsigned long File::hash(char *s) {$/;"	f	class:File
insert	DataStructure\On_reading\SourceCode\hash.cpp	/^    void insert(char line[]) {$/;"	f	class:File	file:
insertion	DataStructure\On_reading\SourceCode\hash.cpp	/^void File::insertion(char line[]) {$/;"	f	class:File
main	DataStructure\On_reading\SourceCode\hash.cpp	/^int main(int argc, char* argv[]) {$/;"	f
outfile	DataStructure\On_reading\SourceCode\hash.cpp	/^    fstream outfile, overflow, sorted;$/;"	m	class:File	file:
overflow	DataStructure\On_reading\SourceCode\hash.cpp	/^    fstream outfile, overflow, sorted;$/;"	m	class:File	file:
partition	DataStructure\On_reading\SourceCode\hash.cpp	/^void File::partition (int low, int high, int& pivotLoc) {$/;"	f	class:File
pointers	DataStructure\On_reading\SourceCode\hash.cpp	/^    long *pointers;$/;"	m	class:File	file:
processFile	DataStructure\On_reading\SourceCode\hash.cpp	/^void File::processFile(char *fileName) {$/;"	f	class:File
recordLen	DataStructure\On_reading\SourceCode\hash.cpp	/^const int recordLen = strLen;$/;"	v
sortFile	DataStructure\On_reading\SourceCode\hash.cpp	/^void File::sortFile() {$/;"	f	class:File
sorted	DataStructure\On_reading\SourceCode\hash.cpp	/^    fstream outfile, overflow, sorted;$/;"	m	class:File	file:
strLen	DataStructure\On_reading\SourceCode\hash.cpp	/^const int bucketSize = 2, tableSize = 3, strLen = 20;$/;"	v
swap	DataStructure\On_reading\SourceCode\hash.cpp	/^    void swap(long& i, long& j) {$/;"	f	class:File	file:
tableSize	DataStructure\On_reading\SourceCode\hash.cpp	/^const int bucketSize = 2, tableSize = 3, strLen = 20;$/;"	v
Cell	DataStructure\On_reading\SourceCode\heap.h	/^    Cell() {$/;"	f	class:Cell
Cell	DataStructure\On_reading\SourceCode\heap.h	/^class Cell {$/;"	c
HEAP_CLASS	DataStructure\On_reading\SourceCode\heap.h	4;"	d
Head	DataStructure\On_reading\SourceCode\heap.h	/^    int& Head(int p) {$/;"	f	class:Heap
Heap	DataStructure\On_reading\SourceCode\heap.h	/^Heap::Heap() : empty(-1), OK(1), head(0), tail(1), maxHeap(6), maxRoot(50) {$/;"	f	class:Heap
Heap	DataStructure\On_reading\SourceCode\heap.h	/^class Heap {$/;"	c
OK	DataStructure\On_reading\SourceCode\heap.h	/^    const int empty, OK, head, tail, maxHeap, maxRoot;$/;"	m	class:Heap
Tail	DataStructure\On_reading\SourceCode\heap.h	/^    int& Tail(int p) {$/;"	f	class:Heap
allocateAtom	DataStructure\On_reading\SourceCode\heap.h	/^void Heap::allocateAtom (int p, int val) {    \/\/ an instance of Lisp's setf;$/;"	f	class:Heap
allocateAux	DataStructure\On_reading\SourceCode\heap.h	/^int Heap::allocateAux(int p) {$/;"	f	class:Heap
allocateList	DataStructure\On_reading\SourceCode\heap.h	/^void Heap::allocateList(int p, int q, int r) { \/\/ Lisp's cons;$/;"	f	class:Heap
atom	DataStructure\On_reading\SourceCode\heap.h	/^    bool atom, marked;$/;"	m	class:Cell
atom	DataStructure\On_reading\SourceCode\heap.h	/^    bool& atom(int p) {$/;"	f	class:Heap
collect	DataStructure\On_reading\SourceCode\heap.h	/^void Heap::collect() {$/;"	f	class:Heap
deallocate	DataStructure\On_reading\SourceCode\heap.h	/^void Heap::deallocate(int p) {$/;"	f	class:Heap
detach	DataStructure\On_reading\SourceCode\heap.h	/^void Heap::detach(int cell, int& list) {$/;"	f	class:Heap
empty	DataStructure\On_reading\SourceCode\heap.h	/^    const int empty, OK, head, tail, maxHeap, maxRoot;$/;"	m	class:Heap
freeCells	DataStructure\On_reading\SourceCode\heap.h	/^    int *roots, freeCells, nonFreeCells;$/;"	m	class:Heap
head	DataStructure\On_reading\SourceCode\heap.h	/^    const int empty, OK, head, tail, maxHeap, maxRoot;$/;"	m	class:Heap
heap	DataStructure\On_reading\SourceCode\heap.h	/^    Cell *heap;$/;"	m	class:Heap
info	DataStructure\On_reading\SourceCode\heap.h	/^    } info;$/;"	m	class:Cell	typeref:union:Cell::__anon52
insert	DataStructure\On_reading\SourceCode\heap.h	/^void Heap::insert(int cell, int& list) {$/;"	f	class:Heap
links	DataStructure\On_reading\SourceCode\heap.h	/^        int links[2];  \/\/ head and tail for non-atom;$/;"	m	union:Cell::__anon52
marked	DataStructure\On_reading\SourceCode\heap.h	/^    bool atom, marked;$/;"	m	class:Cell
marked	DataStructure\On_reading\SourceCode\heap.h	/^    bool& marked(int p) {$/;"	f	class:Heap
maxHeap	DataStructure\On_reading\SourceCode\heap.h	/^    const int empty, OK, head, tail, maxHeap, maxRoot;$/;"	m	class:Heap
maxRoot	DataStructure\On_reading\SourceCode\heap.h	/^    const int empty, OK, head, tail, maxHeap, maxRoot;$/;"	m	class:Heap
next	DataStructure\On_reading\SourceCode\heap.h	/^    int prev, next;$/;"	m	class:Cell
next	DataStructure\On_reading\SourceCode\heap.h	/^    int& next(int p) {$/;"	f	class:Heap
nonFreeCells	DataStructure\On_reading\SourceCode\heap.h	/^    int *roots, freeCells, nonFreeCells;$/;"	m	class:Heap
operator <<	DataStructure\On_reading\SourceCode\heap.h	/^ostream& operator<< (ostream& out, Heap& h) {$/;"	f
prev	DataStructure\On_reading\SourceCode\heap.h	/^    int prev, next;$/;"	m	class:Cell
prev	DataStructure\On_reading\SourceCode\heap.h	/^    int& prev(int p) {$/;"	f	class:Heap
printList	DataStructure\On_reading\SourceCode\heap.h	/^void Heap::printList(int list, char *name) {$/;"	f	class:Heap
rootCnt	DataStructure\On_reading\SourceCode\heap.h	/^    int rootCnt;$/;"	m	class:Heap
roots	DataStructure\On_reading\SourceCode\heap.h	/^    int *roots, freeCells, nonFreeCells;$/;"	m	class:Heap
tail	DataStructure\On_reading\SourceCode\heap.h	/^    const int empty, OK, head, tail, maxHeap, maxRoot;$/;"	m	class:Heap
transfer	DataStructure\On_reading\SourceCode\heap.h	/^    void transfer(int cell, int& list1, int& list2) {$/;"	f	class:Heap
updateHead	DataStructure\On_reading\SourceCode\heap.h	/^    void updateHead(int p, int q) {         \/\/ Lisp's rplaca;$/;"	f	class:Heap
updateTail	DataStructure\On_reading\SourceCode\heap.h	/^    void updateTail(int p, int q) {         \/\/ Lisp's rplacd;$/;"	f	class:Heap
value	DataStructure\On_reading\SourceCode\heap.h	/^        int value;     \/\/ value for atom,$/;"	m	union:Cell::__anon52
value	DataStructure\On_reading\SourceCode\heap.h	/^    int& value(int p) {$/;"	f	class:Heap
addToHead	DataStructure\On_reading\SourceCode\intSLList.cpp	/^void IntSLList::addToHead(int el) {$/;"	f	class:IntSLList
addToTail	DataStructure\On_reading\SourceCode\intSLList.cpp	/^void IntSLList::addToTail(int el) {$/;"	f	class:IntSLList
deleteFromHead	DataStructure\On_reading\SourceCode\intSLList.cpp	/^int IntSLList::deleteFromHead() {$/;"	f	class:IntSLList
deleteFromTail	DataStructure\On_reading\SourceCode\intSLList.cpp	/^int IntSLList::deleteFromTail() {$/;"	f	class:IntSLList
deleteNode	DataStructure\On_reading\SourceCode\intSLList.cpp	/^void IntSLList::deleteNode(int el) {$/;"	f	class:IntSLList
isInList	DataStructure\On_reading\SourceCode\intSLList.cpp	/^bool IntSLList::isInList(int el) const {$/;"	f	class:IntSLList
printAll	DataStructure\On_reading\SourceCode\intSLList.cpp	/^void IntSLList::printAll() const {$/;"	f	class:IntSLList
~IntSLList	DataStructure\On_reading\SourceCode\intSLList.cpp	/^IntSLList::~IntSLList() {$/;"	f	class:IntSLList
INT_LINKED_LIST	DataStructure\On_reading\SourceCode\intSLList.h	5;"	d
IntSLLNode	DataStructure\On_reading\SourceCode\intSLList.h	/^    IntSLLNode() {$/;"	f	class:IntSLLNode
IntSLLNode	DataStructure\On_reading\SourceCode\intSLList.h	/^    IntSLLNode(int el, IntSLLNode *ptr = 0) {$/;"	f	class:IntSLLNode
IntSLLNode	DataStructure\On_reading\SourceCode\intSLList.h	/^class IntSLLNode {$/;"	c
IntSLList	DataStructure\On_reading\SourceCode\intSLList.h	/^    IntSLList() {$/;"	f	class:IntSLList
IntSLList	DataStructure\On_reading\SourceCode\intSLList.h	/^class IntSLList {$/;"	c
head	DataStructure\On_reading\SourceCode\intSLList.h	/^    IntSLLNode *head, *tail;$/;"	m	class:IntSLList
info	DataStructure\On_reading\SourceCode\intSLList.h	/^    int info;$/;"	m	class:IntSLLNode
isEmpty	DataStructure\On_reading\SourceCode\intSLList.h	/^    int isEmpty() {$/;"	f	class:IntSLList
next	DataStructure\On_reading\SourceCode\intSLList.h	/^    IntSLLNode *next;$/;"	m	class:IntSLLNode
tail	DataStructure\On_reading\SourceCode\intSLList.h	/^    IntSLLNode *head, *tail;$/;"	m	class:IntSLList
expression	DataStructure\On_reading\SourceCode\interpreter.cpp	/^double Statement::expression() {$/;"	f	class:Statement
factor	DataStructure\On_reading\SourceCode\interpreter.cpp	/^double Statement::factor() {$/;"	f	class:Statement
findValue	DataStructure\On_reading\SourceCode\interpreter.cpp	/^double Statement::findValue(char *id) {$/;"	f	class:Statement
getStatement	DataStructure\On_reading\SourceCode\interpreter.cpp	/^void Statement::getStatement() {$/;"	f	class:Statement
main	DataStructure\On_reading\SourceCode\interpreter.cpp	/^int main() {$/;"	f
processNode	DataStructure\On_reading\SourceCode\interpreter.cpp	/^void Statement::processNode(char* id , double e) {$/;"	f	class:Statement
readId	DataStructure\On_reading\SourceCode\interpreter.cpp	/^void Statement::readId(char *id) {$/;"	f	class:Statement
term	DataStructure\On_reading\SourceCode\interpreter.cpp	/^double Statement::term() {$/;"	f	class:Statement
INTERPRETER	DataStructure\On_reading\SourceCode\interpreter.h	4;"	d
IdNode	DataStructure\On_reading\SourceCode\interpreter.h	/^    IdNode(char *s = "", double e = 0) {$/;"	f	class:IdNode
IdNode	DataStructure\On_reading\SourceCode\interpreter.h	/^class IdNode {$/;"	c
Statement	DataStructure\On_reading\SourceCode\interpreter.h	/^    Statement() {$/;"	f	class:Statement
Statement	DataStructure\On_reading\SourceCode\interpreter.h	/^class Statement {$/;"	c
ch	DataStructure\On_reading\SourceCode\interpreter.h	/^    char  ch;$/;"	m	class:Statement
id	DataStructure\On_reading\SourceCode\interpreter.h	/^    char *id;$/;"	m	class:IdNode
idList	DataStructure\On_reading\SourceCode\interpreter.h	/^    list<IdNode> idList;$/;"	m	class:Statement
issueError	DataStructure\On_reading\SourceCode\interpreter.h	/^    void issueError(char *s) {$/;"	f	class:Statement
operator <<	DataStructure\On_reading\SourceCode\interpreter.h	/^    friend ostream& operator<< (ostream& out, const IdNode& r) {$/;"	f	class:IdNode
operator <<	DataStructure\On_reading\SourceCode\interpreter.h	/^    friend ostream& operator<< (ostream& out, const Statement& s) {$/;"	f	class:Statement
operator ==	DataStructure\On_reading\SourceCode\interpreter.h	/^    bool operator== (const IdNode& node) const {$/;"	f	class:IdNode
value	DataStructure\On_reading\SourceCode\interpreter.h	/^    double value;$/;"	m	class:IdNode
Author	DataStructure\On_reading\SourceCode\library.cpp	/^    Author() {$/;"	f	class:Author
Author	DataStructure\On_reading\SourceCode\library.cpp	/^class Author {$/;"	c	file:
Book	DataStructure\On_reading\SourceCode\library.cpp	/^    Book() { $/;"	f	class:Book
Book	DataStructure\On_reading\SourceCode\library.cpp	/^class Book {$/;"	c	file:
CheckedOutBook	DataStructure\On_reading\SourceCode\library.cpp	/^    CheckedOutBook(list<Author>::iterator ar = 0, $/;"	f	class:CheckedOutBook
CheckedOutBook	DataStructure\On_reading\SourceCode\library.cpp	/^class CheckedOutBook {$/;"	c	file:
Patron	DataStructure\On_reading\SourceCode\library.cpp	/^    Patron() {$/;"	f	class:Patron
Patron	DataStructure\On_reading\SourceCode\library.cpp	/^class Patron {$/;"	c	file:
author	DataStructure\On_reading\SourceCode\library.cpp	/^    list<Author>::iterator author;$/;"	m	class:CheckedOutBook	file:
book	DataStructure\On_reading\SourceCode\library.cpp	/^    list<Book>::iterator book;$/;"	m	class:CheckedOutBook	file:
books	DataStructure\On_reading\SourceCode\library.cpp	/^    list<Book> books;$/;"	m	class:Author	file:
books	DataStructure\On_reading\SourceCode\library.cpp	/^    list<CheckedOutBook> books;$/;"	m	class:Patron	file:
catalog	DataStructure\On_reading\SourceCode\library.cpp	/^list<Author> catalog['Z'+1];$/;"	v
checkOutBook	DataStructure\On_reading\SourceCode\library.cpp	/^void checkOutBook() {$/;"	f
getString	DataStructure\On_reading\SourceCode\library.cpp	/^char* getString(char *msg) {   $/;"	f
includeBook	DataStructure\On_reading\SourceCode\library.cpp	/^void includeBook() {   $/;"	f
main	DataStructure\On_reading\SourceCode\library.cpp	/^int main() {$/;"	f
menu	DataStructure\On_reading\SourceCode\library.cpp	/^int menu() {$/;"	f
name	DataStructure\On_reading\SourceCode\library.cpp	/^    char *name;$/;"	m	class:Author	file:
name	DataStructure\On_reading\SourceCode\library.cpp	/^    char *name;$/;"	m	class:Patron	file:
operator <<	DataStructure\On_reading\SourceCode\library.cpp	/^    friend ostream& operator<< (ostream& out, const Book& bk) {$/;"	f	class:Book	file:
operator <<	DataStructure\On_reading\SourceCode\library.cpp	/^    friend ostream& operator<< (ostream& out, const Patron& pn) {$/;"	f	class:Patron	file:
operator <<	DataStructure\On_reading\SourceCode\library.cpp	/^    friend ostream& operator<< (ostream& out,const Author& ar) {$/;"	f	class:Author	file:
operator <<	DataStructure\On_reading\SourceCode\library.cpp	/^ostream& operator<< (ostream& out, const list<T>& lst) {$/;"	f
operator ==	DataStructure\On_reading\SourceCode\library.cpp	/^    bool operator== (const Author& ar) const {$/;"	f	class:Author
operator ==	DataStructure\On_reading\SourceCode\library.cpp	/^    bool operator== (const Book& bk) const {$/;"	f	class:Book
operator ==	DataStructure\On_reading\SourceCode\library.cpp	/^    bool operator== (const CheckedOutBook& bk) const {$/;"	f	class:CheckedOutBook
operator ==	DataStructure\On_reading\SourceCode\library.cpp	/^    bool operator== (const Patron& pn) const {$/;"	f	class:Patron
patron	DataStructure\On_reading\SourceCode\library.cpp	/^    Patron *patron;$/;"	m	class:Book	file:
people	DataStructure\On_reading\SourceCode\library.cpp	/^list<Patron> people['Z'+1];$/;"	v
printAuthor	DataStructure\On_reading\SourceCode\library.cpp	/^ostream& Author::printAuthor(ostream& out) const {$/;"	f	class:Author
printBook	DataStructure\On_reading\SourceCode\library.cpp	/^ostream& Book::printBook(ostream& out) const {$/;"	f	class:Book
printPatron	DataStructure\On_reading\SourceCode\library.cpp	/^ostream& Patron::printPatron(ostream& out) const {$/;"	f	class:Patron
returnBook	DataStructure\On_reading\SourceCode\library.cpp	/^void returnBook() {$/;"	f
status	DataStructure\On_reading\SourceCode\library.cpp	/^void status() {   $/;"	f
title	DataStructure\On_reading\SourceCode\library.cpp	/^    char *title;$/;"	m	class:Book	file:
LongestCommonSubstring	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    LongestCommonSubstring(int from, int to) : UkkonenSuffixTree(from,to+2) {$/;"	f	class:LongestCommonSubstring
LongestCommonSubstring	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^class LongestCommonSubstring : public UkkonenSuffixTree {$/;"	c	file:
SuffixTreeNode	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    SuffixTreeNode() {$/;"	f	class:SuffixTreeNode
SuffixTreeNode	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    SuffixTreeNode(int sz) {$/;"	f	class:SuffixTreeNode
SuffixTreeNode	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^class SuffixTreeNode {$/;"	c	file:
T	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    string T;$/;"	m	class:UkkonenSuffixTree	file:
UkkonenSuffixTree	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    UkkonenSuffixTree() {$/;"	f	class:UkkonenSuffixTree
UkkonenSuffixTree	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    UkkonenSuffixTree(int from, int to) {$/;"	f	class:UkkonenSuffixTree
UkkonenSuffixTree	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^class UkkonenSuffixTree {$/;"	c	file:
cnt	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    static int cnt; \/\/ for printing only;$/;"	m	class:SuffixTreeNode	file:
cnt	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^int SuffixTreeNode::cnt;$/;"	m	class:SuffixTreeNode	file:
createTree	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    void createTree(string text) {$/;"	f	class:UkkonenSuffixTree
descendants	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    SuffixTreeNode **descendants;$/;"	m	class:SuffixTreeNode	file:
findCanonicalNode	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    SuffixTreeNode* findCanonicalNode(SuffixTreeNode *p, int Rt, int& Lt) {$/;"	f	class:UkkonenSuffixTree	file:
findLongest	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    void findLongest(string s1, string s2) {$/;"	f	class:LongestCommonSubstring	file:
id	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    int id;         \/\/ for printing only;$/;"	m	class:SuffixTreeNode	file:
left	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    int *left, *right;$/;"	m	class:SuffixTreeNode	file:
length	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    int s1length, position, length;$/;"	m	class:LongestCommonSubstring	file:
main	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^int main(int argc, string argv[]) {$/;"	f
offset	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    int size, offset;$/;"	m	class:UkkonenSuffixTree	file:
position	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    int s1length, position, length;$/;"	m	class:LongestCommonSubstring	file:
printTree	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    void printTree(SuffixTreeNode *p, int lvl, int lt, int rt, int pos) {$/;"	f	class:UkkonenSuffixTree	file:
printTree	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    void printTree(int pos) {$/;"	f	class:UkkonenSuffixTree
right	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    int *left, *right;$/;"	m	class:SuffixTreeNode	file:
root	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    SuffixTreeNode *root;$/;"	m	class:UkkonenSuffixTree	file:
run	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    void run(string s1, string s2) {$/;"	f	class:LongestCommonSubstring
s1length	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    int s1length, position, length;$/;"	m	class:LongestCommonSubstring	file:
size	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    int size, offset;$/;"	m	class:UkkonenSuffixTree	file:
suffixLink	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    SuffixTreeNode *suffixLink;$/;"	m	class:SuffixTreeNode	file:
testAndSplit	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    SuffixTreeNode* testAndSplit(SuffixTreeNode *p, int i, int& Lt, bool& endPoint) {$/;"	f	class:UkkonenSuffixTree	file:
traverseTree	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    void traverseTree(SuffixTreeNode *p, int lt, int len, bool *whichEdges) {$/;"	f	class:LongestCommonSubstring	file:
update	DataStructure\On_reading\SourceCode\longestCommonSubstring.cpp	/^    SuffixTreeNode* update(SuffixTreeNode *p, int i, int& Lt) {$/;"	f	class:UkkonenSuffixTree	file:
Cell	DataStructure\On_reading\SourceCode\maze.cpp	/^    Cell(int i = 0, int j = 0) {$/;"	f	class:Cell
Cell	DataStructure\On_reading\SourceCode\maze.cpp	/^class Cell {$/;"	c	file:
Maze	DataStructure\On_reading\SourceCode\maze.cpp	/^Maze::Maze() : exitMarker('e'), entryMarker('m'), visited('.'),$/;"	f	class:Maze
Maze	DataStructure\On_reading\SourceCode\maze.cpp	/^class Maze {$/;"	c	file:
Stack	DataStructure\On_reading\SourceCode\maze.cpp	/^class Stack : public stack<T> {$/;"	c	file:
cols	DataStructure\On_reading\SourceCode\maze.cpp	/^    int rows, cols;$/;"	m	class:Maze	file:
currentCell	DataStructure\On_reading\SourceCode\maze.cpp	/^    Cell currentCell, exitCell, entryCell;$/;"	m	class:Maze	file:
entryCell	DataStructure\On_reading\SourceCode\maze.cpp	/^    Cell currentCell, exitCell, entryCell;$/;"	m	class:Maze	file:
entryMarker	DataStructure\On_reading\SourceCode\maze.cpp	/^    const char exitMarker, entryMarker, visited, passage, wall;$/;"	m	class:Maze	file:
exitCell	DataStructure\On_reading\SourceCode\maze.cpp	/^    Cell currentCell, exitCell, entryCell;$/;"	m	class:Maze	file:
exitMarker	DataStructure\On_reading\SourceCode\maze.cpp	/^    const char exitMarker, entryMarker, visited, passage, wall;$/;"	m	class:Maze	file:
exitMaze	DataStructure\On_reading\SourceCode\maze.cpp	/^void Maze::exitMaze() {$/;"	f	class:Maze
main	DataStructure\On_reading\SourceCode\maze.cpp	/^int main() {$/;"	f
mazeStack	DataStructure\On_reading\SourceCode\maze.cpp	/^    Stack<Cell> mazeStack;$/;"	m	class:Maze	file:
operator <<	DataStructure\On_reading\SourceCode\maze.cpp	/^    friend ostream& operator<< (ostream& out, const Maze& maze) {$/;"	f	class:Maze	file:
operator ==	DataStructure\On_reading\SourceCode\maze.cpp	/^    bool operator== (const Cell& c) const {$/;"	f	class:Cell
passage	DataStructure\On_reading\SourceCode\maze.cpp	/^    const char exitMarker, entryMarker, visited, passage, wall;$/;"	m	class:Maze	file:
pop	DataStructure\On_reading\SourceCode\maze.cpp	/^    T pop() {$/;"	f	class:Stack
pushUnvisited	DataStructure\On_reading\SourceCode\maze.cpp	/^void Maze::pushUnvisited(int row, int col) {$/;"	f	class:Maze
rows	DataStructure\On_reading\SourceCode\maze.cpp	/^    int rows, cols;$/;"	m	class:Maze	file:
store	DataStructure\On_reading\SourceCode\maze.cpp	/^    char **store;         \/\/ array of strings;$/;"	m	class:Maze	file:
visited	DataStructure\On_reading\SourceCode\maze.cpp	/^    const char exitMarker, entryMarker, visited, passage, wall;$/;"	m	class:Maze	file:
wall	DataStructure\On_reading\SourceCode\maze.cpp	/^    const char exitMarker, entryMarker, visited, passage, wall;$/;"	m	class:Maze	file:
x	DataStructure\On_reading\SourceCode\maze.cpp	/^    int x, y;$/;"	m	class:Cell	file:
y	DataStructure\On_reading\SourceCode\maze.cpp	/^    int x, y;$/;"	m	class:Cell	file:
Personal	DataStructure\On_reading\SourceCode\personal.cpp	/^Personal::Personal() : nameLen(10), cityLen(10) {$/;"	f	class:Personal
Personal	DataStructure\On_reading\SourceCode\personal.cpp	/^Personal::Personal(char *ssn, char *n, char *c, int y, long s) :$/;"	f	class:Personal
readFromConsole	DataStructure\On_reading\SourceCode\personal.cpp	/^istream& Personal::readFromConsole(istream& in) {$/;"	f	class:Personal
readFromFile	DataStructure\On_reading\SourceCode\personal.cpp	/^void Personal::readFromFile(fstream& in) {$/;"	f	class:Personal
readKey	DataStructure\On_reading\SourceCode\personal.cpp	/^void Personal::readKey() {$/;"	f	class:Personal
writeLegibly	DataStructure\On_reading\SourceCode\personal.cpp	/^ostream& Personal::writeLegibly(ostream& out) {$/;"	f	class:Personal
writeToFile	DataStructure\On_reading\SourceCode\personal.cpp	/^void Personal::writeToFile(fstream& out) const {$/;"	f	class:Personal
PERSONAL	DataStructure\On_reading\SourceCode\personal.h	8;"	d
Personal	DataStructure\On_reading\SourceCode\personal.h	/^class Personal {$/;"	c
SSN	DataStructure\On_reading\SourceCode\personal.h	/^    char SSN[10], *name, *city;$/;"	m	class:Personal
city	DataStructure\On_reading\SourceCode\personal.h	/^    char SSN[10], *name, *city;$/;"	m	class:Personal
cityLen	DataStructure\On_reading\SourceCode\personal.h	/^    const int nameLen, cityLen;$/;"	m	class:Personal
name	DataStructure\On_reading\SourceCode\personal.h	/^    char SSN[10], *name, *city;$/;"	m	class:Personal
nameLen	DataStructure\On_reading\SourceCode\personal.h	/^    const int nameLen, cityLen;$/;"	m	class:Personal
operator <<	DataStructure\On_reading\SourceCode\personal.h	/^    friend ostream& operator<<(ostream& out, Personal& pr) {$/;"	f	class:Personal
operator ==	DataStructure\On_reading\SourceCode\personal.h	/^    bool operator==(const Personal& pr) const {$/;"	f	class:Personal
operator >>	DataStructure\On_reading\SourceCode\personal.h	/^    friend istream& operator>>(istream& in, Personal& pr) {$/;"	f	class:Personal
salary	DataStructure\On_reading\SourceCode\personal.h	/^    long salary;$/;"	m	class:Personal
size	DataStructure\On_reading\SourceCode\personal.h	/^    int size() const {$/;"	f	class:Personal
year	DataStructure\On_reading\SourceCode\personal.h	/^    int year;$/;"	m	class:Personal
ChessBoard	DataStructure\On_reading\SourceCode\queens.cpp	/^ChessBoard::ChessBoard() : available(true), squares(8), norm(squares - 1) {$/;"	f	class:ChessBoard
ChessBoard	DataStructure\On_reading\SourceCode\queens.cpp	/^ChessBoard::ChessBoard(int n) : available(true), squares(n), norm(squares - 1) {$/;"	f	class:ChessBoard
ChessBoard	DataStructure\On_reading\SourceCode\queens.cpp	/^class ChessBoard {$/;"	c	file:
available	DataStructure\On_reading\SourceCode\queens.cpp	/^    const bool available;$/;"	m	class:ChessBoard	file:
column	DataStructure\On_reading\SourceCode\queens.cpp	/^    bool *column, *leftDiagonal, *rightDiagonal;$/;"	m	class:ChessBoard	file:
findSolutions	DataStructure\On_reading\SourceCode\queens.cpp	/^void ChessBoard::findSolutions() {$/;"	f	class:ChessBoard
howMany	DataStructure\On_reading\SourceCode\queens.cpp	/^    int  *positionInRow, howMany;$/;"	m	class:ChessBoard	file:
initializeBoard	DataStructure\On_reading\SourceCode\queens.cpp	/^void ChessBoard::initializeBoard() {$/;"	f	class:ChessBoard
leftDiagonal	DataStructure\On_reading\SourceCode\queens.cpp	/^    bool *column, *leftDiagonal, *rightDiagonal;$/;"	m	class:ChessBoard	file:
main	DataStructure\On_reading\SourceCode\queens.cpp	/^int main() {$/;"	f
norm	DataStructure\On_reading\SourceCode\queens.cpp	/^    const int squares, norm;$/;"	m	class:ChessBoard	file:
positionInRow	DataStructure\On_reading\SourceCode\queens.cpp	/^    int  *positionInRow, howMany;$/;"	m	class:ChessBoard	file:
printBoard	DataStructure\On_reading\SourceCode\queens.cpp	/^void ChessBoard::printBoard(ostream& out) {$/;"	f	class:ChessBoard
putQueen	DataStructure\On_reading\SourceCode\queens.cpp	/^void ChessBoard::putQueen(int row) {$/;"	f	class:ChessBoard
rightDiagonal	DataStructure\On_reading\SourceCode\queens.cpp	/^    bool *column, *leftDiagonal, *rightDiagonal;$/;"	m	class:ChessBoard	file:
squares	DataStructure\On_reading\SourceCode\queens.cpp	/^    const int squares, norm;$/;"	m	class:ChessBoard	file:
OnDraw	DataStructure\On_reading\SourceCode\snowflake.h	/^void CSnowflakeView::OnDraw(CDC* pDC)$/;"	f	class:CSnowflakeView
PI	DataStructure\On_reading\SourceCode\snowflake.h	/^double PI = 3.14159;$/;"	v
angle	DataStructure\On_reading\SourceCode\snowflake.h	/^    double side, angle;$/;"	m	class:vonKoch
currPt	DataStructure\On_reading\SourceCode\snowflake.h	/^    CPoint currPt, pt;$/;"	m	class:vonKoch
drawFourLines	DataStructure\On_reading\SourceCode\snowflake.h	/^void vonKoch::drawFourLines(double side, int level) { $/;"	f	class:vonKoch
left	DataStructure\On_reading\SourceCode\snowflake.h	/^    void left (double x) {$/;"	f	class:vonKoch
level	DataStructure\On_reading\SourceCode\snowflake.h	/^    int level;$/;"	m	class:vonKoch
pen	DataStructure\On_reading\SourceCode\snowflake.h	/^    CDC *pen;$/;"	m	class:vonKoch
pt	DataStructure\On_reading\SourceCode\snowflake.h	/^    CPoint currPt, pt;$/;"	m	class:vonKoch
right	DataStructure\On_reading\SourceCode\snowflake.h	/^    void right(double x) {$/;"	f	class:vonKoch
side	DataStructure\On_reading\SourceCode\snowflake.h	/^    double side, angle;$/;"	m	class:vonKoch
snowflake	DataStructure\On_reading\SourceCode\snowflake.h	/^void vonKoch::snowflake() {$/;"	f	class:vonKoch
vonKoch	DataStructure\On_reading\SourceCode\snowflake.h	/^class vonKoch {$/;"	c
vonKoch	DataStructure\On_reading\SourceCode\snowflake.h	/^vonKoch::vonKoch(int s, int lvl, CDC *pDC) {$/;"	f	class:vonKoch
Queue	DataStructure\On_reading\SourceCode\sorts.h	/^class Queue : public queue<T> {$/;"	c
RadixSortNode	DataStructure\On_reading\SourceCode\sorts.h	/^class RadixSortNode {$/;"	c
RadixsortNode	DataStructure\On_reading\SourceCode\sorts.h	/^    RadixsortNode() {$/;"	f	class:RadixsortNode
RadixsortNode	DataStructure\On_reading\SourceCode\sorts.h	/^    RadixsortNode(int n) {$/;"	f	class:RadixsortNode
RadixsortNode	DataStructure\On_reading\SourceCode\sorts.h	/^    RadixsortNode(long *a, int n) {$/;"	f	class:RadixsortNode
RadixsortNode	DataStructure\On_reading\SourceCode\sorts.h	/^class RadixsortNode {$/;"	c
Shellsort	DataStructure\On_reading\SourceCode\sorts.h	/^void Shellsort(T data[], const int n) {$/;"	f
arr	DataStructure\On_reading\SourceCode\sorts.h	/^    T *arr;$/;"	m	class:RadixSortNode
arr	DataStructure\On_reading\SourceCode\sorts.h	/^    long *arr;$/;"	m	class:RadixsortNode
bitRadixsort	DataStructure\On_reading\SourceCode\sorts.h	/^void bitRadixsort(long data[], const int n, int b) {$/;"	f
bitRadixsort2	DataStructure\On_reading\SourceCode\sorts.h	/^void bitRadixsort2(long data[], const int n, int b) {$/;"	f
bits	DataStructure\On_reading\SourceCode\sorts.h	/^const int bits = 31;$/;"	v
bubblesort	DataStructure\On_reading\SourceCode\sorts.h	/^void bubblesort(T data[], const int n) {$/;"	f
clear	DataStructure\On_reading\SourceCode\sorts.h	/^void inline clear(long& q) {$/;"	f
combsort	DataStructure\On_reading\SourceCode\sorts.h	/^void combsort(T data[], const int n) {$/;"	f
countingsort	DataStructure\On_reading\SourceCode\sorts.h	/^void countingsort(long data[], const long n) {$/;"	f
dequeue	DataStructure\On_reading\SourceCode\sorts.h	/^    T dequeue() {$/;"	f	class:Queue
digits	DataStructure\On_reading\SourceCode\sorts.h	/^const int digits = 10;$/;"	v
enqueue	DataStructure\On_reading\SourceCode\sorts.h	/^    void enqueue(const T& el) {$/;"	f	class:Queue
heapsort	DataStructure\On_reading\SourceCode\sorts.h	/^void heapsort(T data[], const int n) {$/;"	f
insertionsort	DataStructure\On_reading\SourceCode\sorts.h	/^void insertionsort(T data[], const int n) {$/;"	f
insertionsort	DataStructure\On_reading\SourceCode\sorts.h	/^void insertionsort(T data[], int first, int last) {$/;"	f
isEmpty	DataStructure\On_reading\SourceCode\sorts.h	/^int inline isEmpty(long q) {$/;"	f
merge	DataStructure\On_reading\SourceCode\sorts.h	/^void merge(T array1[], T temp[], int first, int last) {$/;"	f
mergesort	DataStructure\On_reading\SourceCode\sorts.h	/^void mergesort(T data[], T temp[], int first, int last) {$/;"	f
mergesort	DataStructure\On_reading\SourceCode\sorts.h	/^void mergesort(T data[], const int n) {$/;"	f
moveDown	DataStructure\On_reading\SourceCode\sorts.h	/^void moveDown (T data[], int first, int last) {$/;"	f
next	DataStructure\On_reading\SourceCode\sorts.h	/^    RadixSortNode *next;$/;"	m	class:RadixSortNode
next	DataStructure\On_reading\SourceCode\sorts.h	/^    RadixsortNode *next;$/;"	m	class:RadixsortNode
quicksort	DataStructure\On_reading\SourceCode\sorts.h	/^void quicksort(T data[], const int n) {$/;"	f
quicksort	DataStructure\On_reading\SourceCode\sorts.h	/^void quicksort(T data[], int first, int last) {$/;"	f
quicksort2	DataStructure\On_reading\SourceCode\sorts.h	/^void quicksort2(T data[], const int n) {$/;"	f
quicksort2	DataStructure\On_reading\SourceCode\sorts.h	/^void quicksort2(T data[], int first, int last) {$/;"	f
radix	DataStructure\On_reading\SourceCode\sorts.h	/^const int radix = 10;$/;"	v
radixsort	DataStructure\On_reading\SourceCode\sorts.h	/^void radixsort(T data[], const int n) {$/;"	f
radixsort2	DataStructure\On_reading\SourceCode\sorts.h	/^void radixsort2(long data[], const int n) {$/;"	f
selectionsort	DataStructure\On_reading\SourceCode\sorts.h	/^void selectionsort(T data[], const int n) {$/;"	f
main	DataStructure\On_reading\SourceCode\spellCheck.cpp	/^int main(int argc, char* argv[])  {$/;"	f
strupr	DataStructure\On_reading\SourceCode\spellCheck.cpp	/^char* strupr(char *s) {$/;"	f
Word	DataStructure\On_reading\SourceCode\splay.cpp	/^    Word() {$/;"	f	class:Word
Word	DataStructure\On_reading\SourceCode\splay.cpp	/^class Word {$/;"	c	file:
WordSplay	DataStructure\On_reading\SourceCode\splay.cpp	/^    WordSplay() {$/;"	f	class:WordSplay
WordSplay	DataStructure\On_reading\SourceCode\splay.cpp	/^class WordSplay : public SplayTree<Word> {$/;"	c	file:
differentWords	DataStructure\On_reading\SourceCode\splay.cpp	/^    int differentWords, \/\/ counter of different words in a text file;$/;"	m	class:WordSplay	file:
freq	DataStructure\On_reading\SourceCode\splay.cpp	/^    int freq;$/;"	m	class:Word	file:
main	DataStructure\On_reading\SourceCode\splay.cpp	/^int main(int argc, char* argv[]) {$/;"	f
operator <	DataStructure\On_reading\SourceCode\splay.cpp	/^    int operator< (const Word& ir) const {$/;"	f	class:Word
operator ==	DataStructure\On_reading\SourceCode\splay.cpp	/^    int operator== (const Word& ir) const {$/;"	f	class:Word
run	DataStructure\On_reading\SourceCode\splay.cpp	/^void WordSplay::run(ifstream& fIn, char *fileName) {$/;"	f	class:WordSplay
visit	DataStructure\On_reading\SourceCode\splay.cpp	/^void WordSplay::visit(SplayingNode<Word> *p) {$/;"	f	class:WordSplay
word	DataStructure\On_reading\SourceCode\splay.cpp	/^    char *word;$/;"	m	class:Word	file:
wordCnt	DataStructure\On_reading\SourceCode\splay.cpp	/^        wordCnt;        \/\/ counter of all words in the same file;$/;"	m	class:WordSplay	file:
Student	DataStructure\On_reading\SourceCode\student.cpp	/^Student::Student() : majorLen(10) {$/;"	f	class:Student
Student	DataStructure\On_reading\SourceCode\student.cpp	/^Student::Student(char *ssn, char *n, char *c, int y, long s, char *m) :$/;"	f	class:Student
readFromConsole	DataStructure\On_reading\SourceCode\student.cpp	/^istream& Student::readFromConsole(istream& in) {$/;"	f	class:Student
readFromFile	DataStructure\On_reading\SourceCode\student.cpp	/^void Student::readFromFile(fstream& in) {$/;"	f	class:Student
writeLegibly	DataStructure\On_reading\SourceCode\student.cpp	/^ostream& Student::writeLegibly(ostream& out) {$/;"	f	class:Student
writeToFile	DataStructure\On_reading\SourceCode\student.cpp	/^void Student::writeToFile(fstream& out) const {$/;"	f	class:Student
STUDENT	DataStructure\On_reading\SourceCode\student.h	2;"	d
Student	DataStructure\On_reading\SourceCode\student.h	/^class Student : public Personal {$/;"	c
major	DataStructure\On_reading\SourceCode\student.h	/^    char *major;$/;"	m	class:Student
majorLen	DataStructure\On_reading\SourceCode\student.h	/^    const int majorLen;$/;"	m	class:Student
operator <<	DataStructure\On_reading\SourceCode\student.h	/^    friend ostream& operator<<(ostream& out, Student& sr) {$/;"	f	class:Student
operator >>	DataStructure\On_reading\SourceCode\student.h	/^    friend istream& operator>>(istream& in, Student& sr) {$/;"	f	class:Student
size	DataStructure\On_reading\SourceCode\student.h	/^    int size() const {$/;"	f	class:Student
main	DataStructure\On_reading\SourceCode\testttt.cpp	/^int main() {$/;"	f
Trie	DataStructure\On_reading\SourceCode\trie.cpp	/^Trie::Trie(char* word) : notFound(-1) {$/;"	f	class:Trie
TrieLeafNode	DataStructure\On_reading\SourceCode\trie.cpp	/^TrieLeafNode::TrieLeafNode(char *suffix) {$/;"	f	class:TrieLeafNode
TrieNonLeafNode	DataStructure\On_reading\SourceCode\trie.cpp	/^TrieNonLeafNode::TrieNonLeafNode(char ch) {$/;"	f	class:TrieNonLeafNode
addCell	DataStructure\On_reading\SourceCode\trie.cpp	/^void Trie::addCell(char ch, TrieNonLeafNode *p, int stop) {$/;"	f	class:Trie
createLeaf	DataStructure\On_reading\SourceCode\trie.cpp	/^void Trie::createLeaf(char ch, char *suffix, TrieNonLeafNode *p) {$/;"	f	class:Trie
insert	DataStructure\On_reading\SourceCode\trie.cpp	/^void Trie::insert(char *word) {$/;"	f	class:Trie
position	DataStructure\On_reading\SourceCode\trie.cpp	/^int Trie::position(TrieNonLeafNode *p, char ch) {$/;"	f	class:Trie
printTrie	DataStructure\On_reading\SourceCode\trie.cpp	/^void Trie::printTrie(int depth, TrieNonLeafNode *p, char *prefix) {$/;"	f	class:Trie
wordFound	DataStructure\On_reading\SourceCode\trie.cpp	/^bool Trie::wordFound(char *word) {$/;"	f	class:Trie
Trie	DataStructure\On_reading\SourceCode\trie.h	/^    Trie() : notFound(-1) {$/;"	f	class:Trie
Trie	DataStructure\On_reading\SourceCode\trie.h	/^class Trie {$/;"	c
TrieLeafNode	DataStructure\On_reading\SourceCode\trie.h	/^    TrieLeafNode() {$/;"	f	class:TrieLeafNode
TrieLeafNode	DataStructure\On_reading\SourceCode\trie.h	/^class TrieLeafNode {$/;"	c
TrieNonLeafNode	DataStructure\On_reading\SourceCode\trie.h	/^    TrieNonLeafNode() {$/;"	f	class:TrieNonLeafNode
TrieNonLeafNode	DataStructure\On_reading\SourceCode\trie.h	/^class TrieNonLeafNode {$/;"	c
endOfWord	DataStructure\On_reading\SourceCode\trie.h	/^    bool leaf, endOfWord;$/;"	m	class:TrieNonLeafNode
leaf	DataStructure\On_reading\SourceCode\trie.h	/^    bool leaf, endOfWord;$/;"	m	class:TrieNonLeafNode
leaf	DataStructure\On_reading\SourceCode\trie.h	/^    bool leaf;$/;"	m	class:TrieLeafNode
letters	DataStructure\On_reading\SourceCode\trie.h	/^    char *letters;$/;"	m	class:TrieNonLeafNode
notFound	DataStructure\On_reading\SourceCode\trie.h	/^    const int notFound;$/;"	m	class:Trie
prefix	DataStructure\On_reading\SourceCode\trie.h	/^    char prefix[80];$/;"	m	class:Trie
printTrie	DataStructure\On_reading\SourceCode\trie.h	/^    void printTrie() {$/;"	f	class:Trie
ptrs	DataStructure\On_reading\SourceCode\trie.h	/^    TrieNonLeafNode **ptrs;$/;"	m	class:TrieNonLeafNode
root	DataStructure\On_reading\SourceCode\trie.h	/^    TrieNonLeafNode *root;$/;"	m	class:Trie
word	DataStructure\On_reading\SourceCode\trie.h	/^    char *word;$/;"	m	class:TrieLeafNode
main	DataStructure\On_reading\SourceCode\useInterpreter.cpp	/^int main() {$/;"	f
_USE_MATH_DEFINES	DataStructure\On_reading\SourceCode\vonKoch.h	5;"	d
angle	DataStructure\On_reading\SourceCode\vonKoch.h	/^    double side, angle;$/;"	m	class:vonKoch
currPt	DataStructure\On_reading\SourceCode\vonKoch.h	/^    CPoint currPt, pt;$/;"	m	class:vonKoch
drawFourLines	DataStructure\On_reading\SourceCode\vonKoch.h	/^void vonKoch::drawFourLines(double side, int level) { $/;"	f	class:vonKoch
left	DataStructure\On_reading\SourceCode\vonKoch.h	/^    void left (double x) {$/;"	f	class:vonKoch
level	DataStructure\On_reading\SourceCode\vonKoch.h	/^    int level;$/;"	m	class:vonKoch
pen	DataStructure\On_reading\SourceCode\vonKoch.h	/^    CDC *pen;$/;"	m	class:vonKoch
pt	DataStructure\On_reading\SourceCode\vonKoch.h	/^    CPoint currPt, pt;$/;"	m	class:vonKoch
right	DataStructure\On_reading\SourceCode\vonKoch.h	/^    void right(double x) {$/;"	f	class:vonKoch
side	DataStructure\On_reading\SourceCode\vonKoch.h	/^    double side, angle;$/;"	m	class:vonKoch
snowflake	DataStructure\On_reading\SourceCode\vonKoch.h	/^void vonKoch::snowflake() {$/;"	f	class:vonKoch
vonKoch	DataStructure\On_reading\SourceCode\vonKoch.h	/^class vonKoch {$/;"	c
vonKoch	DataStructure\On_reading\SourceCode\vonKoch.h	/^vonKoch::vonKoch(int s, int lvl, CDC *pDC) {$/;"	f	class:vonKoch
initialize	DataStructure\PAT\ch0\Shuffling_Machine.cpp	/^void initialize(vector<string>& cards) {$/;"	f
main	DataStructure\PAT\ch0\Shuffling_Machine.cpp	/^int main() {$/;"	f
shuffle	DataStructure\PAT\ch0\Shuffling_Machine.cpp	/^void shuffle(vector<string>& cards, const vector<int>& transform) {$/;"	f
count	DataStructure\PAT\ch0\double_number_permutation.cpp	/^void count(const string& number, std::vector<int> &digit ) {$/;"	f
main	DataStructure\PAT\ch0\double_number_permutation.cpp	/^int main() {$/;"	f
multipy2	DataStructure\PAT\ch0\double_number_permutation.cpp	/^string multipy2(const string& original\/*, string& doubled*\/, int &carry) {$/;"	f
main	DataStructure\PAT\ch0\moveArrayElementsToRight.cpp	/^int main() {$/;"	f
hourglass	DataStructure\PAT\ch0\print_hourglass.cpp	/^int hourglass(int n) {$/;"	f
main	DataStructure\PAT\ch0\print_hourglass.cpp	/^int main() {$/;"	f
print_hourglass	DataStructure\PAT\ch0\print_hourglass.cpp	/^void print_hourglass(int lines, char symbol) {$/;"	f
remain	DataStructure\PAT\ch0\print_hourglass.cpp	/^int remain(int n) {$/;"	f
main	DataStructure\PAT\ch0\string_test.cpp	/^int main() {$/;"	f
isprime	DataStructure\PAT\ch0\twin_primes.cpp	/^bool isprime(int n, const vector<int>& prime) {$/;"	f
main	DataStructure\PAT\ch0\twin_primes.cpp	/^int main() {$/;"	f
find_max_mid	DataStructure\PAT\ch1_linear_structure\MaxSumOfSubsequence.cpp	/^int find_max_mid(int lhs, int rhs, int mid, const std::vector<int>& sequence) {$/;"	f
findmax_DAC_version	DataStructure\PAT\ch1_linear_structure\MaxSumOfSubsequence.cpp	/^int findmax_DAC_version(int lhs, int rhs, const vector<int>& sequence) {$/;"	f
findmax_N_version	DataStructure\PAT\ch1_linear_structure\MaxSumOfSubsequence.cpp	/^int findmax_N_version(int lhs, int rhs, const vector<int>& sequence) {$/;"	f
findmax_loop_version	DataStructure\PAT\ch1_linear_structure\MaxSumOfSubsequence.cpp	/^int findmax_loop_version(int n, const vector<int>& sequence) {$/;"	f
main	DataStructure\PAT\ch1_linear_structure\MaxSumOfSubsequence.cpp	/^int main() {$/;"	f
max	DataStructure\PAT\ch1_linear_structure\MaxSumOfSubsequence.cpp	/^int max(int a, int b) {$/;"	f
max	DataStructure\PAT\ch1_linear_structure\MaxSumOfSubsequence.cpp	/^int max(int l, int r, int m) {$/;"	f
find_max_mid	DataStructure\PAT\ch1_linear_structure\Maximum_Subsequence_Sum.cpp	/^int find_max_mid(int lhs, int rhs, int mid, const std::vector<int>& sequence) {$/;"	f
findmax_DAC_version	DataStructure\PAT\ch1_linear_structure\Maximum_Subsequence_Sum.cpp	/^int findmax_DAC_version(int lhs, int rhs, const vector<int>& sequence) {$/;"	f
findmax_N_version	DataStructure\PAT\ch1_linear_structure\Maximum_Subsequence_Sum.cpp	/^int findmax_N_version(int lhs, int rhs, const vector<int>& sequence, int &max_start, int &max_end) {$/;"	f
findmax_loop_version	DataStructure\PAT\ch1_linear_structure\Maximum_Subsequence_Sum.cpp	/^int findmax_loop_version(int n, const vector<int>& sequence, int &max_start, int &max_end) {$/;"	f
main	DataStructure\PAT\ch1_linear_structure\Maximum_Subsequence_Sum.cpp	/^int main() {$/;"	f
max	DataStructure\PAT\ch1_linear_structure\Maximum_Subsequence_Sum.cpp	/^int max(int a, int b) {$/;"	f
max	DataStructure\PAT\ch1_linear_structure\Maximum_Subsequence_Sum.cpp	/^int max(int l, int r, int m) {$/;"	f
PrintN	DataStructure\PAT\ch1_linear_structure\PrintN.cpp	/^void PrintN(int n) {$/;"	f
main	DataStructure\PAT\ch1_linear_structure\PrintN.cpp	/^int main() {$/;"	f
fun_one	DataStructure\PAT\ch1_linear_structure\temp.cpp	/^void fun_one(double x) {$/;"	f
fun_two	DataStructure\PAT\ch1_linear_structure\temp.cpp	/^void fun_two(double x) {$/;"	f
main	DataStructure\PAT\ch1_linear_structure\temp.cpp	/^int main() {$/;"	f
max	DataStructure\PAT\ch1_linear_structure\temp.cpp	/^const int max = 100;\/\/累加的值$/;"	v
result	DataStructure\PAT\ch1_linear_structure\temp.cpp	/^double result;$/;"	v
time_cost	DataStructure\PAT\ch1_linear_structure\temp.cpp	/^void time_cost(void (*fun)(double), double a, int times) {$/;"	f
times	DataStructure\PAT\ch1_linear_structure\temp.cpp	/^const int times = 1000000;\/\/执行次数$/;"	v
Node	DataStructure\PAT\ch2_stacks_queues\Reversing_Linked_List.cpp	/^struct Node {$/;"	s	file:
address	DataStructure\PAT\ch2_stacks_queues\Reversing_Linked_List.cpp	/^	int address;$/;"	m	struct:Node	file:
data	DataStructure\PAT\ch2_stacks_queues\Reversing_Linked_List.cpp	/^	int data;$/;"	m	struct:Node	file:
main	DataStructure\PAT\ch2_stacks_queues\Reversing_Linked_List.cpp	/^int main() {$/;"	f
next	DataStructure\PAT\ch2_stacks_queues\Reversing_Linked_List.cpp	/^	int next;$/;"	m	struct:Node	file:
swap	DataStructure\PAT\ch2_stacks_queues\Reversing_Linked_List.cpp	/^void swap(Node& node1, Node& node2) {$/;"	f
add	DataStructure\PAT\ch2_stacks_queues\polynomial_add_and_multipy.cpp	/^void add(std::list<polynomial>& poly_1, std::list<polynomial>& poly_2, std::list<polynomial>& sum) {$/;"	f
cofficient	DataStructure\PAT\ch2_stacks_queues\polynomial_add_and_multipy.cpp	/^	int cofficient;$/;"	m	struct:polynomial	file:
exponent	DataStructure\PAT\ch2_stacks_queues\polynomial_add_and_multipy.cpp	/^	int exponent;$/;"	m	struct:polynomial	file:
main	DataStructure\PAT\ch2_stacks_queues\polynomial_add_and_multipy.cpp	/^int main() {$/;"	f
multipy	DataStructure\PAT\ch2_stacks_queues\polynomial_add_and_multipy.cpp	/^void multipy(std::list<polynomial>& poly_1, std::list<polynomial>& poly_2, std::list<polynomial>& product) {$/;"	f
polynomial	DataStructure\PAT\ch2_stacks_queues\polynomial_add_and_multipy.cpp	/^struct polynomial$/;"	s	file:
Monomial	DataStructure\PAT\ch2_stacks_queues\polynomial_derivative.cpp	/^class Monomial {$/;"	c	file:
coefficient	DataStructure\PAT\ch2_stacks_queues\polynomial_derivative.cpp	/^	int coefficient;$/;"	m	class:Monomial	file:
exponent	DataStructure\PAT\ch2_stacks_queues\polynomial_derivative.cpp	/^	int exponent;$/;"	m	class:Monomial	file:
main	DataStructure\PAT\ch2_stacks_queues\polynomial_derivative.cpp	/^int main() {$/;"	f
check	DataStructure\PAT\ch2_stacks_queues\pop_sequence.cpp	/^bool check(vector<int>& tocheck, stack<int> Stack, int capacity) {$/;"	f
main	DataStructure\PAT\ch2_stacks_queues\pop_sequence.cpp	/^int main() {$/;"	f
check	DataStructure\PAT\ch2_stacks_queues\pop_sequence_ver2.cpp	/^bool check(vector<int>& tocheck, int stack_capacity) {$/;"	f
main	DataStructure\PAT\ch2_stacks_queues\pop_sequence_ver2.cpp	/^int main() {$/;"	f
OP	DataStructure\PAT\ch2_stacks_queues\prefix_expressions.cpp	/^union OP {$/;"	u	file:
Stack	DataStructure\PAT\ch2_stacks_queues\prefix_expressions.cpp	/^	Stack() {$/;"	f	class:Stack
Stack	DataStructure\PAT\ch2_stacks_queues\prefix_expressions.cpp	/^class Stack {$/;"	c	file:
capacity	DataStructure\PAT\ch2_stacks_queues\prefix_expressions.cpp	/^	int capacity = 30;$/;"	m	class:Stack	file:
get_size	DataStructure\PAT\ch2_stacks_queues\prefix_expressions.cpp	/^	int get_size() {$/;"	f	class:Stack
get_top	DataStructure\PAT\ch2_stacks_queues\prefix_expressions.cpp	/^	OP get_top() {$/;"	f	class:Stack
is_empty	DataStructure\PAT\ch2_stacks_queues\prefix_expressions.cpp	/^	bool is_empty() {$/;"	f	class:Stack
main	DataStructure\PAT\ch2_stacks_queues\prefix_expressions.cpp	/^int main() {$/;"	f
number	DataStructure\PAT\ch2_stacks_queues\prefix_expressions.cpp	/^	double number;$/;"	m	union:OP	file:
otor	DataStructure\PAT\ch2_stacks_queues\prefix_expressions.cpp	/^	char otor;$/;"	m	union:OP	file:
pool	DataStructure\PAT\ch2_stacks_queues\prefix_expressions.cpp	/^	std::vector<OP> pool ;$/;"	m	class:Stack	file:
pop	DataStructure\PAT\ch2_stacks_queues\prefix_expressions.cpp	/^	OP pop() {$/;"	f	class:Stack
push	DataStructure\PAT\ch2_stacks_queues\prefix_expressions.cpp	/^	void push(OP ch) {$/;"	f	class:Stack
is_digit	DataStructure\PAT\ch2_stacks_queues\prefix_expressions_ver2.cpp	/^bool is_digit(char ch) {$/;"	f
main	DataStructure\PAT\ch2_stacks_queues\prefix_expressions_ver2.cpp	/^int main() {$/;"	f
main	DataStructure\PAT\ch2_stacks_queues\test.cpp	/^int main() {$/;"	f
AVL_Tree_Node	DataStructure\PAT\ch3_trees\AVL_tree.cpp	/^struct AVL_Tree_Node$/;"	s	file:
LLRotate	DataStructure\PAT\ch3_trees\AVL_tree.cpp	/^void LLRotate(AVL_Tree_Node* &root) {$/;"	f
LRRotate	DataStructure\PAT\ch3_trees\AVL_tree.cpp	/^void LRRotate(AVL_Tree_Node* &root) {$/;"	f
RLRotate	DataStructure\PAT\ch3_trees\AVL_tree.cpp	/^void RLRotate(AVL_Tree_Node* &root) {$/;"	f
RRRotate	DataStructure\PAT\ch3_trees\AVL_tree.cpp	/^void RRRotate(AVL_Tree_Node* &root) {$/;"	f
data	DataStructure\PAT\ch3_trees\AVL_tree.cpp	/^	int data;$/;"	m	struct:AVL_Tree_Node	file:
getHeight	DataStructure\PAT\ch3_trees\AVL_tree.cpp	/^int getHeight(AVL_Tree_Node* root) {$/;"	f
insert	DataStructure\PAT\ch3_trees\AVL_tree.cpp	/^void insert(AVL_Tree_Node* &root, int data) {$/;"	f
left	DataStructure\PAT\ch3_trees\AVL_tree.cpp	/^	AVL_Tree_Node* left;$/;"	m	struct:AVL_Tree_Node	file:
main	DataStructure\PAT\ch3_trees\AVL_tree.cpp	/^int main() {$/;"	f
preorder	DataStructure\PAT\ch3_trees\AVL_tree.cpp	/^void preorder(AVL_Tree_Node* root) {$/;"	f
right	DataStructure\PAT\ch3_trees\AVL_tree.cpp	/^	AVL_Tree_Node* right;$/;"	m	struct:AVL_Tree_Node	file:
CbstNode	DataStructure\PAT\ch3_trees\Complete_Binary_Search_Tree.cpp	/^struct CbstNode$/;"	s	file:
counter	DataStructure\PAT\ch3_trees\Complete_Binary_Search_Tree.cpp	/^static int counter;$/;"	v	file:
creatCompleteBST	DataStructure\PAT\ch3_trees\Complete_Binary_Search_Tree.cpp	/^void creatCompleteBST(CbstNode* &root, vector<int>& bst, int left, int right) {$/;"	f
data	DataStructure\PAT\ch3_trees\Complete_Binary_Search_Tree.cpp	/^	int data;$/;"	m	struct:CbstNode	file:
left	DataStructure\PAT\ch3_trees\Complete_Binary_Search_Tree.cpp	/^	CbstNode* left;$/;"	m	struct:CbstNode	file:
level_order	DataStructure\PAT\ch3_trees\Complete_Binary_Search_Tree.cpp	/^void level_order(CbstNode* root) {$/;"	f
main	DataStructure\PAT\ch3_trees\Complete_Binary_Search_Tree.cpp	/^int main() {$/;"	f
preorder	DataStructure\PAT\ch3_trees\Complete_Binary_Search_Tree.cpp	/^void preorder(CbstNode* root) {$/;"	f
right	DataStructure\PAT\ch3_trees\Complete_Binary_Search_Tree.cpp	/^	CbstNode* right;$/;"	m	struct:CbstNode	file:
check	DataStructure\PAT\ch3_trees\File_Transfer.cpp	/^void check(vector<vector<int>> &components, int &index) {$/;"	f
find_in_vector	DataStructure\PAT\ch3_trees\File_Transfer.cpp	/^bool find_in_vector(vector<int>::iterator first, vector<int>::iterator last, int data) {$/;"	f
input	DataStructure\PAT\ch3_trees\File_Transfer.cpp	/^void input(vector<vector<int>> &components, int &index, int &counter) {$/;"	f
main	DataStructure\PAT\ch3_trees\File_Transfer.cpp	/^int main() {$/;"	f
stop	DataStructure\PAT\ch3_trees\File_Transfer.cpp	/^void stop(int index, int counter, int total_pc) {$/;"	f
Capacity	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^    int Capacity;    \/\/堆得最大容量$/;"	m	struct:HeapStruct	file:
CreateEmptyMinHeap	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^pMinHeap CreateEmptyMinHeap( int MaxSize )$/;"	f
CreateMinHeap	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^pMinHeap CreateMinHeap( int weight[], int len )$/;"	f
DeleteMinHeap	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^pHuffmanTree DeleteMinHeap( pMinHeap minH)$/;"	f
Elememts	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^    pHuffmanTree Elememts;    \/\/存储堆元素的数组$/;"	m	struct:HeapStruct	file:
GetHuffmanRootWeight	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^pHuffmanTree GetHuffmanRootWeight( pMinHeap minH)$/;"	f
GetWPLValue	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^void GetWPLValue( pHuffmanTree pHT, int layer, int *wpl)$/;"	f
HeapStruct	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^typedef struct HeapStruct {$/;"	s	file:
HuffmanTreeNode	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^typedef struct HuffmanTreeNode {$/;"	s	file:
InsertMinHeap	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^void InsertMinHeap( pMinHeap minH, nHuffmanTree nHT )$/;"	f
MaxInputSize	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	9;"	d	file:
MinData	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	8;"	d	file:
PAIR	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^typedef pair<char, string> PAIR;$/;"	t	file:
Size	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^    int Size;    \/\/堆当前元素个数$/;"	m	struct:HeapStruct	file:
cmp	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^int cmp( const PAIR &x, const PAIR &y )$/;"	f
leftweight	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^    HuffmanTreeNode* leftweight;$/;"	m	struct:HuffmanTreeNode	file:
main	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^int main()$/;"	f
nHuffmanTree	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^}*pHuffmanTree, nHuffmanTree;$/;"	t	typeref:struct:HuffmanTreeNode	file:
nMinHeap	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^}*pMinHeap, nMinHeap;$/;"	t	typeref:struct:HeapStruct	file:
pHuffmanTree	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^}*pHuffmanTree, nHuffmanTree;$/;"	t	typeref:struct:HuffmanTreeNode	file:
pMinHeap	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^}*pMinHeap, nMinHeap;$/;"	t	typeref:struct:HeapStruct	file:
rightweight	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^    HuffmanTreeNode* rightweight;$/;"	m	struct:HuffmanTreeNode	file:
weight	DataStructure\PAT\ch3_trees\Huffman_Codes--other--pepple.cpp	/^    int weight;$/;"	m	struct:HuffmanTreeNode	file:
BuildHuffmanTree	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^HuffmanTree BuildHuffmanTree(vector<HuffmanTree>& H) {$/;"	f
BuildMinHeap	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^void BuildMinHeap(vector<HuffmanTree>& H) {$/;"	f
DeleteMin	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^HuffmanTree DeleteMin(vector<HuffmanTree>& H) {$/;"	f
Insert	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^void Insert(vector<HuffmanTree>& H, HuffmanTree &node) {$/;"	f
TreeNode	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^struct TreeNode$/;"	s	file:
character	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^	string character;$/;"	m	struct:TreeNode	file:
check	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^bool check(vector<entry>& record, int WPL, std::map<char, int>& char_freq) {$/;"	f
check_prefix	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^bool check_prefix(vector<entry>& record) {$/;"	f
clear_text	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^	char clear_text;$/;"	m	struct:entry	file:
code	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^	string code;$/;"	m	struct:entry	file:
compute_WPL	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^int compute_WPL(HuffmanTree root, int depth) {$/;"	f
entry	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^struct entry\/\/学生的答案中的一个条目$/;"	s	file:
left	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^	HuffmanTree left, right;$/;"	m	struct:TreeNode	file:
main	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^int main() {$/;"	f
moveDown	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^void moveDown(vector<HuffmanTree>& H, int first, int last) {$/;"	f
prefix	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^bool prefix(string& shorter, string& longer) {$/;"	f
right	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^	HuffmanTree left, right;$/;"	m	struct:TreeNode	file:
sort_entry	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^void sort_entry(vector<entry>& record) {$/;"	f
weight	DataStructure\PAT\ch3_trees\Huffman_Codes.cpp	/^	int weight;$/;"	m	struct:TreeNode	file:
BinTreeNode	DataStructure\PAT\ch3_trees\Tree_Traversals_Again.cpp	/^	BinTreeNode(): data(0), visited(false), left(0), right(0), parent(0)  {}$/;"	f	struct:BinTreeNode
BinTreeNode	DataStructure\PAT\ch3_trees\Tree_Traversals_Again.cpp	/^struct BinTreeNode$/;"	s	file:
count	DataStructure\PAT\ch3_trees\Tree_Traversals_Again.cpp	/^static int count ;$/;"	v	file:
data	DataStructure\PAT\ch3_trees\Tree_Traversals_Again.cpp	/^	int data;$/;"	m	struct:BinTreeNode	file:
left	DataStructure\PAT\ch3_trees\Tree_Traversals_Again.cpp	/^	BinTreeNode *left, *right, *parent ;$/;"	m	struct:BinTreeNode	file:
main	DataStructure\PAT\ch3_trees\Tree_Traversals_Again.cpp	/^int main() {$/;"	f
parent	DataStructure\PAT\ch3_trees\Tree_Traversals_Again.cpp	/^	BinTreeNode *left, *right, *parent ;$/;"	m	struct:BinTreeNode	file:
postorder_travesal	DataStructure\PAT\ch3_trees\Tree_Traversals_Again.cpp	/^void postorder_travesal(BinTreeNode* root) {$/;"	f
right	DataStructure\PAT\ch3_trees\Tree_Traversals_Again.cpp	/^	BinTreeNode *left, *right, *parent ;$/;"	m	struct:BinTreeNode	file:
visited	DataStructure\PAT\ch3_trees\Tree_Traversals_Again.cpp	/^	bool visited ;$/;"	m	struct:BinTreeNode	file:
BinTree	DataStructure\PAT\ch3_trees\check_bst_identity.cpp	/^typedef BinTreeNode* BinTree;$/;"	t	file:
BinTreeNode	DataStructure\PAT\ch3_trees\check_bst_identity.cpp	/^struct BinTreeNode$/;"	s	file:
check_bst_identity	DataStructure\PAT\ch3_trees\check_bst_identity.cpp	/^bool check_bst_identity(BinTree& original, BinTree& test) {$/;"	f
creatBinTree	DataStructure\PAT\ch3_trees\check_bst_identity.cpp	/^void creatBinTree(BinTree& root, int node_numbers) {$/;"	f
data	DataStructure\PAT\ch3_trees\check_bst_identity.cpp	/^	int data;$/;"	m	struct:BinTreeNode	file:
insert	DataStructure\PAT\ch3_trees\check_bst_identity.cpp	/^void insert(BinTree& root, int data) {$/;"	f
left	DataStructure\PAT\ch3_trees\check_bst_identity.cpp	/^	BinTreeNode* left;$/;"	m	struct:BinTreeNode	file:
main	DataStructure\PAT\ch3_trees\check_bst_identity.cpp	/^int main()$/;"	f
right	DataStructure\PAT\ch3_trees\check_bst_identity.cpp	/^	BinTreeNode* right;$/;"	m	struct:BinTreeNode	file:
BinTreeNode	DataStructure\PAT\ch3_trees\isomorphic_tree.cpp	/^	BinTreeNode(): parent('-') {}$/;"	f	struct:BinTreeNode
BinTreeNode	DataStructure\PAT\ch3_trees\isomorphic_tree.cpp	/^struct BinTreeNode$/;"	s	file:
check	DataStructure\PAT\ch3_trees\isomorphic_tree.cpp	/^bool check(std::vector<BinTreeNode>& bintree1, std::vector<BinTreeNode>& bintree2, char& node1, char& node2) {$/;"	f
data	DataStructure\PAT\ch3_trees\isomorphic_tree.cpp	/^	char data;$/;"	m	struct:BinTreeNode	file:
left	DataStructure\PAT\ch3_trees\isomorphic_tree.cpp	/^	char left;$/;"	m	struct:BinTreeNode	file:
main	DataStructure\PAT\ch3_trees\isomorphic_tree.cpp	/^int main() {$/;"	f
operator =	DataStructure\PAT\ch3_trees\isomorphic_tree.cpp	/^	BinTreeNode& operator=(const BinTreeNode& node) {$/;"	f	struct:BinTreeNode
parent	DataStructure\PAT\ch3_trees\isomorphic_tree.cpp	/^	char parent;$/;"	m	struct:BinTreeNode	file:
right	DataStructure\PAT\ch3_trees\isomorphic_tree.cpp	/^	char right;$/;"	m	struct:BinTreeNode	file:
BinTreeNode	DataStructure\PAT\ch3_trees\list_leaves.cpp	/^struct BinTreeNode$/;"	s	file:
data	DataStructure\PAT\ch3_trees\list_leaves.cpp	/^	int data;$/;"	m	struct:BinTreeNode	file:
left	DataStructure\PAT\ch3_trees\list_leaves.cpp	/^	char left;$/;"	m	struct:BinTreeNode	file:
level_travesal_and_print_leaves	DataStructure\PAT\ch3_trees\list_leaves.cpp	/^void level_travesal_and_print_leaves(vector<BinTreeNode>& tree, char root) {$/;"	f
main	DataStructure\PAT\ch3_trees\list_leaves.cpp	/^int main() {$/;"	f
parent	DataStructure\PAT\ch3_trees\list_leaves.cpp	/^	char parent;$/;"	m	struct:BinTreeNode	file:
right	DataStructure\PAT\ch3_trees\list_leaves.cpp	/^	char right;$/;"	m	struct:BinTreeNode	file:
main	DataStructure\PAT\ch3_trees\path_in_heap.cpp	/^int main() {$/;"	f
Point	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Easy_Version.cpp	/^	Point(int a = 0, int b = 0): x(a), y(b) {}$/;"	f	struct:Point
Point	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Easy_Version.cpp	/^struct Point$/;"	s	file:
able_to_jump_to_bank	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Easy_Version.cpp	/^bool able_to_jump_to_bank(Point curr, int jump_distance) {$/;"	f
distance_square	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Easy_Version.cpp	/^int distance_square(Point p1, Point p2) {$/;"	f
escape	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Easy_Version.cpp	/^bool escape(Point curr, std::vector<Point> &crocodiles , int jump_distance) {$/;"	f
main	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Easy_Version.cpp	/^int main() {$/;"	f
visited	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Easy_Version.cpp	/^static vector<bool> visited;$/;"	v	file:
x	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Easy_Version.cpp	/^	int x;$/;"	m	struct:Point	file:
y	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Easy_Version.cpp	/^	int y;$/;"	m	struct:Point	file:
Point	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Hard_Version.cpp	/^	Point(int a = 0, int b = 0): x(a), y(b) {}$/;"	f	struct:Point
Point	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Hard_Version.cpp	/^struct Point$/;"	s	file:
able_to_jump_to_bank	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Hard_Version.cpp	/^bool able_to_jump_to_bank(Point curr, int jump_distance) {$/;"	f
distance_square	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Hard_Version.cpp	/^int distance_square(Point p1, Point p2) {$/;"	f
escape	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Hard_Version.cpp	/^void escape(int curr, std::vector<Point> &crocodiles, int jump_distance, int curr_setp, vector<int>&curr_Path , int &min_step, vector<int>& min_Path ) {$/;"	f
main	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Hard_Version.cpp	/^int main() {$/;"	f
operator <<	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Hard_Version.cpp	/^ostream& operator<<(ostream& os, const Point& point) {$/;"	f
visited	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Hard_Version.cpp	/^static vector<bool> visited;$/;"	v	file:
x	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Hard_Version.cpp	/^	int x;$/;"	m	struct:Point	file:
y	DataStructure\PAT\ch4_graphs\Saving_James_Bond_Hard_Version.cpp	/^	int y;$/;"	m	struct:Point	file:
BFS	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^void ListUDG::BFS(int v, int &count) {$/;"	f	class:ListUDG
ListUDG	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^	ListUDG(int v, int e): ver_num(v), edg_num(e), vnodes(v + 1), visited(v + 1, false) {$/;"	f	class:ListUDG
ListUDG	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^class ListUDG$/;"	c	file:
adjVer	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^		int adjVer;$/;"	m	class:ListUDG::eNode	file:
clear	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^	void clear(eNode* p) {$/;"	f	class:ListUDG
eNode	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^		eNode(int adj = 0, eNode* n = 0): adjVer(adj), next(n) {}$/;"	f	class:ListUDG::eNode
eNode	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^	class eNode {$/;"	c	class:ListUDG	file:
edg_num	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^	int edg_num;$/;"	m	class:ListUDG	file:
main	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^int main() {$/;"	f
next	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^		eNode* next;$/;"	m	class:ListUDG::eNode	file:
reset	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^void ListUDG::reset() {$/;"	f	class:ListUDG
test_six_degree_separation	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^void ListUDG::test_six_degree_separation() {$/;"	f	class:ListUDG
ver_num	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^	int ver_num;$/;"	m	class:ListUDG	file:
visited	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^	vector<bool> visited;$/;"	m	class:ListUDG	file:
vnodes	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^	vector<eNode*> vnodes;$/;"	m	class:ListUDG	file:
~ListUDG	DataStructure\PAT\ch4_graphs\Six_Degrees_of_Separation.cpp	/^	~ListUDG() {$/;"	f	class:ListUDG
AdjacentMatrixUDG	DataStructure\PAT\ch4_graphs\basic_implemention.cpp	/^	AdjacentMatrixUDG(int ver = 1): vertex_num(ver), edges(vertex_num, vector<int>(vertex_num, INT_MAX)) {$/;"	f	class:AdjacentMatrixUDG
AdjacentMatrixUDG	DataStructure\PAT\ch4_graphs\basic_implemention.cpp	/^class AdjacentMatrixUDG$/;"	c	file:
edges	DataStructure\PAT\ch4_graphs\basic_implemention.cpp	/^	vector<vector<int>> edges;$/;"	m	class:AdjacentMatrixUDG	file:
main	DataStructure\PAT\ch4_graphs\basic_implemention.cpp	/^int main() {$/;"	f
vertex_num	DataStructure\PAT\ch4_graphs\basic_implemention.cpp	/^	int vertex_num;$/;"	m	class:AdjacentMatrixUDG	file:
vertexs	DataStructure\PAT\ch4_graphs\basic_implemention.cpp	/^	map<char, int > vertexs;$/;"	m	class:AdjacentMatrixUDG	file:
~AdjacentMatrixUDG	DataStructure\PAT\ch4_graphs\basic_implemention.cpp	/^	~AdjacentMatrixUDG() {}$/;"	f	class:AdjacentMatrixUDG
BFS	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^void ListUDG::BFS(int v) {$/;"	f	class:ListUDG
BFS	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^void MatrixUDG::BFS(int v) {$/;"	f	class:MatrixUDG
BFS_connected	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^void ListUDG::BFS_connected() {$/;"	f	class:ListUDG
BFS_connected	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^void MatrixUDG::BFS_connected() {$/;"	f	class:MatrixUDG
DFS	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^void ListUDG::DFS(int v) {$/;"	f	class:ListUDG
DFS	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^void MatrixUDG::DFS(int v) {$/;"	f	class:MatrixUDG
DFS_connected	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^void ListUDG::DFS_connected() {$/;"	f	class:ListUDG
DFS_connected	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^void MatrixUDG::DFS_connected() {$/;"	f	class:MatrixUDG
ListUDG	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^	ListUDG(int v, int e): ver_num(v), edg_num(e), vnodes(v), visited(v, false) {$/;"	f	class:ListUDG
ListUDG	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^class ListUDG$/;"	c	file:
MatrixUDG	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^	MatrixUDG(int v, int e): ver_num(v), edg_num(e), matrix(v, vector<int>(v, 0)), visited(v, false) {$/;"	f	class:MatrixUDG
MatrixUDG	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^class MatrixUDG$/;"	c	file:
adjVer	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^		int adjVer;$/;"	m	class:ListUDG::eNode	file:
clear	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^	void clear(eNode* p) {$/;"	f	class:ListUDG
eNode	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^		eNode(int adj = 0, eNode* n = 0): adjVer(adj), next(n) {}$/;"	f	class:ListUDG::eNode
eNode	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^	class eNode {$/;"	c	class:ListUDG	file:
edg_num	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^	int edg_num;$/;"	m	class:ListUDG	file:
edg_num	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^	int edg_num;$/;"	m	class:MatrixUDG	file:
main	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^int main() {$/;"	f
matrix	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^	vector<vector<int>> matrix;$/;"	m	class:MatrixUDG	file:
next	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^		eNode* next;$/;"	m	class:ListUDG::eNode	file:
reset	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^void ListUDG::reset() {$/;"	f	class:ListUDG
reset	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^void MatrixUDG::reset() {$/;"	f	class:MatrixUDG
ver_num	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^	int ver_num;$/;"	m	class:ListUDG	file:
ver_num	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^	int ver_num;$/;"	m	class:MatrixUDG	file:
visited	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^	vector<bool> visited;$/;"	m	class:ListUDG	file:
visited	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^	vector<bool> visited;$/;"	m	class:MatrixUDG	file:
vnodes	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^	vector<eNode*> vnodes;$/;"	m	class:ListUDG	file:
~ListUDG	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^	~ListUDG() {$/;"	f	class:ListUDG
~MatrixUDG	DataStructure\PAT\ch4_graphs\connected_set.cpp	/^	~MatrixUDG() {}$/;"	f	class:MatrixUDG
Heap	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	Heap() {}$/;"	f	class:Heap
Heap	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^class Heap$/;"	c	file:
MatrixUDG	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	MatrixUDG(int v, int e): ver_num(v), edg_num(e), min_cost(0), count(0) , matrix(v + 1, vector<int>(v + 1, INT_MAX)), visited(v + 1, false), US_set(v + 1, -1) {$/;"	f	class:MatrixUDG
MatrixUDG	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^class MatrixUDG$/;"	c	file:
US_set	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	vector<int> US_set;$/;"	m	class:MatrixUDG	file:
Union	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	void Union(int v1, int v2) {$/;"	f	class:MatrixUDG
count	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	int count;$/;"	m	class:MatrixUDG	file:
delete_heap	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	edge delete_heap() {$/;"	f	class:Heap
edg_num	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	int edg_num;$/;"	m	class:MatrixUDG	file:
edge	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	edge(int a, int b, int c): v1(a), v2(b), weight(c) {}$/;"	f	struct:edge
edge	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^struct edge$/;"	s	file:
elements	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	vector<edge> elements;$/;"	m	class:Heap	file:
empty	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	bool empty() {$/;"	f	class:Heap
heap	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	Heap heap;$/;"	m	class:MatrixUDG	file:
insert	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	void insert(edge& e) {$/;"	f	class:Heap
main	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^int main() {$/;"	f
matrix	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	vector<vector<int>> matrix;$/;"	m	class:MatrixUDG	file:
min_cost	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	int min_cost;$/;"	m	class:MatrixUDG	file:
min_spining_tree	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^void MatrixUDG::min_spining_tree() {$/;"	f	class:MatrixUDG
moveDown	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	void moveDown(int first, int last) {$/;"	f	class:Heap
operator <	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	bool operator<(edge& e) {$/;"	f	struct:edge
operator >	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	bool operator>(edge& e) {$/;"	f	struct:edge
print	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	void print() {$/;"	f	class:Heap
root	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	int root(int v) {$/;"	f	class:MatrixUDG
v1	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	int v1;$/;"	m	struct:edge	file:
v2	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	int v2;$/;"	m	struct:edge	file:
ver_num	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	int ver_num;$/;"	m	class:MatrixUDG	file:
visited	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	vector<bool> visited;$/;"	m	class:MatrixUDG	file:
weight	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	int weight;$/;"	m	struct:edge	file:
~Heap	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	~Heap() {}$/;"	f	class:Heap
~MatrixUDG	DataStructure\PAT\ch4_graphs\cuncuntong.cpp	/^	~MatrixUDG() {}$/;"	f	class:MatrixUDG
BFS_test_connected	DataStructure\PAT\ch4_graphs\hari's_test.cpp	/^bool MatrixUDG::BFS_test_connected() {$/;"	f	class:MatrixUDG
BFS_test_connected	DataStructure\PAT\ch4_graphs\hari's_test.cpp	/^bool MatrixUDG::BFS_test_connected(int v) {$/;"	f	class:MatrixUDG
MatrixUDG	DataStructure\PAT\ch4_graphs\hari's_test.cpp	/^	MatrixUDG(int v, int e): ver_num(v), edg_num(e), matrix(v + 1, vector<int>(v + 1, INT_MAX \/ 2 - 100)), min_distance(v + 1, vector<int>(v + 1, INT_MAX \/ 2 - 100)) , max_min_distance(v + 1, 0), visited(v + 1, false) {$/;"	f	class:MatrixUDG
MatrixUDG	DataStructure\PAT\ch4_graphs\hari's_test.cpp	/^class MatrixUDG$/;"	c	file:
edg_num	DataStructure\PAT\ch4_graphs\hari's_test.cpp	/^	int edg_num;$/;"	m	class:MatrixUDG	file:
floyd	DataStructure\PAT\ch4_graphs\hari's_test.cpp	/^void MatrixUDG::floyd() {$/;"	f	class:MatrixUDG
main	DataStructure\PAT\ch4_graphs\hari's_test.cpp	/^int main() {$/;"	f
matrix	DataStructure\PAT\ch4_graphs\hari's_test.cpp	/^	vector<vector<int>> matrix;$/;"	m	class:MatrixUDG	file:
max_min_distance	DataStructure\PAT\ch4_graphs\hari's_test.cpp	/^	vector<int> max_min_distance;\/\/if use index with 1~N, remember to allocate n+1 space in memory$/;"	m	class:MatrixUDG	file:
min_distance	DataStructure\PAT\ch4_graphs\hari's_test.cpp	/^	vector<vector<int>> min_distance;$/;"	m	class:MatrixUDG	file:
search_min_max_min	DataStructure\PAT\ch4_graphs\hari's_test.cpp	/^void MatrixUDG::search_min_max_min() {$/;"	f	class:MatrixUDG
ver_num	DataStructure\PAT\ch4_graphs\hari's_test.cpp	/^	int ver_num;$/;"	m	class:MatrixUDG	file:
visited	DataStructure\PAT\ch4_graphs\hari's_test.cpp	/^	vector<bool> visited;$/;"	m	class:MatrixUDG	file:
~MatrixUDG	DataStructure\PAT\ch4_graphs\hari's_test.cpp	/^	~MatrixUDG() {}$/;"	f	class:MatrixUDG
main	DataStructure\PAT\ch4_graphs\tests.cpp	/^int main()$/;"	f
MAX	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^const int MAX = INT_MAX \/ 2 - 100;$/;"	v
MatrixUDG	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^	MatrixUDG(int v, int e): ver_num(v), edg_num(e), matrix(v, vector<Road>(v)), distance(v), collected(v, false) {$/;"	f	class:MatrixUDG
MatrixUDG	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^class MatrixUDG$/;"	c	file:
Road	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^	Road(int l = MAX, int c = MAX): length(l), cost(c) {}$/;"	f	struct:Road
Road	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^struct Road$/;"	s	file:
collected	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^	vector<bool> collected;$/;"	m	class:MatrixUDG	file:
cost	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^	int cost;$/;"	m	struct:Road	file:
distance	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^	vector<Road> distance;$/;"	m	class:MatrixUDG	file:
edg_num	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^	int edg_num;$/;"	m	class:MatrixUDG	file:
find_min_length	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^int MatrixUDG::find_min_length() {$/;"	f	class:MatrixUDG
length	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^	int length;$/;"	m	struct:Road	file:
main	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^int main() {$/;"	f
matrix	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^	vector<vector<Road>> matrix;$/;"	m	class:MatrixUDG	file:
schedule	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^void MatrixUDG::schedule(int start, int end) {$/;"	f	class:MatrixUDG
ver_num	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^	int ver_num;$/;"	m	class:MatrixUDG	file:
~MatrixUDG	DataStructure\PAT\ch4_graphs\travel_schedule.cpp	/^	~MatrixUDG() {}$/;"	f	class:MatrixUDG
main	DataStructure\PAT\ch5_sorts\counting.cpp	/^int main() {$/;"	f
main	DataStructure\PAT\ch5_sorts\insert_or_merge.cpp	/^int main() {$/;"	f
merge	DataStructure\PAT\ch5_sorts\insert_or_merge.cpp	/^void merge(vector<int> &part, vector<int> &temp, int first, int mid, int last ) {$/;"	f
main	DataStructure\PAT\ch5_sorts\pesudo.cpp	/^int main() {$/;"	f
CountingSort	DataStructure\PAT\ch5_sorts\ranking.cpp	/^void CountingSort(vector<int> &data) {$/;"	f
NotShow	DataStructure\PAT\ch5_sorts\ranking.cpp	/^	bool NotShow() {$/;"	f	class:Users
RadixSort	DataStructure\PAT\ch5_sorts\ranking.cpp	/^void RadixSort(vector<int> &data) {$/;"	f
Users	DataStructure\PAT\ch5_sorts\ranking.cpp	/^	Users(int problem_num): id(0), scores(problem_num + 1, 0), perfect_num(0), pass_i(problem_num + 1, false), submit_i(problem_num + 1, false) , totalscore(0) {}$/;"	f	class:Users
Users	DataStructure\PAT\ch5_sorts\ranking.cpp	/^class Users$/;"	c	file:
bitRadixsort	DataStructure\PAT\ch5_sorts\ranking.cpp	/^void bitRadixsort(vector<int> &data) {$/;"	f
bitRadixsort	DataStructure\PAT\ch5_sorts\ranking.cpp	/^void bitRadixsort(vector<int> &data, int b) {$/;"	f
id	DataStructure\PAT\ch5_sorts\ranking.cpp	/^	int id;$/;"	m	class:Users	file:
main	DataStructure\PAT\ch5_sorts\ranking.cpp	/^int main() {$/;"	f
operator <	DataStructure\PAT\ch5_sorts\ranking.cpp	/^	bool operator<(const Users& user) {$/;"	f	class:Users
pass_i	DataStructure\PAT\ch5_sorts\ranking.cpp	/^	vector<bool> pass_i;$/;"	m	class:Users	file:
perfect_num	DataStructure\PAT\ch5_sorts\ranking.cpp	/^	int perfect_num;$/;"	m	class:Users	file:
scores	DataStructure\PAT\ch5_sorts\ranking.cpp	/^	vector<int> scores;$/;"	m	class:Users	file:
submit_i	DataStructure\PAT\ch5_sorts\ranking.cpp	/^	vector<bool> submit_i;$/;"	m	class:Users	file:
totalscore	DataStructure\PAT\ch5_sorts\ranking.cpp	/^	int totalscore;$/;"	m	class:Users	file:
~Users	DataStructure\PAT\ch5_sorts\ranking.cpp	/^	~Users() {}$/;"	f	class:Users
find_first_not_match	DataStructure\PAT\ch5_sorts\sort_with_swap.cpp	/^int find_first_not_match(vector<int> &data, int& start) {$/;"	f
main	DataStructure\PAT\ch5_sorts\sort_with_swap.cpp	/^int main() {$/;"	f
CountingSort	DataStructure\PAT\ch5_sorts\sorts.cpp	/^void CountingSort(vector<int> &data) {$/;"	f
RadixSort	DataStructure\PAT\ch5_sorts\sorts.cpp	/^void RadixSort(vector<int> &data) {$/;"	f
RadixSortNode	DataStructure\PAT\ch5_sorts\sorts.cpp	/^class RadixSortNode {$/;"	c	file:
RadixsortNode	DataStructure\PAT\ch5_sorts\sorts.cpp	/^	RadixsortNode() {$/;"	f	class:RadixsortNode
RadixsortNode	DataStructure\PAT\ch5_sorts\sorts.cpp	/^	RadixsortNode(int n) {$/;"	f	class:RadixsortNode
RadixsortNode	DataStructure\PAT\ch5_sorts\sorts.cpp	/^	RadixsortNode(vector<int> a) {$/;"	f	class:RadixsortNode
RadixsortNode	DataStructure\PAT\ch5_sorts\sorts.cpp	/^class RadixsortNode {$/;"	c	file:
SortTime	DataStructure\PAT\ch5_sorts\sorts.cpp	/^	SortTime(string s = "", clock_t t = 0): algorithm(s), time(t) {}$/;"	f	class:SortTime
SortTime	DataStructure\PAT\ch5_sorts\sorts.cpp	/^class SortTime$/;"	c	file:
algorithm	DataStructure\PAT\ch5_sorts\sorts.cpp	/^	string algorithm;$/;"	m	class:SortTime	file:
arr	DataStructure\PAT\ch5_sorts\sorts.cpp	/^	vector<T> arr;$/;"	m	class:RadixSortNode	file:
arr	DataStructure\PAT\ch5_sorts\sorts.cpp	/^	vector<int> arr;$/;"	m	class:RadixsortNode	file:
bitRadixsort	DataStructure\PAT\ch5_sorts\sorts.cpp	/^void bitRadixsort(vector<int> &data) {$/;"	f
bitRadixsort	DataStructure\PAT\ch5_sorts\sorts.cpp	/^void bitRadixsort(vector<int> &data, int b) {$/;"	f
bitRadixsort2	DataStructure\PAT\ch5_sorts\sorts.cpp	/^void bitRadixsort2(vector<int> &data , int b) {$/;"	f
bitRadixsort2	DataStructure\PAT\ch5_sorts\sorts.cpp	/^void bitRadixsort2(vector<int> &data) {$/;"	f
clear	DataStructure\PAT\ch5_sorts\sorts.cpp	/^void inline clear(int& q) {$/;"	f
isEmpty	DataStructure\PAT\ch5_sorts\sorts.cpp	/^int inline isEmpty(int q) {$/;"	f
main	DataStructure\PAT\ch5_sorts\sorts.cpp	/^int main() {$/;"	f
next	DataStructure\PAT\ch5_sorts\sorts.cpp	/^	RadixSortNode *next;$/;"	m	class:RadixSortNode	file:
next	DataStructure\PAT\ch5_sorts\sorts.cpp	/^	RadixsortNode *next;$/;"	m	class:RadixsortNode	file:
operator <	DataStructure\PAT\ch5_sorts\sorts.cpp	/^	bool operator<(const SortTime &st) const {$/;"	f	class:SortTime
radixsort2	DataStructure\PAT\ch5_sorts\sorts.cpp	/^void radixsort2(vector<int> &data) {$/;"	f
time	DataStructure\PAT\ch5_sorts\sorts.cpp	/^	clock_t time;$/;"	m	class:SortTime	file:
~SortTime	DataStructure\PAT\ch5_sorts\sorts.cpp	/^	~SortTime() {}$/;"	f	class:SortTime
Counter	DataStructure\PAT\ch6_hash\find_phone_num.cpp	/^	Counter(int p , int t): phoneNum(p), times(t) {}$/;"	f	struct:Counter
Counter	DataStructure\PAT\ch6_hash\find_phone_num.cpp	/^struct Counter$/;"	s	file:
hash_func	DataStructure\PAT\ch6_hash\find_phone_num.cpp	/^void hash_func(vector<Counter> &hashtable, int phone) {$/;"	f
main	DataStructure\PAT\ch6_hash\find_phone_num.cpp	/^int main() {$/;"	f
phoneNum	DataStructure\PAT\ch6_hash\find_phone_num.cpp	/^	int phoneNum;$/;"	m	struct:Counter	file:
times	DataStructure\PAT\ch6_hash\find_phone_num.cpp	/^	int times;$/;"	m	struct:Counter	file:
main	DataStructure\books_Problems\2-1solution.c	/^int main()$/;"	f
MAXN	DataStructure\books_Problems\2-2solution.c	3;"	d	file:
RightShift	DataStructure\books_Problems\2-2solution.c	/^void RightShift( int Array[], int N, int M )$/;"	f
Swap	DataStructure\books_Problems\2-2solution.c	4;"	d	file:
main	DataStructure\books_Problems\2-2solution.c	/^int main()$/;"	f
Count	DataStructure\books_Problems\2-3solution.c	/^int Count; \/* Count用来记录当前已输出的结果数 *\/$/;"	v
MAXN	DataStructure\books_Problems\2-3solution.c	4;"	d	file:
MAXString	DataStructure\books_Problems\2-3solution.c	5;"	d	file:
Search	DataStructure\books_Problems\2-3solution.c	/^void Search( int Remainder, int Start, char *STerms )$/;"	f
main	DataStructure\books_Problems\2-3solution.c	/^int main()$/;"	f
Next	DataStructure\books_Problems\2-4solution.c	/^    NodePtr Next;$/;"	m	struct:Node	file:
Node	DataStructure\books_Problems\2-4solution.c	/^struct Node{     \/* 定义链表结点数据结构 *\/$/;"	s	file:
NodePtr	DataStructure\books_Problems\2-4solution.c	/^typedef struct Node *NodePtr;$/;"	t	typeref:struct:Node	file:
Val	DataStructure\books_Problems\2-4solution.c	/^    int Val;$/;"	m	struct:Node	file:
main	DataStructure\books_Problems\2-4solution.c	/^int main()$/;"	f
Attach	DataStructure\books_Problems\3-1solution.c	/^void Attach( int c, int e, Polynomial *pRear )$/;"	f
PolyDifferentiation	DataStructure\books_Problems\3-1solution.c	/^Polynomial PolyDifferentiation( Polynomial P )$/;"	f
PolyNode	DataStructure\books_Problems\3-1solution.c	/^struct PolyNode {$/;"	s	file:
Polynomial	DataStructure\books_Problems\3-1solution.c	/^typedef struct PolyNode *Polynomial;$/;"	t	typeref:struct:PolyNode	file:
PrintPoly	DataStructure\books_Problems\3-1solution.c	/^void PrintPoly( Polynomial P )$/;"	f
ReadPoly	DataStructure\books_Problems\3-1solution.c	/^Polynomial ReadPoly()$/;"	f
coef	DataStructure\books_Problems\3-1solution.c	/^    int coef;$/;"	m	struct:PolyNode	file:
expon	DataStructure\books_Problems\3-1solution.c	/^    int expon;$/;"	m	struct:PolyNode	file:
link	DataStructure\books_Problems\3-1solution.c	/^    Polynomial link;$/;"	m	struct:PolyNode	file:
main	DataStructure\books_Problems\3-1solution.c	/^int main()$/;"	f
A	DataStructure\books_Problems\3-2solution.c	/^    char  A; \/* 起始柱  *\/$/;"	m	struct:__anon43	file:
B	DataStructure\books_Problems\3-2solution.c	/^    char  B; \/* 借助柱  *\/$/;"	m	struct:__anon43	file:
C	DataStructure\books_Problems\3-2solution.c	/^    char  C; \/* 目标柱  *\/$/;"	m	struct:__anon43	file:
Data	DataStructure\books_Problems\3-2solution.c	/^    ElementType Data[MaxSize];$/;"	m	struct:__anon44	file:
ERROR	DataStructure\books_Problems\3-2solution.c	/^ElementType ERROR;$/;"	v
ElementType	DataStructure\books_Problems\3-2solution.c	/^} ElementType;  \/* 汉诺塔问题结构类型 *\/$/;"	t	typeref:struct:__anon43	file:
Hanoi	DataStructure\books_Problems\3-2solution.c	/^void Hanoi( int n )    \/* 借助堆栈的非递归实现 *\/$/;"	f
MaxSize	DataStructure\books_Problems\3-2solution.c	6;"	d	file:
N	DataStructure\books_Problems\3-2solution.c	/^    int   N; \/* 盘数  *\/$/;"	m	struct:__anon43	file:
Pop	DataStructure\books_Problems\3-2solution.c	/^ElementType Pop( Stack *PtrS )$/;"	f
Push	DataStructure\books_Problems\3-2solution.c	/^void Push( Stack *PtrS, ElementType item )$/;"	f
Stack	DataStructure\books_Problems\3-2solution.c	/^} Stack; \/* 堆栈的标准定义 *\/$/;"	t	typeref:struct:__anon44	file:
Top	DataStructure\books_Problems\3-2solution.c	/^    int Top;$/;"	m	struct:__anon44	file:
duration	DataStructure\books_Problems\3-2solution.c	/^double  duration;  \/* 记录被测函数运行时间，以秒为单位 *\/$/;"	v
main	DataStructure\books_Problems\3-2solution.c	/^int main()$/;"	f
start	DataStructure\books_Problems\3-2solution.c	/^clock_t  start, stop; \/* clock_t是clock()函数返回的变量类型 *\/$/;"	v
stop	DataStructure\books_Problems\3-2solution.c	/^clock_t  start, stop; \/* clock_t是clock()函数返回的变量类型 *\/$/;"	v
AddQ	DataStructure\books_Problems\3-3solution.c	/^void AddQ ( Queue *PtrQ, int  Item) \/* 将元素Item插入队列PtrQ中 *\/$/;"	f
Customer	DataStructure\books_Problems\3-3solution.c	/^  int  Customer[MaxQSize];$/;"	m	struct:__anon45	file:
DeleteQ	DataStructure\books_Problems\3-3solution.c	/^int DeleteQ ( Queue *PtrQ ) \/* 从队列中删除队头并返回  *\/$/;"	f
ERROR	DataStructure\books_Problems\3-3solution.c	5;"	d	file:
InitialQ	DataStructure\books_Problems\3-3solution.c	/^void InitialQ ( Queue *PtrQ )$/;"	f
IsEmptyQ	DataStructure\books_Problems\3-3solution.c	/^int IsEmptyQ ( Queue *PtrQ )$/;"	f
MaxQSize	DataStructure\books_Problems\3-3solution.c	4;"	d	file:
Queue	DataStructure\books_Problems\3-3solution.c	/^} Queue;$/;"	t	typeref:struct:__anon45	file:
front	DataStructure\books_Problems\3-3solution.c	/^  int  front;$/;"	m	struct:__anon45	file:
main	DataStructure\books_Problems\3-3solution.c	/^int main()$/;"	f
rear	DataStructure\books_Problems\3-3solution.c	/^  int  rear;$/;"	m	struct:__anon45	file:
BinTree	DataStructure\books_Problems\4-1solution.c	/^typedef struct TreeNode *BinTree;$/;"	t	typeref:struct:TreeNode	file:
CreateBinTree	DataStructure\books_Problems\4-1solution.c	/^BinTree CreateBinTree( char *Pre, char *In, int Len ) $/;"	f
Data	DataStructure\books_Problems\4-1solution.c	/^    char Data;$/;"	m	struct:TreeNode	file:
Height	DataStructure\books_Problems\4-1solution.c	/^int Height( BinTree T )$/;"	f
Left	DataStructure\books_Problems\4-1solution.c	/^    BinTree Left;$/;"	m	struct:TreeNode	file:
MAXN	DataStructure\books_Problems\4-1solution.c	4;"	d	file:
Right	DataStructure\books_Problems\4-1solution.c	/^    BinTree Right;$/;"	m	struct:TreeNode	file:
TreeNode	DataStructure\books_Problems\4-1solution.c	/^struct TreeNode$/;"	s	file:
main	DataStructure\books_Problems\4-1solution.c	/^int main()$/;"	f
BinTree	DataStructure\books_Problems\4-2solution.c	/^typedef struct TreeNode *BinTree;$/;"	t	typeref:struct:TreeNode	file:
Cnt	DataStructure\books_Problems\4-2solution.c	/^    int Cnt;$/;"	m	struct:TreeNode	file:
Data	DataStructure\books_Problems\4-2solution.c	/^    char Data[MAXS+1];$/;"	m	struct:TreeNode	file:
Insert	DataStructure\books_Problems\4-2solution.c	/^BinTree Insert( BinTree T, char *Name )$/;"	f
Left	DataStructure\books_Problems\4-2solution.c	/^    BinTree Left;$/;"	m	struct:TreeNode	file:
MAXN	DataStructure\books_Problems\4-2solution.c	5;"	d	file:
MAXS	DataStructure\books_Problems\4-2solution.c	6;"	d	file:
Output	DataStructure\books_Problems\4-2solution.c	/^void Output( BinTree T, int N )$/;"	f
Right	DataStructure\books_Problems\4-2solution.c	/^    BinTree Right;$/;"	m	struct:TreeNode	file:
TreeNode	DataStructure\books_Problems\4-2solution.c	/^struct TreeNode$/;"	s	file:
main	DataStructure\books_Problems\4-2solution.c	/^int main()$/;"	f
Check_friends	DataStructure\books_Problems\4-3solution.c	/^void Check_friends( DisjSet S , int N )$/;"	f
DisjSet	DataStructure\books_Problems\4-3solution.c	/^typedef int DisjSet[MAXN+1];$/;"	t	file:
ElementType	DataStructure\books_Problems\4-3solution.c	/^typedef int ElementType;$/;"	t	file:
Find	DataStructure\books_Problems\4-3solution.c	/^SetType Find( ElementType X, DisjSet S )$/;"	f
Initialization	DataStructure\books_Problems\4-3solution.c	/^void Initialization( DisjSet S , int N)$/;"	f
Input_connection	DataStructure\books_Problems\4-3solution.c	/^void Input_connection( DisjSet S )$/;"	f
MAXN	DataStructure\books_Problems\4-3solution.c	3;"	d	file:
SetType	DataStructure\books_Problems\4-3solution.c	/^typedef int SetType;$/;"	t	file:
SetUnion	DataStructure\books_Problems\4-3solution.c	/^int SetUnion( DisjSet S, SetType Root1, SetType Root2 )$/;"	f
main	DataStructure\books_Problems\4-3solution.c	/^int main()$/;"	f
Create	DataStructure\books_Problems\4-4solution.c	/^MinHeap Create ( int MaxSize )$/;"	f
DeleteMin	DataStructure\books_Problems\4-4solution.c	/^ElementType DeleteMin ( MinHeap H )$/;"	f
ElementType	DataStructure\books_Problems\4-4solution.c	/^} ElementType;$/;"	t	typeref:struct:Message	file:
Elements	DataStructure\books_Problems\4-4solution.c	/^    ElementType *Elements;$/;"	m	struct:HeapStruct	file:
HeapStruct	DataStructure\books_Problems\4-4solution.c	/^struct HeapStruct {$/;"	s	file:
Insert	DataStructure\books_Problems\4-4solution.c	/^void Insert ( MinHeap H, ElementType X )$/;"	f
MAXN	DataStructure\books_Problems\4-4solution.c	5;"	d	file:
MAXS	DataStructure\books_Problems\4-4solution.c	6;"	d	file:
Message	DataStructure\books_Problems\4-4solution.c	/^typedef struct Message {$/;"	s	file:
MinHeap	DataStructure\books_Problems\4-4solution.c	/^typedef struct HeapStruct *MinHeap;$/;"	t	typeref:struct:HeapStruct	file:
Msg	DataStructure\books_Problems\4-4solution.c	/^    char Msg[MAXS+1];$/;"	m	struct:Message	file:
P	DataStructure\books_Problems\4-4solution.c	/^    int P;$/;"	m	struct:Message	file:
Size	DataStructure\books_Problems\4-4solution.c	/^    int Size;$/;"	m	struct:HeapStruct	file:
main	DataStructure\books_Problems\4-4solution.c	/^int main()$/;"	f
Element	DataStructure\books_Problems\5-1solution.c	/^    ElementType Element;$/;"	m	struct:HashEntry	file:
ElementType	DataStructure\books_Problems\5-1solution.c	/^typedef int ElementType;$/;"	t	file:
Empty	DataStructure\books_Problems\5-1solution.c	/^enum EntryType { Legitimate, Empty };$/;"	e	enum:EntryType	file:
EntryType	DataStructure\books_Problems\5-1solution.c	/^enum EntryType { Legitimate, Empty };$/;"	g	file:
Find	DataStructure\books_Problems\5-1solution.c	/^int Find ( ElementType Key, HashTable H )$/;"	f
Hash	DataStructure\books_Problems\5-1solution.c	/^int Hash ( ElementType Key, int P )$/;"	f
HashEntry	DataStructure\books_Problems\5-1solution.c	/^struct HashEntry {$/;"	s	file:
HashTable	DataStructure\books_Problems\5-1solution.c	/^typedef struct HashTbl *HashTable;$/;"	t	typeref:struct:HashTbl	file:
HashTbl	DataStructure\books_Problems\5-1solution.c	/^struct HashTbl {$/;"	s	file:
Info	DataStructure\books_Problems\5-1solution.c	/^    enum EntryType Info;$/;"	m	struct:HashEntry	typeref:enum:HashEntry::EntryType	file:
InitializeTable	DataStructure\books_Problems\5-1solution.c	/^HashTable InitializeTable ( int TableSize )$/;"	f
InsertAndOutput	DataStructure\books_Problems\5-1solution.c	/^void InsertAndOutput ( ElementType Key, HashTable H )$/;"	f
Legitimate	DataStructure\books_Problems\5-1solution.c	/^enum EntryType { Legitimate, Empty };$/;"	e	enum:EntryType	file:
TableSize	DataStructure\books_Problems\5-1solution.c	/^    int TableSize;$/;"	m	struct:HashTbl	file:
TheCells	DataStructure\books_Problems\5-1solution.c	/^    struct HashEntry *TheCells;$/;"	m	struct:HashTbl	typeref:struct:HashTbl::HashEntry	file:
main	DataStructure\books_Problems\5-1solution.c	/^int main()$/;"	f
Element	DataStructure\books_Problems\5-2solution.c	/^    ElementType Element;$/;"	m	struct:HashEntry	file:
ElementType	DataStructure\books_Problems\5-2solution.c	/^typedef char ElementType[MAXS+1];$/;"	t	file:
Empty	DataStructure\books_Problems\5-2solution.c	/^enum EntryType { Legitimate, Empty };$/;"	e	enum:EntryType	file:
EntryType	DataStructure\books_Problems\5-2solution.c	/^enum EntryType { Legitimate, Empty };$/;"	g	file:
Find	DataStructure\books_Problems\5-2solution.c	/^int Find ( char *Key, HashTable H )$/;"	f
Hash	DataStructure\books_Problems\5-2solution.c	/^int Hash ( char *Key, int P )$/;"	f
HashEntry	DataStructure\books_Problems\5-2solution.c	/^struct HashEntry {$/;"	s	file:
HashTable	DataStructure\books_Problems\5-2solution.c	/^typedef struct HashTbl *HashTable;$/;"	t	typeref:struct:HashTbl	file:
HashTbl	DataStructure\books_Problems\5-2solution.c	/^struct HashTbl {$/;"	s	file:
Info	DataStructure\books_Problems\5-2solution.c	/^    enum EntryType Info;$/;"	m	struct:HashEntry	typeref:enum:HashEntry::EntryType	file:
InitializeTable	DataStructure\books_Problems\5-2solution.c	/^HashTable InitializeTable ( int TableSize )$/;"	f
InsertAndOutput	DataStructure\books_Problems\5-2solution.c	/^void InsertAndOutput ( char *Key, HashTable H )$/;"	f
Legitimate	DataStructure\books_Problems\5-2solution.c	/^enum EntryType { Legitimate, Empty };$/;"	e	enum:EntryType	file:
MAXB	DataStructure\books_Problems\5-2solution.c	7;"	d	file:
MAXD	DataStructure\books_Problems\5-2solution.c	6;"	d	file:
MAXS	DataStructure\books_Problems\5-2solution.c	5;"	d	file:
Mask	DataStructure\books_Problems\5-2solution.c	8;"	d	file:
TableSize	DataStructure\books_Problems\5-2solution.c	/^    int TableSize;$/;"	m	struct:HashTbl	file:
TheCells	DataStructure\books_Problems\5-2solution.c	/^    struct HashEntry *TheCells;$/;"	m	struct:HashTbl	typeref:struct:HashTbl::HashEntry	file:
main	DataStructure\books_Problems\5-2solution.c	/^int main()$/;"	f
Cnt	DataStructure\books_Problems\5-3solution.c	/^    int Cnt;$/;"	m	struct:HashEntry	file:
Hash	DataStructure\books_Problems\5-3solution.c	/^int Hash ( int Key, int P )$/;"	f
HashEntry	DataStructure\books_Problems\5-3solution.c	/^struct HashEntry {$/;"	s	file:
HashTable	DataStructure\books_Problems\5-3solution.c	/^typedef struct HashTbl *HashTable;$/;"	t	typeref:struct:HashTbl	file:
HashTbl	DataStructure\books_Problems\5-3solution.c	/^struct HashTbl {$/;"	s	file:
InitializeTable	DataStructure\books_Problems\5-3solution.c	/^HashTable InitializeTable ( int N )$/;"	f
InsertAndCount	DataStructure\books_Problems\5-3solution.c	/^void InsertAndCount ( char *Key, HashTable H )$/;"	f
List	DataStructure\books_Problems\5-3solution.c	/^typedef struct HashEntry *List;$/;"	t	typeref:struct:HashEntry	file:
MAXD	DataStructure\books_Problems\5-3solution.c	7;"	d	file:
MAXS	DataStructure\books_Problems\5-3solution.c	6;"	d	file:
Next	DataStructure\books_Problems\5-3solution.c	/^    List Next;$/;"	m	struct:HashEntry	file:
NextPrime	DataStructure\books_Problems\5-3solution.c	/^int NextPrime ( int N )$/;"	f
Output	DataStructure\books_Problems\5-3solution.c	/^void Output( HashTable H )$/;"	f
PhoneNo	DataStructure\books_Problems\5-3solution.c	/^    char PhoneNo[MAXS+1];$/;"	m	struct:HashEntry	file:
TableSize	DataStructure\books_Problems\5-3solution.c	/^    int TableSize;$/;"	m	struct:HashTbl	file:
TheLists	DataStructure\books_Problems\5-3solution.c	/^    List TheLists;$/;"	m	struct:HashTbl	file:
main	DataStructure\books_Problems\5-3solution.c	/^int main()$/;"	f
ComputeSim	DataStructure\books_Problems\5-4solution.c	/^double ComputeSim ( WList File, int F1, int F2, HashTable H )$/;"	f
Element	DataStructure\books_Problems\5-4solution.c	/^    ElementType Element;$/;"	m	struct:HashEntry	file:
ElementType	DataStructure\books_Problems\5-4solution.c	/^typedef char ElementType[MAXS+1];$/;"	t	file:
FList	DataStructure\books_Problems\5-4solution.c	/^typedef struct WordEntry *FList;$/;"	t	typeref:struct:WordEntry	file:
FileEntry	DataStructure\books_Problems\5-4solution.c	/^struct FileEntry {$/;"	s	file:
FileIndex	DataStructure\books_Problems\5-4solution.c	/^void FileIndex( WList File, int FileNo, int Pos )$/;"	f
FileNo	DataStructure\books_Problems\5-4solution.c	/^    short FileNo; \/* 为时表示结点为空 *\/$/;"	m	struct:HashEntry	file:
FileNo	DataStructure\books_Problems\5-4solution.c	/^    short FileNo;$/;"	m	struct:WordEntry	file:
Find	DataStructure\books_Problems\5-4solution.c	/^int Find ( ElementType Key, HashTable H )$/;"	f
GetAWord	DataStructure\books_Problems\5-4solution.c	/^int GetAWord( ElementType Word )$/;"	f
Hash	DataStructure\books_Problems\5-4solution.c	/^int Hash ( char *Key, int P )$/;"	f
HashEntry	DataStructure\books_Problems\5-4solution.c	/^struct HashEntry {$/;"	s	file:
HashTable	DataStructure\books_Problems\5-4solution.c	/^typedef struct HashTbl *HashTable;$/;"	t	typeref:struct:HashTbl	file:
HashTbl	DataStructure\books_Problems\5-4solution.c	/^struct HashTbl {$/;"	s	file:
InitializeFileIndex	DataStructure\books_Problems\5-4solution.c	/^WList InitializeFileIndex ( int Size )$/;"	f
InitializeTable	DataStructure\books_Problems\5-4solution.c	/^HashTable InitializeTable ( int TableSize )$/;"	f
InsertAndIndex	DataStructure\books_Problems\5-4solution.c	/^int InsertAndIndex ( int FileNo, ElementType Key, HashTable H )$/;"	f
InvIndex	DataStructure\books_Problems\5-4solution.c	/^    FList InvIndex; \/* 倒排索引 *\/$/;"	m	struct:HashEntry	file:
MAXB	DataStructure\books_Problems\5-4solution.c	8;"	d	file:
MAXS	DataStructure\books_Problems\5-4solution.c	6;"	d	file:
MAXTable	DataStructure\books_Problems\5-4solution.c	9;"	d	file:
MINS	DataStructure\books_Problems\5-4solution.c	7;"	d	file:
Next	DataStructure\books_Problems\5-4solution.c	/^    FList Next;$/;"	m	struct:WordEntry	file:
Next	DataStructure\books_Problems\5-4solution.c	/^    WList Next;$/;"	m	struct:FileEntry	file:
TableSize	DataStructure\books_Problems\5-4solution.c	/^    int TableSize;$/;"	m	struct:HashTbl	file:
TheCells	DataStructure\books_Problems\5-4solution.c	/^    struct HashEntry *TheCells;$/;"	m	struct:HashTbl	typeref:struct:HashTbl::HashEntry	file:
WList	DataStructure\books_Problems\5-4solution.c	/^typedef struct FileEntry *WList;$/;"	t	typeref:struct:FileEntry	file:
WordEntry	DataStructure\books_Problems\5-4solution.c	/^struct WordEntry {$/;"	s	file:
Words	DataStructure\books_Problems\5-4solution.c	/^    int Words;$/;"	m	struct:FileEntry	file:
main	DataStructure\books_Problems\5-4solution.c	/^int main()$/;"	f
CheckG	DataStructure\books_Problems\6-1solution.c	/^int CheckG ( Graph *G )$/;"	f
DFS	DataStructure\books_Problems\6-1solution.c	/^void DFS ( Graph *G, int V )$/;"	f
EdgeN	DataStructure\books_Problems\6-1solution.c	/^    int VertexN, EdgeN; \/* 顶点和边数 *\/$/;"	m	struct:__anon46	file:
Edges	DataStructure\books_Problems\6-1solution.c	/^    int Edges[MAXV][MAXV]; \/* 邻接表 *\/$/;"	m	struct:__anon46	file:
Graph	DataStructure\books_Problems\6-1solution.c	/^} Graph; \/* 用邻接表存储的图结构体 *\/$/;"	t	typeref:struct:__anon46	file:
InitializeG	DataStructure\books_Problems\6-1solution.c	/^void InitializeG ( Graph *G )$/;"	f
MAXV	DataStructure\books_Problems\6-1solution.c	4;"	d	file:
ReadG	DataStructure\books_Problems\6-1solution.c	/^void ReadG ( Graph *G )$/;"	f
VertexN	DataStructure\books_Problems\6-1solution.c	/^    int VertexN, EdgeN; \/* 顶点和边数 *\/$/;"	m	struct:__anon46	file:
Visited	DataStructure\books_Problems\6-1solution.c	/^    int Visited[MAXV]; \/* 顶点标记 *\/$/;"	m	struct:__anon46	file:
main	DataStructure\books_Problems\6-1solution.c	/^int main()$/;"	f
ALGraph	DataStructure\books_Problems\6-2solution.c	/^} ALGraph;                   \/*ALGraph是以邻接表方式存储的图类型 *\/$/;"	t	typeref:struct:__anon47	file:
AdjList	DataStructure\books_Problems\6-2solution.c	/^typedef  VertexNode  AdjList[ MaxVertexNum ];$/;"	t	file:
AdjV	DataStructure\books_Problems\6-2solution.c	/^    int AdjV;                   \/* 邻接点域 *\/$/;"	m	struct:node	file:
CreateALGraph	DataStructure\books_Problems\6-2solution.c	/^int CreateALGraph( ALGraph *G )$/;"	f
DFS_non_recursive	DataStructure\books_Problems\6-2solution.c	/^void DFS_non_recursive ( ALGraph *G, ElementType V )$/;"	f
Data	DataStructure\books_Problems\6-2solution.c	/^    ElementType Data[MaxVertexNum];$/;"	m	struct:__anon48	file:
ERROR	DataStructure\books_Problems\6-2solution.c	3;"	d	file:
EdgeNode	DataStructure\books_Problems\6-2solution.c	/^} EdgeNode;        $/;"	t	typeref:struct:node	file:
ElementType	DataStructure\books_Problems\6-2solution.c	/^typedef int ElementType;$/;"	t	file:
Empty	DataStructure\books_Problems\6-2solution.c	/^int Empty(Stack *PtrS)$/;"	f
FirstEdge	DataStructure\books_Problems\6-2solution.c	/^    EdgeNode  *FirstEdge;       \/* 边表头指针 *\/$/;"	m	struct:Vnode	file:
Initialize	DataStructure\books_Problems\6-2solution.c	/^void Initialize(Stack *PtrS)$/;"	f
MaxVertexNum	DataStructure\books_Problems\6-2solution.c	5;"	d	file:
Next	DataStructure\books_Problems\6-2solution.c	/^    struct  node  *Next;        \/* 指向下一个邻接点的指针域 *\/$/;"	m	struct:node	typeref:struct:node::node	file:
Pop	DataStructure\books_Problems\6-2solution.c	/^ElementType Pop( Stack *PtrS )$/;"	f
Push	DataStructure\books_Problems\6-2solution.c	/^void Push( Stack *PtrS, ElementType item )$/;"	f
Stack	DataStructure\books_Problems\6-2solution.c	/^} Stack;$/;"	t	typeref:struct:__anon48	file:
Top	DataStructure\books_Problems\6-2solution.c	/^    int Top;$/;"	m	struct:__anon48	file:
Top	DataStructure\books_Problems\6-2solution.c	/^ElementType Top( Stack *PtrS )$/;"	f
VertexNode	DataStructure\books_Problems\6-2solution.c	/^} VertexNode;   $/;"	t	typeref:struct:Vnode	file:
VertexType	DataStructure\books_Problems\6-2solution.c	/^typedef  char  VertexType;    \/* 顶点用字符表示 *\/$/;"	t	file:
Visited	DataStructure\books_Problems\6-2solution.c	/^    char  Visited;               \/* 顶点域，这里用于记录该结点是否已经访问 *\/$/;"	m	struct:Vnode	file:
Vnode	DataStructure\books_Problems\6-2solution.c	/^typedef  struct  Vnode{       \/* 顶点表结点 *\/$/;"	s	file:
adjlist	DataStructure\books_Problems\6-2solution.c	/^    AdjList  adjlist;         \/* 邻接表 *\/$/;"	m	struct:__anon47	file:
e	DataStructure\books_Problems\6-2solution.c	/^    int  n, e;                  \/* 顶点数和边数 *\/$/;"	m	struct:__anon47	file:
main	DataStructure\books_Problems\6-2solution.c	/^int main()$/;"	f
n	DataStructure\books_Problems\6-2solution.c	/^    int  n, e;                  \/* 顶点数和边数 *\/$/;"	m	struct:__anon47	file:
node	DataStructure\books_Problems\6-2solution.c	/^typedef  struct  node{          \/* 边表结点 *\/$/;"	s	file:
ALGraph	DataStructure\books_Problems\6-3solution.c	/^} ALGraph;                   \/* ALGraph是以邻接表方式存储的图类型 *\/$/;"	t	typeref:struct:__anon49	file:
AddQ	DataStructure\books_Problems\6-3solution.c	/^void AddQ ( LinkQueue  *PtrQ, QElementType item )$/;"	f
AdjList	DataStructure\books_Problems\6-3solution.c	/^typedef  VertexNode  AdjList[ MaxVertexNum ];$/;"	t	file:
AdjV	DataStructure\books_Problems\6-3solution.c	/^    VertexType AdjV;              \/* 邻接点域 *\/$/;"	m	struct:node	file:
CreateALGraph	DataStructure\books_Problems\6-3solution.c	/^void CreateALGraph( ALGraph *G )$/;"	f
Data	DataStructure\books_Problems\6-3solution.c	/^    QElementType  Data;$/;"	m	struct:Node	file:
DeleteQ	DataStructure\books_Problems\6-3solution.c	/^QElementType DeleteQ ( LinkQueue  *PtrQ )$/;"	f
DestroyQueue	DataStructure\books_Problems\6-3solution.c	/^void DestroyQueue( LinkQueue  Q )$/;"	f
EdgeNode	DataStructure\books_Problems\6-3solution.c	/^} EdgeNode;        $/;"	t	typeref:struct:node	file:
Element	DataStructure\books_Problems\6-3solution.c	/^typedef struct Element { $/;"	s	file:
FirstEdge	DataStructure\books_Problems\6-3solution.c	/^    EdgeNode  *FirstEdge;       \/* 边表头指针 *\/$/;"	m	struct:Vnode	file:
Initialize	DataStructure\books_Problems\6-3solution.c	/^void Initialize(LinkQueue  *PtrQ)$/;"	f
IsEmptyQ	DataStructure\books_Problems\6-3solution.c	/^int IsEmptyQ(LinkQueue  *PtrQ)$/;"	f
Layer	DataStructure\books_Problems\6-3solution.c	/^    int Layer;           \/* BFS的层次 *\/$/;"	m	struct:Element	file:
LinkQueue	DataStructure\books_Problems\6-3solution.c	/^} LinkQueue;$/;"	t	typeref:struct:__anon50	file:
MaxVertexNum	DataStructure\books_Problems\6-3solution.c	5;"	d	file:
Next	DataStructure\books_Problems\6-3solution.c	/^    struct  node  *Next;          \/* 指向下一个邻接点的指针域 *\/$/;"	m	struct:node	typeref:struct:node::node	file:
Next	DataStructure\books_Problems\6-3solution.c	/^    struct Node  *Next;$/;"	m	struct:Node	typeref:struct:Node::Node	file:
Node	DataStructure\books_Problems\6-3solution.c	/^typedef struct Node{$/;"	s	file:
Percent	DataStructure\books_Problems\6-3solution.c	/^    double  Percent;              \/* 用于记录距离不超过SIX的结点百分比 *\/$/;"	m	struct:Vnode	file:
QElementType	DataStructure\books_Problems\6-3solution.c	/^} QElementType;$/;"	t	typeref:struct:Element	file:
QNode	DataStructure\books_Problems\6-3solution.c	/^}QNode; $/;"	t	typeref:struct:Node	file:
SIX	DataStructure\books_Problems\6-3solution.c	4;"	d	file:
SixDegree_BFS	DataStructure\books_Problems\6-3solution.c	/^void  SixDegree_BFS( ALGraph *G , VertexType Start )$/;"	f
VertexNode	DataStructure\books_Problems\6-3solution.c	/^} VertexNode;$/;"	t	typeref:struct:Vnode	file:
VertexType	DataStructure\books_Problems\6-3solution.c	/^typedef unsigned long  VertexType;    \/* 顶点用无符号长整数表示 *\/$/;"	t	file:
Visited	DataStructure\books_Problems\6-3solution.c	/^    char   Visited;              \/* 顶点域，这里用于标记该结点是否已经访问 *\/$/;"	m	struct:Vnode	file:
Vnode	DataStructure\books_Problems\6-3solution.c	/^typedef  struct  Vnode{       \/* 顶点表结点 *\/$/;"	s	file:
adjlist	DataStructure\books_Problems\6-3solution.c	/^    AdjList  adjlist;          \/* 邻接表 *\/$/;"	m	struct:__anon49	file:
e	DataStructure\books_Problems\6-3solution.c	/^    unsigned long int  n, e;  \/* 顶点数和边数 *\/$/;"	m	struct:__anon49	file:
front	DataStructure\books_Problems\6-3solution.c	/^    QNode  *front;             \/* 指向队头结点 *\/$/;"	m	struct:__anon50	file:
main	DataStructure\books_Problems\6-3solution.c	/^int main()$/;"	f
n	DataStructure\books_Problems\6-3solution.c	/^    unsigned long int  n, e;  \/* 顶点数和边数 *\/$/;"	m	struct:__anon49	file:
node	DataStructure\books_Problems\6-3solution.c	/^typedef  struct  node{          \/* 边表结点 *\/$/;"	s	file:
rear	DataStructure\books_Problems\6-3solution.c	/^    QNode  *rear;              \/* 指向队尾结点 *\/$/;"	m	struct:__anon50	file:
v	DataStructure\books_Problems\6-3solution.c	/^    VertexType v;        \/* 结点编号 *\/$/;"	m	struct:Element	file:
CheckCycle	DataStructure\books_Problems\6-4solution.c	/^int CheckCycle( Vertex V1, Vertex V2 )$/;"	f
DisjSet	DataStructure\books_Problems\6-4solution.c	/^typedef int DisjSet[MAXV+1];$/;"	t	file:
ESet	DataStructure\books_Problems\6-4solution.c	/^struct EdgeType *ESet; \/* 边数组 *\/$/;"	v	typeref:struct:EdgeType
EdgeType	DataStructure\books_Problems\6-4solution.c	/^struct EdgeType {$/;"	s	file:
Find	DataStructure\books_Problems\6-4solution.c	/^Vertex Find ( Vertex V )$/;"	f
GetEdge	DataStructure\books_Problems\6-4solution.c	/^int GetEdge( int CurrentSize )$/;"	f
InitializeESet	DataStructure\books_Problems\6-4solution.c	/^void InitializeESet ( int M )$/;"	f
InitializeVSet	DataStructure\books_Problems\6-4solution.c	/^void InitializeVSet ( int N )$/;"	f
Kruskal	DataStructure\books_Problems\6-4solution.c	/^int Kruskal( int N, int M )$/;"	f
MAXV	DataStructure\books_Problems\6-4solution.c	4;"	d	file:
MinHeap	DataStructure\books_Problems\6-4solution.c	/^void MinHeap( int i, int M )$/;"	f
SetUnion	DataStructure\books_Problems\6-4solution.c	/^void SetUnion( Vertex Root1, Vertex Root2 )$/;"	f
V1	DataStructure\books_Problems\6-4solution.c	/^    Vertex V1, V2;$/;"	m	struct:EdgeType	file:
V2	DataStructure\books_Problems\6-4solution.c	/^    Vertex V1, V2;$/;"	m	struct:EdgeType	file:
VSet	DataStructure\books_Problems\6-4solution.c	/^DisjSet VSet; \/* 结点数组 *\/$/;"	v
Vertex	DataStructure\books_Problems\6-4solution.c	/^typedef int Vertex;$/;"	t	file:
W	DataStructure\books_Problems\6-4solution.c	/^    int W; \/* 权重 *\/$/;"	m	struct:EdgeType	file:
main	DataStructure\books_Problems\6-4solution.c	/^int main()$/;"	f
Cost	DataStructure\books_Problems\6-5solution.c	/^    int Cost[MAXV][MAXV]; \/* 费用邻接表 *\/$/;"	m	struct:__anon51	file:
Dijkstra	DataStructure\books_Problems\6-5solution.c	/^void Dijkstra ( Graph *G, int S )$/;"	f
Dist	DataStructure\books_Problems\6-5solution.c	/^    int Dist[MAXV][MAXV]; \/* 长度邻接表 *\/$/;"	m	struct:__anon51	file:
EdgeN	DataStructure\books_Problems\6-5solution.c	/^    int VertexN, EdgeN;   \/* 顶点和边数 *\/$/;"	m	struct:__anon51	file:
Graph	DataStructure\books_Problems\6-5solution.c	/^} Graph; \/* 用邻接表存储的图结构体 *\/$/;"	t	typeref:struct:__anon51	file:
Inf	DataStructure\books_Problems\6-5solution.c	5;"	d	file:
InitializeG	DataStructure\books_Problems\6-5solution.c	/^void InitializeG ( Graph *G )$/;"	f
MAXV	DataStructure\books_Problems\6-5solution.c	4;"	d	file:
MinCost	DataStructure\books_Problems\6-5solution.c	/^    int MinCost[MAXV];    \/* 到该结点的最小费用 *\/$/;"	m	struct:__anon51	file:
MinDist	DataStructure\books_Problems\6-5solution.c	/^    int MinDist[MAXV];    \/* 到该结点的最短距离 *\/$/;"	m	struct:__anon51	file:
ReadG	DataStructure\books_Problems\6-5solution.c	/^void ReadG ( Graph *G, int *S, int *D )$/;"	f
VertexN	DataStructure\books_Problems\6-5solution.c	/^    int VertexN, EdgeN;   \/* 顶点和边数 *\/$/;"	m	struct:__anon51	file:
Visited	DataStructure\books_Problems\6-5solution.c	/^    int Visited[MAXV];    \/* 顶点标记 *\/$/;"	m	struct:__anon51	file:
main	DataStructure\books_Problems\6-5solution.c	/^int main()$/;"	f
ComparGrade	DataStructure\books_Problems\7-1solution.c	/^int ComparGrade(const void *a, const void *b)$/;"	f
ComparId	DataStructure\books_Problems\7-1solution.c	/^int ComparId(const void *a, const void *b)$/;"	f
ComparName	DataStructure\books_Problems\7-1solution.c	/^int ComparName(const void *a, const void *b)$/;"	f
MAXID	DataStructure\books_Problems\7-1solution.c	5;"	d	file:
MAXN	DataStructure\books_Problems\7-1solution.c	7;"	d	file:
MAXNAME	DataStructure\books_Problems\7-1solution.c	6;"	d	file:
Record	DataStructure\books_Problems\7-1solution.c	/^} Record[MAXN];$/;"	v	typeref:struct:Student
Student	DataStructure\books_Problems\7-1solution.c	/^struct Student {$/;"	s	file:
grade	DataStructure\books_Problems\7-1solution.c	/^    int grade;$/;"	m	struct:Student	file:
id	DataStructure\books_Problems\7-1solution.c	/^    char id[MAXID+1];$/;"	m	struct:Student	file:
main	DataStructure\books_Problems\7-1solution.c	/^int main()$/;"	f
name	DataStructure\books_Problems\7-1solution.c	/^    char name[MAXNAME+1];$/;"	m	struct:Student	file:
Adjust	DataStructure\books_Problems\7-2solution.c	/^void Adjust( ElementType A[], int i, int N )$/;"	f
ElementType	DataStructure\books_Problems\7-2solution.c	/^typedef int ElementType;$/;"	t	file:
InsertionSort	DataStructure\books_Problems\7-2solution.c	/^void InsertionSort ( ElementType A[ ], int N )$/;"	f
MAXM	DataStructure\books_Problems\7-2solution.c	3;"	d	file:
main	DataStructure\books_Problems\7-2solution.c	/^int main()$/;"	f
MAXM	DataStructure\books_Problems\7-3solution.c	3;"	d	file:
main	DataStructure\books_Problems\7-3solution.c	/^int main()$/;"	f
MaxC	DataStructure\books_Problems\7-4solution.c	6;"	d	file:
MaxL	DataStructure\books_Problems\7-4solution.c	5;"	d	file:
MaxP	DataStructure\books_Problems\7-4solution.c	4;"	d	file:
Output	DataStructure\books_Problems\7-4solution.c	/^void Output( int head, int Ln )$/;"	f
Page	DataStructure\books_Problems\7-4solution.c	/^} Page[MaxP];$/;"	v	typeref:struct:PageType
PageType	DataStructure\books_Problems\7-4solution.c	/^struct PageType {$/;"	s	file:
ReadPages	DataStructure\books_Problems\7-4solution.c	/^void ReadPages(int Pn, int Ln)$/;"	f
SortPages	DataStructure\books_Problems\7-4solution.c	/^int SortPages( int Pn, int Ln )$/;"	f
cont	DataStructure\books_Problems\7-4solution.c	/^    char cont[MaxL][MaxC]; \/* 存储本页内容 *\/$/;"	m	struct:PageType	file:
main	DataStructure\books_Problems\7-4solution.c	/^int main()$/;"	f
next	DataStructure\books_Problems\7-4solution.c	/^    int next; \/* 记录下一页的位置*\/$/;"	m	struct:PageType	file:
C	DataStructure\books_Problems\8-1solution.c	/^    int C[MaxC];             \/*该生选择的课程编号*\/$/;"	m	struct:StudentNode	file:
CmpName	DataStructure\books_Problems\8-1solution.c	/^int CmpName(const void *a, const void *b) $/;"	f
Counter	DataStructure\books_Problems\8-1solution.c	/^    int Counter; \/*该课程的选课人数*\/$/;"	m	struct:CourseNode	file:
Course	DataStructure\books_Problems\8-1solution.c	/^} *Course; \/*课程链表的表头*\/$/;"	v	typeref:struct:CourseNode
CourseNode	DataStructure\books_Problems\8-1solution.c	/^struct CourseNode {$/;"	s	file:
InsertCourse	DataStructure\books_Problems\8-1solution.c	/^void InsertCourse( int N, int K )$/;"	f
List	DataStructure\books_Problems\8-1solution.c	/^typedef  struct  ListNode  *List;$/;"	t	typeref:struct:ListNode	file:
ListNode	DataStructure\books_Problems\8-1solution.c	/^struct ListNode {$/;"	s	file:
MaxC	DataStructure\books_Problems\8-1solution.c	6;"	d	file:
MaxName	DataStructure\books_Problems\8-1solution.c	5;"	d	file:
Name	DataStructure\books_Problems\8-1solution.c	/^    char Name[MaxName+1];  \/*学生姓名*\/$/;"	m	struct:ListNode	file:
Name	DataStructure\books_Problems\8-1solution.c	/^    char Name[MaxName+1];  \/*学生姓名*\/$/;"	m	struct:StudentNode	file:
NewNode	DataStructure\books_Problems\8-1solution.c	/^List NewNode( char *name )$/;"	f
Next	DataStructure\books_Problems\8-1solution.c	/^    List Next;               \/*指针域*\/$/;"	m	struct:ListNode	file:
Output	DataStructure\books_Problems\8-1solution.c	/^void Output( int K )$/;"	f
Ptr	DataStructure\books_Problems\8-1solution.c	/^    List Ptr;     \/*链表头指针*\/$/;"	m	struct:CourseNode	file:
Read_and_Sort	DataStructure\books_Problems\8-1solution.c	/^void Read_and_Sort( int *N, int *K )$/;"	f
Student	DataStructure\books_Problems\8-1solution.c	/^} *Student; \/*输入的学生信息*\/$/;"	v	typeref:struct:StudentNode
StudentNode	DataStructure\books_Problems\8-1solution.c	/^struct StudentNode {$/;"	s	file:
main	DataStructure\books_Problems\8-1solution.c	/^int main()$/;"	f
nC	DataStructure\books_Problems\8-1solution.c	/^    int nC;                   \/*该生选课门数*\/$/;"	m	struct:StudentNode	file:
AddQ	DataStructure\books_Problems\8-2solution.c	/^void AddQ( Queue Q, struct People X )$/;"	f
CreateQueue	DataStructure\books_Problems\8-2solution.c	/^Queue CreateQueue( int MaxQSize, int MaxTSize )$/;"	f
Customer	DataStructure\books_Problems\8-2solution.c	/^    struct People *Customer; \/* 存储实际顾客信息 *\/$/;"	m	struct:TeamQueueRecord	typeref:struct:TeamQueueRecord::People	file:
DeleteQ	DataStructure\books_Problems\8-2solution.c	/^void DeleteQ( Queue Q )$/;"	f
Enter	DataStructure\books_Problems\8-2solution.c	/^struct People Enter( int *i )$/;"	f
FrontQ	DataStructure\books_Problems\8-2solution.c	/^struct People FrontQ( Queue Q )$/;"	f
IsEmpty	DataStructure\books_Problems\8-2solution.c	/^int IsEmpty( Queue Q )$/;"	f
MAXCHAR	DataStructure\books_Problems\8-2solution.c	7;"	d	file:
MAXNAME	DataStructure\books_Problems\8-2solution.c	8;"	d	file:
MAXTEAM	DataStructure\books_Problems\8-2solution.c	6;"	d	file:
MaxProc	DataStructure\books_Problems\8-2solution.c	5;"	d	file:
Name	DataStructure\books_Problems\8-2solution.c	/^    char Name[MAXCHAR+1];    \/* 名字 *\/$/;"	m	struct:People	file:
NameHash	DataStructure\books_Problems\8-2solution.c	/^int NameHash( char name[] )$/;"	f
P	DataStructure\books_Problems\8-2solution.c	/^    int P;    \/* 处理时间 *\/$/;"	m	struct:People	file:
People	DataStructure\books_Problems\8-2solution.c	/^struct People { \/* 顾客信息 *\/$/;"	s	file:
Position	DataStructure\books_Problems\8-2solution.c	/^    int Position;    \/* 该朋友圈在Queue中的位置，夹塞专用   *\/$/;"	m	struct:TeamNode	file:
Queue	DataStructure\books_Problems\8-2solution.c	/^typedef struct QueueRecord *Queue;$/;"	t	typeref:struct:QueueRecord	file:
QueueRecord	DataStructure\books_Problems\8-2solution.c	/^struct QueueRecord { \/* 总队列结构 *\/$/;"	s	file:
QueueingAtBank	DataStructure\books_Problems\8-2solution.c	/^double QueueingAtBank( Queue Q, int N )$/;"	f
Read_and_Set_Teams	DataStructure\books_Problems\8-2solution.c	/^int Read_and_Set_Teams( int M )$/;"	f
Size	DataStructure\books_Problems\8-2solution.c	/^    int Size;        \/* 目前该朋友圈中排在Queue中的人数     *\/$/;"	m	struct:TeamNode	file:
T	DataStructure\books_Problems\8-2solution.c	/^    int T;    \/* 到达时间 *\/$/;"	m	struct:People	file:
Team	DataStructure\books_Problems\8-2solution.c	/^int Team[MAXNAME];    \/* Team[名字] = 这个名字所属于的朋友圈编号 *\/$/;"	v
TeamInfo	DataStructure\books_Problems\8-2solution.c	/^} TeamInfo[MAXTEAM];    \/* 记录朋友圈信息 *\/$/;"	v	typeref:struct:TeamNode
TeamNode	DataStructure\books_Problems\8-2solution.c	/^struct TeamNode {$/;"	s	file:
TeamQ	DataStructure\books_Problems\8-2solution.c	/^    TeamQueue TeamQ; \/* 存储分支队列的头指针 *\/$/;"	m	struct:QueueRecord	file:
TeamQueue	DataStructure\books_Problems\8-2solution.c	/^typedef struct TeamQueueRecord *TeamQueue;$/;"	t	typeref:struct:TeamQueueRecord	file:
TeamQueueRecord	DataStructure\books_Problems\8-2solution.c	/^struct TeamQueueRecord { \/* 分支队列结构 *\/$/;"	s	file:
Tfront	DataStructure\books_Problems\8-2solution.c	/^    int Tfront;$/;"	m	struct:TeamQueueRecord	file:
Trear	DataStructure\books_Problems\8-2solution.c	/^    int Trear;$/;"	m	struct:TeamQueueRecord	file:
Tsize	DataStructure\books_Problems\8-2solution.c	/^    int Tsize;$/;"	m	struct:TeamQueueRecord	file:
front	DataStructure\books_Problems\8-2solution.c	/^    int front;$/;"	m	struct:QueueRecord	file:
main	DataStructure\books_Problems\8-2solution.c	/^int main()$/;"	f
rear	DataStructure\books_Problems\8-2solution.c	/^    int rear;$/;"	m	struct:QueueRecord	file:
size	DataStructure\books_Problems\8-2solution.c	/^    int size;$/;"	m	struct:QueueRecord	file:
ConstructG	DataStructure\books_Problems\8-3solution.c	/^Graph ConstructG( Table HT, int N )$/;"	f
DeleteMin	DataStructure\books_Problems\8-3solution.c	/^HeapNode DeleteMin( MinHeap Q )$/;"	f
Elements	DataStructure\books_Problems\8-3solution.c	/^    HeapNode Elements;$/;"	m	struct:HeapStruct	file:
Graph	DataStructure\books_Problems\8-3solution.c	/^typedef struct GraphRecord *Graph;$/;"	t	typeref:struct:GraphRecord	file:
GraphRecord	DataStructure\books_Problems\8-3solution.c	/^struct GraphRecord { \/* 图 *\/$/;"	s	file:
HeapNode	DataStructure\books_Problems\8-3solution.c	/^typedef struct HeapRecord *HeapNode;$/;"	t	typeref:struct:HeapRecord	file:
HeapRecord	DataStructure\books_Problems\8-3solution.c	/^struct HeapRecord {$/;"	s	file:
HeapSize	DataStructure\books_Problems\8-3solution.c	/^    int HeapSize;$/;"	m	struct:HeapStruct	file:
HeapStruct	DataStructure\books_Problems\8-3solution.c	/^struct HeapStruct {$/;"	s	file:
Index	DataStructure\books_Problems\8-3solution.c	/^    int Index;$/;"	m	struct:HeapRecord	file:
InsertHeap	DataStructure\books_Problems\8-3solution.c	/^void InsertHeap( HeapNode X, MinHeap Q )$/;"	f
M	DataStructure\books_Problems\8-3solution.c	/^    int M[MAXN][MAXN];$/;"	m	struct:GraphRecord	file:
MAXN	DataStructure\books_Problems\8-3solution.c	4;"	d	file:
MinHeap	DataStructure\books_Problems\8-3solution.c	/^typedef struct HeapStruct *MinHeap;$/;"	t	typeref:struct:HeapStruct	file:
Num	DataStructure\books_Problems\8-3solution.c	/^    int Num;$/;"	m	struct:HeapRecord	file:
NumVert	DataStructure\books_Problems\8-3solution.c	/^    int NumVert;$/;"	m	struct:GraphRecord	file:
Read	DataStructure\books_Problems\8-3solution.c	/^Table Read( int N )$/;"	f
T	DataStructure\books_Problems\8-3solution.c	/^    int T[MAXN];$/;"	m	struct:TableRecord	file:
Table	DataStructure\books_Problems\8-3solution.c	/^typedef struct TableRecord *Table;$/;"	t	typeref:struct:TableRecord	file:
TableRecord	DataStructure\books_Problems\8-3solution.c	/^struct TableRecord { \/* 哈希表 *\/$/;"	s	file:
TableSize	DataStructure\books_Problems\8-3solution.c	/^    int TableSize;$/;"	m	struct:TableRecord	file:
Topsort	DataStructure\books_Problems\8-3solution.c	/^void Topsort( Graph G, Table HT, int N )$/;"	f
main	DataStructure\books_Problems\8-3solution.c	/^int main()$/;"	f
OPERAND_NUMBERS	DataStructure\experiment\ch2\24_point.cpp	/^const int OPERAND_NUMBERS = 4;$/;"	v
OPERATOR_NUMBERS	DataStructure\experiment\ch2\24_point.cpp	/^const int OPERATOR_NUMBERS = 4;$/;"	v
check	DataStructure\experiment\ch2\24_point.cpp	/^bool check(vector<int>& operands, vector<char>& operators) {$/;"	f
compute	DataStructure\experiment\ch2\24_point.cpp	/^int compute(int operands1, int operands2, char operators) {$/;"	f
input_number_initialize	DataStructure\experiment\ch2\24_point.cpp	/^void input_number_initialize(vector<int>& input_number) {$/;"	f
main	DataStructure\experiment\ch2\24_point.cpp	/^int main() {$/;"	f
operands_per_initialize	DataStructure\experiment\ch2\24_point.cpp	/^void operands_per_initialize(vector<vector<int>>& operands_per, vector<int>& input_number) {$/;"	f
operators_initialize	DataStructure\experiment\ch2\24_point.cpp	/^void operators_initialize(vector<char>& operators) {$/;"	f
operators_per_initialize	DataStructure\experiment\ch2\24_point.cpp	/^void operators_per_initialize(vector<vector<char>>& operators_per, vector<char>& operators) {$/;"	f
main	DataStructure\experiment\ch2\big_sum.cpp	/^int main() {$/;"	f
fib	DataStructure\experiment\ch2\fib.cpp	/^unsigned long long int fib(int n) {$/;"	f
main	DataStructure\experiment\ch2\fib.cpp	/^int main() {$/;"	f
Hanoi	DataStructure\experiment\ch2\hanoi.cpp	/^	Hanoi(int n = 0, char s = 'a', char t = 'b' , char d = 'c' ): numbers(n), start(s), transfer(t), destination(d) {}$/;"	f	struct:Hanoi
Hanoi	DataStructure\experiment\ch2\hanoi.cpp	/^struct Hanoi$/;"	s	file:
destination	DataStructure\experiment\ch2\hanoi.cpp	/^	char destination;$/;"	m	struct:Hanoi	file:
main	DataStructure\experiment\ch2\hanoi.cpp	/^int main() {$/;"	f
numbers	DataStructure\experiment\ch2\hanoi.cpp	/^	int numbers;$/;"	m	struct:Hanoi	file:
recursive_hanoi	DataStructure\experiment\ch2\hanoi.cpp	/^void recursive_hanoi(int n, char start, char transfer, char destination) {$/;"	f
solve_hanoi	DataStructure\experiment\ch2\hanoi.cpp	/^void solve_hanoi(int numbers) {$/;"	f
start	DataStructure\experiment\ch2\hanoi.cpp	/^	char start;$/;"	m	struct:Hanoi	file:
transfer	DataStructure\experiment\ch2\hanoi.cpp	/^	char transfer;$/;"	m	struct:Hanoi	file:
count	DataStructure\experiment\ch2\n_sum.cpp	/^static int count;$/;"	v	file:
main	DataStructure\experiment\ch2\n_sum.cpp	/^int main() {$/;"	f
print_decompose	DataStructure\experiment\ch2\n_sum.cpp	/^void print_decompose(int number) {$/;"	f
rec_print_decompose	DataStructure\experiment\ch2\n_sum.cpp	/^void rec_print_decompose(string& completed, int lowerbound, int remaining_n, stringstream& iss) {$/;"	f
main	DataStructure\experiment\ch2\pirate_loot.cpp	/^int main() {$/;"	f
main	DataStructure\experiment\ch2\simple_calculater.cpp	/^int main() {$/;"	f
bubble_sort	DataStructure\experiment\ch2\sort.cpp	/^void bubble_sort(vector<int>& tosort) {$/;"	f
main	DataStructure\experiment\ch2\sort.cpp	/^int main() {$/;"	f
merge	DataStructure\experiment\ch2\sort.cpp	/^void merge(vector<int>& tosort, vector<int>& left, vector<int>& right) {$/;"	f
merge_sort	DataStructure\experiment\ch2\sort.cpp	/^void merge_sort(vector<int>& tosort) {$/;"	f
selection_sort	DataStructure\experiment\ch2\sort.cpp	/^void selection_sort(vector<int>& tosort) {$/;"	f
swap	DataStructure\experiment\ch2\sort.cpp	/^void swap(int& a, int& b) {$/;"	f
main	DataStructure\experiment\ch2\test.cpp	/^int main() {$/;"	f
footstep	DataStructure\footstep.cpp	/^unsigned long long int footstep(int n) {$/;"	f
main	DataStructure\footstep.cpp	/^int main() {$/;"	f
rec_step	DataStructure\footstep.cpp	/^unsigned long long int rec_step(int n)$/;"	f
BiTNode	DataStructure\nonrecursive_travel.cpp	/^typedef struct BiTNode$/;"	s	file:
BiTNode	DataStructure\nonrecursive_travel.cpp	/^} BiTNode, *BiTree;$/;"	t	typeref:struct:BiTNode	file:
BiTree	DataStructure\nonrecursive_travel.cpp	/^} BiTNode, *BiTree;$/;"	t	typeref:struct:BiTNode	file:
CountNode	DataStructure\nonrecursive_travel.cpp	/^int CountNode(BiTNode *T)$/;"	f
CreateBiTree	DataStructure\nonrecursive_travel.cpp	/^void CreateBiTree(BiTNode **root)    \/\/二级指针作为函数参数$/;"	f
InOrder	DataStructure\nonrecursive_travel.cpp	/^void InOrder(BiTNode *root)$/;"	f
InOrderTraverse	DataStructure\nonrecursive_travel.cpp	/^void InOrderTraverse(BiTree T)   \/\/ 中序遍历的非递归$/;"	f
InOrderTraverse1	DataStructure\nonrecursive_travel.cpp	/^void InOrderTraverse1(BiTree T)   \/\/ 中序遍历的非递归$/;"	f
LevelOrder	DataStructure\nonrecursive_travel.cpp	/^void LevelOrder(BiTree BT)     \/\/方法二、非递归层次遍历二叉树$/;"	f
LeverTraverse	DataStructure\nonrecursive_travel.cpp	/^void LeverTraverse(BiTree T)   \/\/方法一、非递归层次遍历二叉树$/;"	f
PostOrder	DataStructure\nonrecursive_travel.cpp	/^void PostOrder(BiTNode *root)$/;"	f
PostOrder_Nonrecursive	DataStructure\nonrecursive_travel.cpp	/^void PostOrder_Nonrecursive(BiTree T)  \/\/ 后序遍历的非递归     双栈法$/;"	f
PostOrder_Nonrecursive1	DataStructure\nonrecursive_travel.cpp	/^void PostOrder_Nonrecursive1(BiTree T)  \/\/ 后序遍历的非递归$/;"	f
Postorder	DataStructure\nonrecursive_travel.cpp	/^void Postorder(BiTree T)$/;"	f
PreOrder	DataStructure\nonrecursive_travel.cpp	/^void PreOrder(BiTNode *root)$/;"	f
PreOrder_Nonrecursive	DataStructure\nonrecursive_travel.cpp	/^void PreOrder_Nonrecursive(BiTree T)     \/\/先序遍历的非递归\/\/simulate the recursive version$/;"	f
PreOrder_Nonrecursive1	DataStructure\nonrecursive_travel.cpp	/^void PreOrder_Nonrecursive1(BiTree T)     \/\/先序遍历的非递归$/;"	f
PreOrder_Nonrecursive2	DataStructure\nonrecursive_travel.cpp	/^void PreOrder_Nonrecursive2(BiTree T)     \/\/先序遍历的非递归$/;"	f
data	DataStructure\nonrecursive_travel.cpp	/^    char data;$/;"	m	struct:BiTNode	file:
depth	DataStructure\nonrecursive_travel.cpp	/^int depth(BiTNode *T)   \/\/树的深度$/;"	f
lchild	DataStructure\nonrecursive_travel.cpp	/^    struct BiTNode *lchild, *rchild;      \/\/左右孩子$/;"	m	struct:BiTNode	typeref:struct:BiTNode::BiTNode	file:
main	DataStructure\nonrecursive_travel.cpp	/^int main(void)$/;"	f
rchild	DataStructure\nonrecursive_travel.cpp	/^    struct BiTNode *lchild, *rchild;      \/\/左右孩子$/;"	m	struct:BiTNode	typeref:struct:BiTNode::	file:
visit	DataStructure\nonrecursive_travel.cpp	/^int visit(BiTree T)$/;"	f
ALLOWED_IMBALANCE	FundamentalDataStructures\SourceCode\AvlTree.h	/^    static const int ALLOWED_IMBALANCE = 1;$/;"	m	class:AvlTree
AVL_TREE_H	FundamentalDataStructures\SourceCode\AvlTree.h	2;"	d
AvlNode	FundamentalDataStructures\SourceCode\AvlTree.h	/^        AvlNode( Comparable && ele, AvlNode *lt, AvlNode *rt, int h = 0 )$/;"	f	struct:AvlTree::AvlNode
AvlNode	FundamentalDataStructures\SourceCode\AvlTree.h	/^        AvlNode( const Comparable & ele, AvlNode *lt, AvlNode *rt, int h = 0 )$/;"	f	struct:AvlTree::AvlNode
AvlNode	FundamentalDataStructures\SourceCode\AvlTree.h	/^    struct AvlNode$/;"	s	class:AvlTree
AvlTree	FundamentalDataStructures\SourceCode\AvlTree.h	/^    AvlTree( ) : root{ nullptr }$/;"	f	class:AvlTree
AvlTree	FundamentalDataStructures\SourceCode\AvlTree.h	/^    AvlTree( AvlTree && rhs ) : root{ rhs.root }$/;"	f	class:AvlTree
AvlTree	FundamentalDataStructures\SourceCode\AvlTree.h	/^    AvlTree( const AvlTree & rhs ) : root{ nullptr }$/;"	f	class:AvlTree
AvlTree	FundamentalDataStructures\SourceCode\AvlTree.h	/^class AvlTree$/;"	c
balance	FundamentalDataStructures\SourceCode\AvlTree.h	/^    void balance( AvlNode * & t )$/;"	f	class:AvlTree
clone	FundamentalDataStructures\SourceCode\AvlTree.h	/^    AvlNode * clone( AvlNode *t ) const$/;"	f	class:AvlTree
contains	FundamentalDataStructures\SourceCode\AvlTree.h	/^    bool contains( const Comparable & x ) const$/;"	f	class:AvlTree
contains	FundamentalDataStructures\SourceCode\AvlTree.h	/^    bool contains( const Comparable & x, AvlNode *t ) const$/;"	f	class:AvlTree
doubleWithLeftChild	FundamentalDataStructures\SourceCode\AvlTree.h	/^    void doubleWithLeftChild( AvlNode * & k3 )$/;"	f	class:AvlTree
doubleWithRightChild	FundamentalDataStructures\SourceCode\AvlTree.h	/^    void doubleWithRightChild( AvlNode * & k1 )$/;"	f	class:AvlTree
element	FundamentalDataStructures\SourceCode\AvlTree.h	/^        Comparable element;$/;"	m	struct:AvlTree::AvlNode
findMax	FundamentalDataStructures\SourceCode\AvlTree.h	/^    AvlNode * findMax( AvlNode *t ) const$/;"	f	class:AvlTree
findMax	FundamentalDataStructures\SourceCode\AvlTree.h	/^    const Comparable & findMax( ) const$/;"	f	class:AvlTree
findMin	FundamentalDataStructures\SourceCode\AvlTree.h	/^    AvlNode * findMin( AvlNode *t ) const$/;"	f	class:AvlTree
findMin	FundamentalDataStructures\SourceCode\AvlTree.h	/^    const Comparable & findMin( ) const$/;"	f	class:AvlTree
height	FundamentalDataStructures\SourceCode\AvlTree.h	/^        int       height;$/;"	m	struct:AvlTree::AvlNode
height	FundamentalDataStructures\SourceCode\AvlTree.h	/^    int height( AvlNode *t ) const$/;"	f	class:AvlTree
insert	FundamentalDataStructures\SourceCode\AvlTree.h	/^    void insert( Comparable && x )$/;"	f	class:AvlTree
insert	FundamentalDataStructures\SourceCode\AvlTree.h	/^    void insert( Comparable && x, AvlNode * & t )$/;"	f	class:AvlTree
insert	FundamentalDataStructures\SourceCode\AvlTree.h	/^    void insert( const Comparable & x )$/;"	f	class:AvlTree
insert	FundamentalDataStructures\SourceCode\AvlTree.h	/^    void insert( const Comparable & x, AvlNode * & t )$/;"	f	class:AvlTree
isEmpty	FundamentalDataStructures\SourceCode\AvlTree.h	/^    bool isEmpty( ) const$/;"	f	class:AvlTree
left	FundamentalDataStructures\SourceCode\AvlTree.h	/^        AvlNode   *left;$/;"	m	struct:AvlTree::AvlNode
makeEmpty	FundamentalDataStructures\SourceCode\AvlTree.h	/^    void makeEmpty( )$/;"	f	class:AvlTree
makeEmpty	FundamentalDataStructures\SourceCode\AvlTree.h	/^    void makeEmpty( AvlNode * & t )$/;"	f	class:AvlTree
max	FundamentalDataStructures\SourceCode\AvlTree.h	/^    int max( int lhs, int rhs ) const$/;"	f	class:AvlTree
operator =	FundamentalDataStructures\SourceCode\AvlTree.h	/^    AvlTree & operator=( AvlTree && rhs )$/;"	f	class:AvlTree
operator =	FundamentalDataStructures\SourceCode\AvlTree.h	/^    AvlTree & operator=( const AvlTree & rhs )$/;"	f	class:AvlTree
printTree	FundamentalDataStructures\SourceCode\AvlTree.h	/^    void printTree( ) const$/;"	f	class:AvlTree
printTree	FundamentalDataStructures\SourceCode\AvlTree.h	/^    void printTree( AvlNode *t ) const$/;"	f	class:AvlTree
remove	FundamentalDataStructures\SourceCode\AvlTree.h	/^    void remove( const Comparable & x )$/;"	f	class:AvlTree
remove	FundamentalDataStructures\SourceCode\AvlTree.h	/^    void remove( const Comparable & x, AvlNode * & t )$/;"	f	class:AvlTree
right	FundamentalDataStructures\SourceCode\AvlTree.h	/^        AvlNode   *right;$/;"	m	struct:AvlTree::AvlNode
root	FundamentalDataStructures\SourceCode\AvlTree.h	/^    AvlNode *root;$/;"	m	class:AvlTree
rotateWithLeftChild	FundamentalDataStructures\SourceCode\AvlTree.h	/^    void rotateWithLeftChild( AvlNode * & k2 )$/;"	f	class:AvlTree
rotateWithRightChild	FundamentalDataStructures\SourceCode\AvlTree.h	/^    void rotateWithRightChild( AvlNode * & k1 )$/;"	f	class:AvlTree
~AvlTree	FundamentalDataStructures\SourceCode\AvlTree.h	/^    ~AvlTree( )$/;"	f	class:AvlTree
BINARY_HEAP_H	FundamentalDataStructures\SourceCode\BinaryHeap.h	2;"	d
BinaryHeap	FundamentalDataStructures\SourceCode\BinaryHeap.h	/^    explicit BinaryHeap( const vector<Comparable> & items )$/;"	f	class:BinaryHeap
BinaryHeap	FundamentalDataStructures\SourceCode\BinaryHeap.h	/^    explicit BinaryHeap( int capacity = 100 )$/;"	f	class:BinaryHeap
BinaryHeap	FundamentalDataStructures\SourceCode\BinaryHeap.h	/^class BinaryHeap$/;"	c
array	FundamentalDataStructures\SourceCode\BinaryHeap.h	/^    vector<Comparable> array;        \/\/ The heap array$/;"	m	class:BinaryHeap
buildHeap	FundamentalDataStructures\SourceCode\BinaryHeap.h	/^    void buildHeap( )$/;"	f	class:BinaryHeap
currentSize	FundamentalDataStructures\SourceCode\BinaryHeap.h	/^    int                currentSize;  \/\/ Number of elements in heap$/;"	m	class:BinaryHeap
deleteMin	FundamentalDataStructures\SourceCode\BinaryHeap.h	/^    void deleteMin( )$/;"	f	class:BinaryHeap
deleteMin	FundamentalDataStructures\SourceCode\BinaryHeap.h	/^    void deleteMin( Comparable & minItem )$/;"	f	class:BinaryHeap
findMin	FundamentalDataStructures\SourceCode\BinaryHeap.h	/^    const Comparable & findMin( ) const$/;"	f	class:BinaryHeap
insert	FundamentalDataStructures\SourceCode\BinaryHeap.h	/^    void insert( Comparable && x )$/;"	f	class:BinaryHeap
insert	FundamentalDataStructures\SourceCode\BinaryHeap.h	/^    void insert( const Comparable & x )$/;"	f	class:BinaryHeap
isEmpty	FundamentalDataStructures\SourceCode\BinaryHeap.h	/^    bool isEmpty( ) const$/;"	f	class:BinaryHeap
makeEmpty	FundamentalDataStructures\SourceCode\BinaryHeap.h	/^    void makeEmpty( )$/;"	f	class:BinaryHeap
percolateDown	FundamentalDataStructures\SourceCode\BinaryHeap.h	/^    void percolateDown( int hole )$/;"	f	class:BinaryHeap
BINARY_SEARCH_TREE_H	FundamentalDataStructures\SourceCode\BinarySearchTree.h	2;"	d
BinaryNode	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^        BinaryNode( Comparable && theElement, BinaryNode *lt, BinaryNode *rt )$/;"	f	struct:BinarySearchTree::BinaryNode
BinaryNode	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^        BinaryNode( const Comparable & theElement, BinaryNode *lt, BinaryNode *rt )$/;"	f	struct:BinarySearchTree::BinaryNode
BinaryNode	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    struct BinaryNode$/;"	s	class:BinarySearchTree
BinarySearchTree	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    BinarySearchTree( ) : root{ nullptr }$/;"	f	class:BinarySearchTree
BinarySearchTree	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    BinarySearchTree( BinarySearchTree && rhs ) : root{ rhs.root }$/;"	f	class:BinarySearchTree
BinarySearchTree	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    BinarySearchTree( const BinarySearchTree & rhs ) : root{ nullptr }$/;"	f	class:BinarySearchTree
BinarySearchTree	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^class BinarySearchTree$/;"	c
clone	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    BinaryNode * clone( BinaryNode *t ) const$/;"	f	class:BinarySearchTree
contains	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    bool contains( const Comparable & x ) const$/;"	f	class:BinarySearchTree
contains	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    bool contains( const Comparable & x, BinaryNode *t ) const$/;"	f	class:BinarySearchTree
element	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^        Comparable element;$/;"	m	struct:BinarySearchTree::BinaryNode
findMax	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    BinaryNode * findMax( BinaryNode *t ) const$/;"	f	class:BinarySearchTree
findMax	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    const Comparable & findMax( ) const$/;"	f	class:BinarySearchTree
findMin	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    BinaryNode * findMin( BinaryNode *t ) const$/;"	f	class:BinarySearchTree
findMin	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    const Comparable & findMin( ) const$/;"	f	class:BinarySearchTree
insert	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    void insert( Comparable && x )$/;"	f	class:BinarySearchTree
insert	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    void insert( Comparable && x, BinaryNode * & t )$/;"	f	class:BinarySearchTree
insert	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    void insert( const Comparable & x )$/;"	f	class:BinarySearchTree
insert	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    void insert( const Comparable & x, BinaryNode * & t )$/;"	f	class:BinarySearchTree
isEmpty	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    bool isEmpty( ) const$/;"	f	class:BinarySearchTree
left	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^        BinaryNode *left;$/;"	m	struct:BinarySearchTree::BinaryNode
makeEmpty	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    void makeEmpty( )$/;"	f	class:BinarySearchTree
makeEmpty	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    void makeEmpty( BinaryNode * & t )$/;"	f	class:BinarySearchTree
operator =	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    BinarySearchTree & operator=( BinarySearchTree && rhs )$/;"	f	class:BinarySearchTree
operator =	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    BinarySearchTree & operator=( const BinarySearchTree & rhs )$/;"	f	class:BinarySearchTree
printTree	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    void printTree( BinaryNode *t, ostream & out ) const$/;"	f	class:BinarySearchTree
printTree	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    void printTree( ostream & out = cout ) const$/;"	f	class:BinarySearchTree
remove	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    void remove( const Comparable & x )$/;"	f	class:BinarySearchTree
remove	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    void remove( const Comparable & x, BinaryNode * & t )$/;"	f	class:BinarySearchTree
right	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^        BinaryNode *right;$/;"	m	struct:BinarySearchTree::BinaryNode
root	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    BinaryNode *root;$/;"	m	class:BinarySearchTree
~BinarySearchTree	FundamentalDataStructures\SourceCode\BinarySearchTree.h	/^    ~BinarySearchTree( )$/;"	f	class:BinarySearchTree
BINOMIAL_QUEUE_H	FundamentalDataStructures\SourceCode\BinomialQueue.h	2;"	d
BinomialNode	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^        BinomialNode( Comparable && e, BinomialNode *lt, BinomialNode *rt )$/;"	f	struct:BinomialQueue::BinomialNode
BinomialNode	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^        BinomialNode( const Comparable & e, BinomialNode *lt, BinomialNode *rt )$/;"	f	struct:BinomialQueue::BinomialNode
BinomialNode	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    struct BinomialNode$/;"	s	class:BinomialQueue
BinomialQueue	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    BinomialQueue( ) : theTrees( DEFAULT_TREES )$/;"	f	class:BinomialQueue
BinomialQueue	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    BinomialQueue( BinomialQueue && rhs )$/;"	f	class:BinomialQueue
BinomialQueue	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    BinomialQueue( const BinomialQueue & rhs )$/;"	f	class:BinomialQueue
BinomialQueue	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    BinomialQueue( const Comparable & item ) : theTrees( 1 ), currentSize{ 1 }$/;"	f	class:BinomialQueue
BinomialQueue	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^class BinomialQueue$/;"	c
DEFAULT_TREES	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    const static int DEFAULT_TREES = 1;$/;"	m	class:BinomialQueue
capacity	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    int capacity( ) const$/;"	f	class:BinomialQueue
clone	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    BinomialNode * clone( BinomialNode * t ) const$/;"	f	class:BinomialQueue
combineTrees	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    BinomialNode * combineTrees( BinomialNode *t1, BinomialNode *t2 )$/;"	f	class:BinomialQueue
currentSize	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    int currentSize;                  \/\/ Number of items in the priority queue$/;"	m	class:BinomialQueue
deleteMin	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    void deleteMin( )$/;"	f	class:BinomialQueue
deleteMin	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    void deleteMin( Comparable & minItem )$/;"	f	class:BinomialQueue
element	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^        Comparable    element;$/;"	m	struct:BinomialQueue::BinomialNode
findMin	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    const Comparable & findMin( ) const$/;"	f	class:BinomialQueue
findMinIndex	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    int findMinIndex( ) const$/;"	f	class:BinomialQueue
insert	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    void insert( Comparable && x )$/;"	f	class:BinomialQueue
insert	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    void insert( const Comparable & x )$/;"	f	class:BinomialQueue
isEmpty	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    bool isEmpty( ) const$/;"	f	class:BinomialQueue
leftChild	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^        BinomialNode *leftChild;$/;"	m	struct:BinomialQueue::BinomialNode
makeEmpty	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    void makeEmpty( )$/;"	f	class:BinomialQueue
makeEmpty	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    void makeEmpty( BinomialNode * & t )$/;"	f	class:BinomialQueue
merge	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    void merge( BinomialQueue & rhs )$/;"	f	class:BinomialQueue
nextSibling	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^        BinomialNode *nextSibling;$/;"	m	struct:BinomialQueue::BinomialNode
operator =	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    BinomialQueue & operator=( BinomialQueue && rhs )$/;"	f	class:BinomialQueue
operator =	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    BinomialQueue & operator=( const BinomialQueue & rhs )$/;"	f	class:BinomialQueue
theTrees	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    vector<BinomialNode *> theTrees;  \/\/ An array of tree roots$/;"	m	class:BinomialQueue
~BinomialQueue	FundamentalDataStructures\SourceCode\BinomialQueue.h	/^    ~BinomialQueue( )$/;"	f	class:BinomialQueue
IntCell	FundamentalDataStructures\SourceCode\BuggyIntCell.cpp	/^    explicit IntCell( int initialValue = 0 )$/;"	f	class:IntCell
IntCell	FundamentalDataStructures\SourceCode\BuggyIntCell.cpp	/^class IntCell$/;"	c	file:
f	FundamentalDataStructures\SourceCode\BuggyIntCell.cpp	/^int f( )$/;"	f
main	FundamentalDataStructures\SourceCode\BuggyIntCell.cpp	/^int main( )$/;"	f
read	FundamentalDataStructures\SourceCode\BuggyIntCell.cpp	/^    int read( ) const$/;"	f	class:IntCell
storedValue	FundamentalDataStructures\SourceCode\BuggyIntCell.cpp	/^    int *storedValue;$/;"	m	class:IntCell	file:
write	FundamentalDataStructures\SourceCode\BuggyIntCell.cpp	/^    void write( int x )$/;"	f	class:IntCell
CaseInsensitive	FundamentalDataStructures\SourceCode\CaseInsensitiveHashTable.cpp	/^class CaseInsensitive$/;"	c	file:
equalsIgnoreCase	FundamentalDataStructures\SourceCode\CaseInsensitiveHashTable.cpp	/^bool equalsIgnoreCase( const string & lhs, const string & rhs )$/;"	f
main	FundamentalDataStructures\SourceCode\CaseInsensitiveHashTable.cpp	/^int main( )$/;"	f
operator	FundamentalDataStructures\SourceCode\CaseInsensitiveHashTable.cpp	/^    bool operator( ) ( const string & lhs, const string & rhs ) const$/;"	f	class:CaseInsensitive
operator	FundamentalDataStructures\SourceCode\CaseInsensitiveHashTable.cpp	/^    size_t operator( ) ( const string & s ) const$/;"	f	class:CaseInsensitive
toLower	FundamentalDataStructures\SourceCode\CaseInsensitiveHashTable.cpp	/^string toLower( const string & s )$/;"	f
hashCode	FundamentalDataStructures\SourceCode\CuckooHashTable.cpp	/^int hashCode( const string & key )$/;"	f
hashCode	FundamentalDataStructures\SourceCode\CuckooHashTable.cpp	/^int hashCode( int key )$/;"	f
isPrime	FundamentalDataStructures\SourceCode\CuckooHashTable.cpp	/^bool isPrime( int n )$/;"	f
nextPrime	FundamentalDataStructures\SourceCode\CuckooHashTable.cpp	/^int nextPrime( int n )$/;"	f
ALLOWED_REHASHES	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    static const int ALLOWED_REHASHES = 5;$/;"	m	class:HashTable
CUCKOO_HASH_TABLE_H	FundamentalDataStructures\SourceCode\CuckooHashTable.h	2;"	d
CuckooHashFamily	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^class CuckooHashFamily$/;"	c
HashEntry	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^        HashEntry( AnyType && e, bool a = false )$/;"	f	struct:HashTable::HashEntry
HashEntry	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^        HashEntry( const AnyType & e = AnyType( ), bool a = false )$/;"	f	struct:HashTable::HashEntry
HashEntry	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    struct HashEntry$/;"	s	class:HashTable
HashTable	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    explicit HashTable( int size = 101 ) : array( nextPrime( size ) )$/;"	f	class:HashTable
HashTable	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^class HashTable$/;"	c
MAX_LOAD	FundamentalDataStructures\SourceCode\CuckooHashTable.h	61;"	d
MULTIPLIERS	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    vector<int> MULTIPLIERS;$/;"	m	class:StringHashFamily
StringHashFamily	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    StringHashFamily( ) : MULTIPLIERS( count )$/;"	f	class:StringHashFamily
StringHashFamily	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^class StringHashFamily$/;"	c
array	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    vector<HashEntry> array;$/;"	m	class:HashTable
capacity	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    int capacity( ) const$/;"	f	class:HashTable
contains	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    bool contains( const AnyType & x ) const$/;"	f	class:HashTable
currentSize	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    int currentSize;$/;"	m	class:HashTable
element	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^        AnyType element;$/;"	m	struct:HashTable::HashEntry
expand	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    void expand( )$/;"	f	class:HashTable
findPos	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    int findPos( const AnyType & x ) const$/;"	f	class:HashTable
generateNewFunctions	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    void generateNewFunctions( )$/;"	f	class:StringHashFamily
getNumberOfFunctions	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    int getNumberOfFunctions( ) const$/;"	f	class:StringHashFamily
hash	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    size_t hash( const string & x, int which ) const$/;"	f	class:StringHashFamily
hashFunctions	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    HashFamily hashFunctions;$/;"	m	class:HashTable
insert	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    bool insert( AnyType && x )$/;"	f	class:HashTable
insert	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    bool insert( const AnyType & x )$/;"	f	class:HashTable
insertHelper1	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    bool insertHelper1( AnyType && x )$/;"	f	class:HashTable
insertHelper1	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    bool insertHelper1( const AnyType & xx )$/;"	f	class:HashTable
isActive	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^        bool isActive;$/;"	m	struct:HashTable::HashEntry
isActive	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    bool isActive( int currentPos ) const$/;"	f	class:HashTable
makeEmpty	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    void makeEmpty( )$/;"	f	class:HashTable
myhash	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    size_t myhash( const AnyType & x, int which ) const$/;"	f	class:HashTable
numHashFunctions	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    int numHashFunctions;$/;"	m	class:HashTable
r	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    UniformRandom r;$/;"	m	class:HashTable
r	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    UniformRandom r;$/;"	m	class:StringHashFamily
rehash	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    void rehash( )$/;"	f	class:HashTable
rehash	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    void rehash( int newSize )$/;"	f	class:HashTable
rehashes	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    int rehashes;$/;"	m	class:HashTable
remove	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    bool remove( const AnyType & x )$/;"	f	class:HashTable
size	FundamentalDataStructures\SourceCode\CuckooHashTable.h	/^    int size( ) const$/;"	f	class:HashTable
DisjSets	FundamentalDataStructures\SourceCode\DisjSets.cpp	/^DisjSets::DisjSets( int numElements ) : s{ numElements, -1 }$/;"	f	class:DisjSets
find	FundamentalDataStructures\SourceCode\DisjSets.cpp	/^int DisjSets::find( int x ) const$/;"	f	class:DisjSets
find	FundamentalDataStructures\SourceCode\DisjSets.cpp	/^int DisjSets::find( int x )$/;"	f	class:DisjSets
unionSets	FundamentalDataStructures\SourceCode\DisjSets.cpp	/^void DisjSets::unionSets( int root1, int root2 )$/;"	f	class:DisjSets
DISJ_SETS_H	FundamentalDataStructures\SourceCode\DisjSets.h	2;"	d
DisjSets	FundamentalDataStructures\SourceCode\DisjSets.h	/^class DisjSets$/;"	c
s	FundamentalDataStructures\SourceCode\DisjSets.h	/^    vector<int> s;$/;"	m	class:DisjSets
f	FundamentalDataStructures\SourceCode\Fig01_02.cpp	/^int f( int x )$/;"	f
main	FundamentalDataStructures\SourceCode\Fig01_02.cpp	/^int main( )$/;"	f
bad	FundamentalDataStructures\SourceCode\Fig01_03.cpp	/^int bad( int n )$/;"	f
main	FundamentalDataStructures\SourceCode\Fig01_03.cpp	/^int main( )$/;"	f
main	FundamentalDataStructures\SourceCode\Fig01_04.cpp	/^int main(  )$/;"	f
printDigit	FundamentalDataStructures\SourceCode\Fig01_04.cpp	/^void printDigit( int n )$/;"	f
printOut	FundamentalDataStructures\SourceCode\Fig01_04.cpp	/^void printOut( int n )  \/\/ Print nonnegative n$/;"	f
IntCell	FundamentalDataStructures\SourceCode\Fig01_05.cpp	/^    IntCell( )$/;"	f	class:IntCell
IntCell	FundamentalDataStructures\SourceCode\Fig01_05.cpp	/^    IntCell( int initialValue )$/;"	f	class:IntCell
IntCell	FundamentalDataStructures\SourceCode\Fig01_05.cpp	/^class IntCell$/;"	c	file:
main	FundamentalDataStructures\SourceCode\Fig01_05.cpp	/^int main( )$/;"	f
read	FundamentalDataStructures\SourceCode\Fig01_05.cpp	/^    int read( )$/;"	f	class:IntCell
storedValue	FundamentalDataStructures\SourceCode\Fig01_05.cpp	/^    int storedValue;$/;"	m	class:IntCell	file:
write	FundamentalDataStructures\SourceCode\Fig01_05.cpp	/^    void write( int x )$/;"	f	class:IntCell
IntCell	FundamentalDataStructures\SourceCode\Fig01_06.cpp	/^    explicit IntCell( int initialValue = 0 )$/;"	f	class:IntCell
IntCell	FundamentalDataStructures\SourceCode\Fig01_06.cpp	/^class IntCell$/;"	c	file:
main	FundamentalDataStructures\SourceCode\Fig01_06.cpp	/^int main( )$/;"	f
read	FundamentalDataStructures\SourceCode\Fig01_06.cpp	/^    int read( ) const$/;"	f	class:IntCell
storedValue	FundamentalDataStructures\SourceCode\Fig01_06.cpp	/^    int storedValue;$/;"	m	class:IntCell	file:
write	FundamentalDataStructures\SourceCode\Fig01_06.cpp	/^    void write( int x )$/;"	f	class:IntCell
main	FundamentalDataStructures\SourceCode\Fig01_10.cpp	/^int main( )$/;"	f
main	FundamentalDataStructures\SourceCode\Fig01_11.cpp	/^int main( )$/;"	f
IntCell	FundamentalDataStructures\SourceCode\Fig01_18.cpp	/^    IntCell( IntCell && rhs ) : storedValue{ rhs.storedValue }$/;"	f	class:IntCell
IntCell	FundamentalDataStructures\SourceCode\Fig01_18.cpp	/^    IntCell( const IntCell & rhs )$/;"	f	class:IntCell
IntCell	FundamentalDataStructures\SourceCode\Fig01_18.cpp	/^    explicit IntCell( int initialValue = 0 )$/;"	f	class:IntCell
IntCell	FundamentalDataStructures\SourceCode\Fig01_18.cpp	/^class IntCell$/;"	c	file:
f	FundamentalDataStructures\SourceCode\Fig01_18.cpp	/^int f( )$/;"	f
main	FundamentalDataStructures\SourceCode\Fig01_18.cpp	/^int main( )$/;"	f
myswap	FundamentalDataStructures\SourceCode\Fig01_18.cpp	/^void myswap( IntCell & lhs, IntCell & rhs )$/;"	f
operator =	FundamentalDataStructures\SourceCode\Fig01_18.cpp	/^    IntCell & operator= ( IntCell && rhs )$/;"	f	class:IntCell
operator =	FundamentalDataStructures\SourceCode\Fig01_18.cpp	/^    IntCell & operator= ( const IntCell & rhs )$/;"	f	class:IntCell
read	FundamentalDataStructures\SourceCode\Fig01_18.cpp	/^    int read( ) const$/;"	f	class:IntCell
storedValue	FundamentalDataStructures\SourceCode\Fig01_18.cpp	/^    int *storedValue;$/;"	m	class:IntCell	file:
write	FundamentalDataStructures\SourceCode\Fig01_18.cpp	/^    void write( int x )$/;"	f	class:IntCell
~IntCell	FundamentalDataStructures\SourceCode\Fig01_18.cpp	/^    ~IntCell( )$/;"	f	class:IntCell
MemoryCell	FundamentalDataStructures\SourceCode\Fig01_21.cpp	/^    explicit MemoryCell( const Object & initialValue = Object{ } )$/;"	f	class:MemoryCell
MemoryCell	FundamentalDataStructures\SourceCode\Fig01_21.cpp	/^class MemoryCell$/;"	c	file:
main	FundamentalDataStructures\SourceCode\Fig01_21.cpp	/^int main( )$/;"	f
read	FundamentalDataStructures\SourceCode\Fig01_21.cpp	/^    const Object & read( ) const$/;"	f	class:MemoryCell
storedValue	FundamentalDataStructures\SourceCode\Fig01_21.cpp	/^    Object storedValue;$/;"	m	class:MemoryCell	file:
write	FundamentalDataStructures\SourceCode\Fig01_21.cpp	/^    void write( const Object & x )$/;"	f	class:MemoryCell
Square	FundamentalDataStructures\SourceCode\Fig01_23.cpp	/^    explicit Square( double s = 0.0 ) : side{ s }$/;"	f	class:Square
Square	FundamentalDataStructures\SourceCode\Fig01_23.cpp	/^class Square$/;"	c	file:
findMax	FundamentalDataStructures\SourceCode\Fig01_23.cpp	/^const Comparable & findMax( const vector<Comparable> & a )$/;"	f
getArea	FundamentalDataStructures\SourceCode\Fig01_23.cpp	/^    double getArea( ) const$/;"	f	class:Square
getPerimeter	FundamentalDataStructures\SourceCode\Fig01_23.cpp	/^    double getPerimeter( ) const$/;"	f	class:Square
getSide	FundamentalDataStructures\SourceCode\Fig01_23.cpp	/^    double getSide( ) const$/;"	f	class:Square
main	FundamentalDataStructures\SourceCode\Fig01_23.cpp	/^int main( )$/;"	f
operator <	FundamentalDataStructures\SourceCode\Fig01_23.cpp	/^    bool operator< ( const Square & rhs ) const$/;"	f	class:Square
operator <<	FundamentalDataStructures\SourceCode\Fig01_23.cpp	/^ostream & operator<< ( ostream & out, const Square & rhs )$/;"	f
print	FundamentalDataStructures\SourceCode\Fig01_23.cpp	/^    void print( ostream & out = cout ) const$/;"	f	class:Square
side	FundamentalDataStructures\SourceCode\Fig01_23.cpp	/^    double side;$/;"	m	class:Square	file:
CaseInsensitiveCompare	FundamentalDataStructures\SourceCode\Fig01_24.cpp	/^class CaseInsensitiveCompare$/;"	c	file:
findMax	FundamentalDataStructures\SourceCode\Fig01_24.cpp	/^const Object & findMax( const vector<Object> & arr, Comparator cmp )$/;"	f
isLessThan	FundamentalDataStructures\SourceCode\Fig01_24.cpp	/^    bool isLessThan( const string & lhs, const string & rhs ) const$/;"	f	class:CaseInsensitiveCompare
main	FundamentalDataStructures\SourceCode\Fig01_24.cpp	/^int main( )$/;"	f
CaseInsensitiveCompare	FundamentalDataStructures\SourceCode\Fig01_25.cpp	/^class CaseInsensitiveCompare$/;"	c	file:
findMax	FundamentalDataStructures\SourceCode\Fig01_25.cpp	/^const Object & findMax( const vector<Object> & arr )$/;"	f
findMax	FundamentalDataStructures\SourceCode\Fig01_25.cpp	/^const Object & findMax( const vector<Object> & arr, Comparator isLessThan )$/;"	f
main	FundamentalDataStructures\SourceCode\Fig01_25.cpp	/^int main( )$/;"	f
operator	FundamentalDataStructures\SourceCode\Fig01_25.cpp	/^    bool operator( )( const string & lhs, const string & rhs ) const$/;"	f	class:CaseInsensitiveCompare
NOT_FOUND	FundamentalDataStructures\SourceCode\Fig02_09.cpp	/^const int NOT_FOUND = -1;$/;"	v
binarySearch	FundamentalDataStructures\SourceCode\Fig02_09.cpp	/^int binarySearch( const vector<Comparable> & a, const Comparable & x )$/;"	f
main	FundamentalDataStructures\SourceCode\Fig02_09.cpp	/^int main( )$/;"	f
gcd	FundamentalDataStructures\SourceCode\Fig02_10.cpp	/^long gcd( long m, long n )$/;"	f
main	FundamentalDataStructures\SourceCode\Fig02_10.cpp	/^int main( )$/;"	f
isEven	FundamentalDataStructures\SourceCode\Fig02_11.cpp	/^bool isEven( int n )$/;"	f
main	FundamentalDataStructures\SourceCode\Fig02_11.cpp	/^int main( )$/;"	f
pow	FundamentalDataStructures\SourceCode\Fig02_11.cpp	/^long long pow( long long x, int n )$/;"	f
main	FundamentalDataStructures\SourceCode\Fig10_38.cpp	/^int main( )$/;"	f
operator *	FundamentalDataStructures\SourceCode\Fig10_38.cpp	/^matrix<int> operator*( const matrix<int> & a, const matrix<int> & b )$/;"	f
fib	FundamentalDataStructures\SourceCode\Fig10_40.cpp	/^long long fib( int n )$/;"	f
fibonacci	FundamentalDataStructures\SourceCode\Fig10_40.cpp	/^long long fibonacci( int n )$/;"	f
main	FundamentalDataStructures\SourceCode\Fig10_40.cpp	/^int main( )$/;"	f
eval	FundamentalDataStructures\SourceCode\Fig10_43.cpp	/^double eval( int n )$/;"	f
main	FundamentalDataStructures\SourceCode\Fig10_43.cpp	/^int main( )$/;"	f
eval	FundamentalDataStructures\SourceCode\Fig10_45.cpp	/^double eval( int n )$/;"	f
main	FundamentalDataStructures\SourceCode\Fig10_45.cpp	/^int main( )$/;"	f
INFINITY	FundamentalDataStructures\SourceCode\Fig10_46.cpp	/^const int INFINITY = INT_MAX;$/;"	v
main	FundamentalDataStructures\SourceCode\Fig10_46.cpp	/^int main( )$/;"	f
optMatrix	FundamentalDataStructures\SourceCode\Fig10_46.cpp	/^void optMatrix( const vector<int> & c,$/;"	f
NOT_A_VERTEX	FundamentalDataStructures\SourceCode\Fig10_53.cpp	/^const int NOT_A_VERTEX = -1;$/;"	v
allPairs	FundamentalDataStructures\SourceCode\Fig10_53.cpp	/^void allPairs( const matrix<int> & a,$/;"	f
main	FundamentalDataStructures\SourceCode\Fig10_53.cpp	/^int main( )$/;"	f
HugeInt	FundamentalDataStructures\SourceCode\Fig10_63.cpp	/^typedef long long HugeInt;$/;"	t	file:
TRIALS	FundamentalDataStructures\SourceCode\Fig10_63.cpp	/^const int TRIALS = 5;$/;"	v
isPrime	FundamentalDataStructures\SourceCode\Fig10_63.cpp	/^bool isPrime( const HugeInt & n )$/;"	f
main	FundamentalDataStructures\SourceCode\Fig10_63.cpp	/^int main( )$/;"	f
witness	FundamentalDataStructures\SourceCode\Fig10_63.cpp	/^HugeInt witness( const HugeInt & a, const HugeInt & i, const HugeInt & n )$/;"	f
findMax	FundamentalDataStructures\SourceCode\FindMax.cpp	/^const Comparable & findMax( const vector<Comparable> & a )$/;"	f
main	FundamentalDataStructures\SourceCode\FindMax.cpp	/^int main( )$/;"	f
IntCell	FundamentalDataStructures\SourceCode\IntCell.cpp	/^IntCell::IntCell( int initialValue ) : storedValue{ initialValue }$/;"	f	class:IntCell
read	FundamentalDataStructures\SourceCode\IntCell.cpp	/^int IntCell::read( ) const$/;"	f	class:IntCell
write	FundamentalDataStructures\SourceCode\IntCell.cpp	/^void IntCell::write( int x )$/;"	f	class:IntCell
IntCell	FundamentalDataStructures\SourceCode\IntCell.h	/^class IntCell$/;"	c
IntCell_H	FundamentalDataStructures\SourceCode\IntCell.h	2;"	d
storedValue	FundamentalDataStructures\SourceCode\IntCell.h	/^    int storedValue;$/;"	m	class:IntCell
KdNode	FundamentalDataStructures\SourceCode\KdTree.cpp	/^        KdNode( const vector<Comparable> & item )$/;"	f	struct:KdTree::KdNode
KdNode	FundamentalDataStructures\SourceCode\KdTree.cpp	/^    struct KdNode$/;"	s	class:KdTree	file:
KdTree	FundamentalDataStructures\SourceCode\KdTree.cpp	/^    KdTree( ) : root( nullptr ) { }$/;"	f	class:KdTree
KdTree	FundamentalDataStructures\SourceCode\KdTree.cpp	/^class KdTree$/;"	c	file:
data	FundamentalDataStructures\SourceCode\KdTree.cpp	/^        vector<Comparable> data;$/;"	m	struct:KdTree::KdNode	file:
insert	FundamentalDataStructures\SourceCode\KdTree.cpp	/^    void insert( const vector<Comparable> & x )$/;"	f	class:KdTree
insert	FundamentalDataStructures\SourceCode\KdTree.cpp	/^    void insert( const vector<Comparable> & x, KdNode * & t, int level )$/;"	f	class:KdTree	file:
left	FundamentalDataStructures\SourceCode\KdTree.cpp	/^        KdNode            *left;$/;"	m	struct:KdTree::KdNode	file:
main	FundamentalDataStructures\SourceCode\KdTree.cpp	/^int main( )$/;"	f
printRange	FundamentalDataStructures\SourceCode\KdTree.cpp	/^    void printRange( const vector<Comparable> & low, $/;"	f	class:KdTree
printRange	FundamentalDataStructures\SourceCode\KdTree.cpp	/^    void printRange( const vector<Comparable> & low,$/;"	f	class:KdTree	file:
right	FundamentalDataStructures\SourceCode\KdTree.cpp	/^        KdNode            *right;$/;"	m	struct:KdTree::KdNode	file:
root	FundamentalDataStructures\SourceCode\KdTree.cpp	/^    KdNode *root;$/;"	m	class:KdTree	file:
findMax	FundamentalDataStructures\SourceCode\LambdaExample.cpp	/^const Object & findMax( const vector<Object> & arr )$/;"	f
findMax	FundamentalDataStructures\SourceCode\LambdaExample.cpp	/^const Object & findMax( const vector<Object> & arr, Comparator isLessThan )$/;"	f
main	FundamentalDataStructures\SourceCode\LambdaExample.cpp	/^int main( )$/;"	f
LEFTIST_HEAP_H	FundamentalDataStructures\SourceCode\LeftistHeap.h	2;"	d
LeftistHeap	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    LeftistHeap( ) : root{ nullptr }$/;"	f	class:LeftistHeap
LeftistHeap	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    LeftistHeap( LeftistHeap && rhs ) : root{ rhs.root }$/;"	f	class:LeftistHeap
LeftistHeap	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    LeftistHeap( const LeftistHeap & rhs ) : root{ nullptr }$/;"	f	class:LeftistHeap
LeftistHeap	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^class LeftistHeap$/;"	c
LeftistNode	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^        LeftistNode( Comparable && e, LeftistNode *lt = nullptr,$/;"	f	struct:LeftistHeap::LeftistNode
LeftistNode	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^        LeftistNode( const Comparable & e, LeftistNode *lt = nullptr,$/;"	f	struct:LeftistHeap::LeftistNode
LeftistNode	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    struct LeftistNode$/;"	s	class:LeftistHeap
clone	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    LeftistNode * clone( LeftistNode *t ) const$/;"	f	class:LeftistHeap
deleteMin	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    void deleteMin( )$/;"	f	class:LeftistHeap
deleteMin	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    void deleteMin( Comparable & minItem )$/;"	f	class:LeftistHeap
element	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^        Comparable   element;$/;"	m	struct:LeftistHeap::LeftistNode
findMin	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    const Comparable & findMin( ) const$/;"	f	class:LeftistHeap
insert	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    void insert( Comparable && x )$/;"	f	class:LeftistHeap
insert	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    void insert( const Comparable & x )$/;"	f	class:LeftistHeap
isEmpty	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    bool isEmpty( ) const$/;"	f	class:LeftistHeap
left	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^        LeftistNode *left;$/;"	m	struct:LeftistHeap::LeftistNode
makeEmpty	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    void makeEmpty( )$/;"	f	class:LeftistHeap
merge	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    LeftistNode * merge( LeftistNode *h1, LeftistNode *h2 )$/;"	f	class:LeftistHeap
merge	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    void merge( LeftistHeap & rhs )$/;"	f	class:LeftistHeap
merge1	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    LeftistNode * merge1( LeftistNode *h1, LeftistNode *h2 )$/;"	f	class:LeftistHeap
npl	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^        int          npl;$/;"	m	struct:LeftistHeap::LeftistNode
operator =	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    LeftistHeap & operator=( LeftistHeap && rhs )$/;"	f	class:LeftistHeap
operator =	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    LeftistHeap & operator=( const LeftistHeap & rhs )$/;"	f	class:LeftistHeap
reclaimMemory	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    void reclaimMemory( LeftistNode *t )$/;"	f	class:LeftistHeap
right	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^        LeftistNode *right;$/;"	m	struct:LeftistHeap::LeftistNode
root	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    LeftistNode *root;$/;"	m	class:LeftistHeap
swapChildren	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    void swapChildren( LeftistNode *t )$/;"	f	class:LeftistHeap
~LeftistHeap	FundamentalDataStructures\SourceCode\LeftistHeap.h	/^    ~LeftistHeap( )$/;"	f	class:LeftistHeap
LIST_H	FundamentalDataStructures\SourceCode\List.h	2;"	d
List	FundamentalDataStructures\SourceCode\List.h	/^    List( )$/;"	f	class:List
List	FundamentalDataStructures\SourceCode\List.h	/^    List( List && rhs )$/;"	f	class:List
List	FundamentalDataStructures\SourceCode\List.h	/^    List( const List & rhs )$/;"	f	class:List
List	FundamentalDataStructures\SourceCode\List.h	/^class List$/;"	c
Node	FundamentalDataStructures\SourceCode\List.h	/^        Node( Object && d, Node * p = nullptr, Node * n = nullptr )$/;"	f	struct:List::Node
Node	FundamentalDataStructures\SourceCode\List.h	/^        Node( const Object & d = Object{ }, Node * p = nullptr, Node * n = nullptr )$/;"	f	struct:List::Node
Node	FundamentalDataStructures\SourceCode\List.h	/^    struct Node$/;"	s	class:List
back	FundamentalDataStructures\SourceCode\List.h	/^    Object & back( )$/;"	f	class:List
back	FundamentalDataStructures\SourceCode\List.h	/^    const Object & back( ) const$/;"	f	class:List
begin	FundamentalDataStructures\SourceCode\List.h	/^    const_iterator begin( ) const$/;"	f	class:List
begin	FundamentalDataStructures\SourceCode\List.h	/^    iterator begin( )$/;"	f	class:List
clear	FundamentalDataStructures\SourceCode\List.h	/^    void clear( )$/;"	f	class:List
const_iterator	FundamentalDataStructures\SourceCode\List.h	/^        const_iterator( ) : current{ nullptr }$/;"	f	class:List::const_iterator
const_iterator	FundamentalDataStructures\SourceCode\List.h	/^        const_iterator( Node *p ) :  current{ p }$/;"	f	class:List::const_iterator
const_iterator	FundamentalDataStructures\SourceCode\List.h	/^    class const_iterator$/;"	c	class:List
current	FundamentalDataStructures\SourceCode\List.h	/^        Node *current;$/;"	m	class:List::const_iterator
data	FundamentalDataStructures\SourceCode\List.h	/^        Object  data;$/;"	m	struct:List::Node
empty	FundamentalDataStructures\SourceCode\List.h	/^    bool empty( ) const$/;"	f	class:List
end	FundamentalDataStructures\SourceCode\List.h	/^    const_iterator end( ) const$/;"	f	class:List
end	FundamentalDataStructures\SourceCode\List.h	/^    iterator end( )$/;"	f	class:List
erase	FundamentalDataStructures\SourceCode\List.h	/^    iterator erase( iterator from, iterator to )$/;"	f	class:List
erase	FundamentalDataStructures\SourceCode\List.h	/^    iterator erase( iterator itr )$/;"	f	class:List
front	FundamentalDataStructures\SourceCode\List.h	/^    Object & front( )$/;"	f	class:List
front	FundamentalDataStructures\SourceCode\List.h	/^    const Object & front( ) const$/;"	f	class:List
head	FundamentalDataStructures\SourceCode\List.h	/^    Node *head;$/;"	m	class:List
init	FundamentalDataStructures\SourceCode\List.h	/^    void init( )$/;"	f	class:List
insert	FundamentalDataStructures\SourceCode\List.h	/^    iterator insert( iterator itr, Object && x )$/;"	f	class:List
insert	FundamentalDataStructures\SourceCode\List.h	/^    iterator insert( iterator itr, const Object & x )$/;"	f	class:List
iterator	FundamentalDataStructures\SourceCode\List.h	/^        iterator( )$/;"	f	class:List::iterator
iterator	FundamentalDataStructures\SourceCode\List.h	/^        iterator( Node *p ) : const_iterator{ p }$/;"	f	class:List::iterator
iterator	FundamentalDataStructures\SourceCode\List.h	/^    class iterator : public const_iterator$/;"	c	class:List
next	FundamentalDataStructures\SourceCode\List.h	/^        Node   *next;$/;"	m	struct:List::Node
operator !=	FundamentalDataStructures\SourceCode\List.h	/^        bool operator!= ( const const_iterator & rhs ) const$/;"	f	class:List::const_iterator
operator *	FundamentalDataStructures\SourceCode\List.h	/^        Object & operator* ( )$/;"	f	class:List::iterator
operator *	FundamentalDataStructures\SourceCode\List.h	/^        const Object & operator* ( ) const$/;"	f	class:List::const_iterator
operator *	FundamentalDataStructures\SourceCode\List.h	/^        const Object & operator* ( ) const$/;"	f	class:List::iterator
operator ++	FundamentalDataStructures\SourceCode\List.h	/^        const_iterator & operator++ ( )$/;"	f	class:List::const_iterator
operator ++	FundamentalDataStructures\SourceCode\List.h	/^        const_iterator operator++ ( int )$/;"	f	class:List::const_iterator
operator ++	FundamentalDataStructures\SourceCode\List.h	/^        iterator & operator++ ( )$/;"	f	class:List::iterator
operator ++	FundamentalDataStructures\SourceCode\List.h	/^        iterator operator++ ( int )$/;"	f	class:List::iterator
operator --	FundamentalDataStructures\SourceCode\List.h	/^        const_iterator & operator-- ( )$/;"	f	class:List::const_iterator
operator --	FundamentalDataStructures\SourceCode\List.h	/^        const_iterator operator-- ( int )$/;"	f	class:List::const_iterator
operator --	FundamentalDataStructures\SourceCode\List.h	/^        iterator & operator-- ( )$/;"	f	class:List::iterator
operator --	FundamentalDataStructures\SourceCode\List.h	/^        iterator operator-- ( int )$/;"	f	class:List::iterator
operator =	FundamentalDataStructures\SourceCode\List.h	/^    List & operator= ( List && rhs )$/;"	f	class:List
operator =	FundamentalDataStructures\SourceCode\List.h	/^    List & operator= ( const List & rhs )$/;"	f	class:List
operator ==	FundamentalDataStructures\SourceCode\List.h	/^        bool operator== ( const const_iterator & rhs ) const$/;"	f	class:List::const_iterator
pop_back	FundamentalDataStructures\SourceCode\List.h	/^    void pop_back( )$/;"	f	class:List
pop_front	FundamentalDataStructures\SourceCode\List.h	/^    void pop_front( )$/;"	f	class:List
prev	FundamentalDataStructures\SourceCode\List.h	/^        Node   *prev;$/;"	m	struct:List::Node
push_back	FundamentalDataStructures\SourceCode\List.h	/^    void push_back( Object && x )$/;"	f	class:List
push_back	FundamentalDataStructures\SourceCode\List.h	/^    void push_back( const Object & x )$/;"	f	class:List
push_front	FundamentalDataStructures\SourceCode\List.h	/^    void push_front( Object && x )$/;"	f	class:List
push_front	FundamentalDataStructures\SourceCode\List.h	/^    void push_front( const Object & x )$/;"	f	class:List
retrieve	FundamentalDataStructures\SourceCode\List.h	/^        Object & retrieve( ) const$/;"	f	class:List::const_iterator
size	FundamentalDataStructures\SourceCode\List.h	/^    int size( ) const$/;"	f	class:List
tail	FundamentalDataStructures\SourceCode\List.h	/^    Node *tail;$/;"	m	class:List
theSize	FundamentalDataStructures\SourceCode\List.h	/^    int   theSize;$/;"	m	class:List
~List	FundamentalDataStructures\SourceCode\List.h	/^    ~List( )$/;"	f	class:List
main	FundamentalDataStructures\SourceCode\MaxSumTest.cpp	/^int main( )$/;"	f
max3	FundamentalDataStructures\SourceCode\MaxSumTest.cpp	/^int max3( int a, int b, int c )$/;"	f
maxSubSum1	FundamentalDataStructures\SourceCode\MaxSumTest.cpp	/^int maxSubSum1( const vector<int> & a )$/;"	f
maxSubSum2	FundamentalDataStructures\SourceCode\MaxSumTest.cpp	/^int maxSubSum2( const vector<int> & a )$/;"	f
maxSubSum3	FundamentalDataStructures\SourceCode\MaxSumTest.cpp	/^int maxSubSum3( const vector<int> & a )$/;"	f
maxSubSum4	FundamentalDataStructures\SourceCode\MaxSumTest.cpp	/^int maxSubSum4( const vector<int> & a )$/;"	f
maxSumRec	FundamentalDataStructures\SourceCode\MaxSumTest.cpp	/^int maxSumRec( const vector<int> & a, int left, int right )$/;"	f
MemoryCell	FundamentalDataStructures\SourceCode\MemoryCell.cpp	/^MemoryCell<Object>::MemoryCell( const Object & initialValue )$/;"	f	class:MemoryCell
read	FundamentalDataStructures\SourceCode\MemoryCell.cpp	/^const Object & MemoryCell<Object>::read( ) const$/;"	f	class:MemoryCell
write	FundamentalDataStructures\SourceCode\MemoryCell.cpp	/^void MemoryCell<Object>::write( const Object & x )$/;"	f	class:MemoryCell
MEMORY_CELL_H	FundamentalDataStructures\SourceCode\MemoryCell.h	2;"	d
MemoryCell	FundamentalDataStructures\SourceCode\MemoryCell.h	/^class MemoryCell$/;"	c
storedValue	FundamentalDataStructures\SourceCode\MemoryCell.h	/^    Object storedValue;$/;"	m	class:MemoryCell
PAIRING_HEAP_H	FundamentalDataStructures\SourceCode\PairingHeap.h	2;"	d
PairNode	FundamentalDataStructures\SourceCode\PairingHeap.h	/^        PairNode( Comparable && theElement ) : element( std::move( theElement ) ),$/;"	f	struct:PairingHeap::PairNode
PairNode	FundamentalDataStructures\SourceCode\PairingHeap.h	/^        PairNode( const Comparable & theElement ) : element{ theElement },$/;"	f	struct:PairingHeap::PairNode
PairNode	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    struct PairNode$/;"	s	class:PairingHeap
PairingHeap	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    PairingHeap( )$/;"	f	class:PairingHeap
PairingHeap	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    PairingHeap( PairingHeap && rhs ) : root{ rhs.root }$/;"	f	class:PairingHeap
PairingHeap	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    PairingHeap( const PairingHeap & rhs ) : root{ nullptr }$/;"	f	class:PairingHeap
PairingHeap	FundamentalDataStructures\SourceCode\PairingHeap.h	/^class PairingHeap$/;"	c
Position	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    typedef PairNode * Position;$/;"	t	class:PairingHeap
clone	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    PairNode * clone( PairNode *t )$/;"	f	class:PairingHeap
combineSiblings	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    PairNode * combineSiblings( PairNode *firstSibling )$/;"	f	class:PairingHeap
compareAndLink	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    void compareAndLink( PairNode * & first, PairNode *second )$/;"	f	class:PairingHeap
decreaseKey	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    void decreaseKey( Position p, Comparable && newVal )$/;"	f	class:PairingHeap
decreaseKey	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    void decreaseKey( Position p, const Comparable & newVal )$/;"	f	class:PairingHeap
deleteMin	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    void deleteMin( )$/;"	f	class:PairingHeap
deleteMin	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    void deleteMin( Comparable & minItem )$/;"	f	class:PairingHeap
element	FundamentalDataStructures\SourceCode\PairingHeap.h	/^        Comparable   element;$/;"	m	struct:PairingHeap::PairNode
findMin	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    const Comparable & findMin( ) const$/;"	f	class:PairingHeap
insert	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    Position insert( Comparable && x )$/;"	f	class:PairingHeap
insert	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    Position insert( const Comparable & x )$/;"	f	class:PairingHeap
isEmpty	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    bool isEmpty( ) const$/;"	f	class:PairingHeap
leftChild	FundamentalDataStructures\SourceCode\PairingHeap.h	/^        PairNode    *leftChild;$/;"	m	struct:PairingHeap::PairNode
makeEmpty	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    void makeEmpty( )$/;"	f	class:PairingHeap
nextSibling	FundamentalDataStructures\SourceCode\PairingHeap.h	/^        PairNode    *nextSibling;$/;"	m	struct:PairingHeap::PairNode
operator =	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    PairingHeap & operator=( PairingHeap && rhs )$/;"	f	class:PairingHeap
operator =	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    PairingHeap & operator=( const PairingHeap & rhs )$/;"	f	class:PairingHeap
prev	FundamentalDataStructures\SourceCode\PairingHeap.h	/^        PairNode    *prev;$/;"	m	struct:PairingHeap::PairNode
reclaimMemory	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    void reclaimMemory( PairNode *t )$/;"	f	class:PairingHeap
root	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    PairNode *root;$/;"	m	class:PairingHeap
~PairingHeap	FundamentalDataStructures\SourceCode\PairingHeap.h	/^    ~PairingHeap( )$/;"	f	class:PairingHeap
isPrime	FundamentalDataStructures\SourceCode\QuadraticProbing.cpp	/^bool isPrime( int n )$/;"	f
nextPrime	FundamentalDataStructures\SourceCode\QuadraticProbing.cpp	/^int nextPrime( int n )$/;"	f
ACTIVE	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    enum EntryType { ACTIVE, EMPTY, DELETED };$/;"	e	enum:HashTable::EntryType
DELETED	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    enum EntryType { ACTIVE, EMPTY, DELETED };$/;"	e	enum:HashTable::EntryType
EMPTY	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    enum EntryType { ACTIVE, EMPTY, DELETED };$/;"	e	enum:HashTable::EntryType
EntryType	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    enum EntryType { ACTIVE, EMPTY, DELETED };$/;"	g	class:HashTable
HashEntry	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^        HashEntry( HashedObj && e, EntryType i = EMPTY )$/;"	f	struct:HashTable::HashEntry
HashEntry	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^        HashEntry( const HashedObj & e = HashedObj{ }, EntryType i = EMPTY )$/;"	f	struct:HashTable::HashEntry
HashEntry	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    struct HashEntry$/;"	s	class:HashTable
HashTable	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    explicit HashTable( int size = 101 ) : array( nextPrime( size ) )$/;"	f	class:HashTable
HashTable	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^class HashTable$/;"	c
QUADRATIC_PROBING_H	FundamentalDataStructures\SourceCode\QuadraticProbing.h	2;"	d
array	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    vector<HashEntry> array;$/;"	m	class:HashTable
contains	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    bool contains( const HashedObj & x ) const$/;"	f	class:HashTable
currentSize	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    int currentSize;$/;"	m	class:HashTable
element	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^        HashedObj element;$/;"	m	struct:HashTable::HashEntry
findPos	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    int findPos( const HashedObj & x ) const$/;"	f	class:HashTable
info	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^        EntryType info;$/;"	m	struct:HashTable::HashEntry
insert	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    bool insert( HashedObj && x )$/;"	f	class:HashTable
insert	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    bool insert( const HashedObj & x )$/;"	f	class:HashTable
isActive	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    bool isActive( int currentPos ) const$/;"	f	class:HashTable
makeEmpty	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    void makeEmpty( )$/;"	f	class:HashTable
myhash	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    size_t myhash( const HashedObj & x ) const$/;"	f	class:HashTable
rehash	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    void rehash( )$/;"	f	class:HashTable
remove	FundamentalDataStructures\SourceCode\QuadraticProbing.h	/^    bool remove( const HashedObj & x )$/;"	f	class:HashTable
countingRadixSort	FundamentalDataStructures\SourceCode\RadixSort.cpp	/^void countingRadixSort( vector<string> & arr, int stringLen )$/;"	f
main	FundamentalDataStructures\SourceCode\RadixSort.cpp	/^int main( )$/;"	f
radixSort	FundamentalDataStructures\SourceCode\RadixSort.cpp	/^void radixSort( vector<string> & arr, int maxLen )$/;"	f
radixSortA	FundamentalDataStructures\SourceCode\RadixSort.cpp	/^void radixSortA( vector<string> & arr, int stringLen )$/;"	f
A	FundamentalDataStructures\SourceCode\Random.cpp	/^static const int A = 48271;$/;"	v	file:
M	FundamentalDataStructures\SourceCode\Random.cpp	/^static const int M = 2147483647;$/;"	v	file:
Q	FundamentalDataStructures\SourceCode\Random.cpp	/^static const int Q = M \/ A;$/;"	v	file:
R	FundamentalDataStructures\SourceCode\Random.cpp	/^static const int R = M % A;$/;"	v	file:
Random	FundamentalDataStructures\SourceCode\Random.cpp	/^Random::Random( int initialValue )$/;"	f	class:Random
random0_1	FundamentalDataStructures\SourceCode\Random.cpp	/^double Random::random0_1( )$/;"	f	class:Random
randomInt	FundamentalDataStructures\SourceCode\Random.cpp	/^int Random::randomInt( )$/;"	f	class:Random
randomInt	FundamentalDataStructures\SourceCode\Random.cpp	/^int Random::randomInt( int low, int high )$/;"	f	class:Random
randomIntWRONG	FundamentalDataStructures\SourceCode\Random.cpp	/^int Random::randomIntWRONG( )$/;"	f	class:Random
RANDOM_H	FundamentalDataStructures\SourceCode\Random.h	2;"	d
Random	FundamentalDataStructures\SourceCode\Random.h	/^class Random$/;"	c
state	FundamentalDataStructures\SourceCode\Random.h	/^    int state;$/;"	m	class:Random
BLACK	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    enum { RED, BLACK };$/;"	e	enum:RedBlackTree::__anon53
RED	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    enum { RED, BLACK };$/;"	e	enum:RedBlackTree::__anon53
RED_BLACK_TREE_H	FundamentalDataStructures\SourceCode\RedBlackTree.h	2;"	d
RedBlackNode	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^        RedBlackNode( Comparable && theElement, RedBlackNode *lt = nullptr,$/;"	f	struct:RedBlackTree::RedBlackNode
RedBlackNode	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^        RedBlackNode( const Comparable & theElement = Comparable{ },$/;"	f	struct:RedBlackTree::RedBlackNode
RedBlackNode	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    struct RedBlackNode$/;"	s	class:RedBlackTree
RedBlackTree	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    RedBlackTree( RedBlackTree && rhs )$/;"	f	class:RedBlackTree
RedBlackTree	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    RedBlackTree( const RedBlackTree & rhs )$/;"	f	class:RedBlackTree
RedBlackTree	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    explicit RedBlackTree( const Comparable & negInf )$/;"	f	class:RedBlackTree
RedBlackTree	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^class RedBlackTree$/;"	c
clone	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    RedBlackNode * clone( RedBlackNode * t ) const$/;"	f	class:RedBlackTree
color	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^        int           color;$/;"	m	struct:RedBlackTree::RedBlackNode
contains	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    bool contains( const Comparable & x ) const$/;"	f	class:RedBlackTree
current	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    RedBlackNode *current;$/;"	m	class:RedBlackTree
element	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^        Comparable    element;$/;"	m	struct:RedBlackTree::RedBlackNode
findMax	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    const Comparable & findMax( ) const$/;"	f	class:RedBlackTree
findMin	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    const Comparable & findMin( ) const$/;"	f	class:RedBlackTree
grand	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    RedBlackNode *grand;$/;"	m	class:RedBlackTree
great	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    RedBlackNode *great;$/;"	m	class:RedBlackTree
handleReorient	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    void handleReorient( const Comparable & item )$/;"	f	class:RedBlackTree
header	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    RedBlackNode *header;   \/\/ The tree header (contains negInf)$/;"	m	class:RedBlackTree
insert	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    void insert( const Comparable & x )$/;"	f	class:RedBlackTree
isEmpty	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    bool isEmpty( ) const$/;"	f	class:RedBlackTree
left	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^        RedBlackNode *left;$/;"	m	struct:RedBlackTree::RedBlackNode
makeEmpty	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    void makeEmpty( )$/;"	f	class:RedBlackTree
nullNode	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    RedBlackNode *nullNode;$/;"	m	class:RedBlackTree
operator =	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    RedBlackTree & operator=( RedBlackTree && rhs )$/;"	f	class:RedBlackTree
operator =	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    RedBlackTree & operator=( const RedBlackTree & rhs )$/;"	f	class:RedBlackTree
parent	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    RedBlackNode *parent;$/;"	m	class:RedBlackTree
printTree	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    void printTree( ) const$/;"	f	class:RedBlackTree
printTree	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    void printTree( RedBlackNode *t ) const$/;"	f	class:RedBlackTree
reclaimMemory	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    void reclaimMemory( RedBlackNode *t )$/;"	f	class:RedBlackTree
remove	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    void remove( const Comparable & x )$/;"	f	class:RedBlackTree
right	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^        RedBlackNode *right;$/;"	m	struct:RedBlackTree::RedBlackNode
rotate	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    RedBlackNode * rotate( const Comparable & item, RedBlackNode *theParent )$/;"	f	class:RedBlackTree
rotateWithLeftChild	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    void rotateWithLeftChild( RedBlackNode * & k2 )$/;"	f	class:RedBlackTree
rotateWithRightChild	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    void rotateWithRightChild( RedBlackNode * & k1 )$/;"	f	class:RedBlackTree
~RedBlackTree	FundamentalDataStructures\SourceCode\RedBlackTree.h	/^    ~RedBlackTree( )$/;"	f	class:RedBlackTree
main	FundamentalDataStructures\SourceCode\RemoveEveryOtherItem.cpp	/^int main( )$/;"	f
print	FundamentalDataStructures\SourceCode\RemoveEveryOtherItem.cpp	/^void print( const Container & c, ostream & out = cout )$/;"	f
removeEveryOtherItem	FundamentalDataStructures\SourceCode\RemoveEveryOtherItem.cpp	/^void removeEveryOtherItem( Container & lst )$/;"	f
hash	FundamentalDataStructures\SourceCode\SeparateChaining.cpp	/^size_t hash( const string & key )$/;"	f
hash	FundamentalDataStructures\SourceCode\SeparateChaining.cpp	/^size_t hash( int key )$/;"	f
isPrime	FundamentalDataStructures\SourceCode\SeparateChaining.cpp	/^bool isPrime( int n )$/;"	f
nextPrime	FundamentalDataStructures\SourceCode\SeparateChaining.cpp	/^int nextPrime( int n )$/;"	f
HashTable	FundamentalDataStructures\SourceCode\SeparateChaining.h	/^    explicit HashTable( int size = 101 ) : currentSize{ 0 }$/;"	f	class:HashTable
HashTable	FundamentalDataStructures\SourceCode\SeparateChaining.h	/^class HashTable$/;"	c
SEPARATE_CHAINING_H	FundamentalDataStructures\SourceCode\SeparateChaining.h	2;"	d
contains	FundamentalDataStructures\SourceCode\SeparateChaining.h	/^    bool contains( const HashedObj & x ) const$/;"	f	class:HashTable
currentSize	FundamentalDataStructures\SourceCode\SeparateChaining.h	/^    int  currentSize;$/;"	m	class:HashTable
insert	FundamentalDataStructures\SourceCode\SeparateChaining.h	/^    bool insert( HashedObj && x )$/;"	f	class:HashTable
insert	FundamentalDataStructures\SourceCode\SeparateChaining.h	/^    bool insert( const HashedObj & x )$/;"	f	class:HashTable
makeEmpty	FundamentalDataStructures\SourceCode\SeparateChaining.h	/^    void makeEmpty( )$/;"	f	class:HashTable
myhash	FundamentalDataStructures\SourceCode\SeparateChaining.h	/^    size_t myhash( const HashedObj & x ) const$/;"	f	class:HashTable
rehash	FundamentalDataStructures\SourceCode\SeparateChaining.h	/^    void rehash( )$/;"	f	class:HashTable
remove	FundamentalDataStructures\SourceCode\SeparateChaining.h	/^    bool remove( const HashedObj & x )$/;"	f	class:HashTable
theLists	FundamentalDataStructures\SourceCode\SeparateChaining.h	/^    vector<list<HashedObj>> theLists;   \/\/ The array of Lists$/;"	m	class:HashTable
SORT	FundamentalDataStructures\SourceCode\Sort.h	/^void SORT( vector<Comparable> & items )$/;"	f
SORT_H	FundamentalDataStructures\SourceCode\Sort.h	2;"	d
heapsort	FundamentalDataStructures\SourceCode\Sort.h	/^void heapsort( vector<Comparable> & a )$/;"	f
insertionSort	FundamentalDataStructures\SourceCode\Sort.h	/^void insertionSort( const RandomIterator & begin,$/;"	f
insertionSort	FundamentalDataStructures\SourceCode\Sort.h	/^void insertionSort( vector<Comparable> & a )$/;"	f
insertionSort	FundamentalDataStructures\SourceCode\Sort.h	/^void insertionSort( vector<Comparable> & a, int left, int right )$/;"	f
leftChild	FundamentalDataStructures\SourceCode\Sort.h	/^inline int leftChild( int i )$/;"	f
median3	FundamentalDataStructures\SourceCode\Sort.h	/^const Comparable & median3( vector<Comparable> & a, int left, int right )$/;"	f
merge	FundamentalDataStructures\SourceCode\Sort.h	/^void merge( vector<Comparable> & a, vector<Comparable> & tmpArray,$/;"	f
mergeSort	FundamentalDataStructures\SourceCode\Sort.h	/^void mergeSort( vector<Comparable> & a )$/;"	f
mergeSort	FundamentalDataStructures\SourceCode\Sort.h	/^void mergeSort( vector<Comparable> & a,$/;"	f
percDown	FundamentalDataStructures\SourceCode\Sort.h	/^void percDown( vector<Comparable> & a, int i, int n )$/;"	f
quickSelect	FundamentalDataStructures\SourceCode\Sort.h	/^void quickSelect( vector<Comparable> & a, int k )$/;"	f
quickSelect	FundamentalDataStructures\SourceCode\Sort.h	/^void quickSelect( vector<Comparable> & a, int left, int right, int k )$/;"	f
quicksort	FundamentalDataStructures\SourceCode\Sort.h	/^void quicksort( vector<Comparable> & a )$/;"	f
quicksort	FundamentalDataStructures\SourceCode\Sort.h	/^void quicksort( vector<Comparable> & a, int left, int right )$/;"	f
shellsort	FundamentalDataStructures\SourceCode\Sort.h	/^void shellsort( vector<Comparable> & a )$/;"	f
BinaryNode	FundamentalDataStructures\SourceCode\SplayTree.h	/^        BinaryNode( ) : left{ nullptr }, right{ nullptr } { }$/;"	f	struct:SplayTree::BinaryNode
BinaryNode	FundamentalDataStructures\SourceCode\SplayTree.h	/^        BinaryNode( const Comparable & theElement, BinaryNode *lt, BinaryNode *rt )$/;"	f	struct:SplayTree::BinaryNode
BinaryNode	FundamentalDataStructures\SourceCode\SplayTree.h	/^    struct BinaryNode$/;"	s	class:SplayTree
SPLAY_TREE_H	FundamentalDataStructures\SourceCode\SplayTree.h	2;"	d
SplayTree	FundamentalDataStructures\SourceCode\SplayTree.h	/^    SplayTree( )$/;"	f	class:SplayTree
SplayTree	FundamentalDataStructures\SourceCode\SplayTree.h	/^    SplayTree( SplayTree && rhs ) : root{ rhs.root }, nullNode{ rhs.nullNode }$/;"	f	class:SplayTree
SplayTree	FundamentalDataStructures\SourceCode\SplayTree.h	/^    SplayTree( const SplayTree & rhs )$/;"	f	class:SplayTree
SplayTree	FundamentalDataStructures\SourceCode\SplayTree.h	/^class SplayTree$/;"	c
clone	FundamentalDataStructures\SourceCode\SplayTree.h	/^    BinaryNode * clone( BinaryNode * t ) const$/;"	f	class:SplayTree
contains	FundamentalDataStructures\SourceCode\SplayTree.h	/^    bool contains( const Comparable & x )$/;"	f	class:SplayTree
element	FundamentalDataStructures\SourceCode\SplayTree.h	/^        Comparable  element;$/;"	m	struct:SplayTree::BinaryNode
findMax	FundamentalDataStructures\SourceCode\SplayTree.h	/^    const Comparable & findMax( )$/;"	f	class:SplayTree
findMin	FundamentalDataStructures\SourceCode\SplayTree.h	/^    const Comparable & findMin( )$/;"	f	class:SplayTree
insert	FundamentalDataStructures\SourceCode\SplayTree.h	/^    void insert( const Comparable & x )$/;"	f	class:SplayTree
isEmpty	FundamentalDataStructures\SourceCode\SplayTree.h	/^    bool isEmpty( ) const$/;"	f	class:SplayTree
left	FundamentalDataStructures\SourceCode\SplayTree.h	/^        BinaryNode *left;$/;"	m	struct:SplayTree::BinaryNode
makeEmpty	FundamentalDataStructures\SourceCode\SplayTree.h	/^    void makeEmpty( )$/;"	f	class:SplayTree
nullNode	FundamentalDataStructures\SourceCode\SplayTree.h	/^    BinaryNode *nullNode;$/;"	m	class:SplayTree
operator =	FundamentalDataStructures\SourceCode\SplayTree.h	/^    SplayTree & operator=( SplayTree && rhs )$/;"	f	class:SplayTree
operator =	FundamentalDataStructures\SourceCode\SplayTree.h	/^    SplayTree & operator=( const SplayTree & rhs )$/;"	f	class:SplayTree
printTree	FundamentalDataStructures\SourceCode\SplayTree.h	/^    void printTree( ) const$/;"	f	class:SplayTree
printTree	FundamentalDataStructures\SourceCode\SplayTree.h	/^   void printTree( BinaryNode *t ) const$/;"	f	class:SplayTree
reclaimMemory	FundamentalDataStructures\SourceCode\SplayTree.h	/^    void reclaimMemory( BinaryNode * t )$/;"	f	class:SplayTree
remove	FundamentalDataStructures\SourceCode\SplayTree.h	/^    void remove( const Comparable & x )$/;"	f	class:SplayTree
right	FundamentalDataStructures\SourceCode\SplayTree.h	/^        BinaryNode *right;$/;"	m	struct:SplayTree::BinaryNode
root	FundamentalDataStructures\SourceCode\SplayTree.h	/^    BinaryNode *root;$/;"	m	class:SplayTree
rotateWithLeftChild	FundamentalDataStructures\SourceCode\SplayTree.h	/^    void rotateWithLeftChild( BinaryNode * & k2 )$/;"	f	class:SplayTree
rotateWithRightChild	FundamentalDataStructures\SourceCode\SplayTree.h	/^    void rotateWithRightChild( BinaryNode * & k1 )$/;"	f	class:SplayTree
splay	FundamentalDataStructures\SourceCode\SplayTree.h	/^    void splay( const Comparable & x, BinaryNode * & t )$/;"	f	class:SplayTree
~SplayTree	FundamentalDataStructures\SourceCode\SplayTree.h	/^    ~SplayTree( )$/;"	f	class:SplayTree
assert0	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^void assert0( bool cond )$/;"	f
assignNames	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^int assignNames( const vector<int> & s, vector<int> & s12, vector<int> & SA12,$/;"	f
computeLCP	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^int computeLCP( const string & s1, const string & s2 )$/;"	f
computeS0	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^void computeS0( const vector<int> & s, vector<int> & s0,$/;"	f
computeS12	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^void computeS12( vector<int> & s12, vector<int> & SA12, int n12, int K12 )$/;"	f
createSuffixArray	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^void createSuffixArray( const string & str, vector<int> & sa, vector<int> & LCP )$/;"	f
createSuffixArraySlow	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^void createSuffixArraySlow( const string & str, vector<int> & SA, vector<int> & LCP )$/;"	f
getIndexIntoS	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^int getIndexIntoS( const vector<int> & SA12, int t, int n0 )$/;"	f
isPermutation	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^bool isPermutation( const vector<int> & SA, int n )$/;"	f
isSorted	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^bool isSorted( const vector<int> & SA, const vector<int> & s, int n )$/;"	f
leq	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^bool leq( int a1, int a2, int a3, int b1, int b2, int b3 )$/;"	f
leq	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^bool leq( int a1, int a2, int b1, int b2 )$/;"	f
main	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^int main( )$/;"	f
makeLCPArray	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^void makeLCPArray( vector<int> & s, const vector<int> & sa, vector<int> & LCP )$/;"	f
makeSuffixArray	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^void makeSuffixArray( const vector<int> & s, vector<int> & SA, int n, int K )$/;"	f
merge	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^void merge( const vector<int> & s, const vector<int> & s12,$/;"	f
printV	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^void printV( const vector<int> & a, const string & comment)$/;"	f
radixPass	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^void radixPass( const vector<int> & in, vector<int> & out,$/;"	f
sleq	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^bool sleq( const vector<int> & s1, int start1, const vector<int> & s2, int start2 )$/;"	f
suffix12IsSmaller	FundamentalDataStructures\SourceCode\SuffixArray.cpp	/^bool suffix12IsSmaller( const vector<int> & s, const vector<int> & s12,$/;"	f
main	FundamentalDataStructures\SourceCode\TailRecursion.cpp	/^int main( )$/;"	f
print	FundamentalDataStructures\SourceCode\TailRecursion.cpp	/^void print( Iterator start, Iterator end, ostream & out = cout )$/;"	f
print2	FundamentalDataStructures\SourceCode\TailRecursion.cpp	/^void print2( Iterator start, Iterator end, ostream & out = cout )$/;"	f
main	FundamentalDataStructures\SourceCode\TestAvlTree.cpp	/^int main( )$/;"	f
main	FundamentalDataStructures\SourceCode\TestBinaryHeap.cpp	/^int main( )$/;"	f
main	FundamentalDataStructures\SourceCode\TestBinarySearchTree.cpp	/^int main( )$/;"	f
main	FundamentalDataStructures\SourceCode\TestBinomialQueue.cpp	/^int main( )$/;"	f
main	FundamentalDataStructures\SourceCode\TestCuckooHashTable.cpp	/^int main( )$/;"	f
toString	FundamentalDataStructures\SourceCode\TestCuckooHashTable.cpp	/^string toString( Object x )$/;"	f
main	FundamentalDataStructures\SourceCode\TestFastDisjSets.cpp	/^int main( )$/;"	f
main	FundamentalDataStructures\SourceCode\TestIntCell.cpp	/^int main( )$/;"	f
main	FundamentalDataStructures\SourceCode\TestLeftistHeap.cpp	/^int main( )$/;"	f
CompareList	FundamentalDataStructures\SourceCode\TestList.cpp	/^class CompareList$/;"	c	file:
NUMS_PER_LINE	FundamentalDataStructures\SourceCode\TestList.cpp	/^static const int NUMS_PER_LINE = 14;$/;"	v	file:
Queue	FundamentalDataStructures\SourceCode\TestList.cpp	/^class Queue$/;"	c	file:
Stack	FundamentalDataStructures\SourceCode\TestList.cpp	/^class Stack $/;"	c	file:
dequeue	FundamentalDataStructures\SourceCode\TestList.cpp	/^    void dequeue( Object & x )$/;"	f	class:Queue
enqueue	FundamentalDataStructures\SourceCode\TestList.cpp	/^    void enqueue( const Object & x )$/;"	f	class:Queue
getFront	FundamentalDataStructures\SourceCode\TestList.cpp	/^    const Object & getFront( ) const$/;"	f	class:Queue
isEmpty	FundamentalDataStructures\SourceCode\TestList.cpp	/^    bool isEmpty( ) const$/;"	f	class:Queue
isEmpty	FundamentalDataStructures\SourceCode\TestList.cpp	/^    bool isEmpty( ) const$/;"	f	class:Stack
jos	FundamentalDataStructures\SourceCode\TestList.cpp	/^int jos( int people, int passes, List<int> & order )$/;"	f
main	FundamentalDataStructures\SourceCode\TestList.cpp	/^int main( )$/;"	f
nonsense	FundamentalDataStructures\SourceCode\TestList.cpp	/^void nonsense( int people, int passes )$/;"	f
operator ()	FundamentalDataStructures\SourceCode\TestList.cpp	/^    bool operator() ( const List<int> & lhs, const List<int> & rhs ) const$/;"	f	class:CompareList
pop	FundamentalDataStructures\SourceCode\TestList.cpp	/^    void pop( Object & x )$/;"	f	class:Stack
print	FundamentalDataStructures\SourceCode\TestList.cpp	/^void print( const Vector<List<int>> arr )$/;"	f
printCollection	FundamentalDataStructures\SourceCode\TestList.cpp	/^void printCollection( const Collection & c )$/;"	f
push	FundamentalDataStructures\SourceCode\TestList.cpp	/^    void push( const Object & x )$/;"	f	class:Stack
theList	FundamentalDataStructures\SourceCode\TestList.cpp	/^    List<Object> theList;$/;"	m	class:Queue	file:
theList	FundamentalDataStructures\SourceCode\TestList.cpp	/^    List<Object> theList;$/;"	m	class:Stack	file:
top	FundamentalDataStructures\SourceCode\TestList.cpp	/^    const Object & top( ) const$/;"	f	class:Stack
main	FundamentalDataStructures\SourceCode\TestMemoryCell.cpp	/^int main( )$/;"	f
dumpContents	FundamentalDataStructures\SourceCode\TestPQ.cpp	/^void dumpContents( const string & msg, PriorityQueue & pq )$/;"	f
main	FundamentalDataStructures\SourceCode\TestPQ.cpp	/^int main( )$/;"	f
main	FundamentalDataStructures\SourceCode\TestPairingHeap.cpp	/^int main( )$/;"	f
main	FundamentalDataStructures\SourceCode\TestQuadraticProbing.cpp	/^int main( )$/;"	f
main	FundamentalDataStructures\SourceCode\TestRandom.cpp	/^int main( )$/;"	f
main	FundamentalDataStructures\SourceCode\TestRedBlackTree.cpp	/^int main( )$/;"	f
main	FundamentalDataStructures\SourceCode\TestSeparateChaining.cpp	/^int main( )$/;"	f
DisjSets	FundamentalDataStructures\SourceCode\TestSlowDisjSets.cpp	/^DisjSets::DisjSets( int numElements ) : s( numElements )$/;"	f	class:DisjSets
DisjSets	FundamentalDataStructures\SourceCode\TestSlowDisjSets.cpp	/^class DisjSets$/;"	c	file:
find	FundamentalDataStructures\SourceCode\TestSlowDisjSets.cpp	/^int DisjSets::find( int x ) const$/;"	f	class:DisjSets
main	FundamentalDataStructures\SourceCode\TestSlowDisjSets.cpp	/^int main( )$/;"	f
s	FundamentalDataStructures\SourceCode\TestSlowDisjSets.cpp	/^        vector<int> s;$/;"	m	class:DisjSets	file:
setUnion	FundamentalDataStructures\SourceCode\TestSlowDisjSets.cpp	/^void DisjSets::setUnion( int root1, int root2 )$/;"	f	class:DisjSets
checkSort	FundamentalDataStructures\SourceCode\TestSort.cpp	/^void checkSort( const vector<string> & a )$/;"	f
main	FundamentalDataStructures\SourceCode\TestSort.cpp	/^int main( )$/;"	f
permute	FundamentalDataStructures\SourceCode\TestSort.cpp	/^void permute( vector<AnyType> & a )$/;"	f
main	FundamentalDataStructures\SourceCode\TestSplayTree.cpp	/^    int main( )$/;"	f
main	FundamentalDataStructures\SourceCode\TestTreap.cpp	/^int main( )$/;"	f
CompareVector	FundamentalDataStructures\SourceCode\TestVector.cpp	/^class CompareVector$/;"	c	file:
main	FundamentalDataStructures\SourceCode\TestVector.cpp	/^int main( )$/;"	f
operator ()	FundamentalDataStructures\SourceCode\TestVector.cpp	/^    bool operator() ( const Vector<int> & lhs, const Vector<int> & rhs ) const$/;"	f	class:CompareVector
print	FundamentalDataStructures\SourceCode\TestVector.cpp	/^void print( const Vector<Vector<int>> arr )$/;"	f
TREAP_H	FundamentalDataStructures\SourceCode\Treap.h	2;"	d
Treap	FundamentalDataStructures\SourceCode\Treap.h	/^    Treap( )$/;"	f	class:Treap
Treap	FundamentalDataStructures\SourceCode\Treap.h	/^    Treap( Treap && rhs ) : root{ rhs.root }, nullNode{ rhs.nullNode }$/;"	f	class:Treap
Treap	FundamentalDataStructures\SourceCode\Treap.h	/^    Treap( const Treap & rhs )$/;"	f	class:Treap
Treap	FundamentalDataStructures\SourceCode\Treap.h	/^class Treap$/;"	c
TreapNode	FundamentalDataStructures\SourceCode\Treap.h	/^        TreapNode( ) : left{ nullptr }, right{ nullptr }, priority{ INT_MAX } { }$/;"	f	struct:Treap::TreapNode
TreapNode	FundamentalDataStructures\SourceCode\Treap.h	/^        TreapNode( Comparable && e, TreapNode *lt, TreapNode *rt, int pr )$/;"	f	struct:Treap::TreapNode
TreapNode	FundamentalDataStructures\SourceCode\Treap.h	/^        TreapNode( const Comparable & e, TreapNode *lt, TreapNode *rt, int pr )$/;"	f	struct:Treap::TreapNode
TreapNode	FundamentalDataStructures\SourceCode\Treap.h	/^    struct TreapNode$/;"	s	class:Treap
clone	FundamentalDataStructures\SourceCode\Treap.h	/^    TreapNode * clone( TreapNode * t ) const$/;"	f	class:Treap
contains	FundamentalDataStructures\SourceCode\Treap.h	/^    bool contains( const Comparable & x ) const$/;"	f	class:Treap
element	FundamentalDataStructures\SourceCode\Treap.h	/^        Comparable element;$/;"	m	struct:Treap::TreapNode
findMax	FundamentalDataStructures\SourceCode\Treap.h	/^    const Comparable & findMax( ) const$/;"	f	class:Treap
findMin	FundamentalDataStructures\SourceCode\Treap.h	/^    const Comparable & findMin( ) const$/;"	f	class:Treap
insert	FundamentalDataStructures\SourceCode\Treap.h	/^    void insert( Comparable && x )$/;"	f	class:Treap
insert	FundamentalDataStructures\SourceCode\Treap.h	/^    void insert( Comparable && x, TreapNode* & t )$/;"	f	class:Treap
insert	FundamentalDataStructures\SourceCode\Treap.h	/^    void insert( const Comparable & x )$/;"	f	class:Treap
insert	FundamentalDataStructures\SourceCode\Treap.h	/^    void insert( const Comparable & x, TreapNode* & t )$/;"	f	class:Treap
isEmpty	FundamentalDataStructures\SourceCode\Treap.h	/^    bool isEmpty( ) const$/;"	f	class:Treap
left	FundamentalDataStructures\SourceCode\Treap.h	/^        TreapNode *left;$/;"	m	struct:Treap::TreapNode
makeEmpty	FundamentalDataStructures\SourceCode\Treap.h	/^    void makeEmpty( )$/;"	f	class:Treap
makeEmpty	FundamentalDataStructures\SourceCode\Treap.h	/^    void makeEmpty( TreapNode * & t )$/;"	f	class:Treap
nullNode	FundamentalDataStructures\SourceCode\Treap.h	/^    TreapNode *nullNode;$/;"	m	class:Treap
operator =	FundamentalDataStructures\SourceCode\Treap.h	/^    Treap & operator=( Treap && rhs )$/;"	f	class:Treap
operator =	FundamentalDataStructures\SourceCode\Treap.h	/^    Treap & operator=( const Treap & rhs )$/;"	f	class:Treap
printTree	FundamentalDataStructures\SourceCode\Treap.h	/^    void printTree( ) const$/;"	f	class:Treap
printTree	FundamentalDataStructures\SourceCode\Treap.h	/^    void printTree( TreapNode *t ) const$/;"	f	class:Treap
priority	FundamentalDataStructures\SourceCode\Treap.h	/^        int        priority;$/;"	m	struct:Treap::TreapNode
randomNums	FundamentalDataStructures\SourceCode\Treap.h	/^    UniformRandom randomNums;$/;"	m	class:Treap
remove	FundamentalDataStructures\SourceCode\Treap.h	/^    void remove( const Comparable & x )$/;"	f	class:Treap
remove	FundamentalDataStructures\SourceCode\Treap.h	/^    void remove( const Comparable & x, TreapNode * & t )$/;"	f	class:Treap
right	FundamentalDataStructures\SourceCode\Treap.h	/^        TreapNode *right;$/;"	m	struct:Treap::TreapNode
root	FundamentalDataStructures\SourceCode\Treap.h	/^    TreapNode *root;$/;"	m	class:Treap
rotateWithLeftChild	FundamentalDataStructures\SourceCode\Treap.h	/^    void rotateWithLeftChild( TreapNode * & k2 )$/;"	f	class:Treap
rotateWithRightChild	FundamentalDataStructures\SourceCode\Treap.h	/^    void rotateWithRightChild( TreapNode * & k1 )$/;"	f	class:Treap
~Treap	FundamentalDataStructures\SourceCode\Treap.h	/^    ~Treap( )$/;"	f	class:Treap
A	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    static const long long A = 25214903917LL;$/;"	m	class:Random48
C	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    static const long long C = 11;$/;"	m	class:Random48
M	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    static const long long M = ( 1LL << 48 );$/;"	m	class:Random48
MASK	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    static const long long MASK = M - 1;$/;"	m	class:Random48
Random48	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    Random48( long long initialValue = currentTimeMicroSeconds( ) )$/;"	f	class:Random48
Random48	FundamentalDataStructures\SourceCode\UniformRandom.h	/^class Random48$/;"	c
UNIFORM_RANDOM	FundamentalDataStructures\SourceCode\UniformRandom.h	2;"	d
UniformRandom	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    UniformRandom( int seed = currentTimeSeconds( ) ) : generator{ seed }$/;"	f	class:UniformRandom
UniformRandom	FundamentalDataStructures\SourceCode\UniformRandom.h	/^class UniformRandom$/;"	c
currentTimeMicroSeconds	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    static long long currentTimeMicroSeconds( )$/;"	f	class:Random48
currentTimeSeconds	FundamentalDataStructures\SourceCode\UniformRandom.h	/^static int currentTimeSeconds( )$/;"	f
generator	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    mt19937 generator;$/;"	m	class:UniformRandom
next	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    int next( int bits )$/;"	f	class:Random48
nextDouble	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    double nextDouble( )$/;"	f	class:Random48
nextDouble	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    double nextDouble( )$/;"	f	class:UniformRandom
nextInt	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    int nextInt( )$/;"	f	class:Random48
nextInt	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    int nextInt( )$/;"	f	class:UniformRandom
nextInt	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    int nextInt( int high )$/;"	f	class:Random48
nextInt	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    int nextInt( int high )$/;"	f	class:UniformRandom
nextInt	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    int nextInt( int low, int high )$/;"	f	class:Random48
nextInt	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    int nextInt( int low, int high )$/;"	f	class:UniformRandom
nextLong	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    long long nextLong( )$/;"	f	class:Random48
state	FundamentalDataStructures\SourceCode\UniformRandom.h	/^    long long state;$/;"	m	class:Random48
SPARE_CAPACITY	FundamentalDataStructures\SourceCode\Vector.h	/^    static const int SPARE_CAPACITY = 2;$/;"	m	class:Vector
VECTOR_H	FundamentalDataStructures\SourceCode\Vector.h	2;"	d
Vector	FundamentalDataStructures\SourceCode\Vector.h	/^    Vector( Vector && rhs )$/;"	f	class:Vector
Vector	FundamentalDataStructures\SourceCode\Vector.h	/^    Vector( const Vector & rhs )$/;"	f	class:Vector
Vector	FundamentalDataStructures\SourceCode\Vector.h	/^    explicit Vector( int initSize = 0 )$/;"	f	class:Vector
Vector	FundamentalDataStructures\SourceCode\Vector.h	/^class Vector$/;"	c
back	FundamentalDataStructures\SourceCode\Vector.h	/^    const Object & back ( ) const$/;"	f	class:Vector
begin	FundamentalDataStructures\SourceCode\Vector.h	/^    const_iterator begin( ) const$/;"	f	class:Vector
begin	FundamentalDataStructures\SourceCode\Vector.h	/^    iterator begin( )$/;"	f	class:Vector
capacity	FundamentalDataStructures\SourceCode\Vector.h	/^    int capacity( ) const$/;"	f	class:Vector
const_iterator	FundamentalDataStructures\SourceCode\Vector.h	/^    typedef const Object * const_iterator;$/;"	t	class:Vector
empty	FundamentalDataStructures\SourceCode\Vector.h	/^    bool empty( ) const$/;"	f	class:Vector
end	FundamentalDataStructures\SourceCode\Vector.h	/^    const_iterator end( ) const$/;"	f	class:Vector
end	FundamentalDataStructures\SourceCode\Vector.h	/^    iterator end( )$/;"	f	class:Vector
iterator	FundamentalDataStructures\SourceCode\Vector.h	/^    typedef Object * iterator;$/;"	t	class:Vector
objects	FundamentalDataStructures\SourceCode\Vector.h	/^    Object * objects;$/;"	m	class:Vector
operator =	FundamentalDataStructures\SourceCode\Vector.h	/^    Vector & operator= ( Vector && rhs )$/;"	f	class:Vector
operator =	FundamentalDataStructures\SourceCode\Vector.h	/^    Vector & operator= ( const Vector & rhs )$/;"	f	class:Vector
operator []	FundamentalDataStructures\SourceCode\Vector.h	/^    Object & operator[]( int index )$/;"	f	class:Vector
operator []	FundamentalDataStructures\SourceCode\Vector.h	/^    const Object & operator[]( int index ) const$/;"	f	class:Vector
pop_back	FundamentalDataStructures\SourceCode\Vector.h	/^    void pop_back( )$/;"	f	class:Vector
push_back	FundamentalDataStructures\SourceCode\Vector.h	/^    void push_back( Object && x )$/;"	f	class:Vector
push_back	FundamentalDataStructures\SourceCode\Vector.h	/^    void push_back( const Object & x )$/;"	f	class:Vector
reserve	FundamentalDataStructures\SourceCode\Vector.h	/^    void reserve( int newCapacity )$/;"	f	class:Vector
resize	FundamentalDataStructures\SourceCode\Vector.h	/^    void resize( int newSize )$/;"	f	class:Vector
size	FundamentalDataStructures\SourceCode\Vector.h	/^    int size( ) const$/;"	f	class:Vector
theCapacity	FundamentalDataStructures\SourceCode\Vector.h	/^    int theCapacity;$/;"	m	class:Vector
theSize	FundamentalDataStructures\SourceCode\Vector.h	/^    int theSize;$/;"	m	class:Vector
~Vector	FundamentalDataStructures\SourceCode\Vector.h	/^    ~Vector( )$/;"	f	class:Vector
computeAdjacentWords	FundamentalDataStructures\SourceCode\WordLadder.cpp	/^computeAdjacentWords( const vector<string> & words )$/;"	f
computeAdjacentWordsMedium	FundamentalDataStructures\SourceCode\WordLadder.cpp	/^computeAdjacentWordsMedium( const vector<string> & words )$/;"	f
computeAdjacentWordsSlow	FundamentalDataStructures\SourceCode\WordLadder.cpp	/^computeAdjacentWordsSlow( const vector<string> & words )$/;"	f
findChain	FundamentalDataStructures\SourceCode\WordLadder.cpp	/^vector<string> findChain( const map<string,vector<string>> & adjacentWords,$/;"	f
findChain	FundamentalDataStructures\SourceCode\WordLadder.cpp	/^vector<string> findChain( const vector<string> & words,$/;"	f
findMostChangeable	FundamentalDataStructures\SourceCode\WordLadder.cpp	/^findMostChangeable( const map<string,vector<string>> & adjacentWords )$/;"	f
getChainFromPreviousMap	FundamentalDataStructures\SourceCode\WordLadder.cpp	/^vector<string> getChainFromPreviousMap( const map<string,string> & previous,$/;"	f
main	FundamentalDataStructures\SourceCode\WordLadder.cpp	/^int main( )$/;"	f
oneCharOff	FundamentalDataStructures\SourceCode\WordLadder.cpp	/^bool oneCharOff( const string & word1, const string & word2 )$/;"	f
printHighChangeables	FundamentalDataStructures\SourceCode\WordLadder.cpp	/^void printHighChangeables( const map<string,vector<string>> & adjacentWords,$/;"	f
printMostChangeables	FundamentalDataStructures\SourceCode\WordLadder.cpp	/^void printMostChangeables( const vector<string> & mostChangeable,$/;"	f
readWords	FundamentalDataStructures\SourceCode\WordLadder.cpp	/^vector<string> readWords( istream & in )$/;"	f
ArrayIndexOutOfBoundsException	FundamentalDataStructures\SourceCode\dsexceptions.h	/^class ArrayIndexOutOfBoundsException { };$/;"	c
DS_EXCEPTIONS_H	FundamentalDataStructures\SourceCode\dsexceptions.h	2;"	d
IllegalArgumentException	FundamentalDataStructures\SourceCode\dsexceptions.h	/^class IllegalArgumentException { };$/;"	c
IteratorMismatchException	FundamentalDataStructures\SourceCode\dsexceptions.h	/^class IteratorMismatchException { };$/;"	c
IteratorOutOfBoundsException	FundamentalDataStructures\SourceCode\dsexceptions.h	/^class IteratorOutOfBoundsException { };$/;"	c
IteratorUninitializedException	FundamentalDataStructures\SourceCode\dsexceptions.h	/^class IteratorUninitializedException { };$/;"	c
UnderflowException	FundamentalDataStructures\SourceCode\dsexceptions.h	/^class UnderflowException { };$/;"	c
main	FundamentalDataStructures\SourceCode\mapDemo.cpp	/^int main( )$/;"	f
MATRIX_H	FundamentalDataStructures\SourceCode\matrix.h	2;"	d
array	FundamentalDataStructures\SourceCode\matrix.h	/^    vector<vector<Object>> array;$/;"	m	class:matrix
matrix	FundamentalDataStructures\SourceCode\matrix.h	/^    matrix( const vector<vector<Object>> & v ) : array{ v }$/;"	f	class:matrix
matrix	FundamentalDataStructures\SourceCode\matrix.h	/^    matrix( initializer_list<vector<Object>> lst ) : array( lst.size( ) )$/;"	f	class:matrix
matrix	FundamentalDataStructures\SourceCode\matrix.h	/^    matrix( int rows, int cols ) : array( rows )$/;"	f	class:matrix
matrix	FundamentalDataStructures\SourceCode\matrix.h	/^    matrix( vector<vector<Object>> && v ) : array{ std::move( v ) }$/;"	f	class:matrix
matrix	FundamentalDataStructures\SourceCode\matrix.h	/^class matrix$/;"	c
numcols	FundamentalDataStructures\SourceCode\matrix.h	/^    int numcols( ) const$/;"	f	class:matrix
numrows	FundamentalDataStructures\SourceCode\matrix.h	/^    int numrows( ) const$/;"	f	class:matrix
operator []	FundamentalDataStructures\SourceCode\matrix.h	/^    const vector<Object> & operator[]( int row ) const$/;"	f	class:matrix
operator []	FundamentalDataStructures\SourceCode\matrix.h	/^    vector<Object> & operator[]( int row )$/;"	f	class:matrix
Main	Java_basic\HelloWorld\src\Main.java	/^public class Main {$/;"	c
in	Java_basic\HelloWorld\src\Main.java	/^	private static Scanner in;$/;"	f	class:Main	file:
main	Java_basic\HelloWorld\src\Main.java	/^	public static void main(String[] args) {$/;"	m	class:Main
SignalReport	Java_basic\HelloWorld\src\SignalReport.java	/^public class SignalReport {$/;"	c
in	Java_basic\HelloWorld\src\SignalReport.java	/^	private static Scanner in;$/;"	f	class:SignalReport	file:
main	Java_basic\HelloWorld\src\SignalReport.java	/^	public static void main(String[] args) {$/;"	m	class:SignalReport
SpeakInteger	Java_basic\HelloWorld\src\SpeakInteger.java	/^public class SpeakInteger {$/;"	c
in	Java_basic\HelloWorld\src\SpeakInteger.java	/^	private static Scanner in;$/;"	f	class:SpeakInteger	file:
main	Java_basic\HelloWorld\src\SpeakInteger.java	/^	public static void main(String[] args) {$/;"	m	class:SpeakInteger
print_pinyin	Java_basic\HelloWorld\src\SpeakInteger.java	/^	static void print_pinyin(int number){$/;"	m	class:SpeakInteger
speak	Java_basic\HelloWorld\src\SpeakInteger.java	/^	static void speak(int digit){$/;"	m	class:SpeakInteger
speak_excp_lastone	Java_basic\HelloWorld\src\SpeakInteger.java	/^	static void speak_excp_lastone(int number){$/;"	m	class:SpeakInteger
speak_lastone	Java_basic\HelloWorld\src\SpeakInteger.java	/^	static void speak_lastone(int number){$/;"	m	class:SpeakInteger
MaxNumber	Java_basic\HelloWorld\src\SumOfPrime.java	/^	final static int MaxNumber=10000000;$/;"	f	class:SumOfPrime
SumOfPrime	Java_basic\HelloWorld\src\SumOfPrime.java	/^public class SumOfPrime {$/;"	c
in	Java_basic\HelloWorld\src\SumOfPrime.java	/^	private static Scanner in;$/;"	f	class:SumOfPrime	file:
isPrime	Java_basic\HelloWorld\src\SumOfPrime.java	/^	public static boolean isPrime(int number, int[] prime){$/;"	m	class:SumOfPrime
main	Java_basic\HelloWorld\src\SumOfPrime.java	/^	public static void main(String[] args) {$/;"	m	class:SumOfPrime
SumOfPrime_v0	Java_basic\HelloWorld\src\SumOfPrime_v0.java	/^public class SumOfPrime_v0 {$/;"	c
in	Java_basic\HelloWorld\src\SumOfPrime_v0.java	/^	private static Scanner in;$/;"	f	class:SumOfPrime_v0	file:
isPrime	Java_basic\HelloWorld\src\SumOfPrime_v0.java	/^	public static boolean isPrime(int number){$/;"	m	class:SumOfPrime_v0
main	Java_basic\HelloWorld\src\SumOfPrime_v0.java	/^	public static void main(String[] args) {$/;"	m	class:SumOfPrime_v0
TimeTransform	Java_basic\HelloWorld\src\TimeTransform.java	/^public class TimeTransform {$/;"	c
in	Java_basic\HelloWorld\src\TimeTransform.java	/^	private static Scanner in;$/;"	f	class:TimeTransform	file:
main	Java_basic\HelloWorld\src\TimeTransform.java	/^	public static void main(String[] args) {$/;"	m	class:TimeTransform
characteristicValueOfNumber	Java_basic\HelloWorld\src\characteristicValueOfNumber.java	/^public class characteristicValueOfNumber {$/;"	c
in	Java_basic\HelloWorld\src\characteristicValueOfNumber.java	/^	private static Scanner in;$/;"	f	class:characteristicValueOfNumber	file:
main	Java_basic\HelloWorld\src\characteristicValueOfNumber.java	/^	public static void main(String[] args) {$/;"	m	class:characteristicValueOfNumber
in	Java_basic\HelloWorld\src\oddAndEvenNumber.java	/^	private static Scanner in;$/;"	f	class:oddAndEvenNumber	file:
main	Java_basic\HelloWorld\src\oddAndEvenNumber.java	/^	public static void main(String[] args) {$/;"	m	class:oddAndEvenNumber
oddAndEvenNumber	Java_basic\HelloWorld\src\oddAndEvenNumber.java	/^public class oddAndEvenNumber {$/;"	c
in	Java_basic\HelloWorld\src\temperatureTransformation.java	/^	private static Scanner in;$/;"	f	class:temperatureTransformation	file:
main	Java_basic\HelloWorld\src\temperatureTransformation.java	/^	public static void main(String[] args) {$/;"	m	class:temperatureTransformation
temperatureTransformation	Java_basic\HelloWorld\src\temperatureTransformation.java	/^public class temperatureTransformation {$/;"	c
main	Java_basic\HelloWorld\src\test.java	/^	public static void main(String[] args) {$/;"	m	class:test
test	Java_basic\HelloWorld\src\test.java	/^public class test {$/;"	c
Circle	Java_basic\Shapes\src\shapes\Circle.java	/^	public Circle(int x, int y, int radius)$/;"	m	class:Circle
Circle	Java_basic\Shapes\src\shapes\Circle.java	/^public class Circle extends Shape {$/;"	c
draw	Java_basic\Shapes\src\shapes\Circle.java	/^	public void draw(Graphics g) {$/;"	m	class:Circle
radius	Java_basic\Shapes\src\shapes\Circle.java	/^	private int radius;$/;"	f	class:Circle	file:
shapes	Java_basic\Shapes\src\shapes\Circle.java	/^package shapes;$/;"	p
x	Java_basic\Shapes\src\shapes\Circle.java	/^	private int x;$/;"	f	class:Circle	file:
y	Java_basic\Shapes\src\shapes\Circle.java	/^	private int y;$/;"	f	class:Circle	file:
Line	Java_basic\Shapes\src\shapes\Line.java	/^	public Line(int x1, int y1, int x2, int y2)$/;"	m	class:Line
Line	Java_basic\Shapes\src\shapes\Line.java	/^public class Line extends Shape {$/;"	c
draw	Java_basic\Shapes\src\shapes\Line.java	/^	public void draw(Graphics g) {$/;"	m	class:Line
shapes	Java_basic\Shapes\src\shapes\Line.java	/^package shapes;$/;"	p
x1	Java_basic\Shapes\src\shapes\Line.java	/^	private int x1;$/;"	f	class:Line	file:
x2	Java_basic\Shapes\src\shapes\Line.java	/^	private int x2;$/;"	f	class:Line	file:
y1	Java_basic\Shapes\src\shapes\Line.java	/^	private int y1;$/;"	f	class:Line	file:
y2	Java_basic\Shapes\src\shapes\Line.java	/^	private int y2;$/;"	f	class:Line	file:
MyPic	Java_basic\Shapes\src\shapes\MyPic.java	/^public class MyPic {$/;"	c
main	Java_basic\Shapes\src\shapes\MyPic.java	/^	public static void main(String[] args) $/;"	m	class:MyPic
shapes	Java_basic\Shapes\src\shapes\MyPic.java	/^package shapes;$/;"	p
Picture	Java_basic\Shapes\src\shapes\Picture.java	/^	public Picture(int width, int height)$/;"	m	class:Picture
Picture	Java_basic\Shapes\src\shapes\Picture.java	/^public class Picture extends JFrame {$/;"	c
ShapesPanel	Java_basic\Shapes\src\shapes\Picture.java	/^	private class ShapesPanel extends JPanel {$/;"	c	class:Picture
add	Java_basic\Shapes\src\shapes\Picture.java	/^	public void add(Shape s)$/;"	m	class:Picture
draw	Java_basic\Shapes\src\shapes\Picture.java	/^	public void draw()$/;"	m	class:Picture
height	Java_basic\Shapes\src\shapes\Picture.java	/^	private int height;$/;"	f	class:Picture	file:
listShape	Java_basic\Shapes\src\shapes\Picture.java	/^	private ArrayList<Shape> listShape = new ArrayList<Shape>();$/;"	f	class:Picture	file:
paintComponent	Java_basic\Shapes\src\shapes\Picture.java	/^		protected void paintComponent(Graphics g) {$/;"	m	class:Picture.ShapesPanel
serialVersionUID	Java_basic\Shapes\src\shapes\Picture.java	/^		private static final long serialVersionUID = 1L;$/;"	f	class:Picture.ShapesPanel	file:
serialVersionUID	Java_basic\Shapes\src\shapes\Picture.java	/^	private static final long serialVersionUID = 1L;$/;"	f	class:Picture	file:
shapes	Java_basic\Shapes\src\shapes\Picture.java	/^package shapes;$/;"	p
width	Java_basic\Shapes\src\shapes\Picture.java	/^	private int width;$/;"	f	class:Picture	file:
Rectangle	Java_basic\Shapes\src\shapes\Rectangle.java	/^	public Rectangle(int x, int y, int width, int height) {$/;"	m	class:Rectangle
Rectangle	Java_basic\Shapes\src\shapes\Rectangle.java	/^public class Rectangle extends Shape {$/;"	c
draw	Java_basic\Shapes\src\shapes\Rectangle.java	/^	public void draw(Graphics g) {$/;"	m	class:Rectangle
height	Java_basic\Shapes\src\shapes\Rectangle.java	/^	private int height;$/;"	f	class:Rectangle	file:
shapes	Java_basic\Shapes\src\shapes\Rectangle.java	/^package shapes;$/;"	p
width	Java_basic\Shapes\src\shapes\Rectangle.java	/^	private int width;$/;"	f	class:Rectangle	file:
x	Java_basic\Shapes\src\shapes\Rectangle.java	/^	private int x;$/;"	f	class:Rectangle	file:
y	Java_basic\Shapes\src\shapes\Rectangle.java	/^	private int y;$/;"	f	class:Rectangle	file:
Shape	Java_basic\Shapes\src\shapes\Shape.java	/^public abstract class Shape {$/;"	c
draw	Java_basic\Shapes\src\shapes\Shape.java	/^	public abstract void draw(Graphics g);$/;"	m	class:Shape
shapes	Java_basic\Shapes\src\shapes\Shape.java	/^package shapes;$/;"	p
Triangle	Java_basic\Shapes\src\shapes\Triangle.java	/^	public Triangle(int x1, int y1, int x2, int y2, int x3, int y3)$/;"	m	class:Triangle
Triangle	Java_basic\Shapes\src\shapes\Triangle.java	/^public class Triangle extends Shape {$/;"	c
draw	Java_basic\Shapes\src\shapes\Triangle.java	/^	public void draw(Graphics g) {$/;"	m	class:Triangle
shapes	Java_basic\Shapes\src\shapes\Triangle.java	/^package shapes;$/;"	p
x	Java_basic\Shapes\src\shapes\Triangle.java	/^	private int[] x = new int[3];$/;"	f	class:Triangle	file:
y	Java_basic\Shapes\src\shapes\Triangle.java	/^	private int[] y = new int[3];$/;"	f	class:Triangle	file:
Fraction	Java_basic\Week_1\src\Main.java	/^	Fraction(int a, int b) {$/;"	m	class:Fraction
Fraction	Java_basic\Week_1\src\Main.java	/^class Fraction {$/;"	c
Main	Java_basic\Week_1\src\Main.java	/^public class Main {$/;"	c
a	Java_basic\Week_1\src\Main.java	/^	private int a;$/;"	f	class:Fraction	file:
b	Java_basic\Week_1\src\Main.java	/^	private int b;$/;"	f	class:Fraction	file:
main	Java_basic\Week_1\src\Main.java	/^	public static void main(String[] args) {$/;"	m	class:Main
multiply	Java_basic\Week_1\src\Main.java	/^	Fraction multiply(Fraction r) {$/;"	m	class:Fraction
plus	Java_basic\Week_1\src\Main.java	/^	Fraction plus(Fraction r) {$/;"	m	class:Fraction
print	Java_basic\Week_1\src\Main.java	/^	void print() {$/;"	m	class:Fraction
toDouble	Java_basic\Week_1\src\Main.java	/^	double toDouble() {$/;"	m	class:Fraction
Clock	Java_basic\Week_2\src\Main.java	/^	public Clock(int hour, int minute, int second) {$/;"	m	class:Clock
Clock	Java_basic\Week_2\src\Main.java	/^class Clock {$/;"	c
Display	Java_basic\Week_2\src\Main.java	/^	Display(int limit) {$/;"	m	class:Display
Display	Java_basic\Week_2\src\Main.java	/^class Display {$/;"	c
Main	Java_basic\Week_2\src\Main.java	/^public class Main {$/;"	c
getValue	Java_basic\Week_2\src\Main.java	/^	int getValue() {$/;"	m	class:Display
hour	Java_basic\Week_2\src\Main.java	/^	private Display hour = new Display(24);$/;"	f	class:Clock	file:
increase	Java_basic\Week_2\src\Main.java	/^	boolean increase() {$/;"	m	class:Display
limit	Java_basic\Week_2\src\Main.java	/^	private int limit = 0;$/;"	f	class:Display	file:
main	Java_basic\Week_2\src\Main.java	/^	public static void main(String[] args) throws InterruptedException {$/;"	m	class:Main
minute	Java_basic\Week_2\src\Main.java	/^	private Display minute = new Display(60);$/;"	f	class:Clock	file:
second	Java_basic\Week_2\src\Main.java	/^	private int second = 0;$/;"	f	class:Clock	file:
setValue	Java_basic\Week_2\src\Main.java	/^	public void setValue(int value) {$/;"	m	class:Display
tick	Java_basic\Week_2\src\Main.java	/^	public void tick() {$/;"	m	class:Clock
toString	Java_basic\Week_2\src\Main.java	/^	public String toString() {$/;"	m	class:Clock
value	Java_basic\Week_2\src\Main.java	/^	private int value = 0;$/;"	f	class:Display	file:
Main	Java_basic\Week_3\src\Main.java	/^public class Main {$/;"	c
main	Java_basic\Week_3\src\Main.java	/^	public static void main(String[] args) {$/;"	m	class:Main
CD	Java_basic\Week_4\src\CD.java	/^	public CD(String title, String artist, int numofTracks, int playingTime, boolean gotIt,String comment) {$/;"	m	class:CD
CD	Java_basic\Week_4\src\CD.java	/^public class CD extends Item{$/;"	c
artist	Java_basic\Week_4\src\CD.java	/^	private String artist;$/;"	f	class:CD	file:
main	Java_basic\Week_4\src\CD.java	/^	public static void main(String[] args) {$/;"	m	class:CD
numofTracks	Java_basic\Week_4\src\CD.java	/^	private int numofTracks;$/;"	f	class:CD	file:
print	Java_basic\Week_4\src\CD.java	/^	public void print() {$/;"	m	class:CD
DVD	Java_basic\Week_4\src\DVD.java	/^	public DVD(String title, String director, int playingTime, boolean gotIt,String comment) {$/;"	m	class:DVD
DVD	Java_basic\Week_4\src\DVD.java	/^public class DVD extends Item{$/;"	c
director	Java_basic\Week_4\src\DVD.java	/^	private String director;$/;"	f	class:DVD	file:
main	Java_basic\Week_4\src\DVD.java	/^	public static void main(String[] args) {$/;"	m	class:DVD
print	Java_basic\Week_4\src\DVD.java	/^	public void print() {$/;"	m	class:DVD
Database	Java_basic\Week_4\src\Database.java	/^public class Database {$/;"	c
add	Java_basic\Week_4\src\Database.java	/^	public void add(Item item){$/;"	m	class:Database
list	Java_basic\Week_4\src\Database.java	/^	public void list(){$/;"	m	class:Database
listItem	Java_basic\Week_4\src\Database.java	/^	private ArrayList<Item> listItem = new ArrayList<Item>();$/;"	f	class:Database	file:
main	Java_basic\Week_4\src\Database.java	/^	public static void main(String[] args) {$/;"	m	class:Database
Item	Java_basic\Week_4\src\Item.java	/^	public Item(String title,int playingTime, String comment,boolean gotIt) {$/;"	m	class:Item
Item	Java_basic\Week_4\src\Item.java	/^public class Item {$/;"	c
comment	Java_basic\Week_4\src\Item.java	/^	private String comment;$/;"	f	class:Item	file:
getTitle	Java_basic\Week_4\src\Item.java	/^	protected String getTitle(){$/;"	m	class:Item
gotIt	Java_basic\Week_4\src\Item.java	/^	private boolean gotIt = false;$/;"	f	class:Item	file:
main	Java_basic\Week_4\src\Item.java	/^	public static void main(String[] args) {$/;"	m	class:Item
playingTime	Java_basic\Week_4\src\Item.java	/^	private int playingTime;$/;"	f	class:Item	file:
print	Java_basic\Week_4\src\Item.java	/^	public void print() {$/;"	m	class:Item
title	Java_basic\Week_4\src\Item.java	/^	private	String title;$/;"	f	class:Item	file:
MP3	Java_basic\Week_4\src\MP3.java	/^	public MP3(String title, int playingTime, String comment, boolean gotIt, String album, String copyright,$/;"	m	class:MP3
MP3	Java_basic\Week_4\src\MP3.java	/^public class MP3 extends Item{$/;"	c
album	Java_basic\Week_4\src\MP3.java	/^	private String album;$/;"	f	class:MP3	file:
bitRate	Java_basic\Week_4\src\MP3.java	/^	private int bitRate;$/;"	f	class:MP3	file:
copyright	Java_basic\Week_4\src\MP3.java	/^	private String copyright;$/;"	f	class:MP3	file:
main	Java_basic\Week_4\src\MP3.java	/^	public static void main(String[] args) {$/;"	m	class:MP3
print	Java_basic\Week_4\src\MP3.java	/^	public void print(){$/;"	m	class:MP3
rate	Java_basic\Week_4\src\MP3.java	/^	private int rate;$/;"	f	class:MP3	file:
Game	Java_basic\Week_6\castle\src\castle\Game.java	/^    public Game() $/;"	m	class:Game
Game	Java_basic\Week_6\castle\src\castle\Game.java	/^public class Game {$/;"	c
castle	Java_basic\Week_6\castle\src\castle\Game.java	/^package castle;$/;"	p
createRooms	Java_basic\Week_6\castle\src\castle\Game.java	/^    private void createRooms()$/;"	m	class:Game	file:
currentRoom	Java_basic\Week_6\castle\src\castle\Game.java	/^    private Room currentRoom;$/;"	f	class:Game	file:
goRoom	Java_basic\Week_6\castle\src\castle\Game.java	/^    private void goRoom(String direction) $/;"	m	class:Game	file:
main	Java_basic\Week_6\castle\src\castle\Game.java	/^	public static void main(String[] args) {$/;"	m	class:Game
printHelp	Java_basic\Week_6\castle\src\castle\Game.java	/^    private void printHelp() $/;"	m	class:Game	file:
printWelcome	Java_basic\Week_6\castle\src\castle\Game.java	/^    private void printWelcome() {$/;"	m	class:Game	file:
showPrompt	Java_basic\Week_6\castle\src\castle\Game.java	/^    public void showPrompt(){$/;"	m	class:Game
Room	Java_basic\Week_6\castle\src\castle\Room.java	/^    public Room(String description) $/;"	m	class:Room
Room	Java_basic\Week_6\castle\src\castle\Room.java	/^public class Room {$/;"	c
castle	Java_basic\Week_6\castle\src\castle\Room.java	/^package castle;$/;"	p
description	Java_basic\Week_6\castle\src\castle\Room.java	/^    private String description;$/;"	f	class:Room	file:
exits	Java_basic\Week_6\castle\src\castle\Room.java	/^    private HashMap<String, Room> exits = new HashMap<String,Room>();		$/;"	f	class:Room	file:
nextRoom	Java_basic\Week_6\castle\src\castle\Room.java	/^    public Room nextRoom(String direction){$/;"	m	class:Room
printExit	Java_basic\Week_6\castle\src\castle\Room.java	/^    public void printExit(){$/;"	m	class:Room
setExit	Java_basic\Week_6\castle\src\castle\Room.java	/^    public void setExit(String dir, Room room){$/;"	m	class:Room
toString	Java_basic\Week_6\castle\src\castle\Room.java	/^    public String toString()$/;"	m	class:Room
Cell	Java_basic\Week_7\cells\src\cell\Cell.java	/^public class Cell {$/;"	c
alive	Java_basic\Week_7\cells\src\cell\Cell.java	/^	private boolean alive = false;$/;"	f	class:Cell	file:
cell	Java_basic\Week_7\cells\src\cell\Cell.java	/^package cell;$/;"	p
die	Java_basic\Week_7\cells\src\cell\Cell.java	/^	public void die() { alive = false; }$/;"	m	class:Cell
draw	Java_basic\Week_7\cells\src\cell\Cell.java	/^	public void draw(Graphics g, int x, int y, int size) {$/;"	m	class:Cell
isAlive	Java_basic\Week_7\cells\src\cell\Cell.java	/^	public boolean isAlive() { return alive; }$/;"	m	class:Cell
reborn	Java_basic\Week_7\cells\src\cell\Cell.java	/^	public void reborn() { alive = true; }$/;"	m	class:Cell
CellMachine	Java_basic\Week_7\cells\src\cellmachine\CellMachine.java	/^public class CellMachine {$/;"	c
cellmachine	Java_basic\Week_7\cells\src\cellmachine\CellMachine.java	/^package cellmachine;$/;"	p
main	Java_basic\Week_7\cells\src\cellmachine\CellMachine.java	/^	public static void main(String[] args) {$/;"	m	class:CellMachine
Field	Java_basic\Week_7\cells\src\field\Field.java	/^	public Field(int width, int height) {$/;"	m	class:Field
Field	Java_basic\Week_7\cells\src\field\Field.java	/^public class Field {$/;"	c
clear	Java_basic\Week_7\cells\src\field\Field.java	/^	public void clear() {$/;"	m	class:Field
field	Java_basic\Week_7\cells\src\field\Field.java	/^	private Cell[][] field;$/;"	f	class:Field	file:
field	Java_basic\Week_7\cells\src\field\Field.java	/^package field;$/;"	p
get	Java_basic\Week_7\cells\src\field\Field.java	/^	public Cell get(int row, int col) {$/;"	m	class:Field
getHeight	Java_basic\Week_7\cells\src\field\Field.java	/^	public int getHeight() { return height; }$/;"	m	class:Field
getNeighbour	Java_basic\Week_7\cells\src\field\Field.java	/^	public Cell[] getNeighbour(int row, int col) {$/;"	m	class:Field
getWidth	Java_basic\Week_7\cells\src\field\Field.java	/^	public int getWidth() { return width; }$/;"	m	class:Field
height	Java_basic\Week_7\cells\src\field\Field.java	/^	private int height;$/;"	f	class:Field	file:
place	Java_basic\Week_7\cells\src\field\Field.java	/^	public Cell place(int row, int col, Cell o) {$/;"	m	class:Field
width	Java_basic\Week_7\cells\src\field\Field.java	/^	private int width;$/;"	f	class:Field	file:
GRID_SIZE	Java_basic\Week_7\cells\src\field\View.java	/^	private static final int GRID_SIZE = 16;$/;"	f	class:View	file:
View	Java_basic\Week_7\cells\src\field\View.java	/^	public View(Field field) {$/;"	m	class:View
View	Java_basic\Week_7\cells\src\field\View.java	/^public class View extends JPanel {$/;"	c
field	Java_basic\Week_7\cells\src\field\View.java	/^package field;$/;"	p
getPreferredSize	Java_basic\Week_7\cells\src\field\View.java	/^	public Dimension getPreferredSize() {$/;"	m	class:View
main	Java_basic\Week_7\cells\src\field\View.java	/^	public static void main(String[] args) {$/;"	m	class:View
paint	Java_basic\Week_7\cells\src\field\View.java	/^	public void paint(Graphics g) {$/;"	m	class:View
serialVersionUID	Java_basic\Week_7\cells\src\field\View.java	/^	private static final long serialVersionUID = -5258995676212660595L;$/;"	f	class:View	file:
theField	Java_basic\Week_7\cells\src\field\View.java	/^	private Field theField;$/;"	f	class:View	file:
Animal	Java_basic\foxnrabbit\src\animal\Animal.java	/^	public Animal(int ageLimit, int breedableAge) {$/;"	m	class:Animal
Animal	Java_basic\foxnrabbit\src\animal\Animal.java	/^public abstract class Animal {$/;"	c
age	Java_basic\foxnrabbit\src\animal\Animal.java	/^	private int age;$/;"	f	class:Animal	file:
ageLimit	Java_basic\foxnrabbit\src\animal\Animal.java	/^	private int ageLimit;$/;"	f	class:Animal	file:
animal	Java_basic\foxnrabbit\src\animal\Animal.java	/^package animal;$/;"	p
breed	Java_basic\foxnrabbit\src\animal\Animal.java	/^	public abstract Animal breed();$/;"	m	class:Animal
breedableAge	Java_basic\foxnrabbit\src\animal\Animal.java	/^	private int breedableAge;$/;"	f	class:Animal	file:
die	Java_basic\foxnrabbit\src\animal\Animal.java	/^	public void die() {$/;"	m	class:Animal
feed	Java_basic\foxnrabbit\src\animal\Animal.java	/^	public Animal feed(ArrayList<Animal> neighbour) {$/;"	m	class:Animal
getAge	Java_basic\foxnrabbit\src\animal\Animal.java	/^	protected int getAge() {$/;"	m	class:Animal
getAgePercent	Java_basic\foxnrabbit\src\animal\Animal.java	/^	protected double getAgePercent() {$/;"	m	class:Animal
grow	Java_basic\foxnrabbit\src\animal\Animal.java	/^	public void grow() {$/;"	m	class:Animal
isAlive	Java_basic\foxnrabbit\src\animal\Animal.java	/^	private boolean isAlive = true;$/;"	f	class:Animal	file:
isAlive	Java_basic\foxnrabbit\src\animal\Animal.java	/^	public boolean isAlive() { $/;"	m	class:Animal
isBreedable	Java_basic\foxnrabbit\src\animal\Animal.java	/^	public boolean isBreedable() {$/;"	m	class:Animal
longerLife	Java_basic\foxnrabbit\src\animal\Animal.java	/^	protected void longerLife(int inc) {$/;"	m	class:Animal
move	Java_basic\foxnrabbit\src\animal\Animal.java	/^	public Location move(Location[] freeAdj) {$/;"	m	class:Animal
toString	Java_basic\foxnrabbit\src\animal\Animal.java	/^	public String toString() {$/;"	m	class:Animal
Fox	Java_basic\foxnrabbit\src\animal\Fox.java	/^	public Fox() {$/;"	m	class:Fox
Fox	Java_basic\foxnrabbit\src\animal\Fox.java	/^public class Fox extends Animal implements Cell {$/;"	c
animal	Java_basic\foxnrabbit\src\animal\Fox.java	/^package animal;$/;"	p
breed	Java_basic\foxnrabbit\src\animal\Fox.java	/^	public Animal breed() {$/;"	m	class:Fox
draw	Java_basic\foxnrabbit\src\animal\Fox.java	/^	public void draw(Graphics g, int x, int y, int size) {$/;"	m	class:Fox
feed	Java_basic\foxnrabbit\src\animal\Fox.java	/^	public Animal feed(ArrayList<Animal> neighbour) {$/;"	m	class:Fox
toString	Java_basic\foxnrabbit\src\animal\Fox.java	/^	public String toString() {$/;"	m	class:Fox
Rabbit	Java_basic\foxnrabbit\src\animal\Rabbit.java	/^	public Rabbit() {$/;"	m	class:Rabbit
Rabbit	Java_basic\foxnrabbit\src\animal\Rabbit.java	/^public class Rabbit extends Animal implements Cell {$/;"	c
animal	Java_basic\foxnrabbit\src\animal\Rabbit.java	/^package animal;$/;"	p
breed	Java_basic\foxnrabbit\src\animal\Rabbit.java	/^	public Animal breed() {$/;"	m	class:Rabbit
draw	Java_basic\foxnrabbit\src\animal\Rabbit.java	/^	public void draw(Graphics g, int x, int y, int size) {$/;"	m	class:Rabbit
toString	Java_basic\foxnrabbit\src\animal\Rabbit.java	/^	public String toString() {$/;"	m	class:Rabbit
Cell	Java_basic\foxnrabbit\src\cell\Cell.java	/^public interface Cell {$/;"	i
cell	Java_basic\foxnrabbit\src\cell\Cell.java	/^package cell;$/;"	p
draw	Java_basic\foxnrabbit\src\cell\Cell.java	/^	void draw(Graphics g, int x, int y, int size);$/;"	m	interface:Cell
Field	Java_basic\foxnrabbit\src\field\Field.java	/^	public Field(int width, int height) {$/;"	m	class:Field
Field	Java_basic\foxnrabbit\src\field\Field.java	/^public class Field {$/;"	c
adjacent	Java_basic\foxnrabbit\src\field\Field.java	/^	private static final Location[] adjacent = {$/;"	f	class:Field	file:
clear	Java_basic\foxnrabbit\src\field\Field.java	/^	public void clear() {$/;"	m	class:Field
field	Java_basic\foxnrabbit\src\field\Field.java	/^	private Cell[][] field;$/;"	f	class:Field	file:
field	Java_basic\foxnrabbit\src\field\Field.java	/^package field;$/;"	p
get	Java_basic\foxnrabbit\src\field\Field.java	/^	public Cell get(int row, int col) {$/;"	m	class:Field
getFreeNeighbour	Java_basic\foxnrabbit\src\field\Field.java	/^	public Location[] getFreeNeighbour(int row, int col) {$/;"	m	class:Field
getHeight	Java_basic\foxnrabbit\src\field\Field.java	/^	public int getHeight() { return height; }$/;"	m	class:Field
getNeighbour	Java_basic\foxnrabbit\src\field\Field.java	/^	public Cell[] getNeighbour(int row, int col) {$/;"	m	class:Field
getWidth	Java_basic\foxnrabbit\src\field\Field.java	/^	public int getWidth() { return width; }$/;"	m	class:Field
height	Java_basic\foxnrabbit\src\field\Field.java	/^	private int height;$/;"	f	class:Field	file:
move	Java_basic\foxnrabbit\src\field\Field.java	/^	public void move(int row, int col, Location loc) {$/;"	m	class:Field
place	Java_basic\foxnrabbit\src\field\Field.java	/^	public Cell place(int row, int col, Cell o) {$/;"	m	class:Field
placeRandomAdj	Java_basic\foxnrabbit\src\field\Field.java	/^	public boolean placeRandomAdj(int row, int col, Cell cell) {$/;"	m	class:Field
remove	Java_basic\foxnrabbit\src\field\Field.java	/^	public Cell remove(int row, int col) {$/;"	m	class:Field
remove	Java_basic\foxnrabbit\src\field\Field.java	/^	public void remove(Cell cell) {$/;"	m	class:Field
width	Java_basic\foxnrabbit\src\field\Field.java	/^	private int width;$/;"	f	class:Field	file:
Location	Java_basic\foxnrabbit\src\field\Location.java	/^	public Location(int row, int col) {$/;"	m	class:Location
Location	Java_basic\foxnrabbit\src\field\Location.java	/^public class Location {$/;"	c
col	Java_basic\foxnrabbit\src\field\Location.java	/^	private int col;$/;"	f	class:Location	file:
field	Java_basic\foxnrabbit\src\field\Location.java	/^package field;$/;"	p
getCol	Java_basic\foxnrabbit\src\field\Location.java	/^	public int getCol() { return col; }$/;"	m	class:Location
getRow	Java_basic\foxnrabbit\src\field\Location.java	/^	public int getRow() { return row; }$/;"	m	class:Location
row	Java_basic\foxnrabbit\src\field\Location.java	/^	private int row;$/;"	f	class:Location	file:
GRID_SIZE	Java_basic\foxnrabbit\src\field\View.java	/^	private static final int GRID_SIZE = 16;$/;"	f	class:View	file:
View	Java_basic\foxnrabbit\src\field\View.java	/^	public View(Field field) {$/;"	m	class:View
View	Java_basic\foxnrabbit\src\field\View.java	/^public class View extends JPanel {$/;"	c
field	Java_basic\foxnrabbit\src\field\View.java	/^package field;$/;"	p
getPreferredSize	Java_basic\foxnrabbit\src\field\View.java	/^	public Dimension getPreferredSize() {$/;"	m	class:View
paint	Java_basic\foxnrabbit\src\field\View.java	/^	public void paint(Graphics g) {$/;"	m	class:View
serialVersionUID	Java_basic\foxnrabbit\src\field\View.java	/^	private static final long serialVersionUID = -2417015700213488315L;$/;"	f	class:View	file:
theField	Java_basic\foxnrabbit\src\field\View.java	/^	private Field theField;$/;"	f	class:View	file:
FoxAndRabbit	Java_basic\foxnrabbit\src\foxnrabbit\FoxAndRabbit.java	/^	public FoxAndRabbit(int size) {$/;"	m	class:FoxAndRabbit
FoxAndRabbit	Java_basic\foxnrabbit\src\foxnrabbit\FoxAndRabbit.java	/^public class FoxAndRabbit {$/;"	c
foxnrabbit	Java_basic\foxnrabbit\src\foxnrabbit\FoxAndRabbit.java	/^package foxnrabbit;$/;"	p
main	Java_basic\foxnrabbit\src\foxnrabbit\FoxAndRabbit.java	/^	public static void main(String[] args) {$/;"	m	class:FoxAndRabbit
start	Java_basic\foxnrabbit\src\foxnrabbit\FoxAndRabbit.java	/^	public void start(int steps) {$/;"	m	class:FoxAndRabbit
step	Java_basic\foxnrabbit\src\foxnrabbit\FoxAndRabbit.java	/^	public void step() {$/;"	m	class:FoxAndRabbit
theField	Java_basic\foxnrabbit\src\foxnrabbit\FoxAndRabbit.java	/^	private Field theField;$/;"	f	class:FoxAndRabbit	file:
theView	Java_basic\foxnrabbit\src\foxnrabbit\FoxAndRabbit.java	/^	private View theView;$/;"	f	class:FoxAndRabbit	file:
main	OJ\BankOne.cpp	/^int main() {$/;"	f
option	OJ\BankOne.cpp	/^int option(int percents[]) {$/;"	f
Person	OJ\USACO\Section_1\1_1\gift1.cpp	/^	Person(string n = ""\/*, int m = 0*\/, int g = 0, int r = 0): name(n)\/*, money(m)*\/, give(g), receive(r) {}$/;"	f	struct:Person
Person	OJ\USACO\Section_1\1_1\gift1.cpp	/^struct Person$/;"	s	file:
give	OJ\USACO\Section_1\1_1\gift1.cpp	/^	int give;$/;"	m	struct:Person	file:
main	OJ\USACO\Section_1\1_1\gift1.cpp	/^int main() {$/;"	f
name	OJ\USACO\Section_1\1_1\gift1.cpp	/^	string name;$/;"	m	struct:Person	file:
receive	OJ\USACO\Section_1\1_1\gift1.cpp	/^	int receive;$/;"	m	struct:Person	file:
main	OJ\USACO\Section_1\1_1\ride.cpp	/^int main() {$/;"	f
toNumber	OJ\USACO\Section_1\1_1\ride.cpp	/^int toNumber(const string& name) {$/;"	f
main	OJ\USACO\Section_1\1_1\test.cpp	/^int main() {$/;"	f
DLL_QUEUE	OJ\genQueue.h	5;"	d
Queue	OJ\genQueue.h	/^    Queue() { $/;"	f	class:Queue
Queue	OJ\genQueue.h	/^class Queue {$/;"	c
clear	OJ\genQueue.h	/^    void clear() {$/;"	f	class:Queue
dequeue	OJ\genQueue.h	/^    T dequeue() {$/;"	f	class:Queue
enqueue	OJ\genQueue.h	/^    void enqueue(const T& el) {$/;"	f	class:Queue
front	OJ\genQueue.h	/^    T& front() { $/;"	f	class:Queue
isEmpty	OJ\genQueue.h	/^    bool isEmpty() const { $/;"	f	class:Queue
lst	OJ\genQueue.h	/^    list<T> lst;$/;"	m	class:Queue
Cell	OJ\maze.cpp	/^    Cell(int i = 0, int j = 0): x(i), y(j) {$/;"	f	class:Cell
Cell	OJ\maze.cpp	/^class Cell {$/;"	c	file:
Maze	OJ\maze.cpp	/^Maze::Maze() : exitMarker('e'), entryMarker('m'), visited('.'),$/;"	f	class:Maze
Maze	OJ\maze.cpp	/^class Maze {$/;"	c	file:
Stack	OJ\maze.cpp	/^class Stack : public stack<T> {$/;"	c	file:
cols	OJ\maze.cpp	/^    int rows, cols;$/;"	m	class:Maze	file:
currentCell	OJ\maze.cpp	/^    Cell currentCell, exitCell, entryCell;$/;"	m	class:Maze	file:
entryCell	OJ\maze.cpp	/^    Cell currentCell, exitCell, entryCell;$/;"	m	class:Maze	file:
entryMarker	OJ\maze.cpp	/^    const char exitMarker, entryMarker, visited, passage, wall;$/;"	m	class:Maze	file:
exitCell	OJ\maze.cpp	/^    Cell currentCell, exitCell, entryCell;$/;"	m	class:Maze	file:
exitMarker	OJ\maze.cpp	/^    const char exitMarker, entryMarker, visited, passage, wall;$/;"	m	class:Maze	file:
exitMaze	OJ\maze.cpp	/^void Maze::exitMaze() {$/;"	f	class:Maze
main	OJ\maze.cpp	/^int main() {$/;"	f
mazeStack	OJ\maze.cpp	/^    Stack<Cell> mazeStack;$/;"	m	class:Maze	file:
operator <<	OJ\maze.cpp	/^    friend ostream& operator<< (ostream& out, const Maze& maze) {$/;"	f	class:Maze	file:
operator ==	OJ\maze.cpp	/^    bool operator== (const Cell& c) const {$/;"	f	class:Cell
passage	OJ\maze.cpp	/^    const char exitMarker, entryMarker, visited, passage, wall;$/;"	m	class:Maze	file:
pop	OJ\maze.cpp	/^    T pop() {$/;"	f	class:Stack
pushUnvisited	OJ\maze.cpp	/^void Maze::pushUnvisited(int row, int col) {$/;"	f	class:Maze
rows	OJ\maze.cpp	/^    int rows, cols;$/;"	m	class:Maze	file:
store	OJ\maze.cpp	/^    char **store;         \/\/ array of strings;$/;"	m	class:Maze	file:
visited	OJ\maze.cpp	/^    const char exitMarker, entryMarker, visited, passage, wall;$/;"	m	class:Maze	file:
wall	OJ\maze.cpp	/^    const char exitMarker, entryMarker, visited, passage, wall;$/;"	m	class:Maze	file:
x	OJ\maze.cpp	/^    int x, y;$/;"	m	class:Cell	file:
y	OJ\maze.cpp	/^    int x, y;$/;"	m	class:Cell	file:
main	Object_oriented_c++\C_1\hello.cpp	/^int main()$/;"	f
main	Object_oriented_c++\C_1\read.cpp	/^int main() { $/;"	f
PRICE	Object_oriented_c++\C_4\TicketMachine.h	/^	const int PRICE;$/;"	m	class:TicketMachine
TicketMachine	Object_oriented_c++\C_4\TicketMachine.h	/^class TicketMachine {$/;"	c
TicketMachine_H_	Object_oriented_c++\C_4\TicketMachine.h	13;"	d
balance	Object_oriented_c++\C_4\TicketMachine.h	/^	int balance;$/;"	m	class:TicketMachine
total	Object_oriented_c++\C_4\TicketMachine.h	/^	int total;$/;"	m	class:TicketMachine
TicketMachine	Object_oriented_c++\C_4\ticketmachine.cpp	/^TicketMachine::TicketMachine(): PRICE(10) {$/;"	f	class:TicketMachine
buyThings	Object_oriented_c++\C_4\ticketmachine.cpp	/^void TicketMachine::buyThings(int number) {$/;"	f	class:TicketMachine
changeBalance	Object_oriented_c++\C_4\ticketmachine.cpp	/^void TicketMachine::changeBalance() {$/;"	f	class:TicketMachine
insertMoney	Object_oriented_c++\C_4\ticketmachine.cpp	/^void TicketMachine::insertMoney(int money) {$/;"	f	class:TicketMachine
main	Object_oriented_c++\C_4\ticketmachine.cpp	/^int main() {$/;"	f
showBalance	Object_oriented_c++\C_4\ticketmachine.cpp	/^void TicketMachine::showBalance() {$/;"	f	class:TicketMachine
showPrompt	Object_oriented_c++\C_4\ticketmachine.cpp	/^void TicketMachine::showPrompt() {$/;"	f	class:TicketMachine
showTotal	Object_oriented_c++\C_4\ticketmachine.cpp	/^void TicketMachine::showTotal() {$/;"	f	class:TicketMachine
~TicketMachine	Object_oriented_c++\C_4\ticketmachine.cpp	/^TicketMachine::~TicketMachine() {$/;"	f	class:TicketMachine
main	Object_oriented_c++\Eclipse\test\src\test.cpp	/^int main()$/;"	f
main	Object_oriented_c++\hello.cpp	/^int main()$/;"	f
Level	TEST\Level.java	/^public class Level {$/;"	c
bab2	TEST\Level.java	/^package bab2;$/;"	p
main	TEST\Level.java	/^	public static void main(String args[]) {$/;"	m	class:Level
main	c++_primer\Code\10_1.cpp	/^int main() {$/;"	f
QueryResult	c++_primer\Code\12_1.cpp	/^	QueryResult(string s, shared_ptr<set<line_no>>p, shared_ptr<vector<string>> f): sought(s), lines(p), file(f) {}$/;"	f	class:QueryResult
QueryResult	c++_primer\Code\12_1.cpp	/^class QueryResult {$/;"	c	file:
TextQuery	c++_primer\Code\12_1.cpp	/^TextQuery::TextQuery(ifstream &is): file(new vector<string>) {$/;"	f	class:TextQuery
TextQuery	c++_primer\Code\12_1.cpp	/^class TextQuery$/;"	c	file:
file	c++_primer\Code\12_1.cpp	/^	shared_ptr<vector<string>> file;$/;"	m	class:QueryResult	file:
file	c++_primer\Code\12_1.cpp	/^	shared_ptr<vector<string>> file;$/;"	m	class:TextQuery	file:
lines	c++_primer\Code\12_1.cpp	/^	shared_ptr<set<line_no>> lines;$/;"	m	class:QueryResult	file:
main	c++_primer\Code\12_1.cpp	/^int main() {$/;"	f
print	c++_primer\Code\12_1.cpp	/^ostream &print(ostream &os, const QueryResult &qr) {$/;"	f
query	c++_primer\Code\12_1.cpp	/^QueryResult TextQuery::query(const string &sought)const {$/;"	f	class:TextQuery
runQueries	c++_primer\Code\12_1.cpp	/^void runQueries(ifstream &infile) {$/;"	f
sought	c++_primer\Code\12_1.cpp	/^	string sought;$/;"	m	class:QueryResult	file:
wm	c++_primer\Code\12_1.cpp	/^	map<string, shared_ptr<set<line_no>>> wm ;$/;"	m	class:TextQuery	file:
~TextQuery	c++_primer\Code\12_1.cpp	/^	~TextQuery() {}$/;"	f	class:TextQuery
Test	c++_primer\Code\13_1.cpp	/^	Test(string d = "default" , double p = 0.0, int n = 0, double t = 0): dvd(d), price(p), number(n), total(t) {}$/;"	f	class:Test
Test	c++_primer\Code\13_1.cpp	/^class Test$/;"	c	file:
dvd	c++_primer\Code\13_1.cpp	/^	string dvd;$/;"	m	class:Test	file:
main	c++_primer\Code\13_1.cpp	/^int main() {$/;"	f
number	c++_primer\Code\13_1.cpp	/^	int number;$/;"	m	class:Test	file:
operator !=	c++_primer\Code\13_1.cpp	/^bool operator!=(const Test &lhs, const Test &rhs) {$/;"	f
operator ++	c++_primer\Code\13_1.cpp	/^Test &Test::operator++() {$/;"	f	class:Test
operator ++	c++_primer\Code\13_1.cpp	/^Test Test::operator++(int) {$/;"	f	class:Test
operator --	c++_primer\Code\13_1.cpp	/^Test &Test::operator--() {$/;"	f	class:Test
operator --	c++_primer\Code\13_1.cpp	/^Test Test::operator--(int) {$/;"	f	class:Test
operator <<	c++_primer\Code\13_1.cpp	/^ostream &operator<<(ostream &os, const Test &test) {$/;"	f
operator ==	c++_primer\Code\13_1.cpp	/^bool operator==(const Test &lhs, const Test &rhs) {$/;"	f
operator >>	c++_primer\Code\13_1.cpp	/^istream &operator>>(istream &is, Test &test) {$/;"	f
price	c++_primer\Code\13_1.cpp	/^	double price;$/;"	m	class:Test	file:
total	c++_primer\Code\13_1.cpp	/^	double total;$/;"	m	class:Test	file:
~Test	c++_primer\Code\13_1.cpp	/^	~Test() {};$/;"	f	class:Test
main	c++_primer\Code\1_1.cpp	/^int main() {$/;"	f
main	c++_primer\Code\2_1.cpp	/^int main() {$/;"	f
_GLOBAL__sub_I_main	c++_primer\Code\2_1.s	/^_GLOBAL__sub_I_main:$/;"	l
_Z41__static_initialization_and_destruction_0ii	c++_primer\Code\2_1.s	/^_Z41__static_initialization_and_destruction_0ii:$/;"	l
_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPiy	c++_primer\Code\2_1.s	/^_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPiy:$/;"	l
_ZN9__gnu_cxx13new_allocatorIiE7destroyIiEEvPT_	c++_primer\Code\2_1.s	/^_ZN9__gnu_cxx13new_allocatorIiE7destroyIiEEvPT_:$/;"	l
_ZN9__gnu_cxx13new_allocatorIiE8allocateEyPKv	c++_primer\Code\2_1.s	/^_ZN9__gnu_cxx13new_allocatorIiE8allocateEyPKv:$/;"	l
_ZN9__gnu_cxx13new_allocatorIiE9constructIiIiEEEvPT_DpOT0_	c++_primer\Code\2_1.s	/^_ZN9__gnu_cxx13new_allocatorIiE9constructIiIiEEEvPT_DpOT0_:$/;"	l
_ZN9__gnu_cxx13new_allocatorIiEC2Ev	c++_primer\Code\2_1.s	/^_ZN9__gnu_cxx13new_allocatorIiEC2Ev:$/;"	l
_ZN9__gnu_cxx13new_allocatorIiED2Ev	c++_primer\Code\2_1.s	/^_ZN9__gnu_cxx13new_allocatorIiED2Ev:$/;"	l
_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_	c++_primer\Code\2_1.s	/^_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_:$/;"	l
_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv	c++_primer\Code\2_1.s	/^_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv:$/;"	l
_ZNK9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEdeEv	c++_primer\Code\2_1.s	/^_ZNK9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEdeEv:$/;"	l
_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv	c++_primer\Code\2_1.s	/^_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv:$/;"	l
_ZNKSt13move_iteratorIPiE4baseEv	c++_primer\Code\2_1.s	/^_ZNKSt13move_iteratorIPiE4baseEv:$/;"	l
_ZNKSt6vectorIiSaIiEE12_M_check_lenEyPKc	c++_primer\Code\2_1.s	/^_ZNKSt6vectorIiSaIiEE12_M_check_lenEyPKc:$/;"	l
_ZNKSt6vectorIiSaIiEE4sizeEv	c++_primer\Code\2_1.s	/^_ZNKSt6vectorIiSaIiEE4sizeEv:$/;"	l
_ZNKSt6vectorIiSaIiEE6cbeginEv	c++_primer\Code\2_1.s	/^_ZNKSt6vectorIiSaIiEE6cbeginEv:$/;"	l
_ZNKSt6vectorIiSaIiEE8max_sizeEv	c++_primer\Code\2_1.s	/^_ZNKSt6vectorIiSaIiEE8max_sizeEv:$/;"	l
_ZNSaIiEC2Ev	c++_primer\Code\2_1.s	/^_ZNSaIiEC2Ev:$/;"	l
_ZNSaIiED2Ev	c++_primer\Code\2_1.s	/^_ZNSaIiED2Ev:$/;"	l
_ZNSt10_Iter_baseIPiLb0EE7_S_baseES0_	c++_primer\Code\2_1.s	/^_ZNSt10_Iter_baseIPiLb0EE7_S_baseES0_:$/;"	l
_ZNSt10_Iter_baseISt13move_iteratorIPiELb1EE7_S_baseES2_	c++_primer\Code\2_1.s	/^_ZNSt10_Iter_baseISt13move_iteratorIPiELb1EE7_S_baseES2_:$/;"	l
_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_	c++_primer\Code\2_1.s	/^_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_:$/;"	l
_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_	c++_primer\Code\2_1.s	/^_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_:$/;"	l
_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEy	c++_primer\Code\2_1.s	/^_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEy:$/;"	l
_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev	c++_primer\Code\2_1.s	/^_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev:$/;"	l
_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev	c++_primer\Code\2_1.s	/^_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev:$/;"	l
_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPiy	c++_primer\Code\2_1.s	/^_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPiy:$/;"	l
_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv	c++_primer\Code\2_1.s	/^_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv:$/;"	l
_ZNSt12_Vector_baseIiSaIiEEC2Ev	c++_primer\Code\2_1.s	/^_ZNSt12_Vector_baseIiSaIiEEC2Ev:$/;"	l
_ZNSt12_Vector_baseIiSaIiEED2Ev	c++_primer\Code\2_1.s	/^_ZNSt12_Vector_baseIiSaIiEED2Ev:$/;"	l
_ZNSt13move_iteratorIPiEC1ES0_	c++_primer\Code\2_1.s	/^_ZNSt13move_iteratorIPiEC1ES0_:$/;"	l
_ZNSt16allocator_traitsISaIiEE10_S_destroyIiEENSt9enable_ifIXsrNS1_16__destroy_helperIT_EE5valueEvE4typeERS0_PS5_	c++_primer\Code\2_1.s	/^_ZNSt16allocator_traitsISaIiEE10_S_destroyIiEENSt9enable_ifIXsrNS1_16__destroy_helperIT_EE5valueEvE4typeERS0_PS5_:$/;"	l
_ZNSt16allocator_traitsISaIiEE11_S_max_sizeIKS0_EENSt9enable_ifIXsrNS1_16__maxsize_helperIT_EE5valueEyE4typeERS6_	c++_primer\Code\2_1.s	/^_ZNSt16allocator_traitsISaIiEE11_S_max_sizeIKS0_EENSt9enable_ifIXsrNS1_16__maxsize_helperIT_EE5valueEyE4typeERS6_:$/;"	l
_ZNSt16allocator_traitsISaIiEE12_S_constructIiIiEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS5_DpOS6_	c++_primer\Code\2_1.s	/^_ZNSt16allocator_traitsISaIiEE12_S_constructIiIiEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS5_DpOS6_:$/;"	l
_ZNSt16allocator_traitsISaIiEE7destroyIiEEvRS0_PT_	c++_primer\Code\2_1.s	/^_ZNSt16allocator_traitsISaIiEE7destroyIiEEvRS0_PT_:$/;"	l
_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_	c++_primer\Code\2_1.s	/^_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_:$/;"	l
_ZNSt16allocator_traitsISaIiEE9constructIiIiEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS3_	c++_primer\Code\2_1.s	/^_ZNSt16allocator_traitsISaIiEE9constructIiIiEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS3_:$/;"	l
_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_	c++_primer\Code\2_1.s	/^_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_:$/;"	l
_ZNSt6vectorIiSaIiEE12emplace_backIIiEEEvDpOT_	c++_primer\Code\2_1.s	/^_ZNSt6vectorIiSaIiEE12emplace_backIIiEEEvDpOT_:$/;"	l
_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_	c++_primer\Code\2_1.s	/^_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_:$/;"	l
_ZNSt6vectorIiSaIiEE9push_backEOi	c++_primer\Code\2_1.s	/^_ZNSt6vectorIiSaIiEE9push_backEOi:$/;"	l
_ZNSt6vectorIiSaIiEEC1Ev	c++_primer\Code\2_1.s	/^_ZNSt6vectorIiSaIiEEC1Ev:$/;"	l
_ZNSt6vectorIiSaIiEED1Ev	c++_primer\Code\2_1.s	/^_ZNSt6vectorIiSaIiEED1Ev:$/;"	l
_ZSt12__miter_baseISt13move_iteratorIPiEENSt11_Miter_baseIT_E13iterator_typeES4_	c++_primer\Code\2_1.s	/^_ZSt12__miter_baseISt13move_iteratorIPiEENSt11_Miter_baseIT_E13iterator_typeES4_:$/;"	l
_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_	c++_primer\Code\2_1.s	/^_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_:$/;"	l
_ZSt13__copy_move_aILb1EPiS0_ET1_T0_S2_S1_	c++_primer\Code\2_1.s	/^_ZSt13__copy_move_aILb1EPiS0_ET1_T0_S2_S1_:$/;"	l
_ZSt14__copy_move_a2ILb1EPiS0_ET1_T0_S2_S1_	c++_primer\Code\2_1.s	/^_ZSt14__copy_move_a2ILb1EPiS0_ET1_T0_S2_S1_:$/;"	l
_ZSt18uninitialized_copyISt13move_iteratorIPiES1_ET0_T_S4_S3_	c++_primer\Code\2_1.s	/^_ZSt18uninitialized_copyISt13move_iteratorIPiES1_ET0_T_S4_S3_:$/;"	l
_ZSt22__uninitialized_copy_aISt13move_iteratorIPiES1_iET0_T_S4_S3_RSaIT1_E	c++_primer\Code\2_1.s	/^_ZSt22__uninitialized_copy_aISt13move_iteratorIPiES1_iET0_T_S4_S3_RSaIT1_E:$/;"	l
_ZSt32__make_move_if_noexcept_iteratorIPiSt13move_iteratorIS0_EET0_T_	c++_primer\Code\2_1.s	/^_ZSt32__make_move_if_noexcept_iteratorIPiSt13move_iteratorIS0_EET0_T_:$/;"	l
_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_	c++_primer\Code\2_1.s	/^_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_:$/;"	l
_ZSt3maxIyERKT_S2_S2_	c++_primer\Code\2_1.s	/^_ZSt3maxIyERKT_S2_S2_:$/;"	l
_ZSt4copyISt13move_iteratorIPiES1_ET0_T_S4_S3_	c++_primer\Code\2_1.s	/^_ZSt4copyISt13move_iteratorIPiES1_ET0_T_S4_S3_:$/;"	l
_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_	c++_primer\Code\2_1.s	/^_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_:$/;"	l
_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE	c++_primer\Code\2_1.s	/^_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE:$/;"	l
_ZSt8_DestroyIPiEvT_S1_	c++_primer\Code\2_1.s	/^_ZSt8_DestroyIPiEvT_S1_:$/;"	l
_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E	c++_primer\Code\2_1.s	/^_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E:$/;"	l
_ZStL19piecewise_construct	c++_primer\Code\2_1.s	/^_ZStL19piecewise_construct:$/;"	l
_ZnwyPv	c++_primer\Code\2_1.s	/^_ZnwyPv:$/;"	l
__tcf_0	c++_primer\Code\2_1.s	/^__tcf_0:$/;"	l
main	c++_primer\Code\2_1.s	/^main:$/;"	l
foo	c++_primer\Code\4_1.cpp	/^int foo(int n) {$/;"	f
main	c++_primer\Code\4_1.cpp	/^int main() {$/;"	f
main	c++_primer\Code\5_1.cpp	/^int main() {$/;"	f
main	c++_primer\Code\6_1.cpp	/^int main() {$/;"	f
Sales_data	c++_primer\Code\6_1.h	/^	Sales_data(): Sales_data("", 0, 0) {}$/;"	f	class:Sales_data
Sales_data	c++_primer\Code\6_1.h	/^	Sales_data(const std::string &s): Sales_data(s, 0, 0) {}$/;"	f	class:Sales_data
Sales_data	c++_primer\Code\6_1.h	/^	Sales_data(const std::string &s, unsigned n, double p): bookNo(s), units_sold(n), revenue(p * n) {}$/;"	f	class:Sales_data
Sales_data	c++_primer\Code\6_1.h	/^	Sales_data(std::istream &is): Sales_data() {$/;"	f	class:Sales_data
Sales_data	c++_primer\Code\6_1.h	/^class Sales_data$/;"	c
avg_price	c++_primer\Code\6_1.h	/^	double avg_price()const {return units_sold ? revenue \/ units_sold : 0;}$/;"	f	class:Sales_data
bookNo	c++_primer\Code\6_1.h	/^	string bookNo;$/;"	m	class:Sales_data
isbn	c++_primer\Code\6_1.h	/^	string isbn() const {return bookNo;}$/;"	f	class:Sales_data
revenue	c++_primer\Code\6_1.h	/^	double revenue = 0.0;$/;"	m	class:Sales_data
units_sold	c++_primer\Code\6_1.h	/^	unsigned units_sold = 0;$/;"	m	class:Sales_data
main	c++_primer\Code\8_1.cpp	/^int main() {$/;"	f
main	c++_primer\Code\9_1.cpp	/^int main() {$/;"	f
get	c++_primer\Code\Screen.cpp	/^char Screen::get(pos r, pos c)const {$/;"	f	class:Screen
main	c++_primer\Code\Screen.cpp	/^int main() {$/;"	f
move	c++_primer\Code\Screen.cpp	/^inline Screen &Screen::move(pos r, pos c) {$/;"	f	class:Screen
Screen	c++_primer\Code\Screen.h	/^	Screen(pos ht, pos wd, char c): height(ht), width(wd), contents(ht * wd, c) {}$/;"	f	class:Screen
Screen	c++_primer\Code\Screen.h	/^class Screen$/;"	c
contents	c++_primer\Code\Screen.h	/^	std::string contents;$/;"	m	class:Screen
cursor	c++_primer\Code\Screen.h	/^	pos cursor = 0;$/;"	m	class:Screen
get	c++_primer\Code\Screen.h	/^	char get() const {return contents[cursor];}$/;"	f	class:Screen
height	c++_primer\Code\Screen.h	/^	pos height = 0, width = 0;$/;"	m	class:Screen
nonstaticTest	c++_primer\Code\Screen.h	/^	char nonstaticTest() {return get();}$/;"	f	class:Screen
pos	c++_primer\Code\Screen.h	/^	typedef std::string::size_type pos;$/;"	t	class:Screen
set	c++_primer\Code\Screen.h	/^inline Screen &Screen::set(char c) {$/;"	f	class:Screen
set	c++_primer\Code\Screen.h	/^inline Screen &Screen::set(pos r, pos col, char ch) {$/;"	f	class:Screen
staticTest	c++_primer\Code\Screen.h	/^	static void staticTest() {++test; }$/;"	f	class:Screen
test	c++_primer\Code\Screen.h	/^	static int test;$/;"	m	class:Screen
test	c++_primer\Code\Screen.h	/^int Screen::test = 233;$/;"	m	class:Screen
width	c++_primer\Code\Screen.h	/^	pos height = 0, width = 0;$/;"	m	class:Screen
~Screen	c++_primer\Code\Screen.h	/^	~Screen() {}$/;"	f	class:Screen
ListSubsets	c++_primer\Code\Subsets.cpp	/^void ListSubsets(std::string str) {$/;"	f
RecSubsets	c++_primer\Code\Subsets.cpp	/^void RecSubsets(std::string dealt, std::string remaining ) {$/;"	f
count	c++_primer\Code\Subsets.cpp	/^static int count;$/;"	v	file:
main	c++_primer\Code\Subsets.cpp	/^int main() {$/;"	f
output	c++_primer\Code\Subsets.cpp	/^static ofstream output;$/;"	v	file:
Window_mgr	c++_primer\Code\Window_mgr.h	/^	Window_mgr(int a, int b) {}$/;"	f	class:Window_mgr
Window_mgr	c++_primer\Code\Window_mgr.h	/^class Window_mgr$/;"	c
clear	c++_primer\Code\Window_mgr.h	/^void Window_mgr::clear(ScreenIndex i) {$/;"	f	class:Window_mgr
~Window_mgr	c++_primer\Code\Window_mgr.h	/^	~Window_mgr() {}$/;"	f	class:Window_mgr
BUFSIZE	c++_primer\Code\getop.c	13;"	d	file:
NUMBER	c++_primer\Code\getop.c	2;"	d	file:
buf	c++_primer\Code\getop.c	/^char buf[BUFSIZE];$/;"	v
bufp	c++_primer\Code\getop.c	/^int bufp = 0;$/;"	v
getch	c++_primer\Code\getop.c	/^int getch(void)$/;"	f
getop	c++_primer\Code\getop.c	/^int getop(char s[])$/;"	f
ungetch	c++_primer\Code\getop.c	/^void ungetch(int c)$/;"	f
_H_GETOP	c++_primer\Code\getop.h	2;"	d
count	c++_primer\Code\permute.cpp	/^static int count = 1;$/;"	v	file:
listPermutation	c++_primer\Code\permute.cpp	/^void listPermutation(string s) {$/;"	f
main	c++_primer\Code\permute.cpp	/^int main() {$/;"	f
recPermutation	c++_primer\Code\permute.cpp	/^void recPermutation(string completed, string remaining) {$/;"	f
count	c++_primer\Code\permuteImp.cpp	/^extern static count;$/;"	v	file:
listPermutation	c++_primer\Code\permuteImp.cpp	/^void listPermutation(string s) {$/;"	f
recPermutation	c++_primer\Code\permuteImp.cpp	/^void recPermutation(string completed, string remaining) {$/;"	f
main	c++_primer\Code\random.cpp	/^int main() {$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch01\ex1_1.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch01\ex1_10.cpp	/^int main() $/;"	f
main	c++_primer\key_Cpp-Primer-master\ch01\ex1_11.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch01\ex1_16.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch01\ex1_20.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch01\ex1_21.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch01\ex1_22.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch01\ex1_23.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch01\ex1_9.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch02\ex2_34.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch02\ex2_35.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch02\ex2_4.cpp	/^int main()$/;"	f
AddData	c++_primer\key_Cpp-Primer-master\ch02\ex2_42.h	/^void Sales_data::AddData(Sales_data data)$/;"	f	class:Sales_data
CH02_EX2_42_H_	c++_primer\key_Cpp-Primer-master\ch02\ex2_42.h	2;"	d
CalcAveragePrice	c++_primer\key_Cpp-Primer-master\ch02\ex2_42.h	/^double Sales_data::CalcAveragePrice()$/;"	f	class:Sales_data
CalcRevenue	c++_primer\key_Cpp-Primer-master\ch02\ex2_42.h	/^void Sales_data::CalcRevenue(double price)$/;"	f	class:Sales_data
Print	c++_primer\key_Cpp-Primer-master\ch02\ex2_42.h	/^void Sales_data::Print()$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch02\ex2_42.h	/^struct Sales_data$/;"	s
SetData	c++_primer\key_Cpp-Primer-master\ch02\ex2_42.h	/^void Sales_data::SetData(Sales_data data)$/;"	f	class:Sales_data
bookNo	c++_primer\key_Cpp-Primer-master\ch02\ex2_42.h	/^    std::string bookNo;$/;"	m	struct:Sales_data
revenue	c++_primer\key_Cpp-Primer-master\ch02\ex2_42.h	/^    double revenue = 0.0;$/;"	m	struct:Sales_data
units_sold	c++_primer\key_Cpp-Primer-master\ch02\ex2_42.h	/^    unsigned units_sold = 0;$/;"	m	struct:Sales_data
main	c++_primer\key_Cpp-Primer-master\ch02\ex2_42_1.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch02\ex2_42_2.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch02\ex2_42_3.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_10.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_14.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_15.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_16.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_17.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_18.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_19.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_1a.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_1b.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_20a.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_20b.cpp	/^int main()$/;"	f
check_and_print	c++_primer\key_Cpp-Primer-master\ch03\ex3_21.cpp	/^void check_and_print(const vector<int>& vec)$/;"	f
check_and_print	c++_primer\key_Cpp-Primer-master\ch03\ex3_21.cpp	/^void check_and_print(const vector<string>& vec)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_21.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_22.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_23.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_24.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_25.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_2a.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_2b.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_31.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_32.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_35.cpp	/^int main()$/;"	f
compare	c++_primer\key_Cpp-Primer-master\ch03\ex3_36.cpp	/^bool compare(int* const pb1, int* const pe1, int* const pb2, int* const pe2)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_36.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_39.cpp	/^int main()$/;"	f
cstr1	c++_primer\key_Cpp-Primer-master\ch03\ex3_40.cpp	/^const char cstr1[]="Hello";$/;"	v
cstr2	c++_primer\key_Cpp-Primer-master\ch03\ex3_40.cpp	/^const char cstr2[]="world!";$/;"	v
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_40.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_41.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_42.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_43.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_44.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_45.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_4a.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_4b.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_5a.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_5b.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_6.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch03\ex3_8.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch04\ex4_21.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch04\ex4_22.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch04\ex4_28.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch05\ex5_10.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch05\ex5_11.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch05\ex5_12.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch05\ex5_14.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch05\ex5_17.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch05\ex5_19.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch05\ex5_20.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch05\ex5_21.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch05\ex5_23.cpp	/^int main() $/;"	f
main	c++_primer\key_Cpp-Primer-master\ch05\ex5_24.cpp	/^int main(void)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch05\ex5_25.cpp	/^int main(void)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch05\ex5_5.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch05\ex5_6.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch05\ex5_9.cpp	/^int main()$/;"	f
abs	c++_primer\key_Cpp-Primer-master\ch06\Chapter6.h	/^T abs(T i)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch06\ex6_10.cpp	/^int main()$/;"	f
swap	c++_primer\key_Cpp-Primer-master\ch06\ex6_10.cpp	/^void swap(int* lhs, int* rhs)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch06\ex6_11.cpp	/^int main()$/;"	f
reset	c++_primer\key_Cpp-Primer-master\ch06\ex6_11.cpp	/^void reset(int &i)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch06\ex6_12.cpp	/^int main()$/;"	f
swap	c++_primer\key_Cpp-Primer-master\ch06\ex6_12.cpp	/^void swap(int& lhs, int& rhs)$/;"	f
any_capital	c++_primer\key_Cpp-Primer-master\ch06\ex6_17.cpp	/^bool any_capital(string const& str)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch06\ex6_17.cpp	/^int main()$/;"	f
to_lowercase	c++_primer\key_Cpp-Primer-master\ch06\ex6_17.cpp	/^void to_lowercase(string& str)$/;"	f
larger_one	c++_primer\key_Cpp-Primer-master\ch06\ex6_21.cpp	/^int larger_one(const int i, const int *p)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch06\ex6_21.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch06\ex6_22.cpp	/^int main()$/;"	f
swap	c++_primer\key_Cpp-Primer-master\ch06\ex6_22.cpp	/^void swap(int*& lft, int*& rht)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch06\ex6_23.cpp	/^int main()$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch06\ex6_23.cpp	/^void print(const char *p)$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch06\ex6_23.cpp	/^void print(const int *beg, const int *end)$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch06\ex6_23.cpp	/^void print(const int *pi)$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch06\ex6_23.cpp	/^void print(const int ia[], size_t size)$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch06\ex6_23.cpp	/^void print(int (&arr)[2])$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch06\ex6_25_26.cpp	/^int main(int argc, char **argv)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch06\ex6_27.cpp	/^int main(void)$/;"	f
sum	c++_primer\key_Cpp-Primer-master\ch06\ex6_27.cpp	/^int sum(std::initializer_list<int> const& il)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch06\ex6_33.cpp	/^int main()$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch06\ex6_33.cpp	/^void print(Iter first, Iter last)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch06\ex6_42.cpp	/^int main()$/;"	f
make_plural	c++_primer\key_Cpp-Primer-master\ch06\ex6_42.cpp	/^string make_plural(size_t ctr, const string& word, const string& ending = "s")$/;"	f
is_shorter	c++_primer\key_Cpp-Primer-master\ch06\ex6_44.cpp	/^inline bool is_shorter(const string &lft, const string &rht) \/\/ defining in the header more better.$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch06\ex6_44.cpp	/^int main()$/;"	f
NDEBUG	c++_primer\key_Cpp-Primer-master\ch06\ex6_47.cpp	12;"	d	file:
main	c++_primer\key_Cpp-Primer-master\ch06\ex6_47.cpp	/^int main()$/;"	f
printVec	c++_primer\key_Cpp-Primer-master\ch06\ex6_47.cpp	/^void printVec(vector<int> &vec)$/;"	f
f	c++_primer\key_Cpp-Primer-master\ch06\ex6_51.cpp	/^void f()$/;"	f
f	c++_primer\key_Cpp-Primer-master\ch06\ex6_51.cpp	/^void f(double, double)$/;"	f
f	c++_primer\key_Cpp-Primer-master\ch06\ex6_51.cpp	/^void f(int)$/;"	f
f	c++_primer\key_Cpp-Primer-master\ch06\ex6_51.cpp	/^void f(int, int)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch06\ex6_51.cpp	/^int main()$/;"	f
NumAdd	c++_primer\key_Cpp-Primer-master\ch06\ex6_54_55_56.cpp	/^inline int NumAdd(const int n1, const int n2)  { return n1 + n2; }$/;"	f
NumDiv	c++_primer\key_Cpp-Primer-master\ch06\ex6_54_55_56.cpp	/^inline int NumDiv(const int n1, const int n2)  { return n1 \/ n2; }$/;"	f
NumMul	c++_primer\key_Cpp-Primer-master\ch06\ex6_54_55_56.cpp	/^inline int NumMul(const int n1, const int n2)  { return n1 * n2; }$/;"	f
NumSub	c++_primer\key_Cpp-Primer-master\ch06\ex6_54_55_56.cpp	/^inline int NumSub(const int n1, const int n2)  { return n1 - n2; }$/;"	f
fp	c++_primer\key_Cpp-Primer-master\ch06\ex6_54_55_56.cpp	/^typedef decltype(f) fp;\/\/fp is just a function type not a function pointer$/;"	t	file:
main	c++_primer\key_Cpp-Primer-master\ch06\ex6_54_55_56.cpp	/^int main()$/;"	f
fact	c++_primer\key_Cpp-Primer-master\ch06\fact.cc	/^int fact(int val)$/;"	f
func	c++_primer\key_Cpp-Primer-master\ch06\fact.cc	/^int func()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch06\factMain.cc	/^int main()$/;"	f
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_01.cpp	/^struct Sales_data$/;"	s	file:
bookNo	c++_primer\key_Cpp-Primer-master\ch07\ex7_01.cpp	/^    string bookNo;$/;"	m	struct:Sales_data	file:
main	c++_primer\key_Cpp-Primer-master\ch07\ex7_01.cpp	/^int main()$/;"	f
revenue	c++_primer\key_Cpp-Primer-master\ch07\ex7_01.cpp	/^    double revenue = 0.0;$/;"	m	struct:Sales_data	file:
units_sold	c++_primer\key_Cpp-Primer-master\ch07\ex7_01.cpp	/^    unsigned units_sold = 0;$/;"	m	struct:Sales_data	file:
CP5_ex7_02_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_02.h	10;"	d
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_02.h	/^struct Sales_data {$/;"	s
bookNo	c++_primer\key_Cpp-Primer-master\ch07\ex7_02.h	/^    std::string bookNo;$/;"	m	struct:Sales_data
combine	c++_primer\key_Cpp-Primer-master\ch07\ex7_02.h	/^Sales_data& Sales_data::combine(const Sales_data& rhs)$/;"	f	class:Sales_data
isbn	c++_primer\key_Cpp-Primer-master\ch07\ex7_02.h	/^    std::string isbn() const { return bookNo; };$/;"	f	struct:Sales_data
revenue	c++_primer\key_Cpp-Primer-master\ch07\ex7_02.h	/^    double revenue = 0.0;$/;"	m	struct:Sales_data
units_sold	c++_primer\key_Cpp-Primer-master\ch07\ex7_02.h	/^    unsigned units_sold = 0;$/;"	m	struct:Sales_data
main	c++_primer\key_Cpp-Primer-master\ch07\ex7_03.cpp	/^int main()$/;"	f
CP5_ex7_04_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_04.h	10;"	d
Person	c++_primer\key_Cpp-Primer-master\ch07\ex7_04.h	/^class Person {$/;"	c
address	c++_primer\key_Cpp-Primer-master\ch07\ex7_04.h	/^    std::string address;$/;"	m	class:Person
name	c++_primer\key_Cpp-Primer-master\ch07\ex7_04.h	/^    std::string name;$/;"	m	class:Person
CP5_ex7_05_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_05.h	16;"	d
Person	c++_primer\key_Cpp-Primer-master\ch07\ex7_05.h	/^class Person $/;"	c
address	c++_primer\key_Cpp-Primer-master\ch07\ex7_05.h	/^    std::string address;$/;"	m	class:Person
name	c++_primer\key_Cpp-Primer-master\ch07\ex7_05.h	/^    std::string name;$/;"	m	class:Person
CP5_ex7_06_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_06.h	10;"	d
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_06.h	/^struct Sales_data {$/;"	s
add	c++_primer\key_Cpp-Primer-master\ch07\ex7_06.h	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
bookNo	c++_primer\key_Cpp-Primer-master\ch07\ex7_06.h	/^    std::string bookNo;$/;"	m	struct:Sales_data
combine	c++_primer\key_Cpp-Primer-master\ch07\ex7_06.h	/^Sales_data& Sales_data::combine(const Sales_data& rhs)$/;"	f	class:Sales_data
isbn	c++_primer\key_Cpp-Primer-master\ch07\ex7_06.h	/^    std::string const& isbn() const { return bookNo; };$/;"	f	class:Sales_data::std
print	c++_primer\key_Cpp-Primer-master\ch07\ex7_06.h	/^std::ostream &print(std::ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\key_Cpp-Primer-master\ch07\ex7_06.h	/^std::istream &read(std::istream &is, Sales_data &item)$/;"	f
revenue	c++_primer\key_Cpp-Primer-master\ch07\ex7_06.h	/^    double revenue = 0.0;$/;"	m	struct:Sales_data
units_sold	c++_primer\key_Cpp-Primer-master\ch07\ex7_06.h	/^    unsigned units_sold = 0;$/;"	m	struct:Sales_data
main	c++_primer\key_Cpp-Primer-master\ch07\ex7_07.cpp	/^int main()$/;"	f
CP5_ex7_09_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_09.h	13;"	d
Person	c++_primer\key_Cpp-Primer-master\ch07\ex7_09.h	/^struct Person $/;"	s
address	c++_primer\key_Cpp-Primer-master\ch07\ex7_09.h	/^    std::string address;$/;"	m	struct:Person
getAddress	c++_primer\key_Cpp-Primer-master\ch07\ex7_09.h	/^    std::string const& getAddress() const { return address; }$/;"	f	class:Person::std
getName	c++_primer\key_Cpp-Primer-master\ch07\ex7_09.h	/^    std::string const& getName()    const { return name; }$/;"	f	class:Person::std
name	c++_primer\key_Cpp-Primer-master\ch07\ex7_09.h	/^    std::string name;$/;"	m	struct:Person
print	c++_primer\key_Cpp-Primer-master\ch07\ex7_09.h	/^std::ostream &print(std::ostream &os, const Person &person)$/;"	f
read	c++_primer\key_Cpp-Primer-master\ch07\ex7_09.h	/^std::istream &read(std::istream &is, Person &person)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch07\ex7_11.cpp	/^int main()$/;"	f
CP5_ex7_11_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_11.h	10;"	d
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_11.h	/^    Sales_data(const std::string &s):bookNo(s) {}$/;"	f	struct:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_11.h	/^    Sales_data(const std::string &s, unsigned n, double p):bookNo(s),units_sold(n),revenue(n*p){}$/;"	f	struct:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_11.h	/^Sales_data::Sales_data(std::istream &is)$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_11.h	/^struct Sales_data {$/;"	s
add	c++_primer\key_Cpp-Primer-master\ch07\ex7_11.h	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
bookNo	c++_primer\key_Cpp-Primer-master\ch07\ex7_11.h	/^    std::string bookNo;$/;"	m	struct:Sales_data
combine	c++_primer\key_Cpp-Primer-master\ch07\ex7_11.h	/^Sales_data& Sales_data::combine(const Sales_data& rhs)$/;"	f	class:Sales_data
isbn	c++_primer\key_Cpp-Primer-master\ch07\ex7_11.h	/^    std::string isbn() const { return bookNo; };$/;"	f	struct:Sales_data
print	c++_primer\key_Cpp-Primer-master\ch07\ex7_11.h	/^std::ostream &print(std::ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\key_Cpp-Primer-master\ch07\ex7_11.h	/^std::istream &read(std::istream &is, Sales_data &item)$/;"	f
revenue	c++_primer\key_Cpp-Primer-master\ch07\ex7_11.h	/^    double revenue = 0.0;$/;"	m	struct:Sales_data
units_sold	c++_primer\key_Cpp-Primer-master\ch07\ex7_11.h	/^    unsigned units_sold = 0;$/;"	m	struct:Sales_data
CP5_ex7_12_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_12.h	10;"	d
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_12.h	/^    Sales_data(const std::string &s):bookNo(s) {}$/;"	f	struct:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_12.h	/^    Sales_data(const std::string &s, unsigned n, double p):bookNo(s),units_sold(n),revenue(n*p){}$/;"	f	struct:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_12.h	/^    Sales_data(std::istream &is) { read(is, *this);}$/;"	f	struct:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_12.h	/^struct Sales_data {$/;"	s
add	c++_primer\key_Cpp-Primer-master\ch07\ex7_12.h	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
bookNo	c++_primer\key_Cpp-Primer-master\ch07\ex7_12.h	/^    std::string bookNo;$/;"	m	struct:Sales_data
combine	c++_primer\key_Cpp-Primer-master\ch07\ex7_12.h	/^Sales_data& Sales_data::combine(const Sales_data& rhs)$/;"	f	class:Sales_data
isbn	c++_primer\key_Cpp-Primer-master\ch07\ex7_12.h	/^    std::string isbn() const { return bookNo; };$/;"	f	struct:Sales_data
print	c++_primer\key_Cpp-Primer-master\ch07\ex7_12.h	/^std::ostream &print(std::ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\key_Cpp-Primer-master\ch07\ex7_12.h	/^std::istream &read(std::istream &is, Sales_data &item)$/;"	f
revenue	c++_primer\key_Cpp-Primer-master\ch07\ex7_12.h	/^    double revenue = 0.0;$/;"	m	struct:Sales_data
units_sold	c++_primer\key_Cpp-Primer-master\ch07\ex7_12.h	/^    unsigned units_sold = 0;$/;"	m	struct:Sales_data
main	c++_primer\key_Cpp-Primer-master\ch07\ex7_13.cpp	/^int main()$/;"	f
CP5_ex7_15_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_15.h	10;"	d
Person	c++_primer\key_Cpp-Primer-master\ch07\ex7_15.h	/^    Person(const std::string sname, const std::string saddr):name(sname), address(saddr){}$/;"	f	struct:Person
Person	c++_primer\key_Cpp-Primer-master\ch07\ex7_15.h	/^    Person(std::istream &is){read(is, *this);}$/;"	f	struct:Person
Person	c++_primer\key_Cpp-Primer-master\ch07\ex7_15.h	/^struct Person {$/;"	s
address	c++_primer\key_Cpp-Primer-master\ch07\ex7_15.h	/^    std::string address;$/;"	m	struct:Person
getAddress	c++_primer\key_Cpp-Primer-master\ch07\ex7_15.h	/^    std::string getAddress() const { return address; }$/;"	f	struct:Person
getName	c++_primer\key_Cpp-Primer-master\ch07\ex7_15.h	/^    std::string getName() const { return name; }$/;"	f	struct:Person
name	c++_primer\key_Cpp-Primer-master\ch07\ex7_15.h	/^    std::string name;$/;"	m	struct:Person
print	c++_primer\key_Cpp-Primer-master\ch07\ex7_15.h	/^std::ostream &print(std::ostream &os, const Person &person)$/;"	f
read	c++_primer\key_Cpp-Primer-master\ch07\ex7_15.h	/^std::istream &read(std::istream &is, Person &person)$/;"	f
CP5_ex7_21_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_21.h	10;"	d
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_21.h	/^    Sales_data(const std::string &s):bookNo(s) {}$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_21.h	/^    Sales_data(const std::string &s, unsigned n, double p):bookNo(s),units_sold(n),revenue(n*p){}$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_21.h	/^    Sales_data(std::istream &is) { read(is, *this);}$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_21.h	/^class Sales_data {$/;"	c
add	c++_primer\key_Cpp-Primer-master\ch07\ex7_21.h	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
bookNo	c++_primer\key_Cpp-Primer-master\ch07\ex7_21.h	/^    std::string bookNo;$/;"	m	class:Sales_data
combine	c++_primer\key_Cpp-Primer-master\ch07\ex7_21.h	/^Sales_data& Sales_data::combine(const Sales_data& rhs)$/;"	f	class:Sales_data
isbn	c++_primer\key_Cpp-Primer-master\ch07\ex7_21.h	/^    std::string isbn() const { return bookNo; };$/;"	f	class:Sales_data
print	c++_primer\key_Cpp-Primer-master\ch07\ex7_21.h	/^std::ostream &print(std::ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\key_Cpp-Primer-master\ch07\ex7_21.h	/^std::istream &read(std::istream &is, Sales_data &item)$/;"	f
revenue	c++_primer\key_Cpp-Primer-master\ch07\ex7_21.h	/^    double revenue = 0.0;$/;"	m	class:Sales_data
units_sold	c++_primer\key_Cpp-Primer-master\ch07\ex7_21.h	/^    unsigned units_sold = 0;$/;"	m	class:Sales_data
CP5_ex7_22_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_22.h	10;"	d
Person	c++_primer\key_Cpp-Primer-master\ch07\ex7_22.h	/^    Person(const std::string sname, const std::string saddr):name(sname), address(saddr){}$/;"	f	struct:Person
Person	c++_primer\key_Cpp-Primer-master\ch07\ex7_22.h	/^    Person(std::istream &is){read(is, *this);}$/;"	f	struct:Person
Person	c++_primer\key_Cpp-Primer-master\ch07\ex7_22.h	/^struct Person {$/;"	s
address	c++_primer\key_Cpp-Primer-master\ch07\ex7_22.h	/^    std::string address;$/;"	m	struct:Person
getAddress	c++_primer\key_Cpp-Primer-master\ch07\ex7_22.h	/^    std::string getAddress() const { return address; }$/;"	f	struct:Person
getName	c++_primer\key_Cpp-Primer-master\ch07\ex7_22.h	/^    std::string getName() const { return name; }$/;"	f	struct:Person
name	c++_primer\key_Cpp-Primer-master\ch07\ex7_22.h	/^    std::string name;$/;"	m	struct:Person
print	c++_primer\key_Cpp-Primer-master\ch07\ex7_22.h	/^std::ostream &print(std::ostream &os, const Person &person)$/;"	f
read	c++_primer\key_Cpp-Primer-master\ch07\ex7_22.h	/^std::istream &read(std::istream &is, Person &person)$/;"	f
CP5_ex7_23_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_23.h	10;"	d
Screen	c++_primer\key_Cpp-Primer-master\ch07\ex7_23.h	/^        Screen(pos ht, pos wd, char c):height(ht),width(wd),contents(ht*wd, c){}$/;"	f	class:Screen
Screen	c++_primer\key_Cpp-Primer-master\ch07\ex7_23.h	/^class Screen {$/;"	c
contents	c++_primer\key_Cpp-Primer-master\ch07\ex7_23.h	/^        std::string contents;$/;"	m	class:Screen
cursor	c++_primer\key_Cpp-Primer-master\ch07\ex7_23.h	/^        pos cursor = 0;$/;"	m	class:Screen
get	c++_primer\key_Cpp-Primer-master\ch07\ex7_23.h	/^        char get() const { return contents[cursor]; }$/;"	f	class:Screen
get	c++_primer\key_Cpp-Primer-master\ch07\ex7_23.h	/^        char get(pos r, pos c) const { return contents[r*width+c]; }$/;"	f	class:Screen
height	c++_primer\key_Cpp-Primer-master\ch07\ex7_23.h	/^        pos height = 0, width = 0;$/;"	m	class:Screen
width	c++_primer\key_Cpp-Primer-master\ch07\ex7_23.h	/^        pos height = 0, width = 0;$/;"	m	class:Screen
CP5_ex7_24_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_24.h	10;"	d
Screen	c++_primer\key_Cpp-Primer-master\ch07\ex7_24.h	/^        Screen(pos ht, pos wd):height(ht),width(wd),contents(ht*wd, ' '){} \/\/ 2$/;"	f	class:Screen
Screen	c++_primer\key_Cpp-Primer-master\ch07\ex7_24.h	/^        Screen(pos ht, pos wd, char c):height(ht),width(wd),contents(ht*wd, c){} \/\/ 3$/;"	f	class:Screen
Screen	c++_primer\key_Cpp-Primer-master\ch07\ex7_24.h	/^class Screen {$/;"	c
contents	c++_primer\key_Cpp-Primer-master\ch07\ex7_24.h	/^        std::string contents;$/;"	m	class:Screen
cursor	c++_primer\key_Cpp-Primer-master\ch07\ex7_24.h	/^        pos cursor = 0;$/;"	m	class:Screen
get	c++_primer\key_Cpp-Primer-master\ch07\ex7_24.h	/^        char get() const { return contents[cursor]; }$/;"	f	class:Screen
get	c++_primer\key_Cpp-Primer-master\ch07\ex7_24.h	/^        char get(pos r, pos c) const { return contents[r*width+c]; }$/;"	f	class:Screen
height	c++_primer\key_Cpp-Primer-master\ch07\ex7_24.h	/^        pos height = 0, width = 0;$/;"	m	class:Screen
width	c++_primer\key_Cpp-Primer-master\ch07\ex7_24.h	/^        pos height = 0, width = 0;$/;"	m	class:Screen
add	c++_primer\key_Cpp-Primer-master\ch07\ex7_26.cpp	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
combine	c++_primer\key_Cpp-Primer-master\ch07\ex7_26.cpp	/^Sales_data& Sales_data::combine(const Sales_data& rhs)$/;"	f	class:Sales_data
print	c++_primer\key_Cpp-Primer-master\ch07\ex7_26.cpp	/^std::ostream &print(std::ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\key_Cpp-Primer-master\ch07\ex7_26.cpp	/^std::istream &read(std::istream &is, Sales_data &item)$/;"	f
CP5_ex7_26_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_26.h	12;"	d
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_26.h	/^    Sales_data(const std::string &s):bookNo(s) {}$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_26.h	/^    Sales_data(const std::string &s, unsigned n, double p):bookNo(s),units_sold(n),revenue(n*p){}$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_26.h	/^    Sales_data(std::istream &is) { read(is, *this); }$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_26.h	/^class Sales_data {$/;"	c
avg_price	c++_primer\key_Cpp-Primer-master\ch07\ex7_26.h	/^double Sales_data::avg_price() const$/;"	f	class:Sales_data
bookNo	c++_primer\key_Cpp-Primer-master\ch07\ex7_26.h	/^    std::string bookNo;$/;"	m	class:Sales_data
isbn	c++_primer\key_Cpp-Primer-master\ch07\ex7_26.h	/^    std::string isbn() const { return bookNo; };$/;"	f	class:Sales_data
revenue	c++_primer\key_Cpp-Primer-master\ch07\ex7_26.h	/^    double revenue = 0.0;$/;"	m	class:Sales_data
units_sold	c++_primer\key_Cpp-Primer-master\ch07\ex7_26.h	/^    unsigned units_sold = 0;$/;"	m	class:Sales_data
CP5_ex7_27_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	10;"	d
Screen	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	/^    Screen(pos ht, pos wd):height(ht),width(wd),contents(ht*wd, ' '){} \/\/ 2$/;"	f	class:Screen
Screen	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	/^    Screen(pos ht, pos wd, char c):height(ht),width(wd),contents(ht*wd, c){} \/\/ 3$/;"	f	class:Screen
Screen	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	/^class Screen {$/;"	c
contents	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	/^    std::string contents;$/;"	m	class:Screen
cursor	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	/^    pos cursor = 0;$/;"	m	class:Screen
display	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	/^    Screen& display(std::ostream &os) { do_display(os); return *this; }$/;"	f	class:Screen
display	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	/^    const Screen& display(std::ostream &os) const { do_display(os); return *this; }$/;"	f	class:Screen
do_display	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	/^    void do_display(std::ostream &os) const { os << contents; }$/;"	f	class:Screen
get	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen
get	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	/^    char get(pos r, pos c) const { return contents[r*width+c]; }$/;"	f	class:Screen
height	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	/^    pos height = 0, width = 0;$/;"	m	class:Screen
move	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	/^inline Screen& Screen::move(pos r, pos c)$/;"	f	class:Screen
set	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	/^inline Screen& Screen::set(char c)$/;"	f	class:Screen
set	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	/^inline Screen& Screen::set(pos r, pos c, char ch)$/;"	f	class:Screen
width	c++_primer\key_Cpp-Primer-master\ch07\ex7_27.h	/^    pos height = 0, width = 0;$/;"	m	class:Screen
main	c++_primer\key_Cpp-Primer-master\ch07\ex7_27_TEST.cpp	/^int main()$/;"	f
CP5_ex7_31_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_31.h	10;"	d
X	c++_primer\key_Cpp-Primer-master\ch07\ex7_31.h	/^class X {$/;"	c
Y	c++_primer\key_Cpp-Primer-master\ch07\ex7_31.h	/^class Y {$/;"	c
x	c++_primer\key_Cpp-Primer-master\ch07\ex7_31.h	/^    X x;$/;"	m	class:Y
y	c++_primer\key_Cpp-Primer-master\ch07\ex7_31.h	/^    Y* y = nullptr;$/;"	m	class:X
CP5_ex7_32_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	11;"	d
Screen	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^    Screen(pos ht, pos wd):height(ht),width(wd),contents(ht*wd, ' '){} \/\/ 2$/;"	f	class:Screen
Screen	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^    Screen(pos ht, pos wd, char c):height(ht),width(wd),contents(ht*wd, c){} \/\/ 3$/;"	f	class:Screen
Screen	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^class Screen {$/;"	c
Window_mgr	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^class Window_mgr {$/;"	c
clear	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^inline void Window_mgr::clear(ScreenIndex i)$/;"	f	class:Window_mgr
contents	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^    std::string contents;$/;"	m	class:Screen
cursor	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^    pos cursor = 0;$/;"	m	class:Screen
display	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^    Screen& display(std::ostream &os) { do_display(os); return *this; }$/;"	f	class:Screen
display	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^    const Screen& display(std::ostream &os) const { do_display(os); return *this; }$/;"	f	class:Screen
do_display	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^    void do_display(std::ostream &os) const { os << contents; }$/;"	f	class:Screen
get	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen
get	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^    char get(pos r, pos c) const { return contents[r*width+c]; }$/;"	f	class:Screen
height	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^    pos height = 0, width = 0;$/;"	m	class:Screen
move	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^inline Screen& Screen::move(pos r, pos c)$/;"	f	class:Screen
screens	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^    std::vector<Screen> screens;$/;"	m	class:Window_mgr
set	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^inline Screen& Screen::set(char c)$/;"	f	class:Screen
set	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^inline Screen& Screen::set(pos r, pos c, char ch)$/;"	f	class:Screen
width	c++_primer\key_Cpp-Primer-master\ch07\ex7_32.h	/^    pos height = 0, width = 0;$/;"	m	class:Screen
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_41.cpp	/^Sales_data::Sales_data(std::istream &is) : Sales_data()$/;"	f	class:Sales_data
add	c++_primer\key_Cpp-Primer-master\ch07\ex7_41.cpp	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
combine	c++_primer\key_Cpp-Primer-master\ch07\ex7_41.cpp	/^Sales_data& Sales_data::combine(const Sales_data& rhs)$/;"	f	class:Sales_data
print	c++_primer\key_Cpp-Primer-master\ch07\ex7_41.cpp	/^std::ostream &print(std::ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\key_Cpp-Primer-master\ch07\ex7_41.cpp	/^std::istream &read(std::istream &is, Sales_data &item)$/;"	f
CP5_ex7_41_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_41.h	13;"	d
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_41.h	/^    Sales_data() : Sales_data("", 0, 0.0f)$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_41.h	/^    Sales_data(const std::string &s) : Sales_data(s, 0, 0.0f)$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_41.h	/^    Sales_data(const std::string &s, unsigned n, double p):bookNo(s),units_sold(n),revenue(n*p)$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch07\ex7_41.h	/^class Sales_data {$/;"	c
avg_price	c++_primer\key_Cpp-Primer-master\ch07\ex7_41.h	/^double Sales_data::avg_price() const$/;"	f	class:Sales_data
bookNo	c++_primer\key_Cpp-Primer-master\ch07\ex7_41.h	/^    std::string bookNo;$/;"	m	class:Sales_data
isbn	c++_primer\key_Cpp-Primer-master\ch07\ex7_41.h	/^    std::string isbn() const { return bookNo; }$/;"	f	class:Sales_data
revenue	c++_primer\key_Cpp-Primer-master\ch07\ex7_41.h	/^    double revenue = 0.0;$/;"	m	class:Sales_data
units_sold	c++_primer\key_Cpp-Primer-master\ch07\ex7_41.h	/^    unsigned units_sold = 0;$/;"	m	class:Sales_data
main	c++_primer\key_Cpp-Primer-master\ch07\ex7_41_TEST.cpp	/^int main()$/;"	f
C	c++_primer\key_Cpp-Primer-master\ch07\ex7_43.cpp	/^    C() : def(0) { } \/\/ define the constructor of C.$/;"	f	class:C
C	c++_primer\key_Cpp-Primer-master\ch07\ex7_43.cpp	/^class C {$/;"	c	file:
NoDefault	c++_primer\key_Cpp-Primer-master\ch07\ex7_43.cpp	/^    NoDefault(int i) { }$/;"	f	class:NoDefault
NoDefault	c++_primer\key_Cpp-Primer-master\ch07\ex7_43.cpp	/^class NoDefault {$/;"	c	file:
def	c++_primer\key_Cpp-Primer-master\ch07\ex7_43.cpp	/^    NoDefault def;$/;"	m	class:C	file:
main	c++_primer\key_Cpp-Primer-master\ch07\ex7_43.cpp	/^int main()$/;"	f
CP5_ex7_50_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_50.h	12;"	d
Person	c++_primer\key_Cpp-Primer-master\ch07\ex7_50.h	/^    Person(const std::string sname, const std::string saddr):name(sname), address(saddr){}$/;"	f	struct:Person
Person	c++_primer\key_Cpp-Primer-master\ch07\ex7_50.h	/^    explicit Person(std::istream &is){read(is, *this);}$/;"	f	struct:Person
Person	c++_primer\key_Cpp-Primer-master\ch07\ex7_50.h	/^struct Person {$/;"	s
address	c++_primer\key_Cpp-Primer-master\ch07\ex7_50.h	/^    std::string address;$/;"	m	struct:Person
getAddress	c++_primer\key_Cpp-Primer-master\ch07\ex7_50.h	/^    std::string getAddress() const { return address; }$/;"	f	struct:Person
getName	c++_primer\key_Cpp-Primer-master\ch07\ex7_50.h	/^    std::string getName() const { return name; }$/;"	f	struct:Person
name	c++_primer\key_Cpp-Primer-master\ch07\ex7_50.h	/^    std::string name;$/;"	m	struct:Person
print	c++_primer\key_Cpp-Primer-master\ch07\ex7_50.h	/^std::ostream &print(std::ostream &os, const Person &person)$/;"	f
read	c++_primer\key_Cpp-Primer-master\ch07\ex7_50.h	/^std::istream &read(std::istream &is, Person &person)$/;"	f
CP5_ex7_53_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_53.h	10;"	d
Debug	c++_primer\key_Cpp-Primer-master\ch07\ex7_53.h	/^    constexpr Debug(bool b = true) : rt(b), io(b), other(b) { }$/;"	f	class:Debug
Debug	c++_primer\key_Cpp-Primer-master\ch07\ex7_53.h	/^    constexpr Debug(bool r, bool i, bool o) : rt(r), io(i), other(0) { }$/;"	f	class:Debug
Debug	c++_primer\key_Cpp-Primer-master\ch07\ex7_53.h	/^class Debug {$/;"	c
any	c++_primer\key_Cpp-Primer-master\ch07\ex7_53.h	/^    constexpr bool any() { return rt || io || other; }$/;"	f	class:Debug
io	c++_primer\key_Cpp-Primer-master\ch07\ex7_53.h	/^    bool io;        \/\/ I\/O error$/;"	m	class:Debug
other	c++_primer\key_Cpp-Primer-master\ch07\ex7_53.h	/^    bool other;     \/\/ the others$/;"	m	class:Debug
rt	c++_primer\key_Cpp-Primer-master\ch07\ex7_53.h	/^    bool rt;        \/\/ runtime error$/;"	m	class:Debug
set_io	c++_primer\key_Cpp-Primer-master\ch07\ex7_53.h	/^    void set_io(bool b) { io = b; }$/;"	f	class:Debug
set_other	c++_primer\key_Cpp-Primer-master\ch07\ex7_53.h	/^    void set_other(bool b) { other = b; }$/;"	f	class:Debug
set_rt	c++_primer\key_Cpp-Primer-master\ch07\ex7_53.h	/^    void set_rt(bool b) { rt = b; }$/;"	f	class:Debug
Account	c++_primer\key_Cpp-Primer-master\ch07\ex7_57.h	/^class Account {$/;"	c
CP5_ex7_57_h	c++_primer\key_Cpp-Primer-master\ch07\ex7_57.h	10;"	d
amount	c++_primer\key_Cpp-Primer-master\ch07\ex7_57.h	/^    double amount;$/;"	m	class:Account
calculate	c++_primer\key_Cpp-Primer-master\ch07\ex7_57.h	/^    void calculate() { amount += amount * interestRate; }$/;"	f	class:Account
initRate	c++_primer\key_Cpp-Primer-master\ch07\ex7_57.h	/^    static double initRate() { return todayRate; }$/;"	f	class:Account
interestRate	c++_primer\key_Cpp-Primer-master\ch07\ex7_57.h	/^    static double interestRate;$/;"	m	class:Account
interestRate	c++_primer\key_Cpp-Primer-master\ch07\ex7_57.h	/^double Account::interestRate = initRate();$/;"	m	class:Account
owner	c++_primer\key_Cpp-Primer-master\ch07\ex7_57.h	/^    std::string owner;$/;"	m	class:Account
rate	c++_primer\key_Cpp-Primer-master\ch07\ex7_57.h	/^    static double rate() { return interestRate; }$/;"	f	class:Account
rate	c++_primer\key_Cpp-Primer-master\ch07\ex7_57.h	/^    static void rate(double newRate) { interestRate = newRate; }$/;"	f	class:Account
todayRate	c++_primer\key_Cpp-Primer-master\ch07\ex7_57.h	/^    static constexpr double todayRate = 42.42;$/;"	m	class:Account
func	c++_primer\key_Cpp-Primer-master\ch08\ex8_02.cpp	/^istream& func(istream &is)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch08\ex8_02.cpp	/^int main()$/;"	f
ReadFileToVec	c++_primer\key_Cpp-Primer-master\ch08\ex8_04.cpp	/^void ReadFileToVec(const string& fileName, vector<string>& vec)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch08\ex8_04.cpp	/^int main()$/;"	f
ReadFileToVec	c++_primer\key_Cpp-Primer-master\ch08\ex8_05.cpp	/^void ReadFileToVec(const string& fileName, vector<string>& vec)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch08\ex8_05.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch08\ex8_06.cpp	/^int main(int argc, char **argv)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch08\ex8_07.cpp	/^int main(int argc, char **argv)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch08\ex8_08.cpp	/^int main(int argc, char **argv)$/;"	f
func	c++_primer\key_Cpp-Primer-master\ch08\ex8_09.cpp	/^istream& func(istream &is)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch08\ex8_09.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch08\ex8_10.cpp	/^int main()$/;"	f
PersonInfo	c++_primer\key_Cpp-Primer-master\ch08\ex8_11.cpp	/^struct PersonInfo {$/;"	s	file:
main	c++_primer\key_Cpp-Primer-master\ch08\ex8_11.cpp	/^int main()$/;"	f
name	c++_primer\key_Cpp-Primer-master\ch08\ex8_11.cpp	/^    string name;$/;"	m	struct:PersonInfo	file:
phones	c++_primer\key_Cpp-Primer-master\ch08\ex8_11.cpp	/^    vector<string> phones;$/;"	m	struct:PersonInfo	file:
PersonInfo	c++_primer\key_Cpp-Primer-master\ch08\ex8_13.cpp	/^struct PersonInfo {$/;"	s	file:
format	c++_primer\key_Cpp-Primer-master\ch08\ex8_13.cpp	/^string format(const string& str)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch08\ex8_13.cpp	/^int main()$/;"	f
name	c++_primer\key_Cpp-Primer-master\ch08\ex8_13.cpp	/^    string name;$/;"	m	struct:PersonInfo	file:
phones	c++_primer\key_Cpp-Primer-master\ch08\ex8_13.cpp	/^    vector<string> phones;$/;"	m	struct:PersonInfo	file:
valid	c++_primer\key_Cpp-Primer-master\ch08\ex8_13.cpp	/^bool valid(const string& str)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_13.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_14.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_15.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_16.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_18.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_19.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_20.cpp	/^int main()$/;"	f
double_and_insert	c++_primer\key_Cpp-Primer-master\ch09\ex9_22.cpp	/^void double_and_insert(std::vector<int>& v, int some_val)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_22.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_24.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_26.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_27.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_31_1.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_31_2.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_32.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_33.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_34.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_38.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_41.cpp	/^int main()$/;"	f
func	c++_primer\key_Cpp-Primer-master\ch09\ex9_43_1.cpp	/^void func(string &s, string const& oldVal, string const& newVal)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_43_1.cpp	/^int main() $/;"	f
func	c++_primer\key_Cpp-Primer-master\ch09\ex9_43_2.cpp	/^void func(string &s, string const& oldVal, string const& newVal)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_43_2.cpp	/^int main() $/;"	f
func	c++_primer\key_Cpp-Primer-master\ch09\ex9_44.cpp	/^void func(string &s, string const& oldVal, string const& newVal)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_44.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_45.cpp	/^int main()$/;"	f
pre_suffix	c++_primer\key_Cpp-Primer-master\ch09\ex9_45.cpp	/^pre_suffix(const std::string &name, const std::string &pre, const std::string &su)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_46.cpp	/^int main()$/;"	f
pre_suffix	c++_primer\key_Cpp-Primer-master\ch09\ex9_46.cpp	/^std::string pre_suffix(const std::string &name, const std::string &pre, const std::string &su)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_47_1.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_47_2.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_49.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_50.cpp	/^int main()$/;"	f
sum_for_float	c++_primer\key_Cpp-Primer-master\ch09\ex9_50.cpp	/^float sum_for_float(std::vector<std::string> const& v)$/;"	f
sum_for_int	c++_primer\key_Cpp-Primer-master\ch09\ex9_50.cpp	/^int sum_for_int(std::vector<std::string> const& v)$/;"	f
My_date	c++_primer\key_Cpp-Primer-master\ch09\ex9_51.cpp	/^    My_date(const string &s){$/;"	f	class:My_date
My_date	c++_primer\key_Cpp-Primer-master\ch09\ex9_51.cpp	/^class My_date{$/;"	c	file:
day	c++_primer\key_Cpp-Primer-master\ch09\ex9_51.cpp	/^    unsigned year, month, day;$/;"	m	class:My_date	file:
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_51.cpp	/^int main()$/;"	f
month	c++_primer\key_Cpp-Primer-master\ch09\ex9_51.cpp	/^    unsigned year, month, day;$/;"	m	class:My_date	file:
print	c++_primer\key_Cpp-Primer-master\ch09\ex9_51.cpp	/^    void print(){$/;"	f	class:My_date
year	c++_primer\key_Cpp-Primer-master\ch09\ex9_51.cpp	/^    unsigned year, month, day;$/;"	m	class:My_date	file:
main	c++_primer\key_Cpp-Primer-master\ch09\ex9_52.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_01_02.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_03_04.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_05.cpp	/^int main(){}$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_06.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_07.cpp	/^int main()$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch10\ex10_07.cpp	/^void print(Sequence const& seq)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_09.cpp	/^int main()$/;"	f
elimdups	c++_primer\key_Cpp-Primer-master\ch10\ex10_11.cpp	/^void elimdups(std::vector<std::string> &vs)$/;"	f
is_shorter	c++_primer\key_Cpp-Primer-master\ch10\ex10_11.cpp	/^is_shorter(std::string const& lhs, std::string const& rhs)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_11.cpp	/^int main()$/;"	f
println	c++_primer\key_Cpp-Primer-master\ch10\ex10_11.cpp	/^inline std::ostream& println(Sequence const& seq)$/;"	f
compareIsbn	c++_primer\key_Cpp-Primer-master\ch10\ex10_12.cpp	/^inline bool compareIsbn(const Sales_data &sd1, const Sales_data &sd2)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_12.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_13.cpp	/^int main()$/;"	f
predicate	c++_primer\key_Cpp-Primer-master\ch10\ex10_13.cpp	/^bool predicate(const std::string &s) $/;"	f
biggies	c++_primer\key_Cpp-Primer-master\ch10\ex10_16.cpp	/^void biggies(std::vector<std::string> &vs, std::size_t sz)$/;"	f
elimdups	c++_primer\key_Cpp-Primer-master\ch10\ex10_16.cpp	/^void elimdups(std::vector<std::string> &vs)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_16.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_17.cpp	/^int main()$/;"	f
biggies_partition	c++_primer\key_Cpp-Primer-master\ch10\ex10_18_19.cpp	/^void biggies_partition(std::vector<std::string> &vs, std::size_t sz)$/;"	f
biggies_stable_partition	c++_primer\key_Cpp-Primer-master\ch10\ex10_18_19.cpp	/^void biggies_stable_partition(std::vector<std::string> &vs, std::size_t sz)$/;"	f
elimdups	c++_primer\key_Cpp-Primer-master\ch10\ex10_18_19.cpp	/^void elimdups(std::vector<std::string> &vs)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_18_19.cpp	/^int main()$/;"	f
bigerThan6	c++_primer\key_Cpp-Primer-master\ch10\ex10_20_21.cpp	/^std::size_t bigerThan6(vector<string> const& v)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_20_21.cpp	/^int main()$/;"	f
isBiggerThan6	c++_primer\key_Cpp-Primer-master\ch10\ex10_22.cpp	/^bool isBiggerThan6(const string &s, string::size_type sz)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_22.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_24.cpp	/^int main()$/;"	f
biggies	c++_primer\key_Cpp-Primer-master\ch10\ex10_25.cpp	/^void biggies(vector<string> &words, vector<string>::size_type sz)$/;"	f
check_size	c++_primer\key_Cpp-Primer-master\ch10\ex10_25.cpp	/^bool check_size(const string &s, string::size_type sz)$/;"	f
elimdups	c++_primer\key_Cpp-Primer-master\ch10\ex10_25.cpp	/^void elimdups(vector<string> &vs)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_25.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_27.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_28.cpp	/^int main()$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch10\ex10_28.cpp	/^void print(Sequence const& seq)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_29.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_30.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_31.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_32.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_33.cpp	/^int main(int argc, char **argv)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_34_35_36_37.cpp	/^int main()$/;"	f
elimDups	c++_primer\key_Cpp-Primer-master\ch10\ex10_42.cpp	/^void elimDups(list<string> &words)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch10\ex10_42.cpp	/^int main()$/;"	f
compareIsbn	c++_primer\key_Cpp-Primer-master\ch11\ex11_11.cpp	/^bool compareIsbn(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_11.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_12_13.cpp	/^int main()$/;"	f
Families	c++_primer\key_Cpp-Primer-master\ch11\ex11_14.cpp	/^class Families$/;"	c	file:
_data	c++_primer\key_Cpp-Primer-master\ch11\ex11_14.cpp	/^    Data _data;$/;"	m	class:Families	file:
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_14.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_18.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_20.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_23.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_24_25_26.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_27_28_29_30.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_31.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_32.cpp	/^int main()$/;"	f
buildMap	c++_primer\key_Cpp-Primer-master\ch11\ex11_33.cpp	/^std::map<string, string> buildMap(ifstream &map_file)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_33.cpp	/^int main()$/;"	f
transform	c++_primer\key_Cpp-Primer-master\ch11\ex11_33.cpp	/^const string & transform(const string &s, const std::map<string, string> &m)$/;"	f
word_transform	c++_primer\key_Cpp-Primer-master\ch11\ex11_33.cpp	/^void word_transform(ifstream &map, ifstream &input)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_38.cpp	/^int main()$/;"	f
wordCounting	c++_primer\key_Cpp-Primer-master\ch11\ex11_38.cpp	/^void wordCounting()$/;"	f
wordTransformation	c++_primer\key_Cpp-Primer-master\ch11\ex11_38.cpp	/^void wordTransformation()$/;"	f
ex11_3	c++_primer\key_Cpp-Primer-master\ch11\ex11_3_4.cpp	/^void ex11_3()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_3_4.cpp	/^int main()$/;"	f
word_count_pro	c++_primer\key_Cpp-Primer-master\ch11\ex11_3_4.cpp	/^void word_count_pro(std::map<std::string, int> &m)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_7.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_8.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch11\ex11_9_10.cpp	/^int main()$/;"	f
StrBlob	c++_primer\key_Cpp-Primer-master\ch12\ex12_02.h	/^    StrBlob():data(std::make_shared<vector<string>>()) { }$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch12\ex12_02.h	/^    StrBlob(std::initializer_list<string> il):data(std::make_shared<vector<string>>(il)) { }$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch12\ex12_02.h	/^class StrBlob {$/;"	c
back	c++_primer\key_Cpp-Primer-master\ch12\ex12_02.h	/^    const std::string& back() const {$/;"	f	class:StrBlob
back	c++_primer\key_Cpp-Primer-master\ch12\ex12_02.h	/^    std::string& back() {$/;"	f	class:StrBlob
check	c++_primer\key_Cpp-Primer-master\ch12\ex12_02.h	/^    void check(size_type i, const string &msg) const {$/;"	f	class:StrBlob
data	c++_primer\key_Cpp-Primer-master\ch12\ex12_02.h	/^    std::shared_ptr<vector<string>> data;$/;"	m	class:StrBlob
empty	c++_primer\key_Cpp-Primer-master\ch12\ex12_02.h	/^    bool empty() const { return data->empty(); }$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch12\ex12_02.h	/^    const std::string& front() const {$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch12\ex12_02.h	/^    std::string& front() {$/;"	f	class:StrBlob
pop_back	c++_primer\key_Cpp-Primer-master\ch12\ex12_02.h	/^    void pop_back() {$/;"	f	class:StrBlob
push_back	c++_primer\key_Cpp-Primer-master\ch12\ex12_02.h	/^    void push_back(const string &t) { data->push_back(t); }$/;"	f	class:StrBlob
size	c++_primer\key_Cpp-Primer-master\ch12\ex12_02.h	/^    size_type size() const { return data->size(); }$/;"	f	class:StrBlob
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_02_TEST.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_06.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_07.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_10.cpp	/^int main()$/;"	f
process	c++_primer\key_Cpp-Primer-master\ch12\ex12_10.cpp	/^void process(std::shared_ptr<int> ptr)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_11.cpp	/^int main()$/;"	f
process	c++_primer\key_Cpp-Primer-master\ch12\ex12_11.cpp	/^void process(std::shared_ptr<int> ptr)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_12.cpp	/^int main()$/;"	f
process	c++_primer\key_Cpp-Primer-master\ch12\ex12_12.cpp	/^void process(std::shared_ptr<int> ptr)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_13.cpp	/^int main()$/;"	f
connect	c++_primer\key_Cpp-Primer-master\ch12\ex12_14.cpp	/^connection connect(destination* pDest)$/;"	f
connection	c++_primer\key_Cpp-Primer-master\ch12\ex12_14.cpp	/^    connection(std::string ip_, int port_):ip(ip_), port(port_){ }$/;"	f	struct:connection
connection	c++_primer\key_Cpp-Primer-master\ch12\ex12_14.cpp	/^struct connection {$/;"	s	file:
destination	c++_primer\key_Cpp-Primer-master\ch12\ex12_14.cpp	/^    destination(std::string ip_, int port_):ip(ip_), port(port_){ }$/;"	f	struct:destination
destination	c++_primer\key_Cpp-Primer-master\ch12\ex12_14.cpp	/^struct destination {$/;"	s	file:
disconnect	c++_primer\key_Cpp-Primer-master\ch12\ex12_14.cpp	/^void disconnect(connection pConn)$/;"	f
end_connection	c++_primer\key_Cpp-Primer-master\ch12\ex12_14.cpp	/^void end_connection(connection *pConn)$/;"	f
f	c++_primer\key_Cpp-Primer-master\ch12\ex12_14.cpp	/^void f(destination &d)$/;"	f
ip	c++_primer\key_Cpp-Primer-master\ch12\ex12_14.cpp	/^    std::string ip;$/;"	m	struct:connection	file:
ip	c++_primer\key_Cpp-Primer-master\ch12\ex12_14.cpp	/^    std::string ip;$/;"	m	struct:destination	file:
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_14.cpp	/^int main()$/;"	f
port	c++_primer\key_Cpp-Primer-master\ch12\ex12_14.cpp	/^    int port;$/;"	m	struct:connection	file:
port	c++_primer\key_Cpp-Primer-master\ch12\ex12_14.cpp	/^    int port;$/;"	m	struct:destination	file:
connect	c++_primer\key_Cpp-Primer-master\ch12\ex12_15.cpp	/^connection connect(destination* pDest)$/;"	f
connection	c++_primer\key_Cpp-Primer-master\ch12\ex12_15.cpp	/^    connection(std::string ip_, int port_):ip(ip_), port(port_){ }$/;"	f	struct:connection
connection	c++_primer\key_Cpp-Primer-master\ch12\ex12_15.cpp	/^struct connection {$/;"	s	file:
destination	c++_primer\key_Cpp-Primer-master\ch12\ex12_15.cpp	/^    destination(std::string ip_, int port_):ip(ip_), port(port_){ }$/;"	f	struct:destination
destination	c++_primer\key_Cpp-Primer-master\ch12\ex12_15.cpp	/^struct destination {$/;"	s	file:
disconnect	c++_primer\key_Cpp-Primer-master\ch12\ex12_15.cpp	/^void disconnect(connection pConn)$/;"	f
f	c++_primer\key_Cpp-Primer-master\ch12\ex12_15.cpp	/^void f(destination &d)$/;"	f
ip	c++_primer\key_Cpp-Primer-master\ch12\ex12_15.cpp	/^    std::string ip;$/;"	m	struct:connection	file:
ip	c++_primer\key_Cpp-Primer-master\ch12\ex12_15.cpp	/^    std::string ip;$/;"	m	struct:destination	file:
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_15.cpp	/^int main()$/;"	f
port	c++_primer\key_Cpp-Primer-master\ch12\ex12_15.cpp	/^    int port;$/;"	m	struct:connection	file:
port	c++_primer\key_Cpp-Primer-master\ch12\ex12_15.cpp	/^    int port;$/;"	m	struct:destination	file:
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_16.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_17_18.cpp	/^int main()$/;"	f
begin	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.cpp	/^StrBlobPtr StrBlob::begin()$/;"	f	class:StrBlob
end	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.cpp	/^StrBlobPtr StrBlob::end()$/;"	f	class:StrBlob
CP5_ex12_19_h	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	14;"	d
StrBlob	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    StrBlob():data(std::make_shared<vector<string>>()) { }$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    StrBlob(std::initializer_list<string> il):data(std::make_shared<vector<string>>(il)) { }$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^class StrBlob {$/;"	c
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    StrBlobPtr():curr(0) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    StrBlobPtr(StrBlob &a, size_t sz = 0):wptr(a.data), curr(sz) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^class StrBlobPtr {$/;"	c
back	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    const std::string& back() const {$/;"	f	class:StrBlob
back	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    std::string& back() {$/;"	f	class:StrBlob
check	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    std::shared_ptr<vector<string>> check(size_t i, const string &msg) const {$/;"	f	class:StrBlobPtr
check	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    void check(size_type i, const string &msg) const {$/;"	f	class:StrBlob
curr	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    size_t curr;$/;"	m	class:StrBlobPtr
data	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    std::shared_ptr<vector<string>> data;$/;"	m	class:StrBlob
deref	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    string& deref() const {$/;"	f	class:StrBlobPtr
empty	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    bool empty() const { return data->empty(); }$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    const std::string& front() const {$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    std::string& front() {$/;"	f	class:StrBlob
incr	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    StrBlobPtr& incr() {$/;"	f	class:StrBlobPtr
operator !=	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    bool operator!=(const StrBlobPtr& p) {return p.curr != curr; }$/;"	f	class:StrBlobPtr
pop_back	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    void pop_back() {$/;"	f	class:StrBlob
push_back	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    void push_back(const string &t) { data->push_back(t); }$/;"	f	class:StrBlob
size	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    size_type size() const { return data->size(); }$/;"	f	class:StrBlob
wptr	c++_primer\key_Cpp-Primer-master\ch12\ex12_19.h	/^    std::weak_ptr<vector<string>> wptr;$/;"	m	class:StrBlobPtr
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_20.cpp	/^int main()$/;"	f
begin	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.cpp	/^ConstStrBlobPtr StrBlob::begin() const \/\/ should add const$/;"	f	class:StrBlob
end	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.cpp	/^ConstStrBlobPtr StrBlob::end() const \/\/ should add const$/;"	f	class:StrBlob
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.cpp	/^int main()$/;"	f
CP5_ex12_22_h	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	15;"	d
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    ConstStrBlobPtr():curr(0) { }$/;"	f	class:ConstStrBlobPtr
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    ConstStrBlobPtr(const StrBlob &a, size_t sz = 0):wptr(a.data), curr(sz) { } \/\/ should add const$/;"	f	class:ConstStrBlobPtr
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^class ConstStrBlobPtr {$/;"	c
StrBlob	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    StrBlob():data(std::make_shared<vector<string>>()) { }$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    StrBlob(std::initializer_list<string> il):data(std::make_shared<vector<string>>(il)) { }$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^class StrBlob {$/;"	c
back	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    const std::string& back() const {$/;"	f	class:StrBlob
back	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    std::string& back() {$/;"	f	class:StrBlob
check	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    std::shared_ptr<vector<string>> check(size_t i, const string &msg) const {$/;"	f	class:ConstStrBlobPtr
check	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    void check(size_type i, const string &msg) const {$/;"	f	class:StrBlob
curr	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    size_t curr;$/;"	m	class:ConstStrBlobPtr
data	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    std::shared_ptr<vector<string>> data;$/;"	m	class:StrBlob
deref	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    const string& deref() const { \/\/ return value should add const$/;"	f	class:ConstStrBlobPtr
empty	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    bool empty() const { return data->empty(); }$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    const std::string& front() const {$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    std::string& front() {$/;"	f	class:StrBlob
incr	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    ConstStrBlobPtr& incr() {$/;"	f	class:ConstStrBlobPtr
operator !=	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    bool operator!=(ConstStrBlobPtr& p) {return p.curr != curr; }$/;"	f	class:ConstStrBlobPtr
pop_back	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    void pop_back() {$/;"	f	class:StrBlob
push_back	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    void push_back(const string &t) { data->push_back(t); }$/;"	f	class:StrBlob
size	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    size_type size() const { return data->size(); }$/;"	f	class:StrBlob
wptr	c++_primer\key_Cpp-Primer-master\ch12\ex12_22.h	/^    std::weak_ptr<vector<string>> wptr;$/;"	m	class:ConstStrBlobPtr
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_23.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_24.cpp	/^int main()$/;"	f
input_reverse_output_string	c++_primer\key_Cpp-Primer-master\ch12\ex12_26.cpp	/^void input_reverse_output_string(int n)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_26.cpp	/^int main()$/;"	f
TextQuery	c++_primer\key_Cpp-Primer-master\ch12\ex12_27_30.cpp	/^TextQuery::TextQuery(std::ifstream &ifs) : input(new vector<string>)$/;"	f	class:TextQuery
print	c++_primer\key_Cpp-Primer-master\ch12\ex12_27_30.cpp	/^std::ostream& print(std::ostream &out, const QueryResult& qr)$/;"	f
query	c++_primer\key_Cpp-Primer-master\ch12\ex12_27_30.cpp	/^QueryResult TextQuery::query(const string& str) const$/;"	f	class:TextQuery
CP5_ex12_27_h	c++_primer\key_Cpp-Primer-master\ch12\ex12_27_30.h	12;"	d
QueryResult	c++_primer\key_Cpp-Primer-master\ch12\ex12_27_30.h	/^    QueryResult(const string &s, shared_ptr<std::set<TextQuery::LineNo>> set, shared_ptr<vector<string>> v) : word(s), nos(set), input(v) {}$/;"	f	class:QueryResult
QueryResult	c++_primer\key_Cpp-Primer-master\ch12\ex12_27_30.h	/^class QueryResult {$/;"	c
TextQuery	c++_primer\key_Cpp-Primer-master\ch12\ex12_27_30.h	/^class TextQuery {$/;"	c
input	c++_primer\key_Cpp-Primer-master\ch12\ex12_27_30.h	/^    shared_ptr<vector<string>> input;$/;"	m	class:QueryResult
input	c++_primer\key_Cpp-Primer-master\ch12\ex12_27_30.h	/^    shared_ptr<vector<string>> input;$/;"	m	class:TextQuery
nos	c++_primer\key_Cpp-Primer-master\ch12\ex12_27_30.h	/^    shared_ptr<std::set<TextQuery::LineNo>> nos;$/;"	m	class:QueryResult
result	c++_primer\key_Cpp-Primer-master\ch12\ex12_27_30.h	/^    std::map<string, shared_ptr<std::set<LineNo>>> result;$/;"	m	class:TextQuery
word	c++_primer\key_Cpp-Primer-master\ch12\ex12_27_30.h	/^    string word;$/;"	m	class:QueryResult
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_27_30_TEST.cpp	/^int main()$/;"	f
runQueries	c++_primer\key_Cpp-Primer-master\ch12\ex12_27_30_TEST.cpp	/^void runQueries(std::ifstream &infile)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_28.cpp	/^int main()$/;"	f
TextQuery	c++_primer\key_Cpp-Primer-master\ch12\ex12_32.cpp	/^TextQuery::TextQuery(std::ifstream &ifs) : input(new StrBlob)$/;"	f	class:TextQuery
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_32.cpp	/^int main()$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch12\ex12_32.cpp	/^std::ostream& print(std::ostream &out, const QueryResult& qr)$/;"	f
query	c++_primer\key_Cpp-Primer-master\ch12\ex12_32.cpp	/^QueryResult TextQuery::query(const string& str) const $/;"	f	class:TextQuery
CP5_ex12_32_h	c++_primer\key_Cpp-Primer-master\ch12\ex12_32.h	12;"	d
QueryResult	c++_primer\key_Cpp-Primer-master\ch12\ex12_32.h	/^    QueryResult(const string &s, shared_ptr<std::set<StrBlob::size_type>> set, shared_ptr<StrBlob> v) : word(s), nos(set), input(v) {}$/;"	f	class:QueryResult
QueryResult	c++_primer\key_Cpp-Primer-master\ch12\ex12_32.h	/^class QueryResult {$/;"	c
TextQuery	c++_primer\key_Cpp-Primer-master\ch12\ex12_32.h	/^class TextQuery {$/;"	c
input	c++_primer\key_Cpp-Primer-master\ch12\ex12_32.h	/^    shared_ptr<StrBlob> input;$/;"	m	class:QueryResult
input	c++_primer\key_Cpp-Primer-master\ch12\ex12_32.h	/^    shared_ptr<StrBlob> input;$/;"	m	class:TextQuery
nos	c++_primer\key_Cpp-Primer-master\ch12\ex12_32.h	/^    shared_ptr<std::set<StrBlob::size_type>> nos;$/;"	m	class:QueryResult
result	c++_primer\key_Cpp-Primer-master\ch12\ex12_32.h	/^    std::map<string, shared_ptr<std::set<StrBlob::size_type>>> result;$/;"	m	class:TextQuery
word	c++_primer\key_Cpp-Primer-master\ch12\ex12_32.h	/^    string word;$/;"	m	class:QueryResult
TextQuery	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.cpp	/^TextQuery::TextQuery(std::ifstream &ifs) : input(new StrBlob)$/;"	f	class:TextQuery
main	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.cpp	/^int main()$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.cpp	/^std::ostream& print(std::ostream &out, const QueryResult& qr)$/;"	f
query	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.cpp	/^QueryResult TextQuery::query(const string& str) const $/;"	f	class:TextQuery
CP5_ex12_33_h	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.h	15;"	d
QueryResult	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.h	/^    QueryResult(const string &s, shared_ptr<std::set<StrBlob::size_type>> set, shared_ptr<StrBlob> v) : word(s), nos(set), input(v) {}$/;"	f	class:QueryResult
QueryResult	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.h	/^class QueryResult {$/;"	c
TextQuery	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.h	/^class TextQuery {$/;"	c
begin	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.h	/^    ResultIter begin() const { return nos->begin(); }$/;"	f	class:QueryResult
end	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.h	/^    ResultIter end() const { return nos->end(); }$/;"	f	class:QueryResult
get_file	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.h	/^    shared_ptr<StrBlob> get_file() const { return input; }$/;"	f	class:QueryResult
input	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.h	/^    shared_ptr<StrBlob> input;$/;"	m	class:QueryResult
input	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.h	/^    shared_ptr<StrBlob> input;$/;"	m	class:TextQuery
nos	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.h	/^    shared_ptr<std::set<StrBlob::size_type>> nos;$/;"	m	class:QueryResult
result	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.h	/^    std::map<string, shared_ptr<std::set<StrBlob::size_type>>> result;$/;"	m	class:TextQuery
word	c++_primer\key_Cpp-Primer-master\ch12\ex12_33.h	/^    string word;$/;"	m	class:QueryResult
CP5_ex13_05_h	c++_primer\key_Cpp-Primer-master\ch13\ex13_05.h	13;"	d
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_05.h	/^    HasPtr(const HasPtr& hp) : ps(new std::string(*hp.ps)), i(hp.i) { }$/;"	f	class:HasPtr
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_05.h	/^    HasPtr(const std::string &s = std::string()) : ps(new std::string(s)), i(0) { }$/;"	f	class:HasPtr
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_05.h	/^class HasPtr {$/;"	c
i	c++_primer\key_Cpp-Primer-master\ch13\ex13_05.h	/^    int i;$/;"	m	class:HasPtr
ps	c++_primer\key_Cpp-Primer-master\ch13\ex13_05.h	/^    std::string *ps;$/;"	m	class:HasPtr
CP5_ex13_08_h	c++_primer\key_Cpp-Primer-master\ch13\ex13_08.h	14;"	d
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_08.h	/^    HasPtr(const HasPtr &hp) : ps(new std::string(*hp.ps)), i(hp.i) { }$/;"	f	class:HasPtr
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_08.h	/^    HasPtr(const std::string &s = std::string()) : ps(new std::string(s)), i(0) { }$/;"	f	class:HasPtr
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_08.h	/^class HasPtr {$/;"	c
i	c++_primer\key_Cpp-Primer-master\ch13\ex13_08.h	/^    int i;$/;"	m	class:HasPtr
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_08.h	/^    HasPtr& operator=(const HasPtr &hp) {$/;"	f	class:HasPtr
ps	c++_primer\key_Cpp-Primer-master\ch13\ex13_08.h	/^    std::string *ps;$/;"	m	class:HasPtr
CP5_ex13_11_h	c++_primer\key_Cpp-Primer-master\ch13\ex13_11.h	13;"	d
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_11.h	/^    HasPtr(const HasPtr &hp) : ps(new std::string(*hp.ps)), i(hp.i) { }$/;"	f	class:HasPtr
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_11.h	/^    HasPtr(const std::string &s = std::string()) : ps(new std::string(s)), i(0) { }$/;"	f	class:HasPtr
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_11.h	/^class HasPtr {$/;"	c
i	c++_primer\key_Cpp-Primer-master\ch13\ex13_11.h	/^    int i;$/;"	m	class:HasPtr
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_11.h	/^    HasPtr& operator=(const HasPtr &hp) {$/;"	f	class:HasPtr
ps	c++_primer\key_Cpp-Primer-master\ch13\ex13_11.h	/^    std::string *ps;$/;"	m	class:HasPtr
~HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_11.h	/^    ~HasPtr() {$/;"	f	class:HasPtr
X	c++_primer\key_Cpp-Primer-master\ch13\ex13_13.cpp	/^    X() { std::cout << "X()" << std::endl; }$/;"	f	struct:X
X	c++_primer\key_Cpp-Primer-master\ch13\ex13_13.cpp	/^    X(const X&) { std::cout << "X(const X&)" << std::endl; }$/;"	f	struct:X
X	c++_primer\key_Cpp-Primer-master\ch13\ex13_13.cpp	/^struct X {$/;"	s	file:
f	c++_primer\key_Cpp-Primer-master\ch13\ex13_13.cpp	/^void f(const X &rx, X x)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_13.cpp	/^int main()$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_13.cpp	/^    X& operator=(const X&) { std::cout << "X& operator=(const X&)" << std::endl; return *this; }$/;"	f	struct:X
~X	c++_primer\key_Cpp-Primer-master\ch13\ex13_13.cpp	/^    ~X() { std::cout << "~X()" << std::endl; }$/;"	f	struct:X
f	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_1.cpp	/^void f(numbered s) {$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_1.cpp	/^int main()$/;"	f
mysn	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_1.cpp	/^    int mysn;$/;"	m	class:numbered	file:
numbered	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_1.cpp	/^    numbered() {$/;"	f	class:numbered
numbered	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_1.cpp	/^class numbered {$/;"	c	file:
f	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_2.cpp	/^void f(numbered s) {$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_2.cpp	/^int main()$/;"	f
mysn	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_2.cpp	/^    int mysn;$/;"	m	class:numbered	file:
numbered	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_2.cpp	/^    numbered() {$/;"	f	class:numbered
numbered	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_2.cpp	/^    numbered(const numbered& n) {$/;"	f	class:numbered
numbered	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_2.cpp	/^class numbered {$/;"	c	file:
f	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_3.cpp	/^void f(const numbered& s) {$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_3.cpp	/^int main()$/;"	f
mysn	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_3.cpp	/^    int mysn;$/;"	m	class:numbered	file:
numbered	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_3.cpp	/^    numbered() {$/;"	f	class:numbered
numbered	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_3.cpp	/^    numbered(const numbered& n) {$/;"	f	class:numbered
numbered	c++_primer\key_Cpp-Primer-master\ch13\ex13_17_3.cpp	/^class numbered {$/;"	c	file:
Employee	c++_primer\key_Cpp-Primer-master\ch13\ex13_18.cpp	/^Employee::Employee() {$/;"	f	class:Employee
Employee	c++_primer\key_Cpp-Primer-master\ch13\ex13_18.cpp	/^Employee::Employee(const string &name) {$/;"	f	class:Employee
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_18.cpp	/^int main()$/;"	f
s_increment	c++_primer\key_Cpp-Primer-master\ch13\ex13_18.cpp	/^int Employee::s_increment = 0;$/;"	m	class:Employee	file:
CP5_ex13_18_h	c++_primer\key_Cpp-Primer-master\ch13\ex13_18.h	15;"	d
Employee	c++_primer\key_Cpp-Primer-master\ch13\ex13_18.h	/^class Employee {$/;"	c
id	c++_primer\key_Cpp-Primer-master\ch13\ex13_18.h	/^    const int id() const { return id_; }$/;"	f	class:Employee
id_	c++_primer\key_Cpp-Primer-master\ch13\ex13_18.h	/^    int id_;$/;"	m	class:Employee
name_	c++_primer\key_Cpp-Primer-master\ch13\ex13_18.h	/^    string name_;$/;"	m	class:Employee
s_increment	c++_primer\key_Cpp-Primer-master\ch13\ex13_18.h	/^    static int s_increment;$/;"	m	class:Employee
CP5_ex13_19_h	c++_primer\key_Cpp-Primer-master\ch13\ex13_19.h	15;"	d
Employee	c++_primer\key_Cpp-Primer-master\ch13\ex13_19.h	/^class Employee {$/;"	c
id	c++_primer\key_Cpp-Primer-master\ch13\ex13_19.h	/^    const int id() const { return id_; }$/;"	f	class:Employee
id_	c++_primer\key_Cpp-Primer-master\ch13\ex13_19.h	/^    int id_;$/;"	m	class:Employee
name_	c++_primer\key_Cpp-Primer-master\ch13\ex13_19.h	/^    string name_;$/;"	m	class:Employee
s_increment	c++_primer\key_Cpp-Primer-master\ch13\ex13_19.h	/^    static int s_increment;$/;"	m	class:Employee
CP5_ex13_11_h	c++_primer\key_Cpp-Primer-master\ch13\ex13_22.h	17;"	d
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_22.h	/^    HasPtr(const HasPtr &hp) : ps(new std::string(*hp.ps)), i(hp.i) { }$/;"	f	class:HasPtr
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_22.h	/^    HasPtr(const std::string &s = std::string()) : ps(new std::string(s)), i(0) { }$/;"	f	class:HasPtr
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_22.h	/^class HasPtr {$/;"	c
i	c++_primer\key_Cpp-Primer-master\ch13\ex13_22.h	/^    int i;$/;"	m	class:HasPtr
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_22.h	/^    HasPtr& operator=(const HasPtr &hp) {$/;"	f	class:HasPtr
ps	c++_primer\key_Cpp-Primer-master\ch13\ex13_22.h	/^    std::string *ps;$/;"	m	class:HasPtr
~HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_22.h	/^    ~HasPtr() {$/;"	f	class:HasPtr
begin	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.cpp	/^ConstStrBlobPtr StrBlob::begin() const \/\/ should add const$/;"	f	class:StrBlob
end	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.cpp	/^ConstStrBlobPtr StrBlob::end() const \/\/ should add const$/;"	f	class:StrBlob
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.cpp	/^int main()$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.cpp	/^StrBlob& StrBlob::operator=(const StrBlob& sb)$/;"	f	class:StrBlob
CP5_ex13_26_h	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	13;"	d
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    ConstStrBlobPtr():curr(0) { }$/;"	f	class:ConstStrBlobPtr
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    ConstStrBlobPtr(const StrBlob &a, size_t sz = 0):wptr(a.data), curr(sz) { } \/\/ should add const$/;"	f	class:ConstStrBlobPtr
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^class ConstStrBlobPtr {$/;"	c
StrBlob	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    StrBlob():data(std::make_shared<vector<string>>()) { }$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    StrBlob(const StrBlob& sb) : data(std::make_shared<vector<string>>(*sb.data)) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    StrBlob(std::initializer_list<string> il):data(std::make_shared<vector<string>>(il)) { }$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^class StrBlob {$/;"	c
back	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    const std::string& back() const {$/;"	f	class:StrBlob
back	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    std::string& back() {$/;"	f	class:StrBlob
check	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    std::shared_ptr<vector<string>> check(size_t i, const string &msg) const {$/;"	f	class:ConstStrBlobPtr
check	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    void check(size_type i, const string &msg) const {$/;"	f	class:StrBlob
curr	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    size_t curr;$/;"	m	class:ConstStrBlobPtr
data	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    std::shared_ptr<vector<string>> data;$/;"	m	class:StrBlob
deref	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    const string& deref() const { \/\/ return value should add const$/;"	f	class:ConstStrBlobPtr
empty	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    bool empty() const { return data->empty(); }$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    const std::string& front() const {$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    std::string& front() {$/;"	f	class:StrBlob
incr	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    ConstStrBlobPtr& incr() {$/;"	f	class:ConstStrBlobPtr
operator !=	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    bool operator!=(ConstStrBlobPtr& p) {return p.curr != curr; }$/;"	f	class:ConstStrBlobPtr
pop_back	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    void pop_back() {$/;"	f	class:StrBlob
push_back	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    void push_back(const string &t) { data->push_back(t); }$/;"	f	class:StrBlob
size	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    size_type size() const { return data->size(); }$/;"	f	class:StrBlob
wptr	c++_primer\key_Cpp-Primer-master\ch13\ex13_26.h	/^    std::weak_ptr<vector<string>> wptr;$/;"	m	class:ConstStrBlobPtr
CP5_ex13_27_h	c++_primer\key_Cpp-Primer-master\ch13\ex13_27.h	11;"	d
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_27.h	/^    HasPtr(const HasPtr &hp) : ps(hp.ps), i(hp.i), use(hp.use) { ++*use; }$/;"	f	class:HasPtr
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_27.h	/^    HasPtr(const std::string &s = std::string()) : ps(new std::string(s)), i(0), use(new size_t(1)) { }$/;"	f	class:HasPtr
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_27.h	/^class HasPtr {$/;"	c
i	c++_primer\key_Cpp-Primer-master\ch13\ex13_27.h	/^    int i;$/;"	m	class:HasPtr
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_27.h	/^    HasPtr& operator=(const HasPtr &rhs) {$/;"	f	class:HasPtr
ps	c++_primer\key_Cpp-Primer-master\ch13\ex13_27.h	/^    std::string *ps;$/;"	m	class:HasPtr
use	c++_primer\key_Cpp-Primer-master\ch13\ex13_27.h	/^    size_t *use;$/;"	m	class:HasPtr
~HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_27.h	/^    ~HasPtr() {$/;"	f	class:HasPtr
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.cpp	/^int main()$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.cpp	/^BinStrTree& BinStrTree::operator=(const BinStrTree &bst)$/;"	f	class:BinStrTree
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.cpp	/^TreeNode& TreeNode::operator=(const TreeNode &rhs)$/;"	f	class:TreeNode
BinStrTree	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.h	/^    BinStrTree() : root(new TreeNode()) {}$/;"	f	class:BinStrTree
BinStrTree	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.h	/^    BinStrTree(const BinStrTree &bst) : root(new TreeNode(*bst.root)) {}$/;"	f	class:BinStrTree
BinStrTree	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.h	/^class BinStrTree {$/;"	c
CP5_ex13_28_h	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.h	11;"	d
TreeNode	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.h	/^    TreeNode() : value(string()), count(new int(1)), left(nullptr), right(nullptr) {}$/;"	f	class:TreeNode
TreeNode	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.h	/^    TreeNode(const TreeNode &rhs) : value(rhs.value), count(rhs.count), left(rhs.left), right(rhs.right) { ++*count; }$/;"	f	class:TreeNode
TreeNode	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.h	/^class TreeNode {$/;"	c
count	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.h	/^    int         *count;$/;"	m	class:TreeNode
left	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.h	/^    TreeNode    *left;$/;"	m	class:TreeNode
right	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.h	/^    TreeNode    *right;$/;"	m	class:TreeNode
root	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.h	/^    TreeNode *root;$/;"	m	class:BinStrTree
value	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.h	/^    std::string value;$/;"	m	class:TreeNode
~BinStrTree	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.h	/^    ~BinStrTree() { delete root; }$/;"	f	class:BinStrTree
~TreeNode	c++_primer\key_Cpp-Primer-master\ch13\ex13_28.h	/^    ~TreeNode() {$/;"	f	class:TreeNode
CP5_ex13_11_h	c++_primer\key_Cpp-Primer-master\ch13\ex13_30.h	14;"	d
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_30.h	/^    HasPtr(const HasPtr &hp) : ps(new std::string(*hp.ps)), i(hp.i) { }$/;"	f	class:HasPtr
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_30.h	/^    HasPtr(const std::string &s = std::string()) : ps(new std::string(s)), i(0) { }$/;"	f	class:HasPtr
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_30.h	/^class HasPtr {$/;"	c
i	c++_primer\key_Cpp-Primer-master\ch13\ex13_30.h	/^    int i;$/;"	m	class:HasPtr
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_30.h	/^    HasPtr& operator=(const HasPtr &hp) {$/;"	f	class:HasPtr
ps	c++_primer\key_Cpp-Primer-master\ch13\ex13_30.h	/^    std::string *ps;$/;"	m	class:HasPtr
show	c++_primer\key_Cpp-Primer-master\ch13\ex13_30.h	/^    void show() { std::cout << *ps << std::endl; }$/;"	f	class:HasPtr
swap	c++_primer\key_Cpp-Primer-master\ch13\ex13_30.h	/^void swap(HasPtr& lhs, HasPtr& rhs)$/;"	f
~HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_30.h	/^    ~HasPtr() {$/;"	f	class:HasPtr
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_31.cpp	/^int main(void)$/;"	f
CP5_ex13_11_h	c++_primer\key_Cpp-Primer-master\ch13\ex13_31.h	15;"	d
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_31.h	/^    HasPtr(const HasPtr &hp) $/;"	f	class:HasPtr
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_31.h	/^    HasPtr(const std::string &s = std::string()) $/;"	f	class:HasPtr
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_31.h	/^class HasPtr $/;"	c
i	c++_primer\key_Cpp-Primer-master\ch13\ex13_31.h	/^    int i;$/;"	m	class:HasPtr
operator <	c++_primer\key_Cpp-Primer-master\ch13\ex13_31.h	/^bool operator<(const HasPtr &lhs, const HasPtr &rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_31.h	/^    HasPtr& operator=(HasPtr tmp) $/;"	f	class:HasPtr
ps	c++_primer\key_Cpp-Primer-master\ch13\ex13_31.h	/^    std::string *ps;$/;"	m	class:HasPtr
show	c++_primer\key_Cpp-Primer-master\ch13\ex13_31.h	/^    void show() const$/;"	f	class:HasPtr
swap	c++_primer\key_Cpp-Primer-master\ch13\ex13_31.h	/^    void swap(HasPtr &rhs) $/;"	f	class:HasPtr
swap	c++_primer\key_Cpp-Primer-master\ch13\ex13_31.h	/^void swap(HasPtr& lhs, HasPtr& rhs)$/;"	f
~HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_31.h	/^    ~HasPtr() $/;"	f	class:HasPtr
Folder	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^Folder::Folder(const Folder &f) $/;"	f	class:Folder
Message	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^Message::Message(const Message &m) $/;"	f	class:Message
add_to_Folders	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^void Message::add_to_Folders(const Message &m) $/;"	f	class:Message
add_to_Message	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^void Folder::add_to_Message(const Folder &f) $/;"	f	class:Folder
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^int main() $/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^Folder &Folder::operator=(const Folder &rhs) $/;"	f	class:Folder
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^Message &Message::operator=(const Message &rhs) $/;"	f	class:Message
print_debug	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^void Folder::print_debug() $/;"	f	class:Folder
print_debug	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^void Message::print_debug() $/;"	f	class:Message
remove	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^void Message::remove(Folder &f) $/;"	f	class:Message
remove_from_Folders	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^void Message::remove_from_Folders() $/;"	f	class:Message
remove_to_Message	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^void Folder::remove_to_Message() $/;"	f	class:Folder
save	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^void Message::save(Folder &f) $/;"	f	class:Message
swap	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^void swap(Folder &lhs, Folder &rhs) $/;"	f
swap	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^void swap(Message &lhs, Message &rhs) $/;"	f
~Folder	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^Folder::~Folder() $/;"	f	class:Folder
~Message	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.cpp	/^Message::~Message() $/;"	f	class:Message
CP5_ex13_34_36_37_h	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.h	16;"	d
Folder	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.h	/^class Folder {$/;"	c
Message	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.h	/^    explicit Message(const std::string &str = ""):contents(str) {}$/;"	f	class:Message
Message	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.h	/^class Message {$/;"	c
addFldr	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.h	/^    void addFldr(Folder *f) { folders.insert(f); }$/;"	f	class:Message
addMsg	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.h	/^    void addMsg(Message *m) { msgs.insert(m); }$/;"	f	class:Folder
contents	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.h	/^    std::string contents;$/;"	m	class:Message
folders	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.h	/^    std::set<Folder*> folders;$/;"	m	class:Message
msgs	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.h	/^    std::set<Message*> msgs;$/;"	m	class:Folder
remFldr	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.h	/^    void remFldr(Folder *f) { folders.erase(f); }$/;"	f	class:Message
remMsg	c++_primer\key_Cpp-Primer-master\ch13\ex13_34_36_37.h	/^    void remMsg(Message *m) { msgs.erase(m); }$/;"	f	class:Folder
StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.cpp	/^StrVec::StrVec(const StrVec &rhs)$/;"	f	class:StrVec
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.cpp	/^StrVec::alloc_n_copy(const std::string *b, const std::string *e)$/;"	f	class:StrVec
alloc_n_move	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.cpp	/^void StrVec::alloc_n_move(size_t new_cap)$/;"	f	class:StrVec
free	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.cpp	/^void StrVec::free()$/;"	f	class:StrVec
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.cpp	/^int main()$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.cpp	/^StrVec& StrVec::operator = (const StrVec &rhs)$/;"	f	class:StrVec
push_back	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.cpp	/^void StrVec::push_back(const std::string &s)$/;"	f	class:StrVec
reallocate	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.cpp	/^void StrVec::reallocate()$/;"	f	class:StrVec
reserve	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.cpp	/^void StrVec::reserve(size_t new_cap)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.cpp	/^void StrVec::resize(size_t count)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.cpp	/^void StrVec::resize(size_t count, const std::string &s)$/;"	f	class:StrVec
~StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.cpp	/^StrVec::~StrVec()$/;"	f	class:StrVec
CP5_EX_13_39_H_	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.h	13;"	d
StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.h	/^    StrVec() : elements(nullptr), first_free(nullptr), cap(nullptr) {}$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.h	/^class StrVec$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.h	/^    std::allocator<std::string> alloc;$/;"	m	class:StrVec
begin	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.h	/^    std::string *begin() const { return elements; }$/;"	f	class:StrVec
cap	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.h	/^    std::string *cap;$/;"	m	class:StrVec
capacity	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:StrVec
chk_n_alloc	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.h	/^    void chk_n_alloc() { if (size() == capacity()) reallocate(); }$/;"	f	class:StrVec
elements	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.h	/^    std::string *elements;$/;"	m	class:StrVec
end	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.h	/^    std::string *end() const { return first_free; }$/;"	f	class:StrVec
first_free	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.h	/^    std::string *first_free;$/;"	m	class:StrVec
size	c++_primer\key_Cpp-Primer-master\ch13\ex13_39.h	/^    size_t size() const { return first_free - elements; }$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.cpp	/^StrVec::StrVec(const StrVec &rhs)$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.cpp	/^StrVec::StrVec(std::initializer_list<std::string> il)$/;"	f	class:StrVec
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.cpp	/^StrVec::alloc_n_copy(const std::string *b, const std::string *e)$/;"	f	class:StrVec
alloc_n_move	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.cpp	/^void StrVec::alloc_n_move(size_t new_cap)$/;"	f	class:StrVec
free	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.cpp	/^void StrVec::free()$/;"	f	class:StrVec
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.cpp	/^int main()$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.cpp	/^StrVec& StrVec::operator = (const StrVec &rhs)$/;"	f	class:StrVec
push_back	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.cpp	/^void StrVec::push_back(const std::string &s)$/;"	f	class:StrVec
range_initialize	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.cpp	/^void StrVec::range_initialize(const std::string *first, const std::string *last)$/;"	f	class:StrVec
reallocate	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.cpp	/^void StrVec::reallocate()$/;"	f	class:StrVec
reserve	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.cpp	/^void StrVec::reserve(size_t new_cap)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.cpp	/^void StrVec::resize(size_t count)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.cpp	/^void StrVec::resize(size_t count, const std::string &s)$/;"	f	class:StrVec
~StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.cpp	/^StrVec::~StrVec()$/;"	f	class:StrVec
CP5_EX_13_40_H_	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.h	12;"	d
StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.h	/^    StrVec() : elements(nullptr), first_free(nullptr), cap(nullptr) {}$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.h	/^class StrVec$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.h	/^    std::allocator<std::string> alloc;$/;"	m	class:StrVec
begin	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.h	/^    std::string *begin() const { return elements; }$/;"	f	class:StrVec
cap	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.h	/^    std::string *cap;$/;"	m	class:StrVec
capacity	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:StrVec
chk_n_alloc	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.h	/^    void chk_n_alloc() { if (size() == capacity()) reallocate(); }$/;"	f	class:StrVec
elements	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.h	/^    std::string *elements;$/;"	m	class:StrVec
end	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.h	/^    std::string *end() const { return first_free; }$/;"	f	class:StrVec
first_free	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.h	/^    std::string *first_free;$/;"	m	class:StrVec
size	c++_primer\key_Cpp-Primer-master\ch13\ex13_40.h	/^    size_t size() const { return first_free - elements; }$/;"	f	class:StrVec
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_42.cpp	/^int main()$/;"	f
runQueries	c++_primer\key_Cpp-Primer-master\ch13\ex13_42.cpp	/^void runQueries(std::ifstream &infile)$/;"	f
StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.cpp	/^StrVec::StrVec(const StrVec &rhs)$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.cpp	/^StrVec::StrVec(std::initializer_list<std::string> il)$/;"	f	class:StrVec
alloc	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.cpp	/^std::allocator<std::string> StrVec::alloc;$/;"	m	class:StrVec	file:
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.cpp	/^StrVec::alloc_n_copy(const std::string *b, const std::string *e)$/;"	f	class:StrVec
alloc_n_move	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.cpp	/^void StrVec::alloc_n_move(size_t new_cap)$/;"	f	class:StrVec
free	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.cpp	/^void StrVec::free()$/;"	f	class:StrVec
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.cpp	/^StrVec& StrVec::operator = (const StrVec &rhs)$/;"	f	class:StrVec
push_back	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.cpp	/^void StrVec::push_back(const std::string &s)$/;"	f	class:StrVec
range_initialize	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.cpp	/^void StrVec::range_initialize(const std::string *first, const std::string *last)$/;"	f	class:StrVec
reallocate	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.cpp	/^void StrVec::reallocate()$/;"	f	class:StrVec
reserve	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.cpp	/^void StrVec::reserve(size_t new_cap)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.cpp	/^void StrVec::resize(size_t count)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.cpp	/^void StrVec::resize(size_t count, const std::string &s)$/;"	f	class:StrVec
~StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.cpp	/^StrVec::~StrVec()$/;"	f	class:StrVec
CP5_STRVEC_H_	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.h	2;"	d
StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.h	/^    StrVec() : elements(nullptr), first_free(nullptr), cap(nullptr) {}$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.h	/^class StrVec$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.h	/^    std::allocator<std::string> alloc;$/;"	m	class:StrVec
at	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.h	/^    const std::string& at(size_t pos) const { return *(elements + pos); }$/;"	f	class:StrVec
at	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.h	/^    std::string& at(size_t pos) { return *(elements + pos); }$/;"	f	class:StrVec
begin	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.h	/^    std::string *begin() const { return elements; }$/;"	f	class:StrVec
cap	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.h	/^    std::string *cap;$/;"	m	class:StrVec
capacity	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:StrVec
chk_n_alloc	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.h	/^    void chk_n_alloc() { if (size() == capacity()) reallocate(); }$/;"	f	class:StrVec
elements	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.h	/^    std::string *elements;$/;"	m	class:StrVec
end	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.h	/^    std::string *end() const { return first_free; }$/;"	f	class:StrVec
first_free	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.h	/^    std::string *first_free;$/;"	m	class:StrVec
size	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_StrVec.h	/^    size_t size() const { return first_free - elements; }$/;"	f	class:StrVec
TextQuery	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_TextQuery.cpp	/^TextQuery::TextQuery(std::ifstream &ifs) : input(new StrVec)$/;"	f	class:TextQuery
print	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_TextQuery.cpp	/^std::ostream& print(std::ostream &out, const QueryResult& qr)$/;"	f
query	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_TextQuery.cpp	/^QueryResult TextQuery::query(const string& str) const$/;"	f	class:TextQuery
CP5_TEXTQUERY_H_	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_TextQuery.h	2;"	d
QueryResult	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_TextQuery.h	/^    QueryResult(const std::string &s, std::shared_ptr<std::set<size_t>> set, std::shared_ptr<StrVec> v) : word(s), nos(set), input(v) {}$/;"	f	class:QueryResult
QueryResult	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_TextQuery.h	/^class QueryResult {$/;"	c
TextQuery	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_TextQuery.h	/^class TextQuery {$/;"	c
input	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_TextQuery.h	/^    std::shared_ptr<StrVec> input;$/;"	m	class:QueryResult
input	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_TextQuery.h	/^    std::shared_ptr<StrVec> input;$/;"	m	class:TextQuery
nos	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_TextQuery.h	/^    std::shared_ptr<std::set<size_t>> nos;$/;"	m	class:QueryResult
result	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_TextQuery.h	/^	std::map<std::string, std::shared_ptr<std::set<size_t>>> result;$/;"	m	class:TextQuery
word	c++_primer\key_Cpp-Primer-master\ch13\ex13_42_TextQuery.h	/^    std::string word;$/;"	m	class:QueryResult
String	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.cpp	/^String::String(const String& rhs)$/;"	f	class:String
String	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.cpp	/^String::String(const char *s)$/;"	f	class:String
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.cpp	/^String::alloc_n_copy(const char *b, const char *e)$/;"	f	class:String
free	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.cpp	/^void String::free()$/;"	f	class:String
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.cpp	/^String& String::operator = (const String &rhs)$/;"	f	class:String
range_initializer	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.cpp	/^void String::range_initializer(const char *first, const char *last)$/;"	f	class:String
~String	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.cpp	/^String::~String()$/;"	f	class:String
CP5_STRING_H__	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.h	2;"	d
String	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.h	/^    String() : String("") {}$/;"	f	class:String
String	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.h	/^class String$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.h	/^    std::allocator<char> alloc;$/;"	m	class:String
c_str	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.h	/^    const char *c_str() const { return elements; }$/;"	f	class:String
elements	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.h	/^    char *elements;$/;"	m	class:String
end	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.h	/^    char *end;$/;"	m	class:String
length	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.h	/^    size_t length() const { return end - elements - 1; }$/;"	f	class:String
size	c++_primer\key_Cpp-Primer-master\ch13\ex13_44_47.h	/^    size_t size() const { return end - elements; }$/;"	f	class:String
bar	c++_primer\key_Cpp-Primer-master\ch13\ex13_48.cpp	/^void bar(const String& x)$/;"	f
baz	c++_primer\key_Cpp-Primer-master\ch13\ex13_48.cpp	/^String baz()$/;"	f
foo	c++_primer\key_Cpp-Primer-master\ch13\ex13_48.cpp	/^void foo(String x)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_48.cpp	/^int main()$/;"	f
Folder	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^Folder::Folder(const Folder &f) : name(f.name), msgs(f.msgs)$/;"	f	class:Folder
Message	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^Message::Message(const Message &m) : contents(m.contents), folders(m.folders)$/;"	f	class:Message
add_to_Folders	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^void Message::add_to_Folders(const Message &m)$/;"	f	class:Message
add_to_Message	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^void Folder::add_to_Message(const Folder &f)$/;"	f	class:Folder
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^Folder& Folder::operator =(const Folder &rhs)$/;"	f	class:Folder
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^Message& Message::operator=(const Message &rhs)$/;"	f	class:Message
print_debug	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^void Folder::print_debug()$/;"	f	class:Folder
print_debug	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^void Message::print_debug()$/;"	f	class:Message
remove	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^void Message::remove(Folder &f)$/;"	f	class:Message
remove_from_Folders	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^void Message::remove_from_Folders()$/;"	f	class:Message
remove_from_Message	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^void Folder::remove_from_Message()$/;"	f	class:Folder
save	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^void Message::save(Folder &f)$/;"	f	class:Message
swap	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^void swap(Folder &lhs, Folder &rhs)$/;"	f
swap	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^void swap(Message &lhs, Message &rhs)$/;"	f
~Folder	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^Folder::~Folder()$/;"	f	class:Folder
~Message	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.cpp	/^Message::~Message()$/;"	f	class:Message
CP5_MESSAGE_H_	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	2;"	d
Folder	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    explicit Folder(const std::string &str = "") :name(str) {}$/;"	f	class:Folder
Folder	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^class Folder {$/;"	c
Message	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    explicit Message(const std::string &str = "") : contents(str) {}$/;"	f	class:Message
Message	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^class Message$/;"	c
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    Folder& operator=(Folder &&)NOEXCEPT;$/;"	m	class:Folder
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    Message& operator=(Message&&)NOEXCEPT;$/;"	m	class:Message
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	10;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	8;"	d
addFldr	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    void addFldr(Folder *f) { folders.insert(f); }$/;"	f	class:Message
addMsg	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    void addMsg(Message *m) { msgs.insert(m); }$/;"	f	class:Folder
contents	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    std::string contents;$/;"	m	class:Message
fldr	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    const std::string& fldr() const { return name; }$/;"	f	class:Folder
folders	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    std::set<Folder*> folders;$/;"	m	class:Message
move	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    Folder(Folder &&f) NOEXCEPT : name(std::move(f.name)), msgs(std::move(f.msgs)) {}$/;"	f	class:Folder
move	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    Message(Message &&m) NOEXCEPT : contents(std::move(m.contents)), folders(std::move(m.folders)) {}$/;"	f	class:Message
msg	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    const std::string& msg() const { return contents; }$/;"	f	class:Message
msgs	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    std::set<Message*> msgs;$/;"	m	class:Folder
name	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    std::string name;$/;"	m	class:Folder
remFldr	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    void remFldr(Folder *f) { folders.erase(f); }$/;"	f	class:Message
remMsg	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_Message.h	/^    void remMsg(Message *m) { msgs.erase(m); }$/;"	f	class:Folder
StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.cpp	/^StrVec::StrVec(const StrVec &rhs)$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.cpp	/^StrVec::StrVec(std::initializer_list<std::string> il)$/;"	f	class:StrVec
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.cpp	/^StrVec::alloc_n_copy(const std::string *b, const std::string *e)$/;"	f	class:StrVec
alloc_n_move	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.cpp	/^void StrVec::alloc_n_move(size_t new_cap)$/;"	f	class:StrVec
cap	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.cpp	/^StrVec::StrVec(StrVec &&s) NOEXCEPT : elements(s.elements), first_free(s.first_free), cap(s.cap)$/;"	f
free	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.cpp	/^void StrVec::free()$/;"	f	class:StrVec
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.cpp	/^StrVec& StrVec::operator = (const StrVec &rhs)$/;"	f	class:StrVec
push_back	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.cpp	/^void StrVec::push_back(const std::string &s)$/;"	f	class:StrVec
range_initialize	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.cpp	/^void StrVec::range_initialize(const std::string *first, const std::string *last)$/;"	f	class:StrVec
reallocate	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.cpp	/^void StrVec::reallocate()$/;"	f	class:StrVec
reserve	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.cpp	/^void StrVec::reserve(size_t new_cap)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.cpp	/^void StrVec::resize(size_t count)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.cpp	/^void StrVec::resize(size_t count, const std::string &s)$/;"	f	class:StrVec
~StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.cpp	/^StrVec::~StrVec()$/;"	f	class:StrVec
CP5_STRVEC_H_	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	2;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	/^    StrVec& operator=(StrVec&&)NOEXCEPT;$/;"	m	class:StrVec
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	/^    StrVec(StrVec&&) NOEXCEPT;$/;"	m	class:StrVec
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	11;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	9;"	d
StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	/^    StrVec() : elements(nullptr), first_free(nullptr), cap(nullptr) {}$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	/^class StrVec$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	/^    static std::allocator<std::string> alloc;$/;"	m	class:StrVec
at	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	/^    const std::string& at(size_t pos) const { return *(elements + pos); }$/;"	f	class:StrVec
at	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	/^    std::string& at(size_t pos) { return *(elements + pos); }$/;"	f	class:StrVec
begin	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	/^    std::string *begin() const { return elements; }$/;"	f	class:StrVec
cap	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	/^    std::string *cap;$/;"	m	class:StrVec
capacity	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:StrVec
chk_n_alloc	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	/^    void chk_n_alloc() { if (size() == capacity()) reallocate(); }$/;"	f	class:StrVec
elements	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	/^    std::string *elements;$/;"	m	class:StrVec
end	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	/^    std::string *end() const { return first_free; }$/;"	f	class:StrVec
first_free	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	/^    std::string *first_free;$/;"	m	class:StrVec
size	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_StrVec.h	/^    size_t size() const { return first_free - elements; }$/;"	f	class:StrVec
String	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.cpp	/^String::String(const String& rhs)$/;"	f	class:String
String	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.cpp	/^String::String(const char *s)$/;"	f	class:String
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.cpp	/^String::alloc_n_copy(const char *b, const char *e)$/;"	f	class:String
end	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.cpp	/^String::String(String &&s) NOEXCEPT : elements(s.elements), end(s.end)$/;"	f
free	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.cpp	/^void String::free()$/;"	f	class:String
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.cpp	/^String& String::operator = (const String &rhs)$/;"	f	class:String
range_initializer	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.cpp	/^void String::range_initializer(const char *first, const char *last)$/;"	f	class:String
~String	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.cpp	/^String::~String()$/;"	f	class:String
CP5_STRING_H__	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.h	2;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.h	/^    String& operator=(String&&)NOEXCEPT;$/;"	m	class:String
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.h	/^    String(String &&) NOEXCEPT;$/;"	m	class:String
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.h	7;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.h	9;"	d
String	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.h	/^    String() : String("") {}$/;"	f	class:String
String	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.h	/^class String$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.h	/^    std::allocator<char> alloc;$/;"	m	class:String
c_str	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.h	/^    const char *c_str() const { return elements; }$/;"	f	class:String
elements	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.h	/^    char *elements;$/;"	m	class:String
end	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.h	/^    char *end;$/;"	m	class:String
length	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.h	/^    size_t length() const { return end - elements - 1; }$/;"	f	class:String
size	c++_primer\key_Cpp-Primer-master\ch13\ex13_49_String.h	/^    size_t size() const { return end - elements; }$/;"	f	class:String
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_53.cpp	/^HasPtr::HasPtr(const HasPtr &hp) : ps(new std::string(*hp.ps)), i(hp.i)$/;"	f	class:HasPtr
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_53.cpp	/^HasPtr::HasPtr(const std::string &s) : ps(new std::string(s)), i(0)$/;"	f	class:HasPtr
i	c++_primer\key_Cpp-Primer-master\ch13\ex13_53.cpp	/^HasPtr::HasPtr(HasPtr &&p) noexcept : ps(p.ps), i(p.i)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_53.cpp	/^int main()$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch13\ex13_53.cpp	/^HasPtr& HasPtr::operator=(HasPtr rhs)$/;"	f	class:HasPtr
swap	c++_primer\key_Cpp-Primer-master\ch13\ex13_53.cpp	/^inline void swap(HasPtr &lhs, HasPtr &rhs)$/;"	f
~HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_53.cpp	/^HasPtr::~HasPtr()$/;"	f	class:HasPtr
CP5_ex13_53_h	c++_primer\key_Cpp-Primer-master\ch13\ex13_53.h	2;"	d
HasPtr	c++_primer\key_Cpp-Primer-master\ch13\ex13_53.h	/^class HasPtr {$/;"	c
i	c++_primer\key_Cpp-Primer-master\ch13\ex13_53.h	/^    int i;$/;"	m	class:HasPtr
noexcept	c++_primer\key_Cpp-Primer-master\ch13\ex13_53.h	/^    HasPtr(HasPtr &&p) noexcept;$/;"	m	class:HasPtr
ps	c++_primer\key_Cpp-Primer-master\ch13\ex13_53.h	/^    std::string *ps;$/;"	m	class:HasPtr
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_53_test.cpp	/^int main()$/;"	f
Foo	c++_primer\key_Cpp-Primer-master\ch13\ex13_58.cpp	/^class Foo {$/;"	c	file:
data	c++_primer\key_Cpp-Primer-master\ch13\ex13_58.cpp	/^    vector<int> data;$/;"	m	class:Foo	file:
main	c++_primer\key_Cpp-Primer-master\ch13\ex13_58.cpp	/^int main()$/;"	f
sorted	c++_primer\key_Cpp-Primer-master\ch13\ex13_58.cpp	/^Foo Foo::sorted() && {$/;"	f	class:Foo
sorted	c++_primer\key_Cpp-Primer-master\ch13\ex13_58.cpp	/^Foo Foo::sorted() const & {$/;"	f	class:Foo
Sales_data	c++_primer\key_Cpp-Primer-master\ch14\ex14_02.cpp	/^Sales_data::Sales_data(std::istream &is) : Sales_data()$/;"	f	class:Sales_data
operator +	c++_primer\key_Cpp-Primer-master\ch14\ex14_02.cpp	/^Sales_data operator+(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator +=	c++_primer\key_Cpp-Primer-master\ch14\ex14_02.cpp	/^Sales_data& Sales_data::operator+=(const Sales_data &rhs)$/;"	f	class:Sales_data
operator <<	c++_primer\key_Cpp-Primer-master\ch14\ex14_02.cpp	/^std::ostream& operator<<(std::ostream &os, const Sales_data &item)$/;"	f
operator >>	c++_primer\key_Cpp-Primer-master\ch14\ex14_02.cpp	/^std::istream& operator>>(std::istream &is, Sales_data &item)$/;"	f
CP5_CH14_EX14_02_H	c++_primer\key_Cpp-Primer-master\ch14\ex14_02.h	12;"	d
Sales_data	c++_primer\key_Cpp-Primer-master\ch14\ex14_02.h	/^    Sales_data() : Sales_data("", 0, 0.0f){}$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch14\ex14_02.h	/^    Sales_data(const std::string &s) : Sales_data(s, 0, 0.0f){}$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch14\ex14_02.h	/^    Sales_data(const std::string &s, unsigned n, double p):bookNo(s),units_sold(n),revenue(n*p){}$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch14\ex14_02.h	/^class Sales_data {$/;"	c
avg_price	c++_primer\key_Cpp-Primer-master\ch14\ex14_02.h	/^inline double Sales_data::avg_price() const$/;"	f	class:Sales_data
bookNo	c++_primer\key_Cpp-Primer-master\ch14\ex14_02.h	/^    std::string bookNo;$/;"	m	class:Sales_data
isbn	c++_primer\key_Cpp-Primer-master\ch14\ex14_02.h	/^    std::string isbn() const { return bookNo; }$/;"	f	class:Sales_data
revenue	c++_primer\key_Cpp-Primer-master\ch14\ex14_02.h	/^    double revenue = 0.0;$/;"	m	class:Sales_data
units_sold	c++_primer\key_Cpp-Primer-master\ch14\ex14_02.h	/^    unsigned units_sold = 0;$/;"	m	class:Sales_data
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_02_TEST.cpp	/^int main()$/;"	f
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_05.cpp	/^bool operator!=(const Book &lhs, const Book &rhs)$/;"	f
operator <<	c++_primer\key_Cpp-Primer-master\ch14\ex14_05.cpp	/^std::ostream& operator<<(std::ostream &out, const Book &book)$/;"	f
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_05.cpp	/^bool operator==(const Book &lhs, const Book &rhs)$/;"	f
operator >>	c++_primer\key_Cpp-Primer-master\ch14\ex14_05.cpp	/^std::istream& operator>>(std::istream &in, Book &book)$/;"	f
Book	c++_primer\key_Cpp-Primer-master\ch14\ex14_05.h	/^    Book(std::istream &in) { in >> *this; }$/;"	f	class:Book
Book	c++_primer\key_Cpp-Primer-master\ch14\ex14_05.h	/^    Book(unsigned no, std::string name, std::string author, std::string pubdate):no_(no), name_(name), author_(author), pubdate_(pubdate) { }$/;"	f	class:Book
Book	c++_primer\key_Cpp-Primer-master\ch14\ex14_05.h	/^class Book {$/;"	c
CP5_CH14_EX14_05_H	c++_primer\key_Cpp-Primer-master\ch14\ex14_05.h	2;"	d
author_	c++_primer\key_Cpp-Primer-master\ch14\ex14_05.h	/^    std::string author_;$/;"	m	class:Book
name_	c++_primer\key_Cpp-Primer-master\ch14\ex14_05.h	/^    std::string name_;$/;"	m	class:Book
no_	c++_primer\key_Cpp-Primer-master\ch14\ex14_05.h	/^    unsigned no_;$/;"	m	class:Book
pubdate_	c++_primer\key_Cpp-Primer-master\ch14\ex14_05.h	/^    std::string pubdate_;$/;"	m	class:Book
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_05_TEST.cpp	/^int main()$/;"	f
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.cpp	/^String::String(const String& rhs)$/;"	f	class:String
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.cpp	/^String::String(const char *s)$/;"	f	class:String
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.cpp	/^String::alloc_n_copy(const char *b, const char *e)$/;"	f	class:String
free	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.cpp	/^void String::free()$/;"	f	class:String
operator <<	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.cpp	/^std::ostream& operator<<(std::ostream &os, const String &s)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.cpp	/^String& String::operator = (const String &rhs)$/;"	f	class:String
range_initializer	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.cpp	/^void String::range_initializer(const char *first, const char *last)$/;"	f	class:String
~String	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.cpp	/^String::~String()$/;"	f	class:String
CP5_CH14_EX07_H_	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.h	2;"	d
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.h	/^    String() : String("") {}$/;"	f	class:String
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.h	/^class String$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.h	/^    std::allocator<char> alloc;$/;"	m	class:String
c_str	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.h	/^    const char *c_str() const { return elements; }$/;"	f	class:String
elements	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.h	/^    char *elements;$/;"	m	class:String
end	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.h	/^    char *end;$/;"	m	class:String
length	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.h	/^    size_t length() const { return end - elements - 1; }$/;"	f	class:String
size	c++_primer\key_Cpp-Primer-master\ch14\ex14_07.h	/^    size_t size() const { return end - elements; }$/;"	f	class:String
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_07_TEST.cpp	/^int main()$/;"	f
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.cpp	/^bool operator!=(const Book &lhs, const Book &rhs)$/;"	f
operator +	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.cpp	/^Book operator+(const Book &lhs, const Book &rhs)$/;"	f
operator +=	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.cpp	/^Book& Book::operator+=(const Book &rhs)$/;"	f	class:Book
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.cpp	/^bool operator<(const Book &lhs, const Book &rhs)$/;"	f
operator <<	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.cpp	/^std::ostream& operator<<(std::ostream &out, const Book &book)$/;"	f
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.cpp	/^bool operator==(const Book &lhs, const Book &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.cpp	/^bool operator>(const Book &lhs, const Book &rhs)$/;"	f
operator >>	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.cpp	/^std::istream& operator>>(std::istream &in, Book &book)$/;"	f
Book	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.h	/^    Book(std::istream &in) { in >> *this; }$/;"	f	class:Book
Book	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.h	/^    Book(unsigned no, std::string name, std::string author, std::string pubdate, unsigned number):no_(no), name_(name), author_(author), pubdate_(pubdate), number_(number) { }$/;"	f	class:Book
Book	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.h	/^class Book {$/;"	c
CP5_CH14_EX14_15_H_	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.h	2;"	d
author_	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.h	/^    std::string author_;$/;"	m	class:Book
name_	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.h	/^    std::string name_;$/;"	m	class:Book
no_	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.h	/^    unsigned no_;$/;"	m	class:Book
number_	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.h	/^    unsigned number_;$/;"	m	class:Book
pubdate_	c++_primer\key_Cpp-Primer-master\ch14\ex14_15.h	/^    std::string pubdate_;$/;"	m	class:Book
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_15_TEST.cpp	/^int main()$/;"	f
begin	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.cpp	/^StrBlobPtr StrBlob::begin()$/;"	f	class:StrBlob
cbegin	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.cpp	/^ConstStrBlobPtr StrBlob::cbegin() const$/;"	f	class:StrBlob
cend	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.cpp	/^ConstStrBlobPtr StrBlob::cend() const$/;"	f	class:StrBlob
end	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.cpp	/^StrBlobPtr StrBlob::end()$/;"	f	class:StrBlob
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.cpp	/^bool operator!=(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.cpp	/^bool operator!=(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.cpp	/^bool operator!=(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.cpp	/^StrBlob& StrBlob::operator=(const StrBlob &lhs)$/;"	f	class:StrBlob
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.cpp	/^bool operator==(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.cpp	/^bool operator==(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.cpp	/^bool operator==(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
CP5_STRBLOB_H_	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	15;"	d
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    ConstStrBlobPtr() : curr(0) {}$/;"	f	class:ConstStrBlobPtr
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    ConstStrBlobPtr(const StrBlob &s, size_t sz = 0) : wptr(s.data), curr(sz) {}$/;"	f	class:ConstStrBlobPtr
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^class ConstStrBlobPtr {$/;"	c
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    StrBlob& operator=(StrBlob &&)NOEXCEPT;$/;"	m	class:StrBlob
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	32;"	d
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    StrBlob() : data(make_shared<vector<string>>()) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    StrBlob(const StrBlob &sb) : data(make_shared<vector<string>>(*sb.data)) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    StrBlob(initializer_list<string> il) : data(make_shared<vector<string>>(il)) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^class StrBlob {$/;"	c
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    StrBlobPtr() : curr(0) {}$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    StrBlobPtr(StrBlob &s, size_t sz = 0) : wptr(s.data), curr(sz) {}$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^class StrBlobPtr {$/;"	c
back	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^inline const string& StrBlob::back() const$/;"	f	class:StrBlob
back	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^inline string& StrBlob::back()$/;"	f	class:StrBlob
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^inline shared_ptr<vector<string>> StrBlobPtr::check(size_t i, const string &msg) const$/;"	f	class:StrBlobPtr
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^inline std::shared_ptr<vector<string>> ConstStrBlobPtr::check(size_t i, const string &msg) const$/;"	f	class:ConstStrBlobPtr
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^inline void StrBlob::check(size_type i, const string &msg) const$/;"	f	class:StrBlob
curr	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    size_t curr;$/;"	m	class:ConstStrBlobPtr
curr	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    size_t curr;$/;"	m	class:StrBlobPtr
data	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    shared_ptr<vector<string>> data;$/;"	m	class:StrBlob
deref	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^inline const string& ConstStrBlobPtr::deref() const$/;"	f	class:ConstStrBlobPtr
deref	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^inline string& StrBlobPtr::deref() const$/;"	f	class:StrBlobPtr
empty	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    bool empty() const { return data->empty(); }$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^inline const string& StrBlob::front() const$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^inline string& StrBlob::front()$/;"	f	class:StrBlob
incr	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^inline ConstStrBlobPtr& ConstStrBlobPtr::incr()$/;"	f	class:ConstStrBlobPtr
incr	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^inline StrBlobPtr& StrBlobPtr::incr()$/;"	f	class:StrBlobPtr
move	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    StrBlob(StrBlob &&rhs) NOEXCEPT : data(std::move(rhs.data)) {}$/;"	f	class:StrBlob
pop_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^inline void StrBlob::pop_back()$/;"	f	class:StrBlob
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    void push_back(const string &t) { data->push_back(t); }$/;"	f	class:StrBlob
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    void push_back(string &&s) { data->push_back(std::move(s)); }$/;"	f	class:StrBlob
size	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    size_type size() const { return data->size(); }$/;"	f	class:StrBlob
wptr	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    std::weak_ptr<vector<string>> wptr;$/;"	m	class:ConstStrBlobPtr
wptr	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlob.h	/^    std::weak_ptr<vector<string>> wptr;$/;"	m	class:StrBlobPtr
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrBlobTest.cpp	/^int main()$/;"	f
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.cpp	/^StrVec::StrVec(const StrVec &rhs)$/;"	f	class:StrVec
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.cpp	/^StrVec::alloc_n_copy(const std::string *b, const std::string *e)$/;"	f	class:StrVec
alloc_n_move	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.cpp	/^void StrVec::alloc_n_move(size_t new_cap)$/;"	f	class:StrVec
free	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.cpp	/^void StrVec::free()$/;"	f	class:StrVec
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.cpp	/^int main()$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.cpp	/^StrVec& StrVec::operator = (const StrVec &rhs)$/;"	f	class:StrVec
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.cpp	/^void StrVec::push_back(const std::string &s)$/;"	f	class:StrVec
reallocate	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.cpp	/^void StrVec::reallocate()$/;"	f	class:StrVec
reserve	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.cpp	/^void StrVec::reserve(size_t new_cap)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.cpp	/^void StrVec::resize(size_t count)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.cpp	/^void StrVec::resize(size_t count, const std::string &s)$/;"	f	class:StrVec
~StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.cpp	/^StrVec::~StrVec()$/;"	f	class:StrVec
CP5_STRVEC_H_	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	2;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	/^    StrVec& operator=(StrVec&&)NOEXCEPT;$/;"	m	class:StrVec
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	/^    StrVec(StrVec&&) NOEXCEPT;$/;"	m	class:StrVec
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	11;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	9;"	d
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	/^    StrVec() : elements(nullptr), first_free(nullptr), cap(nullptr) {}$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	/^class StrVec$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	/^    std::allocator<std::string> alloc;$/;"	m	class:StrVec
at	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	/^    const std::string& at(size_t pos) const { return *(elements + pos); }$/;"	f	class:StrVec
at	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	/^    std::string& at(size_t pos) { return *(elements + pos); }$/;"	f	class:StrVec
begin	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	/^    std::string *begin() const { return elements; }$/;"	f	class:StrVec
cap	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	/^    std::string *cap;$/;"	m	class:StrVec
capacity	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:StrVec
chk_n_alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	/^    void chk_n_alloc() { if (size() == capacity()) reallocate(); }$/;"	f	class:StrVec
elements	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	/^    std::string *elements;$/;"	m	class:StrVec
end	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	/^    std::string *end() const { return first_free; }$/;"	f	class:StrVec
first_free	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	/^    std::string *first_free;$/;"	m	class:StrVec
size	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVec.h	/^    size_t size() const { return first_free - elements; }$/;"	f	class:StrVec
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StrVecMain.cpp	/^int main()$/;"	f
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^String::String(const String& rhs)$/;"	f	class:String
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^String::String(const char *s)$/;"	f	class:String
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^String::alloc_n_copy(const char *b, const char *e)$/;"	f	class:String
alloc_n_move	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^void String::alloc_n_move(size_t new_cap)$/;"	f	class:String
cap	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^String::String(String &&s) NOEXCEPT : elements(s.elements), last_elem(s.last_elem), first_free(s.first_free), cap(s.cap)$/;"	f
free	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^void String::free()$/;"	f	class:String
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^bool operator!=(const String &lhs, const String &rhs)$/;"	f
operator <<	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^std::ostream& operator<<(std::ostream &os, const String &lhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^String& String::operator = (const String &rhs)$/;"	f	class:String
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^bool operator==(const String &lhs, const String &rhs)$/;"	f
operator >>	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^std::istream& operator>>(std::istream &is, String &rhs)$/;"	f
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^void String::push_back(const char c)$/;"	f	class:String
range_initializer	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^void String::range_initializer(const char *first, const char *last)$/;"	f	class:String
reallocate	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^void String::reallocate()$/;"	f	class:String
reserve	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^void String::reserve(size_t new_cap)$/;"	f	class:String
resize	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^void String::resize(size_t count)$/;"	f	class:String
resize	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^void String::resize(size_t count, char c)$/;"	f	class:String
~String	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.cpp	/^String::~String()$/;"	f	class:String
CP5_STRING_H__	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	2;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^    String& operator=(String&&)NOEXCEPT;$/;"	m	class:String
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^    String(String &&) NOEXCEPT;$/;"	m	class:String
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	10;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	8;"	d
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^    String() : String("") {}$/;"	f	class:String
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^class String$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^    std::allocator<char> alloc;$/;"	m	class:String
begin	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^    char* begin() const { return elements; }$/;"	f	class:String
c_str	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^    const char *c_str() const { return elements; }$/;"	f	class:String
cap	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^    char *cap;$/;"	m	class:String
capacity	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:String
chk_n_alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^    void chk_n_alloc() { if (first_free == cap) reallocate(); }$/;"	f	class:String
elements	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^    char *elements;$/;"	m	class:String
end	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^    char* end() const { return last_elem; }$/;"	f	class:String
first_free	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^    char *first_free;$/;"	m	class:String
last_elem	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^    char *last_elem;$/;"	m	class:String
length	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^    size_t length() const { return size(); }$/;"	f	class:String
size	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_String.h	/^    size_t size() const { return last_elem - elements; }$/;"	f	class:String
bar	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StringMain.cpp	/^void bar(const String& x)$/;"	f
baz	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StringMain.cpp	/^String baz()$/;"	f
foo	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StringMain.cpp	/^void foo(String x)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_16_StringMain.cpp	/^int main()$/;"	f
begin	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^StrBlobPtr StrBlob::begin()$/;"	f	class:StrBlob
cbegin	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^ConstStrBlobPtr StrBlob::cbegin() const$/;"	f	class:StrBlob
cend	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^ConstStrBlobPtr StrBlob::cend() const$/;"	f	class:StrBlob
end	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^StrBlobPtr StrBlob::end()$/;"	f	class:StrBlob
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator!=(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator!=(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator!=(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator< (const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator< (const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator< (const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator<=(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator<=(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator<=(const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^StrBlob& StrBlob::operator=(const StrBlob &lhs)$/;"	f	class:StrBlob
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator==(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator==(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator==(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator> (const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator>(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator>(const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator>=(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator>=(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.cpp	/^bool operator>=(const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
CP5_STRBLOB_H_	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	15;"	d
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    ConstStrBlobPtr() : curr(0) {}$/;"	f	class:ConstStrBlobPtr
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    ConstStrBlobPtr(const StrBlob &s, size_t sz = 0) : wptr(s.data), curr(sz) {}$/;"	f	class:ConstStrBlobPtr
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^class ConstStrBlobPtr {$/;"	c
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    StrBlob& operator=(StrBlob &&)NOEXCEPT;$/;"	m	class:StrBlob
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	32;"	d
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    StrBlob() : data(make_shared<vector<string>>()) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    StrBlob(const StrBlob &sb) : data(make_shared<vector<string>>(*sb.data)) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    StrBlob(initializer_list<string> il) : data(make_shared<vector<string>>(il)) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^class StrBlob {$/;"	c
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    StrBlobPtr() : curr(0) {}$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    StrBlobPtr(StrBlob &s, size_t sz = 0) : wptr(s.data), curr(sz) {}$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^class StrBlobPtr {$/;"	c
back	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^inline const string& StrBlob::back() const$/;"	f	class:StrBlob
back	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^inline string& StrBlob::back()$/;"	f	class:StrBlob
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^inline shared_ptr<vector<string>> StrBlobPtr::check(size_t i, const string &msg) const$/;"	f	class:StrBlobPtr
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^inline std::shared_ptr<vector<string>> ConstStrBlobPtr::check(size_t i, const string &msg) const$/;"	f	class:ConstStrBlobPtr
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^inline void StrBlob::check(size_type i, const string &msg) const$/;"	f	class:StrBlob
curr	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    size_t curr;$/;"	m	class:ConstStrBlobPtr
curr	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    size_t curr;$/;"	m	class:StrBlobPtr
data	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    shared_ptr<vector<string>> data;$/;"	m	class:StrBlob
deref	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^inline const string& ConstStrBlobPtr::deref() const$/;"	f	class:ConstStrBlobPtr
deref	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^inline string& StrBlobPtr::deref() const$/;"	f	class:StrBlobPtr
empty	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    bool empty() const { return data->empty(); }$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^inline const string& StrBlob::front() const$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^inline string& StrBlob::front()$/;"	f	class:StrBlob
incr	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^inline ConstStrBlobPtr& ConstStrBlobPtr::incr()$/;"	f	class:ConstStrBlobPtr
incr	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^inline StrBlobPtr& StrBlobPtr::incr()$/;"	f	class:StrBlobPtr
move	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    StrBlob(StrBlob &&rhs) NOEXCEPT : data(std::move(rhs.data)) {}$/;"	f	class:StrBlob
pop_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^inline void StrBlob::pop_back()$/;"	f	class:StrBlob
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    void push_back(const string &t) { data->push_back(t); }$/;"	f	class:StrBlob
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    void push_back(string &&s) { data->push_back(std::move(s)); }$/;"	f	class:StrBlob
size	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    size_type size() const { return data->size(); }$/;"	f	class:StrBlob
wptr	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    std::weak_ptr<vector<string>> wptr;$/;"	m	class:ConstStrBlobPtr
wptr	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlob.h	/^    std::weak_ptr<vector<string>> wptr;$/;"	m	class:StrBlobPtr
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrBlobTest.cpp	/^int main()$/;"	f
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^StrVec::StrVec(const StrVec &rhs)$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^StrVec::StrVec(std::initializer_list<std::string> il)$/;"	f	class:StrVec
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^StrVec::alloc_n_copy(const std::string *b, const std::string *e)$/;"	f	class:StrVec
alloc_n_move	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^void StrVec::alloc_n_move(size_t new_cap)$/;"	f	class:StrVec
cap	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^StrVec::StrVec(StrVec &&s) NOEXCEPT : elements(s.elements), first_free(s.first_free), cap(s.cap)$/;"	f
free	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^void StrVec::free()$/;"	f	class:StrVec
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^bool operator!=(const StrVec &lhs, const StrVec &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^bool operator<(const StrVec &lhs, const StrVec &rhs)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^bool operator<=(const StrVec &lhs, const StrVec &rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^StrVec& StrVec::operator = (const StrVec &rhs)$/;"	f	class:StrVec
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^bool operator==(const StrVec &lhs, const StrVec &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^bool operator>(const StrVec &lhs, const StrVec &rhs)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^bool operator>=(const StrVec &lhs, const StrVec &rhs)$/;"	f
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^void StrVec::push_back(const std::string &s)$/;"	f	class:StrVec
range_initialize	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^void StrVec::range_initialize(const std::string *first, const std::string *last)$/;"	f	class:StrVec
reallocate	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^void StrVec::reallocate()$/;"	f	class:StrVec
reserve	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^void StrVec::reserve(size_t new_cap)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^void StrVec::resize(size_t count)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^void StrVec::resize(size_t count, const std::string &s)$/;"	f	class:StrVec
~StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.cpp	/^StrVec::~StrVec()$/;"	f	class:StrVec
CP5_STRVEC_H_	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	2;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	/^    StrVec& operator=(StrVec&&)NOEXCEPT;$/;"	m	class:StrVec
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	/^    StrVec(StrVec&&) NOEXCEPT;$/;"	m	class:StrVec
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	11;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	9;"	d
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	/^    StrVec() : elements(nullptr), first_free(nullptr), cap(nullptr) {}$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	/^class StrVec$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	/^    std::allocator<std::string> alloc;$/;"	m	class:StrVec
at	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	/^    const std::string& at(size_t pos) const { return *(elements + pos); }$/;"	f	class:StrVec
at	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	/^    std::string& at(size_t pos) { return *(elements + pos); }$/;"	f	class:StrVec
begin	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	/^    std::string *begin() const { return elements; }$/;"	f	class:StrVec
cap	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	/^    std::string *cap;$/;"	m	class:StrVec
capacity	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:StrVec
chk_n_alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	/^    void chk_n_alloc() { if (size() == capacity()) reallocate(); }$/;"	f	class:StrVec
elements	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	/^    std::string *elements;$/;"	m	class:StrVec
end	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	/^    std::string *end() const { return first_free; }$/;"	f	class:StrVec
first_free	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	/^    std::string *first_free;$/;"	m	class:StrVec
size	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVec.h	/^    size_t size() const { return first_free - elements; }$/;"	f	class:StrVec
CP5_STRVEC_H_	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	2;"	d	file:
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	/^    StrVec& operator=(StrVec&&)NOEXCEPT;$/;"	m	class:StrVec	file:
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	/^    StrVec(StrVec&&) NOEXCEPT;$/;"	m	class:StrVec	file:
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	11;"	d	file:
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	9;"	d	file:
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	/^    StrVec() : elements(nullptr), first_free(nullptr), cap(nullptr) {}$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	/^class StrVec$/;"	c	file:
alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	/^    std::allocator<std::string> alloc;$/;"	m	class:StrVec	file:
at	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	/^    const std::string& at(size_t pos) const { return *(elements + pos); }$/;"	f	class:StrVec
at	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	/^    std::string& at(size_t pos) { return *(elements + pos); }$/;"	f	class:StrVec
begin	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	/^    std::string *begin() const { return elements; }$/;"	f	class:StrVec
cap	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	/^    std::string *cap;$/;"	m	class:StrVec	file:
capacity	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:StrVec
chk_n_alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	/^    void chk_n_alloc() { if (size() == capacity()) reallocate(); }$/;"	f	class:StrVec	file:
elements	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	/^    std::string *elements;$/;"	m	class:StrVec	file:
end	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	/^    std::string *end() const { return first_free; }$/;"	f	class:StrVec
first_free	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	/^    std::string *first_free;$/;"	m	class:StrVec	file:
size	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StrVecMain.cpp	/^    size_t size() const { return first_free - elements; }$/;"	f	class:StrVec
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^String::String(const String& rhs)$/;"	f	class:String
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^String::String(const char *s)$/;"	f	class:String
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^String::alloc_n_copy(const char *b, const char *e)$/;"	f	class:String
alloc_n_move	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^void String::alloc_n_move(size_t new_cap)$/;"	f	class:String
cap	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^String::String(String &&s) NOEXCEPT : elements(s.elements), last_elem(s.last_elem), first_free(s.first_free), cap(s.cap)$/;"	f
free	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^void String::free()$/;"	f	class:String
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^bool operator!=(const String &lhs, const String &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^bool operator<(const String &lhs, const String &rhs)$/;"	f
operator <<	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^std::ostream& operator<<(std::ostream &os, const String &lhs)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^bool operator<=(const String &lhs, const String &rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^String& String::operator = (const String &rhs)$/;"	f	class:String
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^bool operator==(const String &lhs, const String &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^bool operator>(const String &lhs, const String &rhs)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^bool operator>=(const String &lhs, const String &rhs)$/;"	f
operator >>	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^std::istream& operator>>(std::istream &is, String &rhs)$/;"	f
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^void String::push_back(const char c)$/;"	f	class:String
range_initializer	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^void String::range_initializer(const char *first, const char *last)$/;"	f	class:String
reallocate	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^void String::reallocate()$/;"	f	class:String
reserve	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^void String::reserve(size_t new_cap)$/;"	f	class:String
resize	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^void String::resize(size_t count)$/;"	f	class:String
resize	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^void String::resize(size_t count, char c)$/;"	f	class:String
~String	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.cpp	/^String::~String()$/;"	f	class:String
CP5_STRING_H__	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	2;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^    String& operator=(String&&)NOEXCEPT;$/;"	m	class:String
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^    String(String &&) NOEXCEPT;$/;"	m	class:String
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	10;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	8;"	d
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^    String() : String("") {}$/;"	f	class:String
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^class String$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^    std::allocator<char> alloc;$/;"	m	class:String
begin	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^    char* begin() const { return elements; }$/;"	f	class:String
c_str	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^    const char *c_str() const { return elements; }$/;"	f	class:String
cap	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^    char *cap;$/;"	m	class:String
capacity	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:String
chk_n_alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^    void chk_n_alloc() { if (first_free == cap) reallocate(); }$/;"	f	class:String
elements	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^    char *elements;$/;"	m	class:String
end	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^    char* end() const { return last_elem; }$/;"	f	class:String
first_free	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^    char *first_free;$/;"	m	class:String
last_elem	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^    char *last_elem;$/;"	m	class:String
length	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^    size_t length() const { return size(); }$/;"	f	class:String
size	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_String.h	/^    size_t size() const { return last_elem - elements; }$/;"	f	class:String
bar	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StringMain.cpp	/^void bar(const String& x)$/;"	f
baz	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StringMain.cpp	/^String baz()$/;"	f
foo	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StringMain.cpp	/^void foo(String x)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_18_StringMain.cpp	/^int main()$/;"	f
Sales_data	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.cpp	/^Sales_data::Sales_data(std::istream &is) : Sales_data()$/;"	f	class:Sales_data
operator +	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.cpp	/^Sales_data operator+(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator +=	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.cpp	/^Sales_data& Sales_data::operator+=(const Sales_data &rhs)$/;"	f	class:Sales_data
operator <<	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.cpp	/^std::ostream& operator<<(std::ostream &os, const Sales_data &item)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.cpp	/^Sales_data& Sales_data::operator=(const std::string &isbn)$/;"	f	class:Sales_data
operator >>	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.cpp	/^std::istream& operator>>(std::istream &is, Sales_data &item)$/;"	f
CP5_ex14_22_h	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.h	15;"	d
Sales_data	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.h	/^    Sales_data() : Sales_data("", 0, 0.0f){}$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.h	/^    Sales_data(const std::string &s) : Sales_data(s, 0, 0.0f){}$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.h	/^    Sales_data(const std::string &s, unsigned n, double p):bookNo(s),units_sold(n),revenue(n*p){}$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.h	/^class Sales_data {$/;"	c
avg_price	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.h	/^inline double Sales_data::avg_price() const$/;"	f	class:Sales_data
bookNo	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.h	/^    std::string bookNo;$/;"	m	class:Sales_data
isbn	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.h	/^    std::string isbn() const { return bookNo; }$/;"	f	class:Sales_data
revenue	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.h	/^    double revenue = 0.0;$/;"	m	class:Sales_data
units_sold	c++_primer\key_Cpp-Primer-master\ch14\ex14_22.h	/^    unsigned units_sold = 0;$/;"	m	class:Sales_data
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_22_TEST.cpp	/^int main()$/;"	f
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^StrVec::StrVec(const StrVec &rhs)$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^StrVec::StrVec(std::initializer_list<std::string> il)$/;"	f	class:StrVec
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^StrVec::alloc_n_copy(const std::string *b, const std::string *e)$/;"	f	class:StrVec
alloc_n_move	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^void StrVec::alloc_n_move(size_t new_cap)$/;"	f	class:StrVec
cap	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^StrVec::StrVec(StrVec &&s) NOEXCEPT : elements(s.elements), first_free(s.first_free), cap(s.cap)$/;"	f
free	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^void StrVec::free()$/;"	f	class:StrVec
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^bool operator!=(const StrVec &lhs, const StrVec &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^bool operator<(const StrVec &lhs, const StrVec &rhs)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^bool operator<=(const StrVec &lhs, const StrVec &rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^StrVec& StrVec::operator = (const StrVec &rhs)$/;"	f	class:StrVec
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^StrVec& StrVec::operator=(std::initializer_list<std::string> il)$/;"	f	class:StrVec
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^bool operator==(const StrVec &lhs, const StrVec &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^bool operator>(const StrVec &lhs, const StrVec &rhs)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^bool operator>=(const StrVec &lhs, const StrVec &rhs)$/;"	f
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^void StrVec::push_back(const std::string &s)$/;"	f	class:StrVec
range_initialize	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^void StrVec::range_initialize(const std::string *first, const std::string *last)$/;"	f	class:StrVec
reallocate	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^void StrVec::reallocate()$/;"	f	class:StrVec
reserve	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^void StrVec::reserve(size_t new_cap)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^void StrVec::resize(size_t count)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^void StrVec::resize(size_t count, const std::string &s)$/;"	f	class:StrVec
~StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.cpp	/^StrVec::~StrVec()$/;"	f	class:StrVec
CP5_STRVEC_H_	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	2;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	/^    StrVec& operator=(StrVec&&)NOEXCEPT;$/;"	m	class:StrVec
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	/^    StrVec(StrVec&&) NOEXCEPT;$/;"	m	class:StrVec
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	11;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	9;"	d
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	/^    StrVec() : elements(nullptr), first_free(nullptr), cap(nullptr) {}$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	/^class StrVec$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	/^    std::allocator<std::string> alloc;$/;"	m	class:StrVec
at	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	/^    const std::string& at(size_t pos) const { return *(elements + pos); }$/;"	f	class:StrVec
at	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	/^    std::string& at(size_t pos) { return *(elements + pos); }$/;"	f	class:StrVec
begin	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	/^    std::string *begin() const { return elements; }$/;"	f	class:StrVec
cap	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	/^    std::string *cap;$/;"	m	class:StrVec
capacity	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:StrVec
chk_n_alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	/^    void chk_n_alloc() { if (size() == capacity()) reallocate(); }$/;"	f	class:StrVec
elements	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	/^    std::string *elements;$/;"	m	class:StrVec
end	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	/^    std::string *end() const { return first_free; }$/;"	f	class:StrVec
first_free	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	/^    std::string *first_free;$/;"	m	class:StrVec
size	c++_primer\key_Cpp-Primer-master\ch14\ex14_23.h	/^    size_t size() const { return first_free - elements; }$/;"	f	class:StrVec
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_23_TEST.cpp	/^int main()$/;"	f
Date	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^Date::Date(Size days)$/;"	f	class:Date
Date	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^Date::Date(const Date &d) :$/;"	f	class:Date
Date	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^Date::Date(std::istream &is, std::ostream &os)$/;"	f	class:Date
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^bool operator !=(const Date &lhs, const Date &rhs)$/;"	f
operator +	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^Date operator + (const Date &lhs, Date::Size rhs)$/;"	f
operator +=	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^Date &Date::operator +=(Date::Size offset)$/;"	f	class:Date
operator -	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^Date operator - (const Date &lhs, Date::Size rhs)$/;"	f
operator -	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^int operator -(const Date &lhs, const Date &rhs)$/;"	f
operator -=	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^Date &Date::operator -=(Date::Size offset)$/;"	f	class:Date
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^bool operator < (const Date &lhs, const Date &rhs)$/;"	f
operator <<	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^operator <<(std::ostream& os, const Date& d)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^bool operator <=(const Date &lhs, const Date &rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^Date &Date::operator= (const Date &d)$/;"	f	class:Date
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^bool operator ==(const Date &lhs, const Date &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^bool operator >(const Date &lhs, const Date &rhs)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^bool operator >=(const Date &lhs, const Date &rhs)$/;"	f
operator >>	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^operator >>(std::istream& is, Date& d)$/;"	f
toDays	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^Date::Size Date::toDays() const$/;"	f	class:Date
year	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.cpp	/^    day(d.day), month(d.month), year(d.year)$/;"	f
DATE_H	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	50;"	d
Date	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^    Date(Size d, Size m, Size y) : day(d), month(m), year(y) { }$/;"	f	class:Date
Date	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^class Date$/;"	c
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^    Date& operator= (Date&& rhs) NOEXCEPT;$/;"	m	class:Date
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^    Date(Date&& d) NOEXCEPT;$/;"	m	class:Date
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	53;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	55;"	d
Size	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^    typedef std::size_t Size;$/;"	t	class:Date
YtoD_1	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^static const Date::Size YtoD_1   =    365;    \/\/365$/;"	v
YtoD_100	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^static const Date::Size YtoD_100 =  36524;    \/\/365*100 + 100\/4 -1 ==  36524$/;"	v
YtoD_4	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^static const Date::Size YtoD_4   =   1461;    \/\/365*4 + 1          ==   1461$/;"	v
YtoD_400	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^static const Date::Size YtoD_400 = 146097;    \/\/365*400 + 400\/4 -3 == 146097$/;"	v
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^ check(const Date &d)$/;"	f
day	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^    Size    day = 1;$/;"	m	class:Date
isLeapYear	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^ isLeapYear(Date::Size y)$/;"	f
month	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^    Size    month = 1;$/;"	m	class:Date
monthsVec_l	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^static const std::vector<Date::Size> monthsVec_l =$/;"	v
monthsVec_n	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^static const std::vector<Date::Size> monthsVec_n =$/;"	v
year	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^    Size    year = 0;$/;"	m	class:Date
~Date	c++_primer\key_Cpp-Primer-master\ch14\ex14_24.h	/^    ~Date(){ std::cout << "destroying\\n"; }$/;"	f	class:Date
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_24_TEST.cpp	/^int main()$/;"	f
begin	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^StrBlobPtr StrBlob::begin()$/;"	f	class:StrBlob
cbegin	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^ConstStrBlobPtr StrBlob::cbegin() const$/;"	f	class:StrBlob
cend	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^ConstStrBlobPtr StrBlob::cend() const$/;"	f	class:StrBlob
end	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^StrBlobPtr StrBlob::end()$/;"	f	class:StrBlob
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator!=(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator!=(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator!=(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator< (const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator< (const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator< (const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator<=(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator<=(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator<=(const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^StrBlob& StrBlob::operator=(const StrBlob &lhs)$/;"	f	class:StrBlob
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator==(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator==(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator==(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator> (const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator>(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator>(const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator>=(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator>=(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.cpp	/^bool operator>=(const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
CP5_STRBLOB_H_	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	15;"	d
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    ConstStrBlobPtr() : curr(0) {}$/;"	f	class:ConstStrBlobPtr
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    ConstStrBlobPtr(const StrBlob &s, size_t sz = 0) : wptr(s.data), curr(sz) {}$/;"	f	class:ConstStrBlobPtr
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^class ConstStrBlobPtr {$/;"	c
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    StrBlob& operator=(StrBlob &&)NOEXCEPT;$/;"	m	class:StrBlob
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	32;"	d
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    StrBlob() : data(make_shared<vector<string>>()) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    StrBlob(const StrBlob &sb) : data(make_shared<vector<string>>(*sb.data)) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    StrBlob(initializer_list<string> il) : data(make_shared<vector<string>>(il)) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^class StrBlob {$/;"	c
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    StrBlobPtr() : curr(0) {}$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    StrBlobPtr(StrBlob &s, size_t sz = 0) : wptr(s.data), curr(sz) {}$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^class StrBlobPtr {$/;"	c
back	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline const string& StrBlob::back() const$/;"	f	class:StrBlob
back	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline string& StrBlob::back()$/;"	f	class:StrBlob
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline shared_ptr<vector<string>> StrBlobPtr::check(size_t i, const string &msg) const$/;"	f	class:StrBlobPtr
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline std::shared_ptr<vector<string>> ConstStrBlobPtr::check(size_t i, const string &msg) const$/;"	f	class:ConstStrBlobPtr
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline void StrBlob::check(size_type i, const string &msg) const$/;"	f	class:StrBlob
curr	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    size_t curr;$/;"	m	class:ConstStrBlobPtr
curr	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    size_t curr;$/;"	m	class:StrBlobPtr
data	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    shared_ptr<vector<string>> data;$/;"	m	class:StrBlob
deref	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline const string& ConstStrBlobPtr::deref() const$/;"	f	class:ConstStrBlobPtr
deref	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline string& StrBlobPtr::deref() const$/;"	f	class:StrBlobPtr
empty	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    bool empty() const { return data->empty(); }$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline const string& StrBlob::front() const$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline string& StrBlob::front()$/;"	f	class:StrBlob
incr	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline ConstStrBlobPtr& ConstStrBlobPtr::incr()$/;"	f	class:ConstStrBlobPtr
incr	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline StrBlobPtr& StrBlobPtr::incr()$/;"	f	class:StrBlobPtr
move	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    StrBlob(StrBlob &&rhs) NOEXCEPT : data(std::move(rhs.data)) {}$/;"	f	class:StrBlob
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline const string& ConstStrBlobPtr::operator[](size_t n) const$/;"	f	class:ConstStrBlobPtr
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline const string& StrBlob::operator[](size_t n) const$/;"	f	class:StrBlob
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline const string& StrBlobPtr::operator[](size_t n) const$/;"	f	class:StrBlobPtr
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline string& StrBlob::operator[](size_t n)$/;"	f	class:StrBlob
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline string& StrBlobPtr::operator[](size_t n)$/;"	f	class:StrBlobPtr
pop_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^inline void StrBlob::pop_back()$/;"	f	class:StrBlob
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    void push_back(const string &t) { data->push_back(t); }$/;"	f	class:StrBlob
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    void push_back(string &&s) { data->push_back(std::move(s)); }$/;"	f	class:StrBlob
size	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    size_type size() const { return data->size(); }$/;"	f	class:StrBlob
wptr	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    std::weak_ptr<vector<string>> wptr;$/;"	m	class:ConstStrBlobPtr
wptr	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlob.h	/^    std::weak_ptr<vector<string>> wptr;$/;"	m	class:StrBlobPtr
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrBlobTest.cpp	/^int main()$/;"	f
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^StrVec::StrVec(const StrVec &rhs)$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^StrVec::StrVec(std::initializer_list<std::string> il)$/;"	f	class:StrVec
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^StrVec::alloc_n_copy(const std::string *b, const std::string *e)$/;"	f	class:StrVec
alloc_n_move	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^void StrVec::alloc_n_move(size_t new_cap)$/;"	f	class:StrVec
cap	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^StrVec::StrVec(StrVec &&s) NOEXCEPT : elements(s.elements), first_free(s.first_free), cap(s.cap)$/;"	f
free	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^void StrVec::free()$/;"	f	class:StrVec
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^bool operator!=(const StrVec &lhs, const StrVec &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^bool operator<(const StrVec &lhs, const StrVec &rhs)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^bool operator<=(const StrVec &lhs, const StrVec &rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^StrVec& StrVec::operator = (const StrVec &rhs)$/;"	f	class:StrVec
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^bool operator==(const StrVec &lhs, const StrVec &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^bool operator>(const StrVec &lhs, const StrVec &rhs)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^bool operator>=(const StrVec &lhs, const StrVec &rhs)$/;"	f
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^void StrVec::push_back(const std::string &s)$/;"	f	class:StrVec
range_initialize	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^void StrVec::range_initialize(const std::string *first, const std::string *last)$/;"	f	class:StrVec
reallocate	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^void StrVec::reallocate()$/;"	f	class:StrVec
reserve	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^void StrVec::reserve(size_t new_cap)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^void StrVec::resize(size_t count)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^void StrVec::resize(size_t count, const std::string &s)$/;"	f	class:StrVec
~StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.cpp	/^StrVec::~StrVec()$/;"	f	class:StrVec
CP5_STRVEC_H_	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	2;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    StrVec& operator=(StrVec&&)NOEXCEPT;$/;"	m	class:StrVec
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    StrVec(StrVec&&) NOEXCEPT;$/;"	m	class:StrVec
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	11;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	9;"	d
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    StrVec() : elements(nullptr), first_free(nullptr), cap(nullptr) {}$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^class StrVec$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    std::allocator<std::string> alloc;$/;"	m	class:StrVec
at	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    const std::string& at(size_t pos) const { return *(elements + pos); }$/;"	f	class:StrVec
at	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    std::string& at(size_t pos) { return *(elements + pos); }$/;"	f	class:StrVec
begin	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    std::string *begin() const { return elements; }$/;"	f	class:StrVec
cap	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    std::string *cap;$/;"	m	class:StrVec
capacity	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:StrVec
chk_n_alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    void chk_n_alloc() { if (size() == capacity()) reallocate(); }$/;"	f	class:StrVec
elements	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    std::string *elements;$/;"	m	class:StrVec
end	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    std::string *end() const { return first_free; }$/;"	f	class:StrVec
first_free	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    std::string *first_free;$/;"	m	class:StrVec
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    const std::string& operator[](size_t n) const { return elements[n]; }$/;"	f	class:StrVec
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    std::string& operator[](size_t n) { return elements[n]; }$/;"	f	class:StrVec
size	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVec.h	/^    size_t size() const { return first_free - elements; }$/;"	f	class:StrVec
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StrVecMain.cpp	/^int main()$/;"	f
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^String::String(const String& rhs)$/;"	f	class:String
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^String::String(const char *s)$/;"	f	class:String
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^String::alloc_n_copy(const char *b, const char *e)$/;"	f	class:String
alloc_n_move	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^void String::alloc_n_move(size_t new_cap)$/;"	f	class:String
cap	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^String::String(String &&s) NOEXCEPT : elements(s.elements), last_elem(s.last_elem), first_free(s.first_free), cap(s.cap)$/;"	f
free	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^void String::free()$/;"	f	class:String
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^bool operator!=(const String &lhs, const String &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^bool operator<(const String &lhs, const String &rhs)$/;"	f
operator <<	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^std::ostream& operator<<(std::ostream &os, const String &lhs)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^bool operator<=(const String &lhs, const String &rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^String& String::operator = (const String &rhs)$/;"	f	class:String
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^bool operator==(const String &lhs, const String &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^bool operator>(const String &lhs, const String &rhs)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^bool operator>=(const String &lhs, const String &rhs)$/;"	f
operator >>	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^std::istream& operator>>(std::istream &is, String &rhs)$/;"	f
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^void String::push_back(const char c)$/;"	f	class:String
range_initializer	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^void String::range_initializer(const char *first, const char *last)$/;"	f	class:String
reallocate	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^void String::reallocate()$/;"	f	class:String
reserve	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^void String::reserve(size_t new_cap)$/;"	f	class:String
resize	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^void String::resize(size_t count)$/;"	f	class:String
resize	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^void String::resize(size_t count, char c)$/;"	f	class:String
~String	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.cpp	/^String::~String()$/;"	f	class:String
CP5_STRING_H__	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	2;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    String& operator=(String&&)NOEXCEPT;$/;"	m	class:String
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    String(String &&) NOEXCEPT;$/;"	m	class:String
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	10;"	d
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	8;"	d
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    String() : String("") {}$/;"	f	class:String
String	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^class String$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    std::allocator<char> alloc;$/;"	m	class:String
begin	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    char* begin() const { return elements; }$/;"	f	class:String
c_str	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    const char *c_str() const { return elements; }$/;"	f	class:String
cap	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    char *cap;$/;"	m	class:String
capacity	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:String
chk_n_alloc	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    void chk_n_alloc() { if (first_free == cap) reallocate(); }$/;"	f	class:String
elements	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    char *elements;$/;"	m	class:String
end	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    char* end() const { return last_elem; }$/;"	f	class:String
first_free	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    char *first_free;$/;"	m	class:String
last_elem	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    char *last_elem;$/;"	m	class:String
length	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    size_t length() const { return size(); }$/;"	f	class:String
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    char& operator[](size_t n) { return elements[n]; }$/;"	f	class:String
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    const char& operator[](size_t n) const { return elements[n]; }$/;"	f	class:String
size	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_String.h	/^    size_t size() const { return last_elem - elements; }$/;"	f	class:String
bar	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StringMain.cpp	/^void bar(const String& x)$/;"	f
baz	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StringMain.cpp	/^String baz()$/;"	f
foo	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StringMain.cpp	/^void foo(String x)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_26_StringMain.cpp	/^int main()$/;"	f
begin	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^StrBlobPtr StrBlob::begin()$/;"	f	class:StrBlob
cbegin	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^ConstStrBlobPtr StrBlob::cbegin() const$/;"	f	class:StrBlob
cend	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^ConstStrBlobPtr StrBlob::cend() const$/;"	f	class:StrBlob
end	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^StrBlobPtr StrBlob::end()$/;"	f	class:StrBlob
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator!=(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator!=(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator!=(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator< (const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator< (const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator< (const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator<=(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator<=(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator<=(const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^StrBlob& StrBlob::operator=(const StrBlob &lhs)$/;"	f	class:StrBlob
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator==(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator==(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator==(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator> (const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator>(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator>(const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator>=(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator>=(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.cpp	/^bool operator>=(const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
CP5_STRBLOB_H_	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	15;"	d
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    ConstStrBlobPtr() : curr(0) {}$/;"	f	class:ConstStrBlobPtr
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    ConstStrBlobPtr(const StrBlob &s, size_t sz = 0) : wptr(s.data), curr(sz) {}$/;"	f	class:ConstStrBlobPtr
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^class ConstStrBlobPtr {$/;"	c
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    StrBlob& operator=(StrBlob &&)NOEXCEPT;$/;"	m	class:StrBlob
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	32;"	d
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    StrBlob() : data(make_shared<vector<string>>()) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    StrBlob(const StrBlob &sb) : data(make_shared<vector<string>>(*sb.data)) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    StrBlob(initializer_list<string> il) : data(make_shared<vector<string>>(il)) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^class StrBlob {$/;"	c
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    StrBlobPtr() : curr(0) {}$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    StrBlobPtr(StrBlob &s, size_t sz = 0) : wptr(s.data), curr(sz) {}$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^class StrBlobPtr {$/;"	c
back	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline const string& StrBlob::back() const$/;"	f	class:StrBlob
back	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline string& StrBlob::back()$/;"	f	class:StrBlob
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline shared_ptr<vector<string>> StrBlobPtr::check(size_t i, const string &msg) const$/;"	f	class:StrBlobPtr
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline std::shared_ptr<vector<string>> ConstStrBlobPtr::check(size_t i, const string &msg) const$/;"	f	class:ConstStrBlobPtr
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline void StrBlob::check(size_type i, const string &msg) const$/;"	f	class:StrBlob
curr	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    size_t curr;$/;"	m	class:ConstStrBlobPtr
curr	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    size_t curr;$/;"	m	class:StrBlobPtr
data	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    shared_ptr<vector<string>> data;$/;"	m	class:StrBlob
deref	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline const string& ConstStrBlobPtr::deref() const$/;"	f	class:ConstStrBlobPtr
deref	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline string& StrBlobPtr::deref() const$/;"	f	class:StrBlobPtr
empty	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    bool empty() const { return data->empty(); }$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline const string& StrBlob::front() const$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline string& StrBlob::front()$/;"	f	class:StrBlob
move	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    StrBlob(StrBlob &&rhs) NOEXCEPT : data(std::move(rhs.data)) {}$/;"	f	class:StrBlob
operator +	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline ConstStrBlobPtr ConstStrBlobPtr::operator+(size_t n) const$/;"	f	class:ConstStrBlobPtr
operator +	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline StrBlobPtr StrBlobPtr::operator+(size_t n) const$/;"	f	class:StrBlobPtr
operator ++	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline ConstStrBlobPtr ConstStrBlobPtr::operator++(int)$/;"	f	class:ConstStrBlobPtr
operator ++	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline ConstStrBlobPtr& ConstStrBlobPtr::operator++()$/;"	f	class:ConstStrBlobPtr
operator ++	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline StrBlobPtr StrBlobPtr::operator++(int)$/;"	f	class:StrBlobPtr
operator ++	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline StrBlobPtr& StrBlobPtr::operator++()$/;"	f	class:StrBlobPtr
operator +=	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline ConstStrBlobPtr& ConstStrBlobPtr::operator+=(size_t n)$/;"	f	class:ConstStrBlobPtr
operator +=	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline StrBlobPtr& StrBlobPtr::operator+=(size_t n)$/;"	f	class:StrBlobPtr
operator -	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline ConstStrBlobPtr ConstStrBlobPtr::operator-(size_t n) const$/;"	f	class:ConstStrBlobPtr
operator -	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline StrBlobPtr StrBlobPtr::operator-(size_t n) const$/;"	f	class:StrBlobPtr
operator --	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline ConstStrBlobPtr ConstStrBlobPtr::operator--(int)$/;"	f	class:ConstStrBlobPtr
operator --	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline ConstStrBlobPtr& ConstStrBlobPtr::operator--()$/;"	f	class:ConstStrBlobPtr
operator --	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline StrBlobPtr StrBlobPtr::operator--(int)$/;"	f	class:StrBlobPtr
operator --	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline StrBlobPtr& StrBlobPtr::operator--()$/;"	f	class:StrBlobPtr
operator -=	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline ConstStrBlobPtr& ConstStrBlobPtr::operator-=(size_t n)$/;"	f	class:ConstStrBlobPtr
operator -=	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline StrBlobPtr& StrBlobPtr::operator-=(size_t n)$/;"	f	class:StrBlobPtr
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline const string& ConstStrBlobPtr::operator[](size_t n) const$/;"	f	class:ConstStrBlobPtr
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline const string& StrBlob::operator[](size_t n) const$/;"	f	class:StrBlob
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline const string& StrBlobPtr::operator[](size_t n) const$/;"	f	class:StrBlobPtr
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline string& StrBlob::operator[](size_t n)$/;"	f	class:StrBlob
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline string& StrBlobPtr::operator[](size_t n)$/;"	f	class:StrBlobPtr
pop_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^inline void StrBlob::pop_back()$/;"	f	class:StrBlob
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    void push_back(const string &t) { data->push_back(t); }$/;"	f	class:StrBlob
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    void push_back(string &&s) { data->push_back(std::move(s)); }$/;"	f	class:StrBlob
size	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    size_type size() const { return data->size(); }$/;"	f	class:StrBlob
wptr	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    std::weak_ptr<vector<string>> wptr;$/;"	m	class:ConstStrBlobPtr
wptr	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlob.h	/^    std::weak_ptr<vector<string>> wptr;$/;"	m	class:StrBlobPtr
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_27_28_StrBlobTest.cpp	/^int main()$/;"	f
begin	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^StrBlobPtr StrBlob::begin()$/;"	f	class:StrBlob
cbegin	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^ConstStrBlobPtr StrBlob::cbegin() const$/;"	f	class:StrBlob
cend	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^ConstStrBlobPtr StrBlob::cend() const$/;"	f	class:StrBlob
end	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^StrBlobPtr StrBlob::end()$/;"	f	class:StrBlob
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator!=(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator!=(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator!=(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator< (const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator< (const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator< (const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator<=(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator<=(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator<=(const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^StrBlob& StrBlob::operator=(const StrBlob &lhs)$/;"	f	class:StrBlob
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator==(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator==(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator==(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator> (const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator>(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator>(const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator>=(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator>=(const StrBlob &lhs, const StrBlob &rhs)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.cpp	/^bool operator>=(const StrBlobPtr &x, const StrBlobPtr &y)$/;"	f
CP5_STRBLOB_H_	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	15;"	d
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    ConstStrBlobPtr() : curr(0) {}$/;"	f	class:ConstStrBlobPtr
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    ConstStrBlobPtr(const StrBlob &s, size_t sz = 0) : wptr(s.data), curr(sz) {}$/;"	f	class:ConstStrBlobPtr
ConstStrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^class ConstStrBlobPtr {$/;"	c
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    StrBlob& operator=(StrBlob &&)NOEXCEPT;$/;"	m	class:StrBlob
NOEXCEPT	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	32;"	d
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    StrBlob() : data(make_shared<vector<string>>()) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    StrBlob(const StrBlob &sb) : data(make_shared<vector<string>>(*sb.data)) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    StrBlob(initializer_list<string> il) : data(make_shared<vector<string>>(il)) {}$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^class StrBlob {$/;"	c
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    StrBlobPtr() : curr(0) {}$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    StrBlobPtr(StrBlob &s, size_t sz = 0) : wptr(s.data), curr(sz) {}$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^class StrBlobPtr {$/;"	c
back	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline const string& StrBlob::back() const$/;"	f	class:StrBlob
back	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline string& StrBlob::back()$/;"	f	class:StrBlob
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline shared_ptr<vector<string>> StrBlobPtr::check(size_t i, const string &msg) const$/;"	f	class:StrBlobPtr
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline std::shared_ptr<vector<string>> ConstStrBlobPtr::check(size_t i, const string &msg) const$/;"	f	class:ConstStrBlobPtr
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline void StrBlob::check(size_type i, const string &msg) const$/;"	f	class:StrBlob
curr	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    size_t curr;$/;"	m	class:ConstStrBlobPtr
curr	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    size_t curr;$/;"	m	class:StrBlobPtr
data	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    shared_ptr<vector<string>> data;$/;"	m	class:StrBlob
deref	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline string& StrBlobPtr::deref() const$/;"	f	class:StrBlobPtr
empty	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    bool empty() const { return data->empty(); }$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline const string& StrBlob::front() const$/;"	f	class:StrBlob
front	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline string& StrBlob::front()$/;"	f	class:StrBlob
move	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    StrBlob(StrBlob &&rhs) NOEXCEPT : data(std::move(rhs.data)) {}$/;"	f	class:StrBlob
operator *	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline const string& ConstStrBlobPtr::operator*() const$/;"	f	class:ConstStrBlobPtr
operator +	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline ConstStrBlobPtr ConstStrBlobPtr::operator+(size_t n) const$/;"	f	class:ConstStrBlobPtr
operator +	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline StrBlobPtr StrBlobPtr::operator+(size_t n) const$/;"	f	class:StrBlobPtr
operator ++	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline ConstStrBlobPtr ConstStrBlobPtr::operator++(int)$/;"	f	class:ConstStrBlobPtr
operator ++	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline ConstStrBlobPtr& ConstStrBlobPtr::operator++()$/;"	f	class:ConstStrBlobPtr
operator ++	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline StrBlobPtr StrBlobPtr::operator++(int)$/;"	f	class:StrBlobPtr
operator ++	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline StrBlobPtr& StrBlobPtr::operator++()$/;"	f	class:StrBlobPtr
operator +=	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline ConstStrBlobPtr& ConstStrBlobPtr::operator+=(size_t n)$/;"	f	class:ConstStrBlobPtr
operator +=	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline StrBlobPtr& StrBlobPtr::operator+=(size_t n)$/;"	f	class:StrBlobPtr
operator -	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline ConstStrBlobPtr ConstStrBlobPtr::operator-(size_t n) const$/;"	f	class:ConstStrBlobPtr
operator -	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline StrBlobPtr StrBlobPtr::operator-(size_t n) const$/;"	f	class:StrBlobPtr
operator --	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline ConstStrBlobPtr ConstStrBlobPtr::operator--(int)$/;"	f	class:ConstStrBlobPtr
operator --	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline ConstStrBlobPtr& ConstStrBlobPtr::operator--()$/;"	f	class:ConstStrBlobPtr
operator --	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline StrBlobPtr StrBlobPtr::operator--(int)$/;"	f	class:StrBlobPtr
operator --	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline StrBlobPtr& StrBlobPtr::operator--()$/;"	f	class:StrBlobPtr
operator -=	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline ConstStrBlobPtr& ConstStrBlobPtr::operator-=(size_t n)$/;"	f	class:ConstStrBlobPtr
operator -=	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline StrBlobPtr& StrBlobPtr::operator-=(size_t n)$/;"	f	class:StrBlobPtr
operator ->	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline const string* ConstStrBlobPtr::operator->() const$/;"	f	class:ConstStrBlobPtr
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline const string& ConstStrBlobPtr::operator[](size_t n) const$/;"	f	class:ConstStrBlobPtr
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline const string& StrBlob::operator[](size_t n) const$/;"	f	class:StrBlob
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline const string& StrBlobPtr::operator[](size_t n) const$/;"	f	class:StrBlobPtr
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline string& StrBlob::operator[](size_t n)$/;"	f	class:StrBlob
operator []	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline string& StrBlobPtr::operator[](size_t n)$/;"	f	class:StrBlobPtr
pop_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^inline void StrBlob::pop_back()$/;"	f	class:StrBlob
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    void push_back(const string &t) { data->push_back(t); }$/;"	f	class:StrBlob
push_back	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    void push_back(string &&s) { data->push_back(std::move(s)); }$/;"	f	class:StrBlob
size	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    size_type size() const { return data->size(); }$/;"	f	class:StrBlob
wptr	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    std::weak_ptr<vector<string>> wptr;$/;"	m	class:ConstStrBlobPtr
wptr	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlob.h	/^    std::weak_ptr<vector<string>> wptr;$/;"	m	class:StrBlobPtr
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_30_StrBlobTest.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_32.cpp	/^int main()$/;"	f
operator *	c++_primer\key_Cpp-Primer-master\ch14\ex14_32.cpp	/^StrBlobPtr_pointer::operator *()$/;"	f	class:StrBlobPtr_pointer
operator ->	c++_primer\key_Cpp-Primer-master\ch14\ex14_32.cpp	/^StrBlobPtr_pointer::operator ->()$/;"	f	class:StrBlobPtr_pointer
STRBLOBPTR_POINTER_H	c++_primer\key_Cpp-Primer-master\ch14\ex14_32.h	9;"	d
StrBlobPtr_pointer	c++_primer\key_Cpp-Primer-master\ch14\ex14_32.h	/^    StrBlobPtr_pointer(StrBlobPtr* p) : pointer(p) {}$/;"	f	class:StrBlobPtr_pointer
StrBlobPtr_pointer	c++_primer\key_Cpp-Primer-master\ch14\ex14_32.h	/^class StrBlobPtr_pointer$/;"	c
pointer	c++_primer\key_Cpp-Primer-master\ch14\ex14_32.h	/^    StrBlobPtr* pointer = nullptr;$/;"	m	class:StrBlobPtr_pointer
GetInput	c++_primer\key_Cpp-Primer-master\ch14\ex14_35.cpp	/^    GetInput(std::istream &i = std::cin) : is(i) { }$/;"	f	class:GetInput
GetInput	c++_primer\key_Cpp-Primer-master\ch14\ex14_35.cpp	/^class GetInput {$/;"	c	file:
is	c++_primer\key_Cpp-Primer-master\ch14\ex14_35.cpp	/^    std::istream &is;$/;"	m	class:GetInput	file:
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_35.cpp	/^int main()$/;"	f
operator ()	c++_primer\key_Cpp-Primer-master\ch14\ex14_35.cpp	/^    std::string operator()() const {$/;"	f	class:GetInput
GetInput	c++_primer\key_Cpp-Primer-master\ch14\ex14_36.cpp	/^    GetInput(std::istream &i = std::cin) : is(i) { }$/;"	f	class:GetInput
GetInput	c++_primer\key_Cpp-Primer-master\ch14\ex14_36.cpp	/^class GetInput {$/;"	c	file:
is	c++_primer\key_Cpp-Primer-master\ch14\ex14_36.cpp	/^    std::istream &is;$/;"	m	class:GetInput	file:
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_36.cpp	/^int main()$/;"	f
operator ()	c++_primer\key_Cpp-Primer-master\ch14\ex14_36.cpp	/^    std::string operator()() const {$/;"	f	class:GetInput
IsEqual	c++_primer\key_Cpp-Primer-master\ch14\ex14_37.cpp	/^    IsEqual(int v) : value(v) {}$/;"	f	class:IsEqual
IsEqual	c++_primer\key_Cpp-Primer-master\ch14\ex14_37.cpp	/^class IsEqual {$/;"	c	file:
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_37.cpp	/^int main()$/;"	f
operator ()	c++_primer\key_Cpp-Primer-master\ch14\ex14_37.cpp	/^    bool operator()(int elem) {$/;"	f	class:IsEqual
value	c++_primer\key_Cpp-Primer-master\ch14\ex14_37.cpp	/^    int value;$/;"	m	class:IsEqual	file:
IsInRange	c++_primer\key_Cpp-Primer-master\ch14\ex14_38_39.cpp	/^    IsInRange(std::size_t lower, std::size_t upper)$/;"	f	struct:IsInRange
IsInRange	c++_primer\key_Cpp-Primer-master\ch14\ex14_38_39.cpp	/^struct IsInRange$/;"	s	file:
_lower	c++_primer\key_Cpp-Primer-master\ch14\ex14_38_39.cpp	/^    std::size_t _lower;$/;"	m	struct:IsInRange	file:
_upper	c++_primer\key_Cpp-Primer-master\ch14\ex14_38_39.cpp	/^    std::size_t _upper;$/;"	m	struct:IsInRange	file:
lower_limit	c++_primer\key_Cpp-Primer-master\ch14\ex14_38_39.cpp	/^    std::size_t lower_limit() const$/;"	f	struct:IsInRange
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_38_39.cpp	/^int main()$/;"	f
operator ()	c++_primer\key_Cpp-Primer-master\ch14\ex14_38_39.cpp	/^    bool operator()(std::string const& str) const$/;"	f	struct:IsInRange
upper_limit	c++_primer\key_Cpp-Primer-master\ch14\ex14_38_39.cpp	/^    std::size_t upper_limit() const$/;"	f	struct:IsInRange
BiggerEqual	c++_primer\key_Cpp-Primer-master\ch14\ex14_40.cpp	/^    BiggerEqual(size_t sz) : sz_(sz) {}$/;"	f	class:BiggerEqual
BiggerEqual	c++_primer\key_Cpp-Primer-master\ch14\ex14_40.cpp	/^class BiggerEqual {$/;"	c	file:
Print	c++_primer\key_Cpp-Primer-master\ch14\ex14_40.cpp	/^class Print {$/;"	c	file:
ShorterString	c++_primer\key_Cpp-Primer-master\ch14\ex14_40.cpp	/^class ShorterString {$/;"	c	file:
biggies	c++_primer\key_Cpp-Primer-master\ch14\ex14_40.cpp	/^void biggies( vector<string> &words, vector<string>::size_type sz ) {$/;"	f
elimDups	c++_primer\key_Cpp-Primer-master\ch14\ex14_40.cpp	/^void elimDups(vector<string> &words) {$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_40.cpp	/^int main()$/;"	f
make_plural	c++_primer\key_Cpp-Primer-master\ch14\ex14_40.cpp	/^string make_plural(size_t ctr, string const& word, string const& ending)$/;"	f
operator ()	c++_primer\key_Cpp-Primer-master\ch14\ex14_40.cpp	/^    bool operator()(string const& s) { return s.size() >= sz_; }$/;"	f	class:BiggerEqual
operator ()	c++_primer\key_Cpp-Primer-master\ch14\ex14_40.cpp	/^    bool operator()(string const& s1, string const& s2) const { return s1.size() < s2.size(); }$/;"	f	class:ShorterString
operator ()	c++_primer\key_Cpp-Primer-master\ch14\ex14_40.cpp	/^    void operator()(string const& s) { cout << s << " "; }$/;"	f	class:Print
sz_	c++_primer\key_Cpp-Primer-master\ch14\ex14_40.cpp	/^    size_t sz_;$/;"	m	class:BiggerEqual	file:
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_42.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_43.cpp	/^int main()$/;"	f
Div	c++_primer\key_Cpp-Primer-master\ch14\ex14_44.cpp	/^struct Div{ int operator ()(int i, int j) const { return i \/ j; } };$/;"	s	file:
add	c++_primer\key_Cpp-Primer-master\ch14\ex14_44.cpp	/^int add(int i, int j){ return i + j; }$/;"	f
binops	c++_primer\key_Cpp-Primer-master\ch14\ex14_44.cpp	/^auto binops = std::map<std::string, std::function<int(int, int)>>$/;"	v
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_44.cpp	/^int main()$/;"	f
mod	c++_primer\key_Cpp-Primer-master\ch14\ex14_44.cpp	/^auto mod = [](int i, int j){return i % j; };$/;"	v
operator ()	c++_primer\key_Cpp-Primer-master\ch14\ex14_44.cpp	/^struct Div{ int operator ()(int i, int j) const { return i \/ j; } };$/;"	f	struct:Div
Sales_data	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.cpp	/^Sales_data::Sales_data(std::istream &is) : Sales_data()$/;"	f	class:Sales_data
operator +	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.cpp	/^Sales_data operator+(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator +=	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.cpp	/^Sales_data& Sales_data::operator+=(const Sales_data &rhs)$/;"	f	class:Sales_data
operator <<	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.cpp	/^std::ostream& operator<<(std::ostream &os, const Sales_data &item)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.cpp	/^Sales_data& Sales_data::operator=(const std::string &isbn)$/;"	f	class:Sales_data
operator >>	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.cpp	/^std::istream& operator>>(std::istream &is, Sales_data &item)$/;"	f
CP5_ex14_45_h	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.h	15;"	d
Sales_data	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.h	/^    Sales_data() : Sales_data("", 0, 0.0f){}$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.h	/^    Sales_data(const std::string &s) : Sales_data(s, 0, 0.0f){}$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.h	/^    Sales_data(const std::string &s, unsigned n, double p):bookNo(s),units_sold(n),revenue(n*p){}$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.h	/^class Sales_data {$/;"	c
avg_price	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.h	/^inline double Sales_data::avg_price() const$/;"	f	class:Sales_data
bookNo	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.h	/^    std::string bookNo;$/;"	m	class:Sales_data
isbn	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.h	/^    std::string isbn() const { return bookNo; }$/;"	f	class:Sales_data
operator double	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.h	/^    explicit operator double() const { return avg_price(); }$/;"	f	class:Sales_data
operator std::string	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.h	/^    explicit operator std::string() const { return bookNo; }$/;"	f	class:Sales_data
revenue	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.h	/^    double revenue = 0.0;$/;"	m	class:Sales_data
units_sold	c++_primer\key_Cpp-Primer-master\ch14\ex14_45.h	/^    unsigned units_sold = 0;$/;"	m	class:Sales_data
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_45_TEST.cpp	/^int main()$/;"	f
Date	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^Date::Date(Size days)$/;"	f	class:Date
Date	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^Date::Date(const Date &d) :$/;"	f	class:Date
Date	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^Date::Date(std::istream &is, std::ostream &os)$/;"	f	class:Date
operator !=	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^bool operator !=(const Date &lhs, const Date &rhs)$/;"	f
operator +	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^Date operator + (const Date &lhs, Date::Size rhs)$/;"	f
operator +=	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^Date &Date::operator +=(Date::Size offset)$/;"	f	class:Date
operator -	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^Date operator - (const Date &lhs, Date::Size rhs)$/;"	f
operator -	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^int operator -(const Date &lhs, const Date &rhs)$/;"	f
operator -=	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^Date &Date::operator -=(Date::Size offset)$/;"	f	class:Date
operator <	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^bool operator < (const Date &lhs, const Date &rhs)$/;"	f
operator <<	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^operator <<(std::ostream& os, const Date& d)$/;"	f
operator <=	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^bool operator <=(const Date &lhs, const Date &rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^Date &Date::operator= (const Date &d)$/;"	f	class:Date
operator ==	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^bool operator ==(const Date &lhs, const Date &rhs)$/;"	f
operator >	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^bool operator >(const Date &lhs, const Date &rhs)$/;"	f
operator >=	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^bool operator >=(const Date &lhs, const Date &rhs)$/;"	f
operator >>	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^operator >>(std::istream& is, Date& d)$/;"	f
toDays	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^Date::Size Date::toDays() const$/;"	f	class:Date
year	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.cpp	/^    day(d.day), month(d.month), year(d.year)$/;"	f
DATE_H	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	54;"	d
Date	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^    Date(Size d, Size m, Size y) : day(d), month(m), year(y) { }$/;"	f	class:Date
Date	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^class Date$/;"	c
Size	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^    typedef std::size_t Size;$/;"	t	class:Date
YtoD_1	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^static const Date::Size YtoD_1   =    365;    \/\/365$/;"	v
YtoD_100	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^static const Date::Size YtoD_100 =  36524;    \/\/365*100 + 100\/4 -1 ==  36524$/;"	v
YtoD_4	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^static const Date::Size YtoD_4   =   1461;    \/\/365*4 + 1          ==   1461$/;"	v
YtoD_400	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^static const Date::Size YtoD_400 = 146097;    \/\/365*400 + 400\/4 -3 == 146097$/;"	v
check	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^ check(const Date &d)$/;"	f
day	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^    Size    day = 1;$/;"	m	class:Date
isLeapYear	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^ isLeapYear(Date::Size y)$/;"	f
month	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^    Size    month = 1;$/;"	m	class:Date
monthsVec_l	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^static const std::vector<Date::Size> monthsVec_l =$/;"	v
monthsVec_n	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^static const std::vector<Date::Size> monthsVec_n =$/;"	v
noexcept	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^    Date& operator= (Date&& rhs) noexcept;$/;"	m	class:Date
noexcept	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^    Date(Date&& d) noexcept;$/;"	m	class:Date
operator bool	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^    explicit operator bool() { return (year<4000) ? true : false; }$/;"	f	class:Date
year	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^    Size    year = 0;$/;"	m	class:Date
~Date	c++_primer\key_Cpp-Primer-master\ch14\ex14_49.h	/^    ~Date(){ std::cout << "destroying\\n"; }$/;"	f	class:Date
main	c++_primer\key_Cpp-Primer-master\ch14\ex14_49_TEST.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.1.2.3\main.cpp	/^int main()$/;"	f
print_total	c++_primer\key_Cpp-Primer-master\ch15\ex15.1.2.3\main.cpp	/^double print_total(std::ostream &os, const Quote &item, size_t n)$/;"	f
QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.1.2.3\quote.h	2;"	d
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.1.2.3\quote.h	/^    Quote(const std::string &b, double p) :$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.1.2.3\quote.h	/^class Quote$/;"	c
bookNo	c++_primer\key_Cpp-Primer-master\ch15\ex15.1.2.3\quote.h	/^    std::string bookNo;$/;"	m	class:Quote
isbn	c++_primer\key_Cpp-Primer-master\ch15\ex15.1.2.3\quote.h	/^    std::string     isbn() const { return bookNo; }$/;"	f	class:Quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.1.2.3\quote.h	/^    virtual double  net_price(std::size_t n) const { return n * price; }$/;"	f	class:Quote
price	c++_primer\key_Cpp-Primer-master\ch15\ex15.1.2.3\quote.h	/^    double  price = 0.0;$/;"	m	class:Quote
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\bulk_quote.cpp	/^void Bulk_quote::debug() const$/;"	f	class:Bulk_quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\bulk_quote.cpp	/^double Bulk_quote::net_price(std::size_t n) const$/;"	f	class:Bulk_quote
BULK_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\bulk_quote.h	2;"	d
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\bulk_quote.h	/^    Bulk_quote(const std::string& b, double p, std::size_t q, double disc) :$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\bulk_quote.h	/^class Bulk_quote : public Quote$/;"	c
discount	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\bulk_quote.h	/^    double      discount    = 0.0;$/;"	m	class:Bulk_quote
min_qty	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\bulk_quote.h	/^    std::size_t min_qty     = 0;$/;"	m	class:Bulk_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\bulk_quote.h	/^    double net_price(std::size_t n) const override;$/;"	m	class:Bulk_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\bulk_quote.h	/^    void  debug() const override;$/;"	m	class:Bulk_quote
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\limit_quote.cpp	/^void Limit_quote::debug() const$/;"	f	class:Limit_quote
LIMIT_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\limit_quote.h	2;"	d
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\limit_quote.h	/^    Limit_quote(const std::string& b, double p, std::size_t max, double disc):$/;"	f	class:Limit_quote
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\limit_quote.h	/^class Limit_quote : public Quote$/;"	c
discount	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\limit_quote.h	/^    double      discount    = 0.0;$/;"	m	class:Limit_quote
max_qty	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\limit_quote.h	/^    std::size_t max_qty     = 0;$/;"	m	class:Limit_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\limit_quote.h	/^    void debug() const override;$/;"	m	class:Limit_quote
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\main.cpp	/^int main()$/;"	f
print_debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\main.cpp	/^void print_debug(const Quote &q)$/;"	f
print_total	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\main.cpp	/^double print_total(std::ostream &os, const Quote &item, size_t n)$/;"	f
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\quote.cpp	/^void Quote::debug() const$/;"	f	class:Quote
QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\quote.h	2;"	d
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\quote.h	/^    Quote(const std::string &b, double p) :$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\quote.h	/^class Quote$/;"	c
bookNo	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\quote.h	/^    std::string bookNo;$/;"	m	class:Quote
isbn	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\quote.h	/^    std::string     isbn() const { return bookNo; }$/;"	f	class:Quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\quote.h	/^    virtual double  net_price(std::size_t n) const { return n * price; }$/;"	f	class:Quote
price	c++_primer\key_Cpp-Primer-master\ch15\ex15.11\quote.h	/^    double  price = 0.0;$/;"	m	class:Quote
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\bulk_quote.cpp	/^void Bulk_quote::debug() const$/;"	f	class:Bulk_quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\bulk_quote.cpp	/^double Bulk_quote::net_price(std::size_t n) const$/;"	f	class:Bulk_quote
BULK_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\bulk_quote.h	2;"	d
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\bulk_quote.h	/^    Bulk_quote(const std::string& b, double p, std::size_t q, double disc) :$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\bulk_quote.h	/^class Bulk_quote : public Quote$/;"	c
discount	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\bulk_quote.h	/^    double      discount    = 0.0;$/;"	m	class:Bulk_quote
min_qty	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\bulk_quote.h	/^    std::size_t min_qty     = 0;$/;"	m	class:Bulk_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\bulk_quote.h	/^    double net_price(std::size_t n) const override;$/;"	m	class:Bulk_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\bulk_quote.h	/^    void  debug() const override;$/;"	m	class:Bulk_quote
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\limit_quote.cpp	/^void Limit_quote::debug() const$/;"	f	class:Limit_quote
LIMIT_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\limit_quote.h	2;"	d
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\limit_quote.h	/^    Limit_quote(const std::string& b, double p, std::size_t max, double disc):$/;"	f	class:Limit_quote
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\limit_quote.h	/^class Limit_quote : public Quote$/;"	c
discount	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\limit_quote.h	/^    double      discount    = 0.0;$/;"	m	class:Limit_quote
max_qty	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\limit_quote.h	/^    std::size_t max_qty     = 0;$/;"	m	class:Limit_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\limit_quote.h	/^    void debug() const override;$/;"	m	class:Limit_quote
base	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\main.cpp	/^class base$/;"	c	file:
basename	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\main.cpp	/^   std::string basename = "base\\n";$/;"	m	class:base	file:
derived	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\main.cpp	/^class derived : public base$/;"	c	file:
i	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\main.cpp	/^   int i;$/;"	m	class:derived	file:
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\main.cpp	/^int main()$/;"	f
name	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\main.cpp	/^   std::string name() { return basename; }$/;"	f	class:base
print	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\main.cpp	/^   virtual void print(std::ostream &os) { os << basename; }$/;"	f	class:base
print	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\main.cpp	/^   void print(std::ostream &os) { base::print(os); os << " derived\\n " << i; }$/;"	f	class:derived
print_debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\main.cpp	/^void print_debug(const Quote &q)$/;"	f
print_total	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\main.cpp	/^double print_total(std::ostream &os, const Quote &item, size_t n)$/;"	f
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\quote.cpp	/^void Quote::debug() const$/;"	f	class:Quote
QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\quote.h	2;"	d
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\quote.h	/^    Quote(const std::string &b, double p) :$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\quote.h	/^class Quote$/;"	c
bookNo	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\quote.h	/^    std::string bookNo;$/;"	m	class:Quote
isbn	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\quote.h	/^    std::string     isbn() const { return bookNo; }$/;"	f	class:Quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\quote.h	/^    virtual double  net_price(std::size_t n) const { return n * price; }$/;"	f	class:Quote
price	c++_primer\key_Cpp-Primer-master\ch15\ex15.12.13.14\quote.h	/^    double  price = 0.0;$/;"	m	class:Quote
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\bulk_quote.cpp	/^void Bulk_quote::debug() const$/;"	f	class:Bulk_quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\bulk_quote.cpp	/^double Bulk_quote::net_price(std::size_t n) const$/;"	f	class:Bulk_quote
BULK_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\bulk_quote.h	2;"	d
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\bulk_quote.h	/^    Bulk_quote(const std::string& b, double p, std::size_t q, double disc) :$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\bulk_quote.h	/^class Bulk_quote : public Disc_quote$/;"	c
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\bulk_quote.h	/^    double net_price(std::size_t n) const override;$/;"	m	class:Bulk_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\bulk_quote.h	/^    void  debug() const override;$/;"	m	class:Bulk_quote
DISC_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\disc_quote.h	2;"	d
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\disc_quote.h	/^    Disc_quote(const std::string& b, double p, std::size_t q, double d) :$/;"	f	class:Disc_quote
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\disc_quote.h	/^class Disc_quote : public Quote$/;"	c
discount	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\disc_quote.h	/^    double      discount;$/;"	m	class:Disc_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\disc_quote.h	/^    virtual double net_price(std::size_t n) const override = 0;$/;"	m	class:Disc_quote
quantity	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\disc_quote.h	/^    std::size_t quantity;$/;"	m	class:Disc_quote
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\limit_quote.cpp	/^void Limit_quote::debug() const$/;"	f	class:Limit_quote
LIMIT_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\limit_quote.h	2;"	d
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\limit_quote.h	/^    Limit_quote(const std::string& b, double p, std::size_t max, double disc):$/;"	f	class:Limit_quote
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\limit_quote.h	/^class Limit_quote : public Disc_quote$/;"	c
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\limit_quote.h	/^    void debug() const override;$/;"	m	class:Limit_quote
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\main.cpp	/^int main()$/;"	f
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\quote.cpp	/^void Quote::debug() const$/;"	f	class:Quote
QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\quote.h	2;"	d
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\quote.h	/^    Quote(const std::string &b, double p) :$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\quote.h	/^class Quote$/;"	c
bookNo	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\quote.h	/^    std::string bookNo;$/;"	m	class:Quote
isbn	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\quote.h	/^    std::string     isbn() const { return bookNo; }$/;"	f	class:Quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\quote.h	/^    virtual double  net_price(std::size_t n) const { return n * price; }$/;"	f	class:Quote
price	c++_primer\key_Cpp-Primer-master\ch15\ex15.15.16.17\quote.h	/^    double  price = 0.0;$/;"	m	class:Quote
Base	c++_primer\key_Cpp-Primer-master\ch15\ex15.18.19.20\main.cpp	/^class Base$/;"	c	file:
Derived_from_Private	c++_primer\key_Cpp-Primer-master\ch15\ex15.18.19.20\main.cpp	/^struct Derived_from_Private     : public Priv_Derv$/;"	s	file:
Derived_from_Protected	c++_primer\key_Cpp-Primer-master\ch15\ex15.18.19.20\main.cpp	/^struct Derived_from_Protected   : public Prot_Derv$/;"	s	file:
Derived_from_Public	c++_primer\key_Cpp-Primer-master\ch15\ex15.18.19.20\main.cpp	/^struct Derived_from_Public      : public Pub_Derv$/;"	s	file:
Priv_Derv	c++_primer\key_Cpp-Primer-master\ch15\ex15.18.19.20\main.cpp	/^struct Priv_Derv    : private   Base$/;"	s	file:
Prot_Derv	c++_primer\key_Cpp-Primer-master\ch15\ex15.18.19.20\main.cpp	/^struct Prot_Derv    : protected Base$/;"	s	file:
Pub_Derv	c++_primer\key_Cpp-Primer-master\ch15\ex15.18.19.20\main.cpp	/^struct Pub_Derv     : public    Base$/;"	s	file:
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.18.19.20\main.cpp	/^int main()$/;"	f
memfcn	c++_primer\key_Cpp-Primer-master\ch15\ex15.18.19.20\main.cpp	/^    void memfcn(Base &b) { b = *this; }$/;"	f	struct:Derived_from_Protected
memfcn	c++_primer\key_Cpp-Primer-master\ch15\ex15.18.19.20\main.cpp	/^    void memfcn(Base &b) { b = *this; }$/;"	f	struct:Derived_from_Public
memfcn	c++_primer\key_Cpp-Primer-master\ch15\ex15.18.19.20\main.cpp	/^    void memfcn(Base &b) { b = *this; }$/;"	f	struct:Priv_Derv
memfcn	c++_primer\key_Cpp-Primer-master\ch15\ex15.18.19.20\main.cpp	/^    void memfcn(Base &b) { b = *this; }$/;"	f	struct:Prot_Derv
memfcn	c++_primer\key_Cpp-Primer-master\ch15\ex15.18.19.20\main.cpp	/^    void memfcn(Base &b) { b = *this; }$/;"	f	struct:Pub_Derv
priv_mem	c++_primer\key_Cpp-Primer-master\ch15\ex15.18.19.20\main.cpp	/^    char priv_mem;    \/\/ private member$/;"	m	class:Base	file:
prot_mem	c++_primer\key_Cpp-Primer-master\ch15\ex15.18.19.20\main.cpp	/^    int prot_mem;     \/\/ protected member$/;"	m	class:Base	file:
Coordinate	c++_primer\key_Cpp-Primer-master\ch15\ex15.21.22\main.cpp	/^    typedef std::pair<double, double>    Coordinate;$/;"	t	class:Shape	file:
Rectangle	c++_primer\key_Cpp-Primer-master\ch15\ex15.21.22\main.cpp	/^    Rectangle(const std::string& n,$/;"	f	class:Rectangle
Rectangle	c++_primer\key_Cpp-Primer-master\ch15\ex15.21.22\main.cpp	/^class Rectangle : public Shape$/;"	c	file:
Shape	c++_primer\key_Cpp-Primer-master\ch15\ex15.21.22\main.cpp	/^    Shape(const std::string& n) :$/;"	f	class:Shape
Shape	c++_primer\key_Cpp-Primer-master\ch15\ex15.21.22\main.cpp	/^class Shape$/;"	c	file:
Square	c++_primer\key_Cpp-Primer-master\ch15\ex15.21.22\main.cpp	/^    Square(const std::string& n,$/;"	f	class:Square
Square	c++_primer\key_Cpp-Primer-master\ch15\ex15.21.22\main.cpp	/^class Square : public Rectangle$/;"	c	file:
a	c++_primer\key_Cpp-Primer-master\ch15\ex15.21.22\main.cpp	/^    Coordinate  a;$/;"	m	class:Rectangle	file:
b	c++_primer\key_Cpp-Primer-master\ch15\ex15.21.22\main.cpp	/^    Coordinate  b;$/;"	m	class:Rectangle	file:
c	c++_primer\key_Cpp-Primer-master\ch15\ex15.21.22\main.cpp	/^    Coordinate  c;$/;"	m	class:Rectangle	file:
d	c++_primer\key_Cpp-Primer-master\ch15\ex15.21.22\main.cpp	/^    Coordinate  d;$/;"	m	class:Rectangle	file:
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.21.22\main.cpp	/^int main()$/;"	f
name	c++_primer\key_Cpp-Primer-master\ch15\ex15.21.22\main.cpp	/^    std::string name;$/;"	m	class:Shape	file:
Base	c++_primer\key_Cpp-Primer-master\ch15\ex15.23.cpp	/^class Base$/;"	c	file:
D1	c++_primer\key_Cpp-Primer-master\ch15\ex15.23.cpp	/^class D1 : public Base$/;"	c	file:
D2	c++_primer\key_Cpp-Primer-master\ch15\ex15.23.cpp	/^class D2 : public D1$/;"	c	file:
f2	c++_primer\key_Cpp-Primer-master\ch15\ex15.23.cpp	/^    virtual void f2() {std::cout << "D1::f2()\\n";}$/;"	f	class:D1
fcn	c++_primer\key_Cpp-Primer-master\ch15\ex15.23.cpp	/^    virtual int fcn(){std::cout << "Base::fcn()\\n"; return 0;}$/;"	f	class:Base
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.23.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.24.25.cpp	/^int main(){ return 0; }$/;"	f
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\bulk_quote.cpp	/^void Bulk_quote::debug() const$/;"	f	class:Bulk_quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\bulk_quote.cpp	/^double Bulk_quote::net_price(std::size_t n) const$/;"	f	class:Bulk_quote
BULK_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\bulk_quote.h	2;"	d
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\bulk_quote.h	/^    Bulk_quote() {std::cout << "default constructing Bulk_quote\\n"; }$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\bulk_quote.h	/^    Bulk_quote(const Bulk_quote& bq) : Disc_quote(bq)$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\bulk_quote.h	/^    Bulk_quote(const std::string& b, double p, std::size_t q, double disc) :$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\bulk_quote.h	/^class Bulk_quote : public Disc_quote$/;"	c
operator =	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\bulk_quote.h	/^    Bulk_quote& operator =(const Bulk_quote& rhs)$/;"	f	class:Bulk_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\bulk_quote.h	/^    double net_price(std::size_t n) const override;$/;"	m	class:Bulk_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\bulk_quote.h	/^    void  debug() const override;$/;"	m	class:Bulk_quote
DISC_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\disc_quote.h	2;"	d
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\disc_quote.h	/^    Disc_quote() { std::cout << "default constructing Disc_quote\\n"; }$/;"	f	class:Disc_quote
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\disc_quote.h	/^    Disc_quote(const Disc_quote& dq) :$/;"	f	class:Disc_quote
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\disc_quote.h	/^    Disc_quote(const std::string& b, double p, std::size_t q, double d) :$/;"	f	class:Disc_quote
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\disc_quote.h	/^class Disc_quote : public Quote$/;"	c
discount	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\disc_quote.h	/^    double      discount = 0.0;$/;"	m	class:Disc_quote
move	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\disc_quote.h	/^        Quote(std::move(dq)), quantity(std::move(dq.quantity)), discount(std::move(dq.discount))$/;"	f	class:Disc_quote
operator !=	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\disc_quote.h	/^operator !=(const Disc_quote& lhs, const Disc_quote& rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\disc_quote.h	/^    Disc_quote& operator =(const Disc_quote& rhs)$/;"	f	class:Disc_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\disc_quote.h	/^    virtual double net_price(std::size_t n) const override = 0;$/;"	m	class:Disc_quote
quantity	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\disc_quote.h	/^    std::size_t quantity = 3;$/;"	m	class:Disc_quote
~Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\disc_quote.h	/^    ~Disc_quote()$/;"	f	class:Disc_quote
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\limit_quote.cpp	/^void Limit_quote::debug() const$/;"	f	class:Limit_quote
LIMIT_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\limit_quote.h	2;"	d
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\limit_quote.h	/^    Limit_quote(const std::string& b, double p, std::size_t max, double disc):$/;"	f	class:Limit_quote
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\limit_quote.h	/^class Limit_quote : public Disc_quote$/;"	c
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\limit_quote.h	/^    void debug() const override;$/;"	m	class:Limit_quote
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\main.cpp	/^int main()$/;"	f
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\quote.cpp	/^void Quote::debug() const$/;"	f	class:Quote
QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\quote.h	2;"	d
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\quote.h	/^    Quote() { std::cout << "default constructing Quote\\n"; }$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\quote.h	/^    Quote(const Quote& q) : bookNo(q.bookNo), price(q.price)$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\quote.h	/^    Quote(const std::string &b, double p) :$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\quote.h	/^class Quote$/;"	c
bookNo	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\quote.h	/^    std::string bookNo;$/;"	m	class:Quote
isbn	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\quote.h	/^    std::string     isbn() const { return bookNo; }$/;"	f	class:Quote
move	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\quote.h	/^    Quote(Quote&& q) noexcept : bookNo(std::move(q.bookNo)), price(std::move(q.price))$/;"	f	class:Quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\quote.h	/^    virtual double  net_price(std::size_t n) const { return n * price; }$/;"	f	class:Quote
operator !=	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\quote.h	/^operator !=(const Quote& lhs, const Quote& rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\quote.h	/^    Quote& operator =(const Quote& rhs)$/;"	f	class:Quote
price	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\quote.h	/^    double  price = 10.0;$/;"	m	class:Quote
~Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.26\quote.h	/^    virtual ~Quote()$/;"	f	class:Quote
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\bulk_quote.cpp	/^void Bulk_quote::debug() const$/;"	f	class:Bulk_quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\bulk_quote.cpp	/^double Bulk_quote::net_price(std::size_t n) const$/;"	f	class:Bulk_quote
BULK_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\bulk_quote.h	2;"	d
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\bulk_quote.h	/^    Bulk_quote() {std::cout << "default constructing Bulk_quote\\n"; }$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\bulk_quote.h	/^    Bulk_quote(Bulk_quote&& bq) : Disc_quote(std::move(bq))$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\bulk_quote.h	/^    Bulk_quote(const Bulk_quote& bq) : Disc_quote(bq)$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\bulk_quote.h	/^class Bulk_quote : public Disc_quote$/;"	c
operator =	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\bulk_quote.h	/^    Bulk_quote& operator =(Bulk_quote&& rhs)$/;"	f	class:Bulk_quote
operator =	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\bulk_quote.h	/^    Bulk_quote& operator =(const Bulk_quote& rhs)$/;"	f	class:Bulk_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\bulk_quote.h	/^    double net_price(std::size_t n) const override;$/;"	m	class:Bulk_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\bulk_quote.h	/^    void  debug() const override;$/;"	m	class:Bulk_quote
DISC_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\disc_quote.h	2;"	d
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\disc_quote.h	/^    Disc_quote() { std::cout << "default constructing Disc_quote\\n"; }$/;"	f	class:Disc_quote
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\disc_quote.h	/^    Disc_quote(const Disc_quote& dq) :$/;"	f	class:Disc_quote
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\disc_quote.h	/^    Disc_quote(const std::string& b, double p, std::size_t q, double d) :$/;"	f	class:Disc_quote
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\disc_quote.h	/^class Disc_quote : public Quote$/;"	c
discount	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\disc_quote.h	/^    double      discount = 0.0;$/;"	m	class:Disc_quote
move	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\disc_quote.h	/^        Quote(std::move(dq)), quantity(std::move(dq.quantity)), discount(std::move(dq.discount))$/;"	f	class:Disc_quote
operator !=	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\disc_quote.h	/^operator !=(const Disc_quote& lhs, const Disc_quote& rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\disc_quote.h	/^    Disc_quote& operator =(const Disc_quote& rhs)$/;"	f	class:Disc_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\disc_quote.h	/^    virtual double net_price(std::size_t n) const override = 0;$/;"	m	class:Disc_quote
quantity	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\disc_quote.h	/^    std::size_t quantity = 3;$/;"	m	class:Disc_quote
~Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\disc_quote.h	/^    ~Disc_quote()$/;"	f	class:Disc_quote
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\limit_quote.cpp	/^void Limit_quote::debug() const$/;"	f	class:Limit_quote
LIMIT_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\limit_quote.h	2;"	d
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\limit_quote.h	/^    Limit_quote(const std::string& b, double p, std::size_t max, double disc):$/;"	f	class:Limit_quote
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\limit_quote.h	/^class Limit_quote : public Disc_quote$/;"	c
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\limit_quote.h	/^    void debug() const override;$/;"	m	class:Limit_quote
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\main.cpp	/^int main()$/;"	f
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\quote.cpp	/^void Quote::debug() const$/;"	f	class:Quote
QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\quote.h	2;"	d
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\quote.h	/^    Quote() { std::cout << "default constructing Quote\\n"; }$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\quote.h	/^    Quote(const Quote& q) : bookNo(q.bookNo), price(q.price)$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\quote.h	/^    Quote(const std::string &b, double p) :$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\quote.h	/^class Quote$/;"	c
bookNo	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\quote.h	/^    std::string bookNo;$/;"	m	class:Quote
isbn	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\quote.h	/^    std::string     isbn() const { return bookNo; }$/;"	f	class:Quote
move	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\quote.h	/^    Quote(Quote&& q) noexcept : bookNo(std::move(q.bookNo)), price(std::move(q.price))$/;"	f	class:Quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\quote.h	/^    virtual double  net_price(std::size_t n) const { return n * price; }$/;"	f	class:Quote
operator !=	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\quote.h	/^operator !=(const Quote& lhs, const Quote& rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\quote.h	/^    Quote& operator =(const Quote& rhs)$/;"	f	class:Quote
price	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\quote.h	/^    double  price = 10.0;$/;"	m	class:Quote
~Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.27\quote.h	/^    virtual ~Quote()$/;"	f	class:Quote
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\bulk_quote.cpp	/^void Bulk_quote::debug() const$/;"	f	class:Bulk_quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\bulk_quote.cpp	/^double Bulk_quote::net_price(std::size_t n) const$/;"	f	class:Bulk_quote
BULK_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\bulk_quote.h	2;"	d
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\bulk_quote.h	/^    Bulk_quote() {std::cout << "default constructing Bulk_quote\\n"; }$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\bulk_quote.h	/^    Bulk_quote(Bulk_quote&& bq) : Disc_quote(std::move(bq))$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\bulk_quote.h	/^    Bulk_quote(const Bulk_quote& bq) : Disc_quote(bq)$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\bulk_quote.h	/^class Bulk_quote : public Disc_quote$/;"	c
operator =	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\bulk_quote.h	/^    Bulk_quote& operator =(Bulk_quote&& rhs)$/;"	f	class:Bulk_quote
operator =	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\bulk_quote.h	/^    Bulk_quote& operator =(const Bulk_quote& rhs)$/;"	f	class:Bulk_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\bulk_quote.h	/^    double net_price(std::size_t n) const override;$/;"	m	class:Bulk_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\bulk_quote.h	/^    void  debug() const override;$/;"	m	class:Bulk_quote
DISC_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\disc_quote.h	2;"	d
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\disc_quote.h	/^    Disc_quote() { std::cout << "default constructing Disc_quote\\n"; }$/;"	f	class:Disc_quote
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\disc_quote.h	/^    Disc_quote(const Disc_quote& dq) :$/;"	f	class:Disc_quote
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\disc_quote.h	/^    Disc_quote(const std::string& b, double p, std::size_t q, double d) :$/;"	f	class:Disc_quote
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\disc_quote.h	/^class Disc_quote : public Quote$/;"	c
discount	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\disc_quote.h	/^    double      discount = 0.0;$/;"	m	class:Disc_quote
move	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\disc_quote.h	/^        Quote(std::move(dq)), quantity(std::move(dq.quantity)), discount(std::move(dq.discount))$/;"	f	class:Disc_quote
operator !=	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\disc_quote.h	/^operator !=(const Disc_quote& lhs, const Disc_quote& rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\disc_quote.h	/^    Disc_quote& operator =(const Disc_quote& rhs)$/;"	f	class:Disc_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\disc_quote.h	/^    virtual double net_price(std::size_t n) const override = 0;$/;"	m	class:Disc_quote
quantity	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\disc_quote.h	/^    std::size_t quantity = 3;$/;"	m	class:Disc_quote
~Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\disc_quote.h	/^    ~Disc_quote()$/;"	f	class:Disc_quote
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\limit_quote.cpp	/^void Limit_quote::debug() const$/;"	f	class:Limit_quote
LIMIT_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\limit_quote.h	2;"	d
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\limit_quote.h	/^    Limit_quote(const std::string& b, double p, std::size_t max, double disc):$/;"	f	class:Limit_quote
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\limit_quote.h	/^class Limit_quote : public Disc_quote$/;"	c
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\limit_quote.h	/^    void debug() const override;$/;"	m	class:Limit_quote
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\main.cpp	/^int main()$/;"	f
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\quote.cpp	/^void Quote::debug() const$/;"	f	class:Quote
QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\quote.h	2;"	d
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\quote.h	/^    Quote() { std::cout << "default constructing Quote\\n"; }$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\quote.h	/^    Quote(const Quote& q) : bookNo(q.bookNo), price(q.price)$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\quote.h	/^    Quote(const std::string &b, double p) :$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\quote.h	/^class Quote$/;"	c
bookNo	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\quote.h	/^    std::string bookNo;$/;"	m	class:Quote
isbn	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\quote.h	/^    std::string     isbn() const { return bookNo; }$/;"	f	class:Quote
move	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\quote.h	/^    Quote(Quote&& q) noexcept : bookNo(std::move(q.bookNo)), price(std::move(q.price))$/;"	f	class:Quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\quote.h	/^    virtual double  net_price(std::size_t n) const { return n * price; }$/;"	f	class:Quote
operator !=	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\quote.h	/^operator !=(const Quote& lhs, const Quote& rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\quote.h	/^    Quote& operator =(const Quote& rhs)$/;"	f	class:Quote
price	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\quote.h	/^    double  price = 10.0;$/;"	m	class:Quote
~Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.28.29\quote.h	/^    virtual ~Quote()$/;"	f	class:Quote
total_receipt	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\basket.cpp	/^double Basket::total_receipt(std::ostream &os) const$/;"	f	class:Basket
BASKET_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\basket.h	2;"	d
Basket	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\basket.h	/^class Basket$/;"	c
add_item	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\basket.h	/^    void add_item(Quote&& sale)$/;"	f	class:Basket
add_item	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\basket.h	/^    void add_item(const Quote& sale)$/;"	f	class:Basket
compare	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\basket.h	/^    static bool compare(const std::shared_ptr<Quote>& lhs,$/;"	f	class:Basket
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\bulk_quote.cpp	/^void Bulk_quote::debug() const$/;"	f	class:Bulk_quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\bulk_quote.cpp	/^double Bulk_quote::net_price(std::size_t n) const$/;"	f	class:Bulk_quote
BULK_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\bulk_quote.h	2;"	d
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\bulk_quote.h	/^    Bulk_quote() {std::cout << "default constructing Bulk_quote\\n"; }$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\bulk_quote.h	/^    Bulk_quote(Bulk_quote&& bq) : Disc_quote(std::move(bq))$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\bulk_quote.h	/^    Bulk_quote(const Bulk_quote& bq) : Disc_quote(bq)$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\bulk_quote.h	/^class Bulk_quote : public Disc_quote$/;"	c
clone	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\bulk_quote.h	/^    virtual Bulk_quote* clone() &&      {return new Bulk_quote(std::move(*this));}$/;"	f	class:Bulk_quote
clone	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\bulk_quote.h	/^    virtual Bulk_quote* clone() const & {return new Bulk_quote(*this);}$/;"	f	class:Bulk_quote
operator =	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\bulk_quote.h	/^    Bulk_quote& operator =(Bulk_quote&& rhs)$/;"	f	class:Bulk_quote
operator =	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\bulk_quote.h	/^    Bulk_quote& operator =(const Bulk_quote& rhs)$/;"	f	class:Bulk_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\bulk_quote.h	/^    double net_price(std::size_t n) const override;$/;"	m	class:Bulk_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\bulk_quote.h	/^    void  debug() const override;$/;"	m	class:Bulk_quote
DISC_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\disc_quote.h	2;"	d
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\disc_quote.h	/^    Disc_quote() { std::cout << "default constructing Disc_quote\\n"; }$/;"	f	class:Disc_quote
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\disc_quote.h	/^    Disc_quote(const Disc_quote& dq) :$/;"	f	class:Disc_quote
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\disc_quote.h	/^    Disc_quote(const std::string& b, double p, std::size_t q, double d) :$/;"	f	class:Disc_quote
Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\disc_quote.h	/^class Disc_quote : public Quote$/;"	c
discount	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\disc_quote.h	/^    double      discount = 0.0;$/;"	m	class:Disc_quote
move	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\disc_quote.h	/^        Quote(std::move(dq)), quantity(std::move(dq.quantity)), discount(std::move(dq.discount))$/;"	f	class:Disc_quote
operator !=	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\disc_quote.h	/^operator !=(const Disc_quote& lhs, const Disc_quote& rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\disc_quote.h	/^    Disc_quote& operator =(const Disc_quote& rhs)$/;"	f	class:Disc_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\disc_quote.h	/^    virtual double net_price(std::size_t n) const override = 0;$/;"	m	class:Disc_quote
quantity	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\disc_quote.h	/^    std::size_t quantity = 3;$/;"	m	class:Disc_quote
~Disc_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\disc_quote.h	/^    ~Disc_quote()$/;"	f	class:Disc_quote
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\limit_quote.cpp	/^void Limit_quote::debug() const$/;"	f	class:Limit_quote
LIMIT_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\limit_quote.h	2;"	d
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\limit_quote.h	/^    Limit_quote(const std::string& b, double p, std::size_t max, double disc):$/;"	f	class:Limit_quote
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\limit_quote.h	/^class Limit_quote : public Disc_quote$/;"	c
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\limit_quote.h	/^    void debug() const override;$/;"	m	class:Limit_quote
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\main.cpp	/^int main()$/;"	f
debug	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.cpp	/^void Quote::debug() const$/;"	f	class:Quote
print_total	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.cpp	/^double print_total(std::ostream &os,const Quote &item, size_t n)$/;"	f
QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.h	2;"	d
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.h	/^    Quote() { std::cout << "default constructing Quote\\n"; }$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.h	/^    Quote(const Quote& q) : bookNo(q.bookNo), price(q.price)$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.h	/^    Quote(const std::string &b, double p) :$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.h	/^class Quote$/;"	c
bookNo	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.h	/^    std::string bookNo;$/;"	m	class:Quote
clone	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.h	/^    virtual Quote* clone() &&      {return new Quote(std::move(*this));}$/;"	f	class:Quote
clone	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.h	/^    virtual Quote* clone() const & {return new Quote(*this);}$/;"	f	class:Quote
isbn	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.h	/^    std::string     isbn() const { return bookNo; }$/;"	f	class:Quote
move	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.h	/^    Quote(Quote&& q) noexcept : bookNo(std::move(q.bookNo)), price(std::move(q.price))$/;"	f	class:Quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.h	/^    virtual double  net_price(std::size_t n) const { return n * price; }$/;"	f	class:Quote
operator !=	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.h	/^operator !=(const Quote& lhs, const Quote& rhs)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.h	/^    Quote& operator =(const Quote& rhs)$/;"	f	class:Quote
price	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.h	/^    double  price = 10.0;$/;"	m	class:Quote
~Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.30\quote.h	/^    virtual ~Quote()$/;"	f	class:Quote
Foo	c++_primer\key_Cpp-Primer-master\ch15\ex15.31.32.33.cpp	/^    Foo(const std::vector<std::string>& t) :$/;"	f	class:Foo
Foo	c++_primer\key_Cpp-Primer-master\ch15\ex15.31.32.33.cpp	/^class Foo$/;"	c	file:
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.31.32.33.cpp	/^int main()$/;"	f
text	c++_primer\key_Cpp-Primer-master\ch15\ex15.31.32.33.cpp	/^    std::shared_ptr<std::vector<std::string>> text;$/;"	m	class:Foo	file:
STRBLOB_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	31;"	d
StrBlob	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^    StrBlob() : data(std::make_shared<std::vector<std::string>>()) { }$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^StrBlob::StrBlob(std::initializer_list<std::string> il): $/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^class StrBlob$/;"	c
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^    StrBlobPtr(): curr(0) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^    StrBlobPtr(StrBlob &a, size_t sz = 0) : wptr(a.data), curr(sz) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^    StrBlobPtr(const StrBlob &a, const size_t sz = 0) : wptr(a.data), curr(sz) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^class StrBlobPtr$/;"	c
begin	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^StrBlob::begin() $/;"	f	class:StrBlob
check	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^StrBlobPtr::check(std::size_t i, const std::string &msg) const$/;"	f	class:StrBlobPtr
curr	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^    std::size_t curr;      \/\/ current position within the array$/;"	m	class:StrBlobPtr
data	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^    std::shared_ptr<std::vector<std::string>> data; $/;"	m	class:StrBlob
decr	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^StrBlobPtr& StrBlobPtr::decr()$/;"	f	class:StrBlobPtr
deref	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^std::string& StrBlobPtr::deref() const$/;"	f	class:StrBlobPtr
empty	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^    bool empty() const { return data->empty(); }$/;"	f	class:StrBlob
end	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^StrBlob::end() $/;"	f	class:StrBlob
eq	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^bool eq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
incr	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^StrBlobPtr& StrBlobPtr::incr()$/;"	f	class:StrBlobPtr
neq	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^bool neq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
push_back	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^    void push_back(const std::string &t) { data->push_back(t); }$/;"	f	class:StrBlob
size	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^    size_type size() const { return data->size(); }$/;"	f	class:StrBlob
size_type	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^    typedef std::vector<std::string>::size_type size_type;$/;"	t	class:StrBlob
wptr	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\StrBlob.h	/^    std::weak_ptr<std::vector<std::string>> wptr;  $/;"	m	class:StrBlobPtr
ANDQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\andquery.h	2;"	d
AndQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\andquery.h	/^    AndQuery(const Query& left, const Query& right):$/;"	f	class:AndQuery
AndQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\andquery.h	/^class AndQuery : public BinaryQuery$/;"	c
operator &	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\andquery.h	/^inline Query operator& (const Query& lhs, const Query& rhs)$/;"	f
BINARYQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\binaryquery.h	2;"	d
BinaryQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\binaryquery.h	/^    BinaryQuery(const Query&l, const Query& r, std::string s):$/;"	f	class:BinaryQuery
BinaryQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\binaryquery.h	/^class BinaryQuery : public Query_base$/;"	c
lhs	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\binaryquery.h	/^    Query lhs, rhs;$/;"	m	class:BinaryQuery
opSym	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\binaryquery.h	/^    std::string opSym;$/;"	m	class:BinaryQuery
rhs	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\binaryquery.h	/^    Query lhs, rhs;$/;"	m	class:BinaryQuery
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\main.cpp	/^int main()$/;"	f
NOTQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\notquery.h	2;"	d
NotQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\notquery.h	/^    NotQuery(const Query& q): query(q)$/;"	f	class:NotQuery
NotQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\notquery.h	/^class NotQuery : public Query_base$/;"	c
operator ~	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\notquery.h	/^inline Query operator~(const Query& operand)$/;"	f
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\notquery.h	/^    QueryResult eval(const TextQuery &) const override;$/;"	m	class:NotQuery
query	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\notquery.h	/^    Query query;$/;"	m	class:NotQuery
ORQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\orquery.h	2;"	d
OrQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\orquery.h	/^    OrQuery(const Query& left, const Query& right):$/;"	f	class:OrQuery
OrQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\orquery.h	/^class OrQuery :public BinaryQuery$/;"	c
operator |	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\orquery.h	/^inline Query operator|(const Query &lhs, const Query& rhs)$/;"	f
QUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\query.h	2;"	d
Query	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\query.h	/^    Query(const std::string& s) : q(new WordQuery(s))$/;"	f	class:Query
Query	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\query.h	/^    Query(std::shared_ptr<Query_base> query) :$/;"	f	class:Query
Query	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\query.h	/^class Query$/;"	c
eval	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\query.h	/^    QueryResult eval(const TextQuery& t) const$/;"	f	class:Query
operator <<	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\query.h	/^operator << (std::ostream& os, const Query& query)$/;"	f
q	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\query.h	/^    std::shared_ptr<Query_base> q;$/;"	m	class:Query
rep	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\query.h	/^    std::string rep() const$/;"	f	class:Query
QUERY_BASE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\query_base.h	2;"	d
Query_base	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\query_base.h	/^class Query_base$/;"	c
print	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\queryresult.cpp	/^&print(std::ostream &os, const QueryResult &qr)$/;"	f
QUERYRESULT_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\queryresult.h	20;"	d
QueryResult	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\queryresult.h	/^    QueryResult(std::string s,$/;"	f	class:QueryResult
QueryResult	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\queryresult.h	/^class QueryResult$/;"	c
begin	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\queryresult.h	/^    begin() { return sp_lines->begin(); }$/;"	f	class:QueryResult
end	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\queryresult.h	/^    end()   { return sp_lines->end();   }$/;"	f	class:QueryResult
file	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\queryresult.h	/^    StrBlob file;$/;"	m	class:QueryResult
get_file	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\queryresult.h	/^    const StrBlob& get_file() const{ return file; }$/;"	f	class:QueryResult
sought	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\queryresult.h	/^    std::string sought;$/;"	m	class:QueryResult
sp_lines	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\queryresult.h	/^    std::shared_ptr<std::set<TextQuery::line_no>> sp_lines;$/;"	m	class:QueryResult
TextQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\textquery.cpp	/^TextQuery::TextQuery(std::ifstream &fin) :$/;"	f	class:TextQuery
query	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\textquery.cpp	/^TextQuery::query(const std::string &sought) const$/;"	f	class:TextQuery
TEXTQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\textquery.h	18;"	d
TextQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\textquery.h	/^class TextQuery$/;"	c
file	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\textquery.h	/^    StrBlob file;$/;"	m	class:TextQuery
line_no	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\textquery.h	/^    typedef StrBlob::size_type line_no;$/;"	t	class:TextQuery
wordMap	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\textquery.h	/^             std::shared_ptr<std::set<line_no>>> wordMap;$/;"	m	class:TextQuery
WORDQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\wordquery.h	2;"	d
WordQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\wordquery.h	/^    WordQuery(const std::string& s):$/;"	f	class:WordQuery
WordQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\wordquery.h	/^class WordQuery : public Query_base$/;"	c
query_word	c++_primer\key_Cpp-Primer-master\ch15\ex15.34.35.36.38\wordquery.h	/^    std::string query_word;$/;"	m	class:WordQuery
STRBLOB_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	31;"	d
StrBlob	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^    StrBlob() : data(std::make_shared<std::vector<std::string>>()) { }$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^StrBlob::StrBlob(std::initializer_list<std::string> il): $/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^class StrBlob$/;"	c
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^    StrBlobPtr(): curr(0) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^    StrBlobPtr(StrBlob &a, size_t sz = 0) : wptr(a.data), curr(sz) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^    StrBlobPtr(const StrBlob &a, const size_t sz = 0) : wptr(a.data), curr(sz) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^class StrBlobPtr$/;"	c
begin	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^StrBlob::begin() $/;"	f	class:StrBlob
check	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^StrBlobPtr::check(std::size_t i, const std::string &msg) const$/;"	f	class:StrBlobPtr
curr	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^    std::size_t curr;      \/\/ current position within the array$/;"	m	class:StrBlobPtr
data	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^    std::shared_ptr<std::vector<std::string>> data; $/;"	m	class:StrBlob
decr	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^StrBlobPtr& StrBlobPtr::decr()$/;"	f	class:StrBlobPtr
deref	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^std::string& StrBlobPtr::deref() const$/;"	f	class:StrBlobPtr
empty	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^    bool empty() const { return data->empty(); }$/;"	f	class:StrBlob
end	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^StrBlob::end() $/;"	f	class:StrBlob
eq	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^bool eq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
incr	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^StrBlobPtr& StrBlobPtr::incr()$/;"	f	class:StrBlobPtr
neq	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^bool neq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
push_back	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^    void push_back(const std::string &t) { data->push_back(t); }$/;"	f	class:StrBlob
size	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^    size_type size() const { return data->size(); }$/;"	f	class:StrBlob
size_type	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^    typedef std::vector<std::string>::size_type size_type;$/;"	t	class:StrBlob
wptr	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\StrBlob.h	/^    std::weak_ptr<std::vector<std::string>> wptr;  $/;"	m	class:StrBlobPtr
eval	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\andquery.cpp	/^QueryResult AndQuery::eval(const TextQuery &text) const$/;"	f	class:AndQuery
ANDQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\andquery.h	2;"	d
AndQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\andquery.h	/^    AndQuery(const Query& left, const Query& right):$/;"	f	class:AndQuery
AndQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\andquery.h	/^class AndQuery : public BinaryQuery$/;"	c
operator &	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\andquery.h	/^inline Query operator& (const Query& lhs, const Query& rhs)$/;"	f
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\andquery.h	/^    QueryResult eval(const TextQuery &) const override;$/;"	m	class:AndQuery
BINARYQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\binaryquery.h	2;"	d
BinaryQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\binaryquery.h	/^    BinaryQuery(const Query&l, const Query& r, std::string s):$/;"	f	class:BinaryQuery
BinaryQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\binaryquery.h	/^class BinaryQuery : public Query_base$/;"	c
lhs	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\binaryquery.h	/^    Query lhs, rhs;$/;"	m	class:BinaryQuery
opSym	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\binaryquery.h	/^    std::string opSym;$/;"	m	class:BinaryQuery
rhs	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\binaryquery.h	/^    Query lhs, rhs;$/;"	m	class:BinaryQuery
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\main.cpp	/^int main()$/;"	f
eval	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\notquery.cpp	/^QueryResult NotQuery::eval(const TextQuery &text) const$/;"	f	class:NotQuery
NOTQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\notquery.h	2;"	d
NotQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\notquery.h	/^    NotQuery(const Query& q): query(q)$/;"	f	class:NotQuery
NotQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\notquery.h	/^class NotQuery : public Query_base$/;"	c
operator ~	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\notquery.h	/^inline Query operator~(const Query& operand)$/;"	f
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\notquery.h	/^    QueryResult eval(const TextQuery &) const override;$/;"	m	class:NotQuery
query	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\notquery.h	/^    Query query;$/;"	m	class:NotQuery
eval	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\orquery.cpp	/^QueryResult OrQuery::eval(const TextQuery &text) const$/;"	f	class:OrQuery
ORQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\orquery.h	2;"	d
OrQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\orquery.h	/^    OrQuery(const Query& left, const Query& right):$/;"	f	class:OrQuery
OrQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\orquery.h	/^class OrQuery :public BinaryQuery$/;"	c
operator |	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\orquery.h	/^inline Query operator|(const Query &lhs, const Query& rhs)$/;"	f
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\orquery.h	/^    QueryResult eval(const TextQuery& )const override;$/;"	m	class:OrQuery
QUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\query.h	2;"	d
Query	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\query.h	/^    Query(const std::string& s) : q(new WordQuery(s))$/;"	f	class:Query
Query	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\query.h	/^    Query(std::shared_ptr<Query_base> query) :$/;"	f	class:Query
Query	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\query.h	/^class Query$/;"	c
eval	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\query.h	/^    QueryResult eval(const TextQuery& t) const$/;"	f	class:Query
operator <<	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\query.h	/^operator << (std::ostream& os, const Query& query)$/;"	f
q	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\query.h	/^    std::shared_ptr<Query_base> q;$/;"	m	class:Query
rep	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\query.h	/^    std::string rep() const$/;"	f	class:Query
QUERY_BASE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\query_base.h	2;"	d
Query_base	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\query_base.h	/^class Query_base$/;"	c
operator <<	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\queryresult.cpp	/^operator <<(std::ostream &os, const QueryResult &qr)$/;"	f
QUERYRESULT_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\queryresult.h	20;"	d
QueryResult	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\queryresult.h	/^    QueryResult(std::string s,$/;"	f	class:QueryResult
QueryResult	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\queryresult.h	/^class QueryResult$/;"	c
begin	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\queryresult.h	/^    begin() { return sp_lines->begin(); }$/;"	f	class:QueryResult
end	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\queryresult.h	/^    end()   { return sp_lines->end();   }$/;"	f	class:QueryResult
file	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\queryresult.h	/^    StrBlob file;$/;"	m	class:QueryResult
get_file	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\queryresult.h	/^    const StrBlob& get_file() const{ return file; }$/;"	f	class:QueryResult
sought	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\queryresult.h	/^    std::string sought;$/;"	m	class:QueryResult
sp_lines	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\queryresult.h	/^    std::shared_ptr<std::set<TextQuery::line_no>> sp_lines;$/;"	m	class:QueryResult
TextQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\textquery.cpp	/^TextQuery::TextQuery(std::ifstream &fin) :$/;"	f	class:TextQuery
query	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\textquery.cpp	/^TextQuery::query(const std::string &sought) const$/;"	f	class:TextQuery
TEXTQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\textquery.h	18;"	d
TextQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\textquery.h	/^class TextQuery$/;"	c
file	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\textquery.h	/^    StrBlob file;$/;"	m	class:TextQuery
line_no	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\textquery.h	/^    typedef StrBlob::size_type line_no;$/;"	t	class:TextQuery
wordMap	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\textquery.h	/^             std::shared_ptr<std::set<line_no>>> wordMap;$/;"	m	class:TextQuery
WORDQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\wordquery.h	2;"	d
WordQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\wordquery.h	/^    WordQuery(const std::string& s):$/;"	f	class:WordQuery
WordQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\wordquery.h	/^class WordQuery : public Query_base$/;"	c
query_word	c++_primer\key_Cpp-Primer-master\ch15\ex15.39.40\wordquery.h	/^    std::string query_word;$/;"	m	class:WordQuery
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\bulk_quote.cpp	/^double Bulk_quote::net_price(std::size_t n) const$/;"	f	class:Bulk_quote
BULK_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\bulk_quote.h	2;"	d
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\bulk_quote.h	/^    Bulk_quote(const std::string& b, double p, std::size_t q, double disc) :$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\bulk_quote.h	/^class Bulk_quote : public Quote$/;"	c
discount	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\bulk_quote.h	/^    double      discount    = 0.0;$/;"	m	class:Bulk_quote
min_qty	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\bulk_quote.h	/^    std::size_t min_qty     = 0;$/;"	m	class:Bulk_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\bulk_quote.h	/^    double net_price(std::size_t n) const override;$/;"	m	class:Bulk_quote
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\main.cpp	/^int main()$/;"	f
print_total	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\main.cpp	/^double print_total(std::ostream &os, const Quote &item, size_t n)$/;"	f
QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\quote.h	2;"	d
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\quote.h	/^    Quote(const std::string &b, double p) :$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\quote.h	/^class Quote$/;"	c
bookNo	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\quote.h	/^    std::string bookNo;$/;"	m	class:Quote
isbn	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\quote.h	/^    std::string     isbn() const { return bookNo; }$/;"	f	class:Quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\quote.h	/^    virtual double  net_price(std::size_t n) const { return n * price; }$/;"	f	class:Quote
price	c++_primer\key_Cpp-Primer-master\ch15\ex15.4.5.6\quote.h	/^    double  price = 0.0;$/;"	m	class:Quote
eval	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\andquery.cpp	/^AndQuery::eval(const TextQuery& text) const$/;"	f	class:AndQuery
AndQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\andquery.h	/^	AndQuery(const Query &left, const Query &right) :BinaryQuery(left, right, "&"){}$/;"	f	class:AndQuery
AndQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\andquery.h	/^class AndQuery :public BinaryQuery$/;"	c
_ANDQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\andquery.h	2;"	d
operator &	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\andquery.h	/^inline Query operator&(const Query &lhs, const Query &rhs)$/;"	f
BinaryQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\binaryquery.h	/^	BinaryQuery(const Query &l, const Query &r, string s) :lhs(l), rhs(r), opSym(s){}$/;"	f	class:BinaryQuery
BinaryQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\binaryquery.h	/^class BinaryQuery :public Query_base$/;"	c
_BINARYQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\binaryquery.h	2;"	d
lhs	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\binaryquery.h	/^	Query lhs, rhs;$/;"	m	class:BinaryQuery
opSym	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\binaryquery.h	/^	string opSym;$/;"	m	class:BinaryQuery
rep	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\binaryquery.h	/^	string rep() const$/;"	f	class:BinaryQuery
rhs	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\binaryquery.h	/^	Query lhs, rhs;$/;"	m	class:BinaryQuery
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\main.cpp	/^int main()$/;"	f
eval	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\notquery.cpp	/^NotQuery::eval(const TextQuery &text) const$/;"	f	class:NotQuery
NotQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\notquery.h	/^	NotQuery(const Query &q) :query(q){}$/;"	f	class:NotQuery
NotQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\notquery.h	/^class NotQuery :public Query_base$/;"	c
_NOTQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\notquery.h	2;"	d
operator ~	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\notquery.h	/^inline Query operator~(const Query &operand)$/;"	f
query	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\notquery.h	/^	Query query;$/;"	m	class:NotQuery
rep	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\notquery.h	/^	string rep() const{ return "~(" + query.rep() + ")"; }$/;"	f	class:NotQuery
eval	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\orquery.cpp	/^OrQuery::eval(const TextQuery &text) const$/;"	f	class:OrQuery
OrQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\orquery.h	/^	OrQuery(const Query &left, const Query &right) :BinaryQuery(left, right, "|"){}$/;"	f	class:OrQuery
OrQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\orquery.h	/^class OrQuery :public BinaryQuery$/;"	c
_ORQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\orquery.h	2;"	d
operator |	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\orquery.h	/^inline Query operator|(const Query &lhs, const Query &rhs)$/;"	f
operator <<	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\query.cpp	/^operator<<(ostream &os, const Query &query)$/;"	f
Query	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\query.h	/^	Query(shared_ptr<Query_base> query) :q(query){}$/;"	f	class:Query
Query	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\query.h	/^class Query$/;"	c
Query	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\query.h	/^inline Query::Query(const string &s) :q(new WordQuery(s)){}$/;"	f	class:Query
_QUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\query.h	2;"	d
eval	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\query.h	/^	QueryResult eval(const TextQuery &t) const { return q->eval(t); }$/;"	f	class:Query
q	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\query.h	/^	shared_ptr<Query_base> q;$/;"	m	class:Query
rep	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\query.h	/^	string rep() const { return q->rep(); }$/;"	f	class:Query
Query_base	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\query_base.h	/^class Query_base$/;"	c
_QUERY_BASE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\query_base.h	2;"	d
add_query	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\queryhistory.cpp	/^size_t QueryHistory::add_query(const Query &query)$/;"	f	class:QueryHistory
QueryHistory	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\queryhistory.h	/^class QueryHistory$/;"	c
_QUERYHISTORY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\queryhistory.h	2;"	d
operator []	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\queryhistory.h	/^	Query& operator[](size_t n)$/;"	f	class:QueryHistory
query_vec	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\queryhistory.h	/^	vector<shared_ptr<Query>> query_vec;$/;"	m	class:QueryHistory
print	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\queryresult.cpp	/^print(ostream &os, const QueryResult &qr)$/;"	f
QueryResult	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\queryresult.h	/^	QueryResult(string s,$/;"	f	class:QueryResult
QueryResult	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\queryresult.h	/^class QueryResult$/;"	c
_QUERYRESULT_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\queryresult.h	2;"	d
begin	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\queryresult.h	/^	set<TextQuery::line_no>::iterator begin(){ return lines->begin(); }$/;"	f	class:QueryResult
end	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\queryresult.h	/^	set<TextQuery::line_no>::iterator end(){ return lines->end(); }$/;"	f	class:QueryResult
file	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\queryresult.h	/^    shared_ptr<vector<string>> file;$/;"	m	class:QueryResult
get_file	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\queryresult.h	/^	shared_ptr<vector<string>> get_file(){ return file; }$/;"	f	class:QueryResult
lines	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\queryresult.h	/^    shared_ptr<set<TextQuery::line_no>> lines;$/;"	m	class:QueryResult
sought	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\queryresult.h	/^    string sought;$/;"	m	class:QueryResult
TextQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\textquery.cpp	/^TextQuery::TextQuery(ifstream& is) :file(new vector<string>)$/;"	f	class:TextQuery
handlePunct	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\textquery.cpp	/^shared_ptr<vector<string>> TextQuery::handlePunct(const string &s)$/;"	f	class:TextQuery
query	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\textquery.cpp	/^QueryResult TextQuery::query(const string &sought) const$/;"	f	class:TextQuery
TextQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\textquery.h	/^class TextQuery$/;"	c
_TEXTQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\textquery.h	2;"	d
file	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\textquery.h	/^    shared_ptr<vector<string>> file;$/;"	m	class:TextQuery
line_no	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\textquery.h	/^    typedef vector<string>::size_type line_no;$/;"	t	class:TextQuery
wm	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\textquery.h	/^	map<string, shared_ptr<set<line_no>>> wm;$/;"	m	class:TextQuery
WordQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\wordquery.h	/^	WordQuery(const string &s) :query_word(s){}$/;"	f	class:WordQuery
WordQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\wordquery.h	/^class WordQuery:public Query_base$/;"	c
_WORDQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\wordquery.h	2;"	d
eval	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\wordquery.h	/^	QueryResult eval(const TextQuery &t) const{ return t.query(query_word); }$/;"	f	class:WordQuery
query_word	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\wordquery.h	/^	string query_word;$/;"	m	class:WordQuery
rep	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_b\wordquery.h	/^	string rep() const { return query_word; }$/;"	f	class:WordQuery
eval	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\andquery.cpp	/^AndQuery::eval(const TextQuery& text) const$/;"	f	class:AndQuery
AndQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\andquery.h	/^	AndQuery(const Query &left, const Query &right) :BinaryQuery(left, right, "&"){}$/;"	f	class:AndQuery
AndQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\andquery.h	/^class AndQuery :public BinaryQuery$/;"	c
_ANDQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\andquery.h	2;"	d
operator &	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\andquery.h	/^inline Query operator&(const Query &lhs, const Query &rhs)$/;"	f
BinaryQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\binaryquery.h	/^	BinaryQuery(const Query &l, const Query &r, string s) :lhs(l), rhs(r), opSym(s){}$/;"	f	class:BinaryQuery
BinaryQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\binaryquery.h	/^class BinaryQuery :public Query_base$/;"	c
_BINARYQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\binaryquery.h	2;"	d
lhs	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\binaryquery.h	/^	Query lhs, rhs;$/;"	m	class:BinaryQuery
opSym	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\binaryquery.h	/^	string opSym;$/;"	m	class:BinaryQuery
rep	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\binaryquery.h	/^	string rep() const$/;"	f	class:BinaryQuery
rhs	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\binaryquery.h	/^	Query lhs, rhs;$/;"	m	class:BinaryQuery
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\main.cpp	/^int main()$/;"	f
eval	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\notquery.cpp	/^NotQuery::eval(const TextQuery &text) const$/;"	f	class:NotQuery
NotQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\notquery.h	/^	NotQuery(const Query &q) :query(q){}$/;"	f	class:NotQuery
NotQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\notquery.h	/^class NotQuery :public Query_base$/;"	c
_NOTQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\notquery.h	2;"	d
operator ~	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\notquery.h	/^inline Query operator~(const Query &operand)$/;"	f
query	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\notquery.h	/^	Query query;$/;"	m	class:NotQuery
rep	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\notquery.h	/^	string rep() const{ return "~(" + query.rep() + ")"; }$/;"	f	class:NotQuery
eval	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\orquery.cpp	/^OrQuery::eval(const TextQuery &text) const$/;"	f	class:OrQuery
OrQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\orquery.h	/^	OrQuery(const Query &left, const Query &right) :BinaryQuery(left, right, "|"){}$/;"	f	class:OrQuery
OrQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\orquery.h	/^class OrQuery :public BinaryQuery$/;"	c
_ORQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\orquery.h	2;"	d
operator |	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\orquery.h	/^inline Query operator|(const Query &lhs, const Query &rhs)$/;"	f
operator <<	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\query.cpp	/^operator<<(ostream &os, const Query &query)$/;"	f
Query	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\query.h	/^	Query(shared_ptr<Query_base> query) :q(query){}$/;"	f	class:Query
Query	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\query.h	/^class Query$/;"	c
Query	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\query.h	/^inline Query::Query(const string &s) :q(new WordQuery(s)){}$/;"	f	class:Query
_QUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\query.h	2;"	d
eval	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\query.h	/^	QueryResult eval(const TextQuery &t) const { return q->eval(t); }$/;"	f	class:Query
q	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\query.h	/^	shared_ptr<Query_base> q;$/;"	m	class:Query
rep	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\query.h	/^	string rep() const { return q->rep(); }$/;"	f	class:Query
Query_base	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\query_base.h	/^class Query_base$/;"	c
_QUERY_BASE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\query_base.h	2;"	d
print	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\queryresult.cpp	/^print(ostream &os, const QueryResult &qr)$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\queryresult.cpp	/^print(ostream& os, const QueryResult &qr,size_t head, size_t trail)$/;"	f
QueryResult	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\queryresult.h	/^	QueryResult(string s,$/;"	f	class:QueryResult
QueryResult	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\queryresult.h	/^class QueryResult$/;"	c
_QUERYRESULT_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\queryresult.h	2;"	d
begin	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\queryresult.h	/^	set<TextQuery::line_no>::iterator begin(){ return lines->begin(); }$/;"	f	class:QueryResult
end	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\queryresult.h	/^	set<TextQuery::line_no>::iterator end(){ return lines->end(); }$/;"	f	class:QueryResult
file	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\queryresult.h	/^    shared_ptr<vector<string>> file;$/;"	m	class:QueryResult
get_file	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\queryresult.h	/^	shared_ptr<vector<string>> get_file(){ return file; }$/;"	f	class:QueryResult
line_no	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\queryresult.h	/^	TextQuery::line_no line_no() const { return lines->size(); }$/;"	f	class:QueryResult
lines	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\queryresult.h	/^    shared_ptr<set<TextQuery::line_no>> lines;$/;"	m	class:QueryResult
sought	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\queryresult.h	/^    string sought;$/;"	m	class:QueryResult
TextQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\textquery.cpp	/^TextQuery::TextQuery(ifstream& is) :file(new vector<string>)$/;"	f	class:TextQuery
handlePunct	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\textquery.cpp	/^shared_ptr<vector<string>> TextQuery::handlePunct(const string &s)$/;"	f	class:TextQuery
query	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\textquery.cpp	/^QueryResult TextQuery::query(const string &sought) const$/;"	f	class:TextQuery
TextQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\textquery.h	/^class TextQuery$/;"	c
_TEXTQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\textquery.h	2;"	d
file	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\textquery.h	/^    shared_ptr<vector<string>> file;$/;"	m	class:TextQuery
line_no	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\textquery.h	/^    typedef vector<string>::size_type line_no;$/;"	t	class:TextQuery
wm	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\textquery.h	/^	map<string, shared_ptr<set<line_no>>> wm;$/;"	m	class:TextQuery
WordQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\wordquery.h	/^	WordQuery(const string &s) :query_word(s){}$/;"	f	class:WordQuery
WordQuery	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\wordquery.h	/^class WordQuery:public Query_base$/;"	c
_WORDQUERY_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\wordquery.h	2;"	d
eval	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\wordquery.h	/^	QueryResult eval(const TextQuery &t) const{ return t.query(query_word); }$/;"	f	class:WordQuery
query_word	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\wordquery.h	/^	string query_word;$/;"	m	class:WordQuery
rep	c++_primer\key_Cpp-Primer-master\ch15\ex15.42_c\wordquery.h	/^	string rep() const { return query_word; }$/;"	f	class:WordQuery
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\bulk_quote.cpp	/^double Bulk_quote::net_price(std::size_t n) const$/;"	f	class:Bulk_quote
BULK_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\bulk_quote.h	2;"	d
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\bulk_quote.h	/^    Bulk_quote(const std::string& b, double p, std::size_t q, double disc) :$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\bulk_quote.h	/^class Bulk_quote : public Quote$/;"	c
discount	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\bulk_quote.h	/^    double      discount    = 0.0;$/;"	m	class:Bulk_quote
min_qty	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\bulk_quote.h	/^    std::size_t min_qty     = 0;$/;"	m	class:Bulk_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\bulk_quote.h	/^    double net_price(std::size_t n) const override;$/;"	m	class:Bulk_quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\limit_quote.cpp	/^double Limit_quote::net_price(std::size_t n) const$/;"	f	class:Limit_quote
LIMIT_QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\limit_quote.h	2;"	d
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\limit_quote.h	/^    Limit_quote(const std::string& b, double p, std::size_t max, double disc):$/;"	f	class:Limit_quote
Limit_quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\limit_quote.h	/^class Limit_quote : public Quote$/;"	c
discount	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\limit_quote.h	/^    double      discount    = 0.0;$/;"	m	class:Limit_quote
max_qty	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\limit_quote.h	/^    std::size_t max_qty     = 0;$/;"	m	class:Limit_quote
override	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\limit_quote.h	/^    double net_price(std::size_t n) const override;$/;"	m	class:Limit_quote
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\main.cpp	/^int main()$/;"	f
print_total	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\main.cpp	/^double print_total(std::ostream &os, const Quote &item, size_t n)$/;"	f
QUOTE_H	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\quote.h	2;"	d
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\quote.h	/^    Quote(const std::string &b, double p) :$/;"	f	class:Quote
Quote	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\quote.h	/^class Quote$/;"	c
bookNo	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\quote.h	/^    std::string bookNo;$/;"	m	class:Quote
isbn	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\quote.h	/^    std::string     isbn() const { return bookNo; }$/;"	f	class:Quote
net_price	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\quote.h	/^    virtual double  net_price(std::size_t n) const { return n * price; }$/;"	f	class:Quote
price	c++_primer\key_Cpp-Primer-master\ch15\ex15.7\quote.h	/^    double  price = 0.0;$/;"	m	class:Quote
main	c++_primer\key_Cpp-Primer-master\ch15\ex15.8.9.10\ex15.8.9.10.cpp	/^int main()$/;"	f
print_total	c++_primer\key_Cpp-Primer-master\ch15\ex15.8.9.10\ex15.8.9.10.cpp	/^double print_total(std::ostream &os, const Quote &item, size_t n)$/;"	f
Sales_data	c++_primer\key_Cpp-Primer-master\ch16\ex16.1.2.3\main.cpp	/^class Sales_data{};$/;"	c	file:
compare	c++_primer\key_Cpp-Primer-master\ch16\ex16.1.2.3\main.cpp	/^int compare(const T& lhs, const T& rhs)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.1.2.3\main.cpp	/^int main()$/;"	f
BLOB_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	2;"	d
Blob	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^Blob<T>::Blob() : data(std::make_shared<std::vector<T>>())$/;"	f	class:Blob
Blob	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^Blob<T>::Blob(std::initializer_list<T> il):$/;"	f	class:Blob
Blob	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^template<typename T> class Blob$/;"	c
back	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^T& Blob<T>::back()$/;"	f	class:Blob
back	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^const T& Blob<T>::back() const$/;"	f	class:Blob
check	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^void Blob<T>::check(size_type i, const std::string &msg) const$/;"	f	class:Blob
data	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^    std::shared_ptr<std::vector<T>> data;$/;"	m	class:Blob
empty	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^    bool      empty() const{ return data->empty();}$/;"	f	class:Blob
operator []	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^T& Blob<T>::operator [](size_type i)$/;"	f	class:Blob
operator []	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^const T& Blob<T>::operator [](size_type i) const$/;"	f	class:Blob
pop_back	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^void Blob<T>::pop_back()$/;"	f	class:Blob
push_back	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^    void push_back(T&& t)      { data->push_back(std::move(t));}$/;"	f	class:Blob
push_back	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^    void push_back(const T& t) { data->push_back(t); }$/;"	f	class:Blob
size	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^    size_type size() const { return data->size(); }$/;"	f	class:Blob
size_type	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^    typedef typename std::vector<T>::size_type size_type;$/;"	t	class:Blob
value_type	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\Blob.h	/^    typedef T value_type;$/;"	t	class:Blob
BLOBPTR_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\blobptr.h	2;"	d
BlobPtr	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\blobptr.h	/^    BlobPtr() : curr(0) { }$/;"	f	class:BlobPtr
BlobPtr	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\blobptr.h	/^    BlobPtr(Blob<T>& a, std::size_t sz = 0) :$/;"	f	class:BlobPtr
BlobPtr	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\blobptr.h	/^template<typename T> class BlobPtr$/;"	c
curr	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\blobptr.h	/^    std::size_t curr;$/;"	m	class:BlobPtr
operator *	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\blobptr.h	/^    T& operator*() const$/;"	f	class:BlobPtr
operator ++	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\blobptr.h	/^BlobPtr<T> BlobPtr<T>::operator ++(int)$/;"	f	class:BlobPtr
operator ++	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\blobptr.h	/^BlobPtr<T>& BlobPtr<T>::operator ++()$/;"	f	class:BlobPtr
operator --	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\blobptr.h	/^BlobPtr<T> BlobPtr<T>::operator --(int)$/;"	f	class:BlobPtr
operator --	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\blobptr.h	/^BlobPtr<T>& BlobPtr<T>::operator --()$/;"	f	class:BlobPtr
operator <	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\blobptr.h	/^template<typename T> bool operator< (const BlobPtr<T> &lhs, const BlobPtr<T> &rhs) {$/;"	f
operator ==	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\blobptr.h	/^template<typename T> bool operator==(const StrPtr<T> &lhs, const StrPtr<T> &rhs) {$/;"	f
wptr	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\blobptr.h	/^    std::weak_ptr<std::vector<T>> wptr;$/;"	m	class:BlobPtr
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.12.13\main.cpp	/^int main()$/;"	f
SCREEN_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.14.15\Screen.h	8;"	d
Screen	c++_primer\key_Cpp-Primer-master\ch16\ex16.14.15\Screen.h	/^    Screen(char c):contents(H * W, c) { }$/;"	f	class:Screen
Screen	c++_primer\key_Cpp-Primer-master\ch16\ex16.14.15\Screen.h	/^class Screen {$/;"	c
contents	c++_primer\key_Cpp-Primer-master\ch16\ex16.14.15\Screen.h	/^    std::string contents;$/;"	m	class:Screen
cursor	c++_primer\key_Cpp-Primer-master\ch16\ex16.14.15\Screen.h	/^    pos cursor = 0;$/;"	m	class:Screen
get	c++_primer\key_Cpp-Primer-master\ch16\ex16.14.15\Screen.h	/^    char get() const              \/\/ get the character at the cursor$/;"	f	class:Screen
height	c++_primer\key_Cpp-Primer-master\ch16\ex16.14.15\Screen.h	/^    pos height = H, width = W;$/;"	m	class:Screen
move	c++_primer\key_Cpp-Primer-master\ch16\ex16.14.15\Screen.h	/^inline Screen<H, W>& Screen<H, W>::move(pos r, pos c)$/;"	f	class:Screen
operator <<	c++_primer\key_Cpp-Primer-master\ch16\ex16.14.15\Screen.h	/^    friend std::ostream & operator<< ( std::ostream &os , const Screen<H,W> & c ) $/;"	f	class:Screen
operator >>	c++_primer\key_Cpp-Primer-master\ch16\ex16.14.15\Screen.h	/^    friend std::istream & operator>> ( std::istream &is , Screen &  c )$/;"	f	class:Screen
pos	c++_primer\key_Cpp-Primer-master\ch16\ex16.14.15\Screen.h	/^    typedef std::string::size_type pos;$/;"	t	class:Screen
width	c++_primer\key_Cpp-Primer-master\ch16\ex16.14.15\Screen.h	/^    pos height = H, width = W;$/;"	m	class:Screen
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.14.15\main.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\main.cpp	/^int main()$/;"	f
VEC_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	9;"	d
Vec	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^    Vec():element(nullptr), first_free(nullptr), cap(nullptr){ }$/;"	f	class:Vec
Vec	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^Vec<T>::Vec(const Vec &v)$/;"	f	class:Vec
Vec	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^Vec<T>::Vec(std::initializer_list<T> l)$/;"	f	class:Vec
Vec	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^class Vec$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^    std::allocator<T> alloc;$/;"	m	class:Vec
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^Vec<T>::alloc_n_copy(T *b, T *e)$/;"	f	class:Vec
begin	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^    T* begin() const { return element;      }$/;"	f	class:Vec
cap	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^    T* cap;$/;"	m	class:Vec
capacity	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^    std::size_t capacity()const { return cap - element; }$/;"	f	class:Vec
chk_n_alloc	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^    void chk_n_alloc()  { if(size()==capacity()) reallocate();}$/;"	f	class:Vec
element	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^    T* element;$/;"	m	class:Vec
end	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^    T* end()   const { return first_free;   }$/;"	f	class:Vec
first_free	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^    T* first_free;$/;"	m	class:Vec
free	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^void Vec<T>::free()$/;"	f	class:Vec
operator =	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^Vec<T>& Vec<T>::operator =(const Vec& rhs)$/;"	f	class:Vec
push_back	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^void Vec<T>::push_back(const T &t)$/;"	f	class:Vec
reallocate	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^void Vec<T>::reallocate()$/;"	f	class:Vec
reserve	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^void Vec<T>::reserve(std::size_t n)$/;"	f	class:Vec
resize	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^void Vec<T>::resize(std::size_t n)$/;"	f	class:Vec
resize	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^void Vec<T>::resize(std::size_t n, const T &t)$/;"	f	class:Vec
size	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^    std::size_t size() const    { return first_free - element; }$/;"	f	class:Vec
wy_alloc_n_move	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^void Vec<T>::wy_alloc_n_move(std::size_t n)$/;"	f	class:Vec
~Vec	c++_primer\key_Cpp-Primer-master\ch16\ex16.16\vec.h	/^Vec<T>::~Vec()$/;"	f	class:Vec
C	c++_primer\key_Cpp-Primer-master\ch16\ex16.17.18\main.cpp	/^typedef char C;$/;"	t	file:
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.17.18\main.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.19.20\main.cpp	/^int main()$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch16\ex16.19.20\main.cpp	/^std::ostream & print(Container &c, std::ostream &os)$/;"	f
print2	c++_primer\key_Cpp-Primer-master\ch16\ex16.19.20\main.cpp	/^std::ostream& print2(Container& c, std::ostream &os)$/;"	f
DEBUGDELETE_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\DebugDelete.h	2;"	d
DebugDelete	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\DebugDelete.h	/^    DebugDelete(std::ostream& s = std::cerr) : os(s) { }$/;"	f	class:DebugDelete
DebugDelete	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\DebugDelete.h	/^class DebugDelete$/;"	c
operator ()	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\DebugDelete.h	/^    void operator() (T* p) const$/;"	f	class:DebugDelete
os	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\DebugDelete.h	/^    std::ostream& os;$/;"	m	class:DebugDelete
STRBLOB_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	31;"	d
StrBlob	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^    StrBlob() : data(std::make_shared<std::vector<std::string>>()) { }$/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^StrBlob::StrBlob(std::initializer_list<std::string> il): $/;"	f	class:StrBlob
StrBlob	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^class StrBlob$/;"	c
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^    StrBlobPtr(): curr(0) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^    StrBlobPtr(StrBlob &a, size_t sz = 0) : wptr(a.data), curr(sz) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^    StrBlobPtr(const StrBlob &a, const size_t sz = 0) : wptr(a.data), curr(sz) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^class StrBlobPtr$/;"	c
begin	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^StrBlob::begin() $/;"	f	class:StrBlob
check	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^StrBlobPtr::check(std::size_t i, const std::string &msg) const$/;"	f	class:StrBlobPtr
curr	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^    std::size_t curr;      \/\/ current position within the array$/;"	m	class:StrBlobPtr
data	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^    std::shared_ptr<std::vector<std::string>> data; $/;"	m	class:StrBlob
decr	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^StrBlobPtr& StrBlobPtr::decr()$/;"	f	class:StrBlobPtr
deref	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^std::string& StrBlobPtr::deref() const$/;"	f	class:StrBlobPtr
empty	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^    bool empty() const { return data->empty(); }$/;"	f	class:StrBlob
end	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^StrBlob::end() $/;"	f	class:StrBlob
eq	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^bool eq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
incr	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^StrBlobPtr& StrBlobPtr::incr()$/;"	f	class:StrBlobPtr
neq	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^bool neq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
push_back	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^    void push_back(const std::string &t) { data->push_back(t); }$/;"	f	class:StrBlob
size	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^    size_type size() const { return data->size(); }$/;"	f	class:StrBlob
size_type	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^    typedef std::vector<std::string>::size_type size_type;$/;"	t	class:StrBlob
wptr	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\StrBlob.h	/^    std::weak_ptr<std::vector<std::string>> wptr;  $/;"	m	class:StrBlobPtr
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\main.cpp	/^int main()$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_queryresult.cpp	/^void print(std::ostream &os, const wy_queryResult &qr)$/;"	f
wy_queryResult	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_queryresult.cpp	/^inline wy_queryResult::wy_queryResult(const wy_queryResult &qr):$/;"	f	class:wy_queryResult
wy_queryResult	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_queryresult.cpp	/^wy_queryResult::wy_queryResult(std::size_t c, const std::string &str,$/;"	f	class:wy_queryResult
WY_QUERYRESULT_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_queryresult.h	17;"	d
counter	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_queryresult.h	/^    std::size_t counter = 0;$/;"	m	class:wy_queryResult
getCounter	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_queryresult.h	/^    getCounter() const { return counter; }$/;"	f	class:wy_queryResult
getQueryWord	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_queryresult.h	/^    getQueryWord() const { return queryWord; }$/;"	f	class:wy_queryResult
getSp_Qmap	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_queryresult.h	/^    getSp_Qmap() const { return sp_Qmap; }$/;"	f	class:wy_queryResult
getSp_file	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_queryresult.h	/^    getSp_file() const { return sp_file; }$/;"	f	class:wy_queryResult
queryWord	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_queryresult.h	/^    std::string queryWord = "";$/;"	m	class:wy_queryResult
sp_Qmap	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_queryresult.h	/^    wy_textQuery::sp_Qmap_Tp sp_Qmap = nullptr;$/;"	m	class:wy_queryResult
sp_file	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_queryresult.h	/^    wy_textQuery::sp_file_Tp sp_file = nullptr;$/;"	m	class:wy_queryResult
wy_queryResult	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_queryresult.h	/^class wy_queryResult$/;"	c
query	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_textquery.cpp	/^wy_textQuery::query(const std::string &qWord) const$/;"	f	class:wy_textQuery
wy_textQuery	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_textquery.cpp	/^wy_textQuery::wy_textQuery(std::ifstream &fin) :$/;"	f	class:wy_textQuery
WY_TEXTQUERY_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_textquery.h	16;"	d
sp_Qmap_Tp	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_textquery.h	/^    typedef std::shared_ptr<std::map<std::string,std::set<int>>> sp_Qmap_Tp;$/;"	t	class:wy_textQuery
sp_fileData	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_textquery.h	/^    sp_file_Tp sp_fileData = nullptr;$/;"	m	class:wy_textQuery
sp_file_Tp	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_textquery.h	/^    typedef std::shared_ptr<std::vector<std::string>> sp_file_Tp;$/;"	t	class:wy_textQuery
sp_queryMap	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_textquery.h	/^    sp_Qmap_Tp sp_queryMap = nullptr;$/;"	m	class:wy_textQuery
wy_textQuery	c++_primer\key_Cpp-Primer-master\ch16\ex16.21.22\wy_textquery.h	/^class wy_textQuery$/;"	c
BLOB_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	10;"	d
Blob	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^Blob<T>::Blob() : data(std::make_shared<std::vector<T>>())$/;"	f	class:Blob
Blob	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^Blob<T>::Blob(It b, It e) :$/;"	f	class:Blob
Blob	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^Blob<T>::Blob(std::initializer_list<T> il):$/;"	f	class:Blob
Blob	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^template<typename T> class Blob$/;"	c
back	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^T& Blob<T>::back()$/;"	f	class:Blob
back	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^const T& Blob<T>::back() const$/;"	f	class:Blob
check	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^void Blob<T>::check(size_type i, const std::string &msg) const$/;"	f	class:Blob
data	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^    std::shared_ptr<std::vector<T>> data;$/;"	m	class:Blob
empty	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^    bool      empty() const{ return data->empty();}$/;"	f	class:Blob
operator []	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^T& Blob<T>::operator [](size_type i)$/;"	f	class:Blob
operator []	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^const T& Blob<T>::operator [](size_type i) const$/;"	f	class:Blob
pop_back	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^void Blob<T>::pop_back()$/;"	f	class:Blob
push_back	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^    void push_back(T&& t)      { data->push_back(std::move(t));}$/;"	f	class:Blob
push_back	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^    void push_back(const T& t) { data->push_back(t); }$/;"	f	class:Blob
size	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^    size_type size() const { return data->size(); }$/;"	f	class:Blob
size_type	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^    typedef typename std::vector<T>::size_type size_type;$/;"	t	class:Blob
value_type	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\Blob.h	/^    typedef T value_type;$/;"	t	class:Blob
BLOBPTR_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\blobptr.h	2;"	d
BlobPtr	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\blobptr.h	/^    BlobPtr() : curr(0) { }$/;"	f	class:BlobPtr
BlobPtr	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\blobptr.h	/^    BlobPtr(Blob<T>& a, std::size_t sz = 0) :$/;"	f	class:BlobPtr
BlobPtr	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\blobptr.h	/^template<typename T> class BlobPtr$/;"	c
curr	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\blobptr.h	/^    std::size_t curr;$/;"	m	class:BlobPtr
operator *	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\blobptr.h	/^    T& operator*() const$/;"	f	class:BlobPtr
operator ++	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\blobptr.h	/^BlobPtr<T> BlobPtr<T>::operator ++(int)$/;"	f	class:BlobPtr
operator ++	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\blobptr.h	/^BlobPtr<T>& BlobPtr<T>::operator ++()$/;"	f	class:BlobPtr
operator --	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\blobptr.h	/^BlobPtr<T> BlobPtr<T>::operator --(int)$/;"	f	class:BlobPtr
operator --	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\blobptr.h	/^BlobPtr<T>& BlobPtr<T>::operator --()$/;"	f	class:BlobPtr
wptr	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\blobptr.h	/^    std::weak_ptr<std::vector<T>> wptr;$/;"	m	class:BlobPtr
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.24\main.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.25.26\main.cpp	/^int main()$/;"	f
Delete	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\delete.hpp	/^    struct Delete$/;"	s	namespace:cp5
cp5	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\delete.hpp	/^namespace cp5$/;"	n
operator ()	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\delete.hpp	/^        void operator() (T* p) const$/;"	f	struct:cp5::Delete
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\main.cpp	/^int main()$/;"	f
SharedPointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        SharedPointer()$/;"	f	class:cp5::SharedPointer
SharedPointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        SharedPointer(SharedPointer const& other)$/;"	f	class:cp5::SharedPointer
SharedPointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        explicit SharedPointer(T* raw_ptr)$/;"	f	class:cp5::SharedPointer
SharedPointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^    class SharedPointer$/;"	c	namespace:cp5
cp5	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^namespace cp5$/;"	n
decrement_and_destroy	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        void decrement_and_destroy()$/;"	f	class:cp5::SharedPointer
deleter	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        std::function<void(T*)> deleter;$/;"	m	class:cp5::SharedPointer
operator *	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        T& operator* () const $/;"	f	class:cp5::SharedPointer
operator ->	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        T* operator->() const $/;"	f	class:cp5::SharedPointer
operator =	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        SharedPointer& operator=(SharedPointer const& rhs)$/;"	f	class:cp5::SharedPointer
operator bool	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        operator bool() const $/;"	f	class:cp5::SharedPointer
ptr	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        T* ptr;$/;"	m	class:cp5::SharedPointer
ref_count	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        std::size_t* ref_count;$/;"	m	class:cp5::SharedPointer
reset	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        void reset(T *pointer, const std::function<void(T*)>& d)$/;"	f	class:cp5::SharedPointer
reset	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        void reset(T* pointer)$/;"	f	class:cp5::SharedPointer
swap	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        void swap(SharedPointer& rhs) $/;"	f	class:cp5::SharedPointer
swap	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^    void swap(SharedPointer<T>& lhs, SharedPointer<T>& rhs)$/;"	f	namespace:cp5
use_count	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        std::size_t use_count() const $/;"	f	class:cp5::SharedPointer
~SharedPointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\shared_pointer.hpp	/^        ~SharedPointer()$/;"	f	class:cp5::SharedPointer
UNIQUE_POINTER_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\unique_pointer.h	2;"	d
deleter	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\unique_pointer.h	/^    D  deleter = D();$/;"	m	class:unique_pointer
noexcept	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\unique_pointer.h	/^    unique_pointer& operator =(std::nullptr_t n) noexcept;$/;"	m	class:unique_pointer
noexcept	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\unique_pointer.h	/^    unique_pointer& operator =(unique_pointer&& rhs) noexcept;$/;"	m	class:unique_pointer
operator *	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\unique_pointer.h	/^    T& operator  *() const   { return *ptr; }$/;"	f	class:unique_pointer
operator ->	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\unique_pointer.h	/^    T* operator ->() const   { return & this->operator *(); }$/;"	f	class:unique_pointer
operator bool	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\unique_pointer.h	/^     operator bool() const   { return ptr ? true : false;   }$/;"	f	class:unique_pointer
ptr	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\unique_pointer.h	/^        : ptr(up.ptr)   { up.ptr = nullptr; }$/;"	f	class:unique_pointer
ptr	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\unique_pointer.h	/^    T* ptr = nullptr;$/;"	m	class:unique_pointer
release	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\unique_pointer.h	/^unique_pointer<T,D>::release()$/;"	f	class:unique_pointer
swap	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\unique_pointer.h	/^    void swap(unique_pointer<T, D> &rhs)  {::swap(*this, rhs);}$/;"	f	class:unique_pointer
swap	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\unique_pointer.h	/^swap(unique_pointer<T,D>& lhs, unique_pointer<T,D>& rhs)$/;"	f
unique_pointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\unique_pointer.h	/^    explicit unique_pointer(T* up): ptr(up) { }$/;"	f	class:unique_pointer
unique_pointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\unique_pointer.h	/^class unique_pointer$/;"	c
~unique_pointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.28\unique_pointer.h	/^    ~unique_pointer()$/;"	f	class:unique_pointer
BLOB_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	11;"	d
Blob	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^Blob<T>::Blob() : data(std::make_shared<std::vector<T>>())$/;"	f	class:Blob
Blob	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^Blob<T>::Blob(It b, It e) :$/;"	f	class:Blob
Blob	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^Blob<T>::Blob(std::initializer_list<T> il):$/;"	f	class:Blob
Blob	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^template<typename T> class Blob$/;"	c
back	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^T& Blob<T>::back()$/;"	f	class:Blob
back	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^const T& Blob<T>::back() const$/;"	f	class:Blob
check	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^void Blob<T>::check(size_type i, const std::string &msg) const$/;"	f	class:Blob
data	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^    shared_pointer<std::vector<T>> data;$/;"	m	class:Blob
empty	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^    bool      empty() const{ return data->empty();}$/;"	f	class:Blob
operator []	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^T& Blob<T>::operator [](size_type i)$/;"	f	class:Blob
operator []	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^const T& Blob<T>::operator [](size_type i) const$/;"	f	class:Blob
pop_back	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^void Blob<T>::pop_back()$/;"	f	class:Blob
push_back	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^    void push_back(T&& t)      { data->push_back(std::move(t));}$/;"	f	class:Blob
push_back	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^    void push_back(const T& t) { data->push_back(t); }$/;"	f	class:Blob
size	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^    size_type size() const { return data->size(); }$/;"	f	class:Blob
size_type	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^    typedef typename std::vector<T>::size_type size_type;$/;"	t	class:Blob
value_type	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\Blob.h	/^    typedef T value_type;$/;"	t	class:Blob
DEBUGDELETE_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\DebugDelete.h	10;"	d
DebugDelete	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\DebugDelete.h	/^    DebugDelete(std::ostream& s = std::cerr) : os(s) { }$/;"	f	class:DebugDelete
DebugDelete	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\DebugDelete.h	/^class DebugDelete$/;"	c
operator ()	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\DebugDelete.h	/^    void operator() (T* p) const$/;"	f	class:DebugDelete
os	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\DebugDelete.h	/^    std::ostream& os;$/;"	m	class:DebugDelete
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\main.cpp	/^int main()$/;"	f
SHARED_POINTER_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	9;"	d
decrement_n_destroy	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^shared_pointer<T>::decrement_n_destroy()$/;"	f	class:shared_pointer
move	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^    ptr(sp.ptr), refCount(sp.refCount), deleter(std::move(sp.deleter))$/;"	f
noexcept	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^    shared_pointer& operator =(shared_pointer&& rhs) noexcept;$/;"	m	class:shared_pointer
noexcept	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^    shared_pointer(shared_pointer&& sp) noexcept;$/;"	m	class:shared_pointer
operator *	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^    T& operator* () const { return *ptr; }$/;"	f	class:shared_pointer
operator ->	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^    T* operator->() const { return & this->operator *(); }$/;"	f	class:shared_pointer
operator <<	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^operator <<(std::ostream& os, shared_pointer<T> p)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^shared_pointer<T>::operator =(const shared_pointer& rhs)$/;"	f	class:shared_pointer
operator bool	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^    operator bool() const { return ptr ? true : false;}$/;"	f	class:shared_pointer
ptr	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^    T* ptr = nullptr;$/;"	m	class:shared_pointer
refCount	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^    std::size_t* refCount = new std::size_t(0);$/;"	m	class:shared_pointer
reset	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^    void reset(T *p, const std::function<void(T*)>& d)$/;"	f	class:shared_pointer
reset	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^shared_pointer<T>::reset(T* p)$/;"	f	class:shared_pointer
shared_pointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^    explicit shared_pointer(T* up, std::function<void(T*)> d = DebugDelete()) :$/;"	f	class:shared_pointer
shared_pointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^    shared_pointer(const shared_pointer& sp):$/;"	f	class:shared_pointer
shared_pointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^class shared_pointer$/;"	c
shared_pointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^shared_pointer<T>::shared_pointer(std::shared_ptr<T>&& sp,$/;"	f	class:shared_pointer
swap	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^    void swap( shared_pointer& rhs) { ::swap(*this, rhs); }$/;"	f	class:shared_pointer
swap	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^swap(shared_pointer<T>& lhs, shared_pointer<T>& rhs)$/;"	f
use_count	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^    std::size_t use_count() const { return *refCount; }$/;"	f	class:shared_pointer
~shared_pointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\shared_pointer.h	/^    ~shared_pointer()$/;"	f	class:shared_pointer
UNIQUE_POINTER_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\unique_pointer.h	2;"	d
deleter	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\unique_pointer.h	/^    D  deleter = D();$/;"	m	class:unique_pointer
noexcept	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\unique_pointer.h	/^    unique_pointer& operator =(std::nullptr_t n) noexcept;$/;"	m	class:unique_pointer
noexcept	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\unique_pointer.h	/^    unique_pointer& operator =(unique_pointer&& rhs) noexcept;$/;"	m	class:unique_pointer
operator *	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\unique_pointer.h	/^    T& operator  *() const   { return *ptr; }$/;"	f	class:unique_pointer
operator ->	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\unique_pointer.h	/^    T* operator ->() const   { return & this->operator *(); }$/;"	f	class:unique_pointer
operator bool	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\unique_pointer.h	/^     operator bool() const   { return ptr ? true : false;   }$/;"	f	class:unique_pointer
ptr	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\unique_pointer.h	/^        : ptr(up.ptr)   { up.ptr = nullptr; }$/;"	f	class:unique_pointer
ptr	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\unique_pointer.h	/^    T* ptr = nullptr;$/;"	m	class:unique_pointer
release	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\unique_pointer.h	/^unique_pointer<T,D>::release()$/;"	f	class:unique_pointer
swap	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\unique_pointer.h	/^    void swap(unique_pointer<T, D> &rhs)  {::swap(*this, rhs);}$/;"	f	class:unique_pointer
swap	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\unique_pointer.h	/^swap(unique_pointer<T,D>& lhs, unique_pointer<T,D>& rhs)$/;"	f
unique_pointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\unique_pointer.h	/^    explicit unique_pointer(T* up): ptr(up) { }$/;"	f	class:unique_pointer
unique_pointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\unique_pointer.h	/^class unique_pointer$/;"	c
~unique_pointer	c++_primer\key_Cpp-Primer-master\ch16\ex16.29\unique_pointer.h	/^    ~unique_pointer()$/;"	f	class:unique_pointer
f1	c++_primer\key_Cpp-Primer-master\ch16\ex16.32.33.34.35.36\main.cpp	/^void f1(T lhs, T rhs)  {   }$/;"	f
f2	c++_primer\key_Cpp-Primer-master\ch16\ex16.32.33.34.35.36\main.cpp	/^void f2(T1 t1, T2 t2)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.32.33.34.35.36\main.cpp	/^int main()$/;"	f
compare	c++_primer\key_Cpp-Primer-master\ch16\ex16.37.38.39\main.cpp	/^int compare(const T &v1, const T &v2)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.37.38.39\main.cpp	/^int main()$/;"	f
Bar	c++_primer\key_Cpp-Primer-master\ch16\ex16.40\main.cpp	/^class Bar{};$/;"	c	file:
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.40\main.cpp	/^int main()$/;"	f
operator +	c++_primer\key_Cpp-Primer-master\ch16\ex16.40\main.cpp	/^Bar operator +(Bar lhs, int)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.41\main.cpp	/^int main()$/;"	f
g	c++_primer\key_Cpp-Primer-master\ch16\ex16.42.43.44.45.46\main.cpp	/^void g(T&& val)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.42.43.44.45.46\main.cpp	/^int main()$/;"	f
flip	c++_primer\key_Cpp-Primer-master\ch16\ex16.47\main.cpp	/^void flip(F f, T1&& t1, T2&& t2)$/;"	f
func_lvalue	c++_primer\key_Cpp-Primer-master\ch16\ex16.47\main.cpp	/^void func_lvalue(std::string& lhs, std::string& rhs)$/;"	f
func_rvalue	c++_primer\key_Cpp-Primer-master\ch16\ex16.47\main.cpp	/^void func_rvalue(int&& lhs, int&& rhs)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.47\main.cpp	/^int main()$/;"	f
debug_rep	c++_primer\key_Cpp-Primer-master\ch16\ex16.48\main.cpp	/^std::string debug_rep(char *p)$/;"	f
debug_rep	c++_primer\key_Cpp-Primer-master\ch16\ex16.48\main.cpp	/^std::string debug_rep(const char *p)$/;"	f
debug_rep	c++_primer\key_Cpp-Primer-master\ch16\ex16.48\main.cpp	/^std::string debug_rep(const std::string &s)$/;"	f
debug_rep	c++_primer\key_Cpp-Primer-master\ch16\ex16.48\main.cpp	/^template<typename T> std::string debug_rep(T* p)$/;"	f
debug_rep	c++_primer\key_Cpp-Primer-master\ch16\ex16.48\main.cpp	/^template<typename T> std::string debug_rep(const T& t)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.48\main.cpp	/^int main()$/;"	f
f	c++_primer\key_Cpp-Primer-master\ch16\ex16.49.50\main.cpp	/^template <typename T> void f(T)$/;"	f
f	c++_primer\key_Cpp-Primer-master\ch16\ex16.49.50\main.cpp	/^template <typename T> void f(const T*)$/;"	f
g	c++_primer\key_Cpp-Primer-master\ch16\ex16.49.50\main.cpp	/^template <typename T> void g(T)$/;"	f
g	c++_primer\key_Cpp-Primer-master\ch16\ex16.49.50\main.cpp	/^template <typename T> void g(T*)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.49.50\main.cpp	/^int main()$/;"	f
ch16	c++_primer\key_Cpp-Primer-master\ch16\ex16.4\main.cpp	/^namespace ch16$/;"	n	file:
find	c++_primer\key_Cpp-Primer-master\ch16\ex16.4\main.cpp	/^    inline Iterator find(Iterator first, Iterator last, Value const& value)$/;"	f	namespace:ch16
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.4\main.cpp	/^int main()$/;"	f
foo	c++_primer\key_Cpp-Primer-master\ch16\ex16.51.52\main.cpp	/^void foo(T t,Args ...args)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.51.52\main.cpp	/^int main()$/;"	f
Foo	c++_primer\key_Cpp-Primer-master\ch16\ex16.53.54.55\main.cpp	/^class Foo$/;"	c	file:
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.53.54.55\main.cpp	/^int main()$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch16\ex16.53.54.55\main.cpp	/^print(std::ostream &os, const T &t, const Args&... rest)$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch16\ex16.53.54.55\main.cpp	/^std::ostream& print(std::ostream& os, const T& t)$/;"	f
debug_rep	c++_primer\key_Cpp-Primer-master\ch16\ex16.56.57\main.cpp	/^std::string debug_rep(T* p)$/;"	f
debug_rep	c++_primer\key_Cpp-Primer-master\ch16\ex16.56.57\main.cpp	/^std::string debug_rep(char *p)$/;"	f
debug_rep	c++_primer\key_Cpp-Primer-master\ch16\ex16.56.57\main.cpp	/^std::string debug_rep(const T& t)$/;"	f
debug_rep	c++_primer\key_Cpp-Primer-master\ch16\ex16.56.57\main.cpp	/^std::string debug_rep(const char *p)$/;"	f
debug_rep	c++_primer\key_Cpp-Primer-master\ch16\ex16.56.57\main.cpp	/^std::string debug_rep(const std::string &s)$/;"	f
errorMsg	c++_primer\key_Cpp-Primer-master\ch16\ex16.56.57\main.cpp	/^std::ostream& errorMsg(std::ostream& os, const Args... rest)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.56.57\main.cpp	/^int main()$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch16\ex16.56.57\main.cpp	/^std::ostream& print(std::ostream &os, const T &t, const Args&... rest)$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch16\ex16.56.57\main.cpp	/^std::ostream& print(std::ostream& os, const T& t)$/;"	f
StrVec	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.cpp	/^StrVec::StrVec(const StrVec &s)$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.cpp	/^StrVec::StrVec(std::initializer_list<std::string> l)$/;"	f	class:StrVec
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.cpp	/^StrVec::alloc_n_copy(std::string *b, std::string *e)$/;"	f	class:StrVec
free	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.cpp	/^void StrVec::free()$/;"	f	class:StrVec
operator =	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.cpp	/^StrVec::operator =(const StrVec& rhs)$/;"	f	class:StrVec
push_back	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.cpp	/^void StrVec::push_back(const std::string& s)$/;"	f	class:StrVec
reallocate	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.cpp	/^void StrVec::reallocate()$/;"	f	class:StrVec
reserve	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.cpp	/^void StrVec::reserve(std::size_t n)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.cpp	/^void StrVec::resize(std::size_t n)$/;"	f	class:StrVec
resize	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.cpp	/^void StrVec::resize(std::size_t n, const std::string &s)$/;"	f	class:StrVec
wy_alloc_n_move	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.cpp	/^void StrVec::wy_alloc_n_move(std::size_t n)$/;"	f	class:StrVec
~StrVec	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.cpp	/^StrVec::~StrVec()$/;"	f	class:StrVec
STRVEC_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.h	10;"	d
StrVec	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.h	/^    StrVec():$/;"	f	class:StrVec
StrVec	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.h	/^class StrVec$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.h	/^    std::allocator<std::string> alloc;$/;"	m	class:StrVec
begin	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.h	/^    std::string* begin() const      { return element; }$/;"	f	class:StrVec
cap	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.h	/^    std::string* cap;           \/\/  pointer to one past the end$/;"	m	class:StrVec
capacity	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.h	/^    std::size_t capacity() const    { return cap - element; }$/;"	f	class:StrVec
chk_n_alloc	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.h	/^    void chk_n_alloc()      { if (size() == capacity()) reallocate(); }$/;"	f	class:StrVec
element	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.h	/^    std::string* element;       \/\/  pointer to the first element$/;"	m	class:StrVec
emplace_back	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.h	/^StrVec::emplace_back(Args&&... args)$/;"	f	class:StrVec
end	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.h	/^    std::string* end() const        { return first_free; }$/;"	f	class:StrVec
first_free	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.h	/^    std::string* first_free;    \/\/  pointer to the first free element$/;"	m	class:StrVec
size	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\strvec.h	/^    std::size_t size() const        { return first_free - element; }$/;"	f	class:StrVec
VEC_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	9;"	d
Vec	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^    Vec():element(nullptr), first_free(nullptr), cap(nullptr){ }$/;"	f	class:Vec
Vec	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^Vec<T>::Vec(const Vec &v)$/;"	f	class:Vec
Vec	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^Vec<T>::Vec(std::initializer_list<T> l)$/;"	f	class:Vec
Vec	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^class Vec$/;"	c
alloc	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^    std::allocator<T> alloc;$/;"	m	class:Vec
alloc_n_copy	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^Vec<T>::alloc_n_copy(T *b, T *e)$/;"	f	class:Vec
begin	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^    T* begin() const { return element;      }$/;"	f	class:Vec
cap	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^    T* cap;$/;"	m	class:Vec
capacity	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^    std::size_t capacity()const { return cap - element; }$/;"	f	class:Vec
chk_n_alloc	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^    void chk_n_alloc()  { if(size()==capacity()) reallocate();}$/;"	f	class:Vec
element	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^    T* element;$/;"	m	class:Vec
emplace_back	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^Vec<T>::emplace_back(Args&&...args)$/;"	f	class:Vec
end	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^    T* end()   const { return first_free;   }$/;"	f	class:Vec
first_free	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^    T* first_free;$/;"	m	class:Vec
free	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^void Vec<T>::free()$/;"	f	class:Vec
operator =	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^Vec<T>& Vec<T>::operator =(const Vec& rhs)$/;"	f	class:Vec
push_back	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^void Vec<T>::push_back(const T &t)$/;"	f	class:Vec
reallocate	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^void Vec<T>::reallocate()$/;"	f	class:Vec
reserve	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^void Vec<T>::reserve(std::size_t n)$/;"	f	class:Vec
resize	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^void Vec<T>::resize(std::size_t n)$/;"	f	class:Vec
resize	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^void Vec<T>::resize(std::size_t n, const T &t)$/;"	f	class:Vec
size	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^    std::size_t size() const    { return first_free - element; }$/;"	f	class:Vec
wy_alloc_n_move	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^void Vec<T>::wy_alloc_n_move(std::size_t n)$/;"	f	class:Vec
~Vec	c++_primer\key_Cpp-Primer-master\ch16\ex16.58.59\vec.h	/^Vec<T>::~Vec()$/;"	f	class:Vec
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.5\main.cpp	/^int main()$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch16\ex16.5\main.cpp	/^void print(Arr const& arr)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.60.61\main.cpp	/^int main()$/;"	f
wy_make_shared	c++_primer\key_Cpp-Primer-master\ch16\ex16.60.61\main.cpp	/^wy_make_shared(Args&&... args)$/;"	f
Sales_data	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.cc	/^Sales_data::Sales_data(istream &is) $/;"	f	class:Sales_data
add	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.cc	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
avg_price	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.cc	/^double Sales_data::avg_price() const$/;"	f	class:Sales_data
operator +	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.cc	/^operator+(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator +=	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.cc	/^Sales_data& Sales_data::operator+=(const Sales_data &rhs)$/;"	f	class:Sales_data
operator <<	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.cc	/^ostream &operator<<(ostream &os, const Sales_data &item)$/;"	f
operator >>	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.cc	/^istream &operator>>(istream &is, Sales_data &item)$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.cc	/^ostream &print(ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.cc	/^istream &read(istream &is, Sales_data &item)$/;"	f
SALES_DATA_H	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	31;"	d
Sales_data	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	/^	Sales_data(const std::string &s): bookNo(s) { }$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	/^	Sales_data(const std::string &s, unsigned n, double p):$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	/^class Sales_data {$/;"	c
argument_type	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	/^    typedef Sales_data argument_type;$/;"	t	struct:std::hash
bookNo	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	/^	std::string bookNo;$/;"	m	class:Sales_data
compareIsbn	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	/^bool compareIsbn(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
hash	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	/^struct hash<Sales_data>$/;"	s	namespace:std
isbn	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	/^	std::string isbn() const { return bookNo; }$/;"	f	class:Sales_data
operator !=	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	/^bool operator!=(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator ()	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	/^    size_t  operator()(const Sales_data& s) const$/;"	f	struct:std::hash
operator ==	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	/^bool operator==(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
result_type	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	/^    typedef size_t result_type;$/;"	t	struct:std::hash
revenue	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	/^	double revenue = 0.0;$/;"	m	class:Sales_data
std	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	/^namespace std {$/;"	n
units_sold	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\Sales_data.h	/^	unsigned units_sold = 0;$/;"	m	class:Sales_data
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.62\main.cpp	/^int main()$/;"	f
count	c++_primer\key_Cpp-Primer-master\ch16\ex16.63.64\main.cpp	/^std::size_t count (const std::vector<const char*> &vec, const char* value)$/;"	f
count	c++_primer\key_Cpp-Primer-master\ch16\ex16.63.64\main.cpp	/^std::size_t count(const std::vector<T>& vec, T value)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.63.64\main.cpp	/^int main()$/;"	f
debug_rep	c++_primer\key_Cpp-Primer-master\ch16\ex16.65.66.67\main.cpp	/^std::string debug_rep(      char *str)$/;"	f
debug_rep	c++_primer\key_Cpp-Primer-master\ch16\ex16.65.66.67\main.cpp	/^std::string debug_rep(T* t)$/;"	f
debug_rep	c++_primer\key_Cpp-Primer-master\ch16\ex16.65.66.67\main.cpp	/^std::string debug_rep(const char* str)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.65.66.67\main.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.6\main.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.7.8\main.cpp	/^int main()$/;"	f
List	c++_primer\key_Cpp-Primer-master\ch16\ex16.9.10.11\main.cpp	/^template <typename elemType> class List$/;"	c	file:
end	c++_primer\key_Cpp-Primer-master\ch16\ex16.9.10.11\main.cpp	/^    ListItem<elemType> *front, *end;$/;"	m	class:List	file:
front	c++_primer\key_Cpp-Primer-master\ch16\ex16.9.10.11\main.cpp	/^    ListItem<elemType> *front, *end;$/;"	m	class:List	file:
main	c++_primer\key_Cpp-Primer-master\ch16\ex16.9.10.11\main.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch17\ex17.3\main.cpp	/^int main()$/;"	f
TextQuery	c++_primer\key_Cpp-Primer-master\ch17\ex17.3\textquery.cpp	/^TextQuery::TextQuery(std::ifstream & is) : file(new std::vector<std::string>)$/;"	f	class:TextQuery
query	c++_primer\key_Cpp-Primer-master\ch17\ex17.3\textquery.cpp	/^TextQuery::query(const std::string &sought) const$/;"	f	class:TextQuery
query_return_tuple	c++_primer\key_Cpp-Primer-master\ch17\ex17.3\textquery.cpp	/^result_tuple TextQuery::query_return_tuple(const std::string &sought)$/;"	f	class:TextQuery
TEXTQUERY_H	c++_primer\key_Cpp-Primer-master\ch17\ex17.3\textquery.h	9;"	d
TextQuery	c++_primer\key_Cpp-Primer-master\ch17\ex17.3\textquery.h	/^class TextQuery$/;"	c
file	c++_primer\key_Cpp-Primer-master\ch17\ex17.3\textquery.h	/^    std::shared_ptr<std::vector<std::string>> file;$/;"	m	class:TextQuery
index_Tp	c++_primer\key_Cpp-Primer-master\ch17\ex17.3\textquery.h	/^    typedef std::vector<std::string>::size_type index_Tp;$/;"	t	class:TextQuery
result_tuple	c++_primer\key_Cpp-Primer-master\ch17\ex17.3\textquery.h	/^    typedef std::tuple <std::string, std::shared_ptr<std::set<index_Tp>>, std::shared_ptr<std::vector<std::string>>>  result_tuple;$/;"	t	class:TextQuery
wm	c++_primer\key_Cpp-Primer-master\ch17\ex17.3\textquery.h	/^    std::map<std::string, std::shared_ptr<std::set<index_Tp>>> wm;$/;"	m	class:TextQuery
main	c++_primer\key_Cpp-Primer-master\ch17\ex17_10.cpp	/^int main()$/;"	f
QUIZ	c++_primer\key_Cpp-Primer-master\ch17\ex17_11_12_13.cpp	26;"	d	file:
Quiz	c++_primer\key_Cpp-Primer-master\ch17\ex17_11_12_13.cpp	/^    Quiz(std::string& s) :bitquiz(s){}$/;"	f	class:Quiz
Quiz	c++_primer\key_Cpp-Primer-master\ch17\ex17_11_12_13.cpp	/^class Quiz$/;"	c	file:
bitquiz	c++_primer\key_Cpp-Primer-master\ch17\ex17_11_12_13.cpp	/^    std::bitset<N> bitquiz;$/;"	m	class:Quiz	file:
grade	c++_primer\key_Cpp-Primer-master\ch17\ex17_11_12_13.cpp	/^std::size_t grade(Quiz<M> const& corAns, Quiz<M> const& stuAns)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch17\ex17_11_12_13.cpp	/^int main()$/;"	f
operator <<	c++_primer\key_Cpp-Primer-master\ch17\ex17_11_12_13.cpp	/^std::ostream& operator<<(std::ostream& os, Quiz<M> const& quiz)$/;"	f
update	c++_primer\key_Cpp-Primer-master\ch17\ex17_11_12_13.cpp	/^void Quiz<N>::update(std::pair<std::size_t, bool> pair)$/;"	f	class:Quiz
main	c++_primer\key_Cpp-Primer-master\ch17\ex17_14_15_16.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch17\ex17_17_18.cpp	/^int main()$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch17\ex17_19_20.cpp	/^int main()$/;"	f
valid	c++_primer\key_Cpp-Primer-master\ch17\ex17_19_20.cpp	/^bool valid(const smatch& m)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch17\ex17_1_2.cpp	/^int main()$/;"	f
PersonInfo	c++_primer\key_Cpp-Primer-master\ch17\ex17_21.cpp	/^struct PersonInfo$/;"	s	file:
format	c++_primer\key_Cpp-Primer-master\ch17\ex17_21.cpp	/^string format(const string &num) { return num; }$/;"	f
format_record	c++_primer\key_Cpp-Primer-master\ch17\ex17_21.cpp	/^void format_record(ostream& os, const vector<PersonInfo>& people)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch17\ex17_21.cpp	/^int main()$/;"	f
name	c++_primer\key_Cpp-Primer-master\ch17\ex17_21.cpp	/^    string name;$/;"	m	struct:PersonInfo	file:
phones	c++_primer\key_Cpp-Primer-master\ch17\ex17_21.cpp	/^    vector<string> phones;$/;"	m	struct:PersonInfo	file:
read_record	c++_primer\key_Cpp-Primer-master\ch17\ex17_21.cpp	/^bool read_record(istream& is, vector<PersonInfo>& people)$/;"	f
valid	c++_primer\key_Cpp-Primer-master\ch17\ex17_21.cpp	/^bool valid(const smatch& m)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch17\ex17_23.cpp	/^int main() {$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch17\ex17_28_29_30.cpp	/^int main()$/;"	f
random_gen	c++_primer\key_Cpp-Primer-master\ch17\ex17_28_29_30.cpp	/^unsigned random_gen()$/;"	f
random_gen	c++_primer\key_Cpp-Primer-master\ch17\ex17_28_29_30.cpp	/^unsigned random_gen(unsigned seed)$/;"	f
random_gen	c++_primer\key_Cpp-Primer-master\ch17\ex17_28_29_30.cpp	/^unsigned random_gen(unsigned seed, unsigned min, unsigned max)$/;"	f
main	c++_primer\key_Cpp-Primer-master\ch17\ex17_33.cpp	/^int main() {$/;"	f
findBook	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8.cpp	/^findBook(const std::vector<std::vector<Sales_data>>& files,$/;"	f
findBook_pair	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8.cpp	/^findBook_pair(const std::vector<std::vector<Sales_data> > &files,$/;"	f
findBook_struct	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8.cpp	/^findBook_struct(const std::vector<std::vector<Sales_data> > &files,$/;"	f
first	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8.cpp	/^    std::vector<Sales_data>::const_iterator first;$/;"	m	struct:matches_struct	file:
last	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8.cpp	/^    std::vector<Sales_data>::const_iterator last;$/;"	m	struct:matches_struct	file:
main	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8.cpp	/^int main()$/;"	f
matches	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8.cpp	/^                                                            matches;$/;"	t	file:
matches_pair	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8.cpp	/^                                                                      matches_pair;$/;"	t	file:
matches_struct	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8.cpp	/^    matches_struct(std::vector<Sales_data>::size_type s,$/;"	f	struct:matches_struct
matches_struct	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8.cpp	/^struct matches_struct$/;"	s	file:
reportResults	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8.cpp	/^void reportResults(std::istream& in, std::ostream os,$/;"	f
st	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8.cpp	/^    std::vector<Sales_data>::size_type st;$/;"	m	struct:matches_struct	file:
Sales_data	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.cpp	/^Sales_data::Sales_data(std::istream &is) $/;"	f	class:Sales_data
add	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.cpp	/^add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
avg_price	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.cpp	/^Sales_data::avg_price() const {$/;"	f	class:Sales_data
combine	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.cpp	/^Sales_data::combine(const Sales_data &rhs)$/;"	f	class:Sales_data
operator +=	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.cpp	/^Sales_data &Sales_data::operator +=(const Sales_data &rhs)$/;"	f	class:Sales_data
operator <<	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.cpp	/^operator <<(std::ostream &os, const Sales_data &item)$/;"	f
operator =	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.cpp	/^Sales_data &Sales_data::operator =(const Sales_data &rhs)$/;"	f	class:Sales_data
operator =	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.cpp	/^Sales_data &Sales_data::operator =(const std::string &rhs)$/;"	f	class:Sales_data
operator >>	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.cpp	/^operator >>(std::istream &is, Sales_data &s)$/;"	f
print	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.cpp	/^print(ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.cpp	/^read(istream &is, Sales_data &item)$/;"	f
SALES_DATA_H	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.h	36;"	d
Sales_data	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.h	/^	Sales_data(const std::string &s): bookNo(s) { }$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.h	/^	Sales_data(const std::string &s, unsigned n, double p):$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.h	/^    Sales_data(Sales_data&& s):$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.h	/^    Sales_data(const Sales_data &s ):$/;"	f	class:Sales_data
Sales_data	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.h	/^class Sales_data$/;"	c
bookNo	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.h	/^	std::string bookNo;$/;"	m	class:Sales_data
compareIsbn	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.h	/^bool compareIsbn(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
isbn	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.h	/^	std::string isbn() const { return bookNo; }$/;"	f	class:Sales_data
operator +	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.h	/^operator+(const Sales_data& lhs, const Sales_data& rhs)$/;"	f
operator double	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.h	/^    explicit operator double      () const { return revenue;}$/;"	f	class:Sales_data
operator std::string	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.h	/^    explicit operator std::string () const { return bookNo; }$/;"	f	class:Sales_data
revenue	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.h	/^	double revenue = 0.0;$/;"	m	class:Sales_data
units_sold	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.h	/^	unsigned units_sold = 0;$/;"	m	class:Sales_data
~Sales_data	c++_primer\key_Cpp-Primer-master\ch17\ex17_4_5_6_7_8_SalesData.h	/^    ~Sales_data(){}$/;"	f	class:Sales_data
main	c++_primer\key_Cpp-Primer-master\ch17\ex17_9.cpp	/^int main()$/;"	f
exercise	c++_primer\key_Cpp-Primer-master\ch18\ex18.1.2.3.cpp	/^void exercise(int *b, int *e)$/;"	f
intArray	c++_primer\key_Cpp-Primer-master\ch18\ex18.1.2.3.cpp	/^    explicit    intArray(std::size_t s):$/;"	f	struct:intArray
intArray	c++_primer\key_Cpp-Primer-master\ch18\ex18.1.2.3.cpp	/^    intArray() : p(nullptr) {}$/;"	f	struct:intArray
intArray	c++_primer\key_Cpp-Primer-master\ch18\ex18.1.2.3.cpp	/^struct intArray$/;"	s	file:
main	c++_primer\key_Cpp-Primer-master\ch18\ex18.1.2.3.cpp	/^int main()$/;"	f
p	c++_primer\key_Cpp-Primer-master\ch18\ex18.1.2.3.cpp	/^    int *p;$/;"	m	struct:intArray	file:
~intArray	c++_primer\key_Cpp-Primer-master\ch18\ex18.1.2.3.cpp	/^    ~intArray()$/;"	f	struct:intArray
main	c++_primer\key_Cpp-Primer-master\ch18\ex18.12.13.14.cpp	/^int main()$/;"	f
Exercise	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^	namespace Exercise$/;"	n	namespace:Test0	file:
Exercise	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^	namespace Exercise$/;"	n	namespace:Test1	file:
Exercise	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^	namespace Exercise$/;"	n	namespace:Test2	file:
Exercise	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^	namespace Exercise$/;"	n	namespace:Test3	file:
Test0	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^namespace Test0$/;"	n	file:
Test1	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^namespace Test1$/;"	n	file:
Test2	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^namespace Test2$/;"	n	file:
Test3	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^namespace Test3$/;"	n	file:
dvar	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^		double dvar = 0;$/;"	m	namespace:Test0::Exercise	file:
dvar	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^		double dvar = 0;$/;"	m	namespace:Test1::Exercise	file:
dvar	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^		double dvar = 0;$/;"	m	namespace:Test2::Exercise	file:
dvar	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^		double dvar = 0;$/;"	m	namespace:Test3::Exercise	file:
ivar	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^		int ivar = 0;$/;"	m	namespace:Test0::Exercise	file:
ivar	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^		int ivar = 0;$/;"	m	namespace:Test1::Exercise	file:
ivar	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^		int ivar = 0;$/;"	m	namespace:Test2::Exercise	file:
ivar	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^		int ivar = 0;$/;"	m	namespace:Test3::Exercise	file:
ivar	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^	int ivar = 0;$/;"	m	namespace:Test0	file:
ivar	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^	int ivar = 0;$/;"	m	namespace:Test1	file:
ivar	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^	int ivar = 0;$/;"	m	namespace:Test2	file:
ivar	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^	int ivar = 0;$/;"	m	namespace:Test3	file:
limit	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^		const int limit = 1000;$/;"	m	namespace:Test0::Exercise	file:
limit	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^		const int limit = 1000;$/;"	m	namespace:Test1::Exercise	file:
limit	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^		const int limit = 1000;$/;"	m	namespace:Test2::Exercise	file:
limit	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^		const int limit = 1000;$/;"	m	namespace:Test3::Exercise	file:
main	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^int main()$/;"	f
manip	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^	void manip()$/;"	f	namespace:Test0
manip	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^	void manip()$/;"	f	namespace:Test1
manip	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^	void manip()$/;"	f	namespace:Test2
manip	c++_primer\key_Cpp-Primer-master\ch18\ex18.15.16.17.cpp	/^	void manip()$/;"	f	namespace:Test3
SALESITEM_H	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	39;"	d
Sales_item	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	/^    Sales_item(const std::string &book): bookNo(book) { }$/;"	f	class:Sales_item
Sales_item	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	/^    Sales_item(std::istream &is) { is >> *this; }$/;"	f	class:Sales_item
Sales_item	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	/^class Sales_item {$/;"	c
avg_price	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	/^double Sales_item::avg_price() const$/;"	f	class:Sales_item
bookNo	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	/^    std::string bookNo;      \/\/ implicitly initialized to the empty string$/;"	m	class:Sales_item
compareIsbn	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	/^bool compareIsbn(const Sales_item &lhs, const Sales_item &rhs) $/;"	f
isbn	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	/^    std::string isbn() const { return bookNo; }$/;"	f	class:Sales_item
operator !=	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	/^operator!=(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator +	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	/^operator+(const Sales_item& lhs, const Sales_item& rhs) $/;"	f
operator +=	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	/^Sales_item& Sales_item::operator+=(const Sales_item& rhs) $/;"	f	class:Sales_item
operator <<	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	/^operator<<(std::ostream& out, const Sales_item& s)$/;"	f
operator ==	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	/^operator==(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator >>	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	/^operator>>(std::istream& in, Sales_item& s)$/;"	f
revenue	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	/^    double revenue = 0.0;$/;"	m	class:Sales_item
units_sold	c++_primer\key_Cpp-Primer-master\include\Sales_item.h	/^    unsigned units_sold = 0; \/\/ explicitly initialized$/;"	m	class:Sales_item
main	c++_primer\source_code\GCC_4_7_0\10\absInt.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\accum.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\accum4.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\avg_price.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\bind2.cc	/^int main()$/;"	f
print	c++_primer\source_code\GCC_4_7_0\10\bind2.cc	/^ostream &print(ostream &os, const string &s, char c)$/;"	f
LT	c++_primer\source_code\GCC_4_7_0\10\elimDups.cc	/^bool LT(const string &s1, const string &s2)$/;"	f
isShorter	c++_primer\source_code\GCC_4_7_0\10\elimDups.cc	/^bool isShorter(const string &s1, const string &s2)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\elimDups.cc	/^int main()$/;"	f
print	c++_primer\source_code\GCC_4_7_0\10\elimDups.cc	/^void print(const vector<string> &words)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\equal.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\equiv-istream-iter.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\inserters.cc	/^int main() $/;"	f
print	c++_primer\source_code\GCC_4_7_0\10\inserters.cc	/^void print(const string &label, const list<int> &lst)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\iostream_iter.cc	/^int main()$/;"	f
fcn1	c++_primer\source_code\GCC_4_7_0\10\lambda.cc	/^void fcn1()$/;"	f
fcn2	c++_primer\source_code\GCC_4_7_0\10\lambda.cc	/^void fcn2()$/;"	f
fcn3	c++_primer\source_code\GCC_4_7_0\10\lambda.cc	/^void fcn3()$/;"	f
fcn4	c++_primer\source_code\GCC_4_7_0\10\lambda.cc	/^void fcn4()$/;"	f
fcn5	c++_primer\source_code\GCC_4_7_0\10\lambda.cc	/^void fcn5()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\lambda.cc	/^int main()$/;"	f
GT	c++_primer\source_code\GCC_4_7_0\10\newcount-size.cc	/^bool GT(const string &s, string::size_type m) $/;"	f
biggies	c++_primer\source_code\GCC_4_7_0\10\newcount-size.cc	/^biggies(vector<string> &words, vector<string>::size_type sz)$/;"	f
check_size	c++_primer\source_code\GCC_4_7_0\10\newcount-size.cc	/^bool check_size(const string &s, string::size_type sz)$/;"	f
elimDups	c++_primer\source_code\GCC_4_7_0\10\newcount-size.cc	/^void elimDups(vector<string> &words)$/;"	f
isShorter	c++_primer\source_code\GCC_4_7_0\10\newcount-size.cc	/^bool isShorter(const string &s1, const string &s2)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\newcount-size.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\ostreamIter2.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\rcomma.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\rev-iters.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\reverse-iter.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\reverse.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\sortSI.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\use-istream-iter.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_4_7_0\10\use_find.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\11\erasemap.cc	/^int main() $/;"	f
SDComp	c++_primer\source_code\GCC_4_7_0\11\map1.cc	/^typedef bool(*SDComp)(const Sales_data&, const Sales_data&);$/;"	t	file:
main	c++_primer\source_code\GCC_4_7_0\11\map1.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\11\multimap.cc	/^int main()$/;"	f
Author	c++_primer\source_code\GCC_4_7_0\11\pair.cc	/^typedef pair<string, string> Author;$/;"	t	file:
austen	c++_primer\source_code\GCC_4_7_0\11\pair.cc	/^Author austen = make_pair("Jane", "Austen"); \/\/ use make_pair$/;"	v
line	c++_primer\source_code\GCC_4_7_0\11\pair.cc	/^pair<string, vector<int>> line;  \/\/ holds string and vector<int>$/;"	v
main	c++_primer\source_code\GCC_4_7_0\11\pair.cc	/^int main()$/;"	f
preliminaries	c++_primer\source_code\GCC_4_7_0\11\pair.cc	/^void preliminaries(vector<string> &v)$/;"	f
process	c++_primer\source_code\GCC_4_7_0\11\pair.cc	/^process(vector<string> &v)$/;"	f
process2	c++_primer\source_code\GCC_4_7_0\11\pair.cc	/^process2(vector<string> &v)$/;"	f
process3	c++_primer\source_code\GCC_4_7_0\11\pair.cc	/^process3(vector<string> &v)$/;"	f
word_count	c++_primer\source_code\GCC_4_7_0\11\pair.cc	/^pair<string, size_t> word_count; \/\/ holds a string and an size_t $/;"	v
main	c++_primer\source_code\GCC_4_7_0\11\restricted_count.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\11\setOps.cc	/^int main()$/;"	f
Foo	c++_primer\source_code\GCC_4_7_0\11\unorderedWordCount.cc	/^struct Foo { string s; };$/;"	s	file:
FooHash	c++_primer\source_code\GCC_4_7_0\11\unorderedWordCount.cc	/^size_t FooHash(const Foo& f) { return hash<string>()(f.s); }$/;"	f
eqOp	c++_primer\source_code\GCC_4_7_0\11\unorderedWordCount.cc	/^bool eqOp(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
hasher	c++_primer\source_code\GCC_4_7_0\11\unorderedWordCount.cc	/^size_t hasher(const Sales_data &sd) $/;"	f
main	c++_primer\source_code\GCC_4_7_0\11\unorderedWordCount.cc	/^int main() $/;"	f
operator ==	c++_primer\source_code\GCC_4_7_0\11\unorderedWordCount.cc	/^bool operator==(const Foo& l, const Foo&r) { return l.s == r.s; }$/;"	f
s	c++_primer\source_code\GCC_4_7_0\11\unorderedWordCount.cc	/^struct Foo { string s; };$/;"	m	struct:Foo	file:
main	c++_primer\source_code\GCC_4_7_0\11\wcEx.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\11\word_count.cc	/^int main()$/;"	f
buildMap	c++_primer\source_code\GCC_4_7_0\11\word_transform.cc	/^map<string, string> buildMap(ifstream &map_file)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\11\word_transform.cc	/^int main(int argc, char **argv)$/;"	f
transform	c++_primer\source_code\GCC_4_7_0\11\word_transform.cc	/^transform(const string &s, const map<string, string> &m)$/;"	f
word_transform	c++_primer\source_code\GCC_4_7_0\11\word_transform.cc	/^void word_transform(ifstream &map_file, ifstream &input)$/;"	f
FOO_H	c++_primer\source_code\GCC_4_7_0\12\Foo.h	31;"	d
Foo	c++_primer\source_code\GCC_4_7_0\12\Foo.h	/^	Foo(T t): val(t) { }$/;"	f	struct:Foo
Foo	c++_primer\source_code\GCC_4_7_0\12\Foo.h	/^struct Foo {  \/\/ members are public by default$/;"	s
T	c++_primer\source_code\GCC_4_7_0\12\Foo.h	/^typedef int T;$/;"	t
print	c++_primer\source_code\GCC_4_7_0\12\Foo.h	/^print(std::ostream &os, const Foo &f) $/;"	f
val	c++_primer\source_code\GCC_4_7_0\12\Foo.h	/^	T val;$/;"	m	struct:Foo
QUERYRESULT_H	c++_primer\source_code\GCC_4_7_0\12\QueryResult.h	31;"	d
QueryResult	c++_primer\source_code\GCC_4_7_0\12\QueryResult.h	/^	QueryResult(std::string s, $/;"	f	class:QueryResult
QueryResult	c++_primer\source_code\GCC_4_7_0\12\QueryResult.h	/^class QueryResult {$/;"	c
begin	c++_primer\source_code\GCC_4_7_0\12\QueryResult.h	/^	line_it begin() const { return lines->cbegin(); }$/;"	f	class:QueryResult
end	c++_primer\source_code\GCC_4_7_0\12\QueryResult.h	/^	line_it end() const   { return lines->cend(); }$/;"	f	class:QueryResult
file	c++_primer\source_code\GCC_4_7_0\12\QueryResult.h	/^	std::shared_ptr<std::vector<std::string>> file;  \/\/input file$/;"	m	class:QueryResult
get_file	c++_primer\source_code\GCC_4_7_0\12\QueryResult.h	/^	std::shared_ptr<std::vector<std::string>> get_file() { return file; }$/;"	f	class:QueryResult
line_it	c++_primer\source_code\GCC_4_7_0\12\QueryResult.h	/^	typedef std::set<line_no>::const_iterator line_it;$/;"	t	class:QueryResult
line_no	c++_primer\source_code\GCC_4_7_0\12\QueryResult.h	/^	typedef std::vector<std::string>::size_type line_no;$/;"	t	class:QueryResult
lines	c++_primer\source_code\GCC_4_7_0\12\QueryResult.h	/^	std::shared_ptr<std::set<line_no>> lines; \/\/ lines it's on$/;"	m	class:QueryResult
size	c++_primer\source_code\GCC_4_7_0\12\QueryResult.h	/^	std::set<line_no>::size_type size() const  { return lines->size(); }$/;"	f	class:QueryResult
sought	c++_primer\source_code\GCC_4_7_0\12\QueryResult.h	/^	std::string sought;  \/\/ word this query represents$/;"	m	class:QueryResult
STRBLOB_H	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	31;"	d
StrBlob	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^    StrBlob() : data(std::make_shared<std::vector<std::string>>()) { }$/;"	f	class:StrBlob
StrBlob	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^StrBlob::StrBlob(std::initializer_list<std::string> il): $/;"	f	class:StrBlob
StrBlob	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^class StrBlob {$/;"	c
StrBlobPtr	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^    StrBlobPtr(): curr(0) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^    StrBlobPtr(StrBlob &a, size_t sz = 0): wptr(a.data), curr(sz) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^class StrBlobPtr {$/;"	c
begin	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^StrBlob::begin() $/;"	f	class:StrBlob
check	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^StrBlobPtr::check(std::size_t i, const std::string &msg) const$/;"	f	class:StrBlobPtr
curr	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^    std::size_t curr;      \/\/ current position within the array$/;"	m	class:StrBlobPtr
data	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^    std::shared_ptr<std::vector<std::string>> data; $/;"	m	class:StrBlob
decr	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^StrBlobPtr& StrBlobPtr::decr()$/;"	f	class:StrBlobPtr
deref	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^std::string& StrBlobPtr::deref() const$/;"	f	class:StrBlobPtr
empty	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^    bool empty() const { return data->empty(); }$/;"	f	class:StrBlob
end	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^StrBlob::end() $/;"	f	class:StrBlob
eq	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^bool eq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
incr	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^StrBlobPtr& StrBlobPtr::incr()$/;"	f	class:StrBlobPtr
neq	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^bool neq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
push_back	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^    void push_back(const std::string &t) { data->push_back(t); }$/;"	f	class:StrBlob
size	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^    size_type size() const { return data->size(); }$/;"	f	class:StrBlob
size_type	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^    typedef std::vector<std::string>::size_type size_type;$/;"	t	class:StrBlob
wptr	c++_primer\source_code\GCC_4_7_0\12\StrBlob.h	/^    std::weak_ptr<std::vector<std::string>> wptr;  $/;"	m	class:StrBlobPtr
TextQuery	c++_primer\source_code\GCC_4_7_0\12\TextQuery.cc	/^TextQuery::TextQuery(ifstream &is): file(new vector<string>)$/;"	f	class:TextQuery
cleanup_str	c++_primer\source_code\GCC_4_7_0\12\TextQuery.cc	/^string TextQuery::cleanup_str(const string &word)$/;"	f	class:TextQuery
display_map	c++_primer\source_code\GCC_4_7_0\12\TextQuery.cc	/^void TextQuery::display_map()$/;"	f	class:TextQuery
print	c++_primer\source_code\GCC_4_7_0\12\TextQuery.cc	/^ostream &print(ostream & os, const QueryResult &qr)$/;"	f
query	c++_primer\source_code\GCC_4_7_0\12\TextQuery.cc	/^TextQuery::query(const string &sought) const$/;"	f	class:TextQuery
TEXTQUERY_H	c++_primer\source_code\GCC_4_7_0\12\TextQuery.h	31;"	d
TextQuery	c++_primer\source_code\GCC_4_7_0\12\TextQuery.h	/^class TextQuery {$/;"	c
file	c++_primer\source_code\GCC_4_7_0\12\TextQuery.h	/^    std::shared_ptr<std::vector<std::string>> file; \/\/ input file$/;"	m	class:TextQuery
wm	c++_primer\source_code\GCC_4_7_0\12\TextQuery.h	/^	         std::shared_ptr<std::set<line_no>>> wm;  $/;"	m	class:TextQuery
main	c++_primer\source_code\GCC_4_7_0\12\UP.cc	/^int main()$/;"	f
factory	c++_primer\source_code\GCC_4_7_0\12\allocPtr.cc	/^Foo* factory(T arg)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\12\allocPtr.cc	/^int main()$/;"	f
use_factory	c++_primer\source_code\GCC_4_7_0\12\allocPtr.cc	/^Foo* use_factory(T arg)$/;"	f
factory	c++_primer\source_code\GCC_4_7_0\12\allocSP.cc	/^shared_ptr<Foo> factory(T arg)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\12\allocSP.cc	/^int main()$/;"	f
use_factory	c++_primer\source_code\GCC_4_7_0\12\allocSP.cc	/^shared_ptr<Foo> use_factory(T arg)$/;"	f
get_size	c++_primer\source_code\GCC_4_7_0\12\oknew.cc	/^size_t get_size() { return 42; }$/;"	f
main	c++_primer\source_code\GCC_4_7_0\12\oknew.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\12\querymain.cc	/^int main(int argc, char **argv)$/;"	f
runQueries	c++_primer\source_code\GCC_4_7_0\12\querymain.cc	/^void runQueries(ifstream &infile)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\12\release.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\12\unique.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_4_7_0\12\useBlob.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\12\usealloc.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\12\usealloc2.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\12\weak.cc	/^int main()$/;"	f
Folder	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^Folder::Folder(Folder &&f)$/;"	f	class:Folder
Folder	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^Folder::Folder(const Folder &f) : msgs(f.msgs)$/;"	f	class:Folder
Message	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^Message::Message(Message &&m): contents(std::move(m.contents))$/;"	f	class:Message
Message	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^Message::Message(const Message &m): $/;"	f	class:Message
add_to_Folders	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^void Message::add_to_Folders(const Message &m)$/;"	f	class:Message
add_to_Messages	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^void Folder::add_to_Messages(const Folder &f)$/;"	f	class:Folder
debug_print	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^void Folder::debug_print()$/;"	f	class:Folder
debug_print	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^void Message::debug_print()$/;"	f	class:Message
move_Folders	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^void Message::move_Folders(Message *m)$/;"	f	class:Message
move_Messages	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^void Folder::move_Messages(Folder *f)$/;"	f	class:Folder
operator =	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^Folder& Folder::operator=(Folder &&f) $/;"	f	class:Folder
operator =	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^Folder& Folder::operator=(const Folder &f)$/;"	f	class:Folder
operator =	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^Message& Message::operator=(Message &&rhs) $/;"	f	class:Message
operator =	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^Message& Message::operator=(const Message &rhs)$/;"	f	class:Message
remove	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^void Folder::remove(Message &m)$/;"	f	class:Folder
remove	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^void Message::remove(Folder &f)$/;"	f	class:Message
remove_from_Folders	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^void Message::remove_from_Folders()$/;"	f	class:Message
remove_from_Msgs	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^void Folder::remove_from_Msgs()$/;"	f	class:Folder
save	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^void Folder::save(Message &m)$/;"	f	class:Folder
save	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^void Message::save(Folder &f)$/;"	f	class:Message
swap	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^void swap(Message &lhs, Message &rhs)$/;"	f
~Folder	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^Folder::~Folder()$/;"	f	class:Folder
~Message	c++_primer\source_code\GCC_4_7_0\13\Folder.cc	/^Message::~Message()$/;"	f	class:Message
FOLDER_H	c++_primer\source_code\GCC_4_7_0\13\Folder.h	31;"	d
Folder	c++_primer\source_code\GCC_4_7_0\13\Folder.h	/^class Folder {$/;"	c
Message	c++_primer\source_code\GCC_4_7_0\13\Folder.h	/^    explicit Message(const std::string &str = ""): $/;"	f	class:Message
Message	c++_primer\source_code\GCC_4_7_0\13\Folder.h	/^class Message {$/;"	c
addFldr	c++_primer\source_code\GCC_4_7_0\13\Folder.h	/^    void addFldr(Folder *f) { folders.insert(f); }$/;"	f	class:Message
addMsg	c++_primer\source_code\GCC_4_7_0\13\Folder.h	/^    void addMsg(Message *m) { msgs.insert(m); }$/;"	f	class:Folder
contents	c++_primer\source_code\GCC_4_7_0\13\Folder.h	/^    std::string contents;      \/\/ actual message text$/;"	m	class:Message
folders	c++_primer\source_code\GCC_4_7_0\13\Folder.h	/^    std::set<Folder*> folders; \/\/ Folders that have this Message$/;"	m	class:Message
msgs	c++_primer\source_code\GCC_4_7_0\13\Folder.h	/^    std::set<Message*> msgs;  \/\/ messages in this folder$/;"	m	class:Folder
remFldr	c++_primer\source_code\GCC_4_7_0\13\Folder.h	/^    void remFldr(Folder *f) { folders.erase(f); }$/;"	f	class:Message
remMsg	c++_primer\source_code\GCC_4_7_0\13\Folder.h	/^    void remMsg(Message *m) { msgs.erase(m); }$/;"	f	class:Folder
main	c++_primer\source_code\GCC_4_7_0\13\FolderMain.cc	/^int main()$/;"	f
HasPtr	c++_primer\source_code\GCC_4_7_0\13\HasPtrUseCount.cc	/^	HasPtr(HasPtr &&p): ps(p.ps), i(p.i), use(p.use) $/;"	f	class:HasPtr
HasPtr	c++_primer\source_code\GCC_4_7_0\13\HasPtrUseCount.cc	/^    HasPtr(const HasPtr &p): $/;"	f	class:HasPtr
HasPtr	c++_primer\source_code\GCC_4_7_0\13\HasPtrUseCount.cc	/^    HasPtr(const std::string &s = std::string()): $/;"	f	class:HasPtr
HasPtr	c++_primer\source_code\GCC_4_7_0\13\HasPtrUseCount.cc	/^class HasPtr {$/;"	c	file:
f	c++_primer\source_code\GCC_4_7_0\13\HasPtrUseCount.cc	/^HasPtr f(HasPtr hp) \/\/ HasPtr passed by value, so it is copied$/;"	f
i	c++_primer\source_code\GCC_4_7_0\13\HasPtrUseCount.cc	/^    int    i;$/;"	m	class:HasPtr	file:
main	c++_primer\source_code\GCC_4_7_0\13\HasPtrUseCount.cc	/^int main()$/;"	f
operator =	c++_primer\source_code\GCC_4_7_0\13\HasPtrUseCount.cc	/^HasPtr& HasPtr::operator=(const HasPtr &rhs) $/;"	f	class:HasPtr
operator =	c++_primer\source_code\GCC_4_7_0\13\HasPtrUseCount.cc	/^HasPtr::operator=(HasPtr &&rhs)$/;"	f	class:HasPtr
ps	c++_primer\source_code\GCC_4_7_0\13\HasPtrUseCount.cc	/^    std::string *ps;$/;"	m	class:HasPtr	file:
use	c++_primer\source_code\GCC_4_7_0\13\HasPtrUseCount.cc	/^	std::size_t *use;  \/\/ member to track how many objects share *ps$/;"	m	class:HasPtr	file:
~HasPtr	c++_primer\source_code\GCC_4_7_0\13\HasPtrUseCount.cc	/^HasPtr::~HasPtr()$/;"	f	class:HasPtr
HasPtr	c++_primer\source_code\GCC_4_7_0\13\HasPtrValueLike.cc	/^    HasPtr(const HasPtr &p): $/;"	f	class:HasPtr
HasPtr	c++_primer\source_code\GCC_4_7_0\13\HasPtrValueLike.cc	/^    HasPtr(const std::string &s = std::string()): $/;"	f	class:HasPtr
HasPtr	c++_primer\source_code\GCC_4_7_0\13\HasPtrValueLike.cc	/^class HasPtr {$/;"	c	file:
f	c++_primer\source_code\GCC_4_7_0\13\HasPtrValueLike.cc	/^HasPtr f(HasPtr hp)  \/\/ HasPtr passed by value, so it is copied$/;"	f
i	c++_primer\source_code\GCC_4_7_0\13\HasPtrValueLike.cc	/^    int    i;$/;"	m	class:HasPtr	file:
main	c++_primer\source_code\GCC_4_7_0\13\HasPtrValueLike.cc	/^int main()$/;"	f
operator =	c++_primer\source_code\GCC_4_7_0\13\HasPtrValueLike.cc	/^HasPtr& HasPtr::operator=(const HasPtr &rhs) $/;"	f	class:HasPtr
ps	c++_primer\source_code\GCC_4_7_0\13\HasPtrValueLike.cc	/^    std::string *ps;$/;"	m	class:HasPtr	file:
swap	c++_primer\source_code\GCC_4_7_0\13\HasPtrValueLike.cc	/^void swap(HasPtr &lhs, HasPtr &rhs)$/;"	f
~HasPtr	c++_primer\source_code\GCC_4_7_0\13\HasPtrValueLike.cc	/^	~HasPtr() { delete ps; }$/;"	f	class:HasPtr
Folder	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^Folder::Folder(Folder &&f)$/;"	f	class:Folder
Folder	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^Folder::Folder(const Folder &f) : msgs(f.msgs)$/;"	f	class:Folder
Message	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^Message::Message(Message &&m): contents(std::move(m.contents))$/;"	f	class:Message
Message	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^Message::Message(const Message &m): $/;"	f	class:Message
add_to_Folders	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^void Message::add_to_Folders(const Message &m)$/;"	f	class:Message
add_to_Messages	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^void Folder::add_to_Messages(const Folder &f)$/;"	f	class:Folder
debug_print	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^void Folder::debug_print()$/;"	f	class:Folder
debug_print	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^void Message::debug_print()$/;"	f	class:Message
move_Folders	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^void Message::move_Folders(Message *m)$/;"	f	class:Message
move_Messages	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^void Folder::move_Messages(Folder *f)$/;"	f	class:Folder
operator =	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^Folder& Folder::operator=(Folder &&f) $/;"	f	class:Folder
operator =	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^Folder& Folder::operator=(const Folder &f)$/;"	f	class:Folder
operator =	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^Message& Message::operator=(Message &&rhs) $/;"	f	class:Message
operator =	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^Message& Message::operator=(const Message &rhs)$/;"	f	class:Message
remove	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^void Folder::remove(Message &m)$/;"	f	class:Folder
remove	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^void Message::remove(Folder &f)$/;"	f	class:Message
remove_from_Folders	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^void Message::remove_from_Folders()$/;"	f	class:Message
remove_from_Msgs	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^void Folder::remove_from_Msgs()$/;"	f	class:Folder
save	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^void Folder::save(Message &m)$/;"	f	class:Folder
save	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^void Message::save(Folder &f)$/;"	f	class:Message
swap	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^void swap(Message &lhs, Message &rhs)$/;"	f
~Folder	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^Folder::~Folder()$/;"	f	class:Folder
~Message	c++_primer\source_code\GCC_4_7_0\13\StrFolder.cc	/^Message::~Message()$/;"	f	class:Message
Folder	c++_primer\source_code\GCC_4_7_0\13\StrFolder.h	/^class Folder {$/;"	c
Message	c++_primer\source_code\GCC_4_7_0\13\StrFolder.h	/^    explicit Message(const String &str = ""): $/;"	f	class:Message
Message	c++_primer\source_code\GCC_4_7_0\13\StrFolder.h	/^class Message {$/;"	c
STRFOLDER_H	c++_primer\source_code\GCC_4_7_0\13\StrFolder.h	31;"	d
addFldr	c++_primer\source_code\GCC_4_7_0\13\StrFolder.h	/^    void addFldr(Folder *f) { folders.insert(f); }$/;"	f	class:Message
addMsg	c++_primer\source_code\GCC_4_7_0\13\StrFolder.h	/^    void addMsg(Message *m) { msgs.insert(m); }$/;"	f	class:Folder
contents	c++_primer\source_code\GCC_4_7_0\13\StrFolder.h	/^    String contents;      \/\/ actual message text$/;"	m	class:Message
folders	c++_primer\source_code\GCC_4_7_0\13\StrFolder.h	/^    std::set<Folder*> folders; \/\/ Folders that have this Message$/;"	m	class:Message
msgs	c++_primer\source_code\GCC_4_7_0\13\StrFolder.h	/^    std::set<Message*> msgs;  \/\/ messages in this folder$/;"	m	class:Folder
remFldr	c++_primer\source_code\GCC_4_7_0\13\StrFolder.h	/^    void remFldr(Folder *f) { folders.erase(f); }$/;"	f	class:Message
remMsg	c++_primer\source_code\GCC_4_7_0\13\StrFolder.h	/^    void remMsg(Message *m) { msgs.erase(m); }$/;"	f	class:Folder
main	c++_primer\source_code\GCC_4_7_0\13\StrFolderMain.cc	/^int main()$/;"	f
STRVEC_H	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	31;"	d
StrVec	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^    StrVec(): $/;"	f	class:StrVec
StrVec	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^StrVec::StrVec(const StrVec &s)$/;"	f	class:StrVec
StrVec	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^StrVec::StrVec(std::initializer_list<std::string> il)$/;"	f	class:StrVec
StrVec	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^class StrVec {$/;"	c
alloc	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^    static std::allocator<std::string> alloc; \/\/ allocates the elements$/;"	m	class:StrVec
alloc_n_copy	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^StrVec::alloc_n_copy(const std::string *b, const std::string *e)$/;"	f	class:StrVec
begin	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^	std::string *begin() const { return elements; }$/;"	f	class:StrVec
cap	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^    std::string *cap;        \/\/ pointer to one past the end of the array$/;"	m	class:StrVec
cap	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^  : elements(s.elements), first_free(s.first_free), cap(s.cap)$/;"	f
capacity	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:StrVec
chk_n_alloc	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^	void chk_n_alloc() $/;"	f	class:StrVec
elements	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^    std::string *elements;   \/\/ pointer to the first element in the array$/;"	m	class:StrVec
emplace_back	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^void StrVec::emplace_back(Args&&... args)$/;"	f	class:StrVec
end	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^	std::string *end() const { return first_free; }$/;"	f	class:StrVec
first_free	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^    std::string *first_free; \/\/ pointer to the first free element in the array$/;"	m	class:StrVec
free	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^void StrVec::free()$/;"	f	class:StrVec
noexcept	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^	StrVec &operator=(StrVec&&) noexcept; \/\/ move assignment$/;"	m	class:StrVec
noexcept	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^	StrVec(StrVec&&) noexcept;            \/\/ move constructor$/;"	m	class:StrVec
noexcept	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^	~StrVec() noexcept;                   \/\/ destructor$/;"	m	class:StrVec
operator =	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^StrVec &StrVec::operator=(const StrVec &rhs)$/;"	f	class:StrVec
operator =	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^StrVec &StrVec::operator=(std::initializer_list<std::string> il)$/;"	f	class:StrVec
operator []	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^	const std::string& operator[](std::size_t n) const $/;"	f	class:StrVec
operator []	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^	std::string& operator[](std::size_t n) $/;"	f	class:StrVec
push_back	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^void StrVec::push_back(const std::string& s)$/;"	f	class:StrVec
push_back	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^void StrVec::push_back(std::string &&s) $/;"	f	class:StrVec
reallocate	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^void StrVec::reallocate()$/;"	f	class:StrVec
size	c++_primer\source_code\GCC_4_7_0\13\StrVec.h	/^    size_t size() const { return first_free - elements; }$/;"	f	class:StrVec
add	c++_primer\source_code\GCC_4_7_0\13\String.cc	/^String add(const String &lhs, const String &rhs) $/;"	f
make_plural	c++_primer\source_code\GCC_4_7_0\13\String.cc	/^String make_plural(size_t ctr, const String &word,$/;"	f
operator +	c++_primer\source_code\GCC_4_7_0\13\String.cc	/^String operator+(const String &lhs, const String &rhs) $/;"	f
operator <<	c++_primer\source_code\GCC_4_7_0\13\String.cc	/^ostream &operator<<(ostream &os, const String &s)$/;"	f
operator =	c++_primer\source_code\GCC_4_7_0\13\String.cc	/^String & String::operator=(const String &rhs)$/;"	f	class:String
operator =	c++_primer\source_code\GCC_4_7_0\13\String.cc	/^String& String::operator=(char c)$/;"	f	class:String
operator =	c++_primer\source_code\GCC_4_7_0\13\String.cc	/^String& String::operator=(const char *cp)$/;"	f	class:String
operator =	c++_primer\source_code\GCC_4_7_0\13\String.cc	/^String& String::operator=(initializer_list<char> il)$/;"	f	class:String
print	c++_primer\source_code\GCC_4_7_0\13\String.cc	/^ostream &print(ostream &os, const String &s)$/;"	f
STRING_H	c++_primer\source_code\GCC_4_7_0\13\String.h	31;"	d
String	c++_primer\source_code\GCC_4_7_0\13\String.h	/^	String(const String &s):sz(s.sz), p(a.allocate(s.sz))$/;"	f	class:String
String	c++_primer\source_code\GCC_4_7_0\13\String.h	/^	String(const char *cp) : $/;"	f	class:String
String	c++_primer\source_code\GCC_4_7_0\13\String.h	/^	String(size_t n, char c) : sz(n), p(a.allocate(n))$/;"	f	class:String
String	c++_primer\source_code\GCC_4_7_0\13\String.h	/^class String {$/;"	c
a	c++_primer\source_code\GCC_4_7_0\13\String.h	/^	static std::allocator<char> a;$/;"	m	class:String
begin	c++_primer\source_code\GCC_4_7_0\13\String.h	/^	const char *begin()                         { return p; }$/;"	f	class:String
begin	c++_primer\source_code\GCC_4_7_0\13\String.h	/^	const char *begin() const                   { return p; }$/;"	f	class:String
end	c++_primer\source_code\GCC_4_7_0\13\String.h	/^	const char *end()                      { return p + sz; }$/;"	f	class:String
end	c++_primer\source_code\GCC_4_7_0\13\String.h	/^	const char *end() const                { return p + sz; }$/;"	f	class:String
noexcept	c++_primer\source_code\GCC_4_7_0\13\String.h	/^	String &operator=(String &&) noexcept;$/;"	m	class:String
p	c++_primer\source_code\GCC_4_7_0\13\String.h	/^	String(String &&s) noexcept : sz(s.size()), p(s.p) $/;"	f	class:String
p	c++_primer\source_code\GCC_4_7_0\13\String.h	/^	char *p = nullptr;$/;"	m	class:String
size	c++_primer\source_code\GCC_4_7_0\13\String.h	/^	size_t size() const                        { return sz; }$/;"	f	class:String
swap	c++_primer\source_code\GCC_4_7_0\13\String.h	/^	void swap(String &s)$/;"	f	class:String
swap	c++_primer\source_code\GCC_4_7_0\13\String.h	/^void swap(String &s1, String &s2)$/;"	f
sz	c++_primer\source_code\GCC_4_7_0\13\String.h	/^	std::size_t sz = 0;$/;"	m	class:String
Foo	c++_primer\source_code\GCC_4_7_0\13\copyNoMove.cc	/^Foo::Foo(const Foo&) { std::cout << "Foo copy ctor" << std::endl; }$/;"	f	class:Foo
Foo	c++_primer\source_code\GCC_4_7_0\13\copyNoMove.cc	/^class Foo {$/;"	c	file:
main	c++_primer\source_code\GCC_4_7_0\13\copyNoMove.cc	/^int main()$/;"	f
HasPtr	c++_primer\source_code\GCC_4_7_0\13\moveHP.cc	/^    HasPtr(const HasPtr &p): $/;"	f	class:HasPtr
HasPtr	c++_primer\source_code\GCC_4_7_0\13\moveHP.cc	/^    HasPtr(const std::string &s = std::string()): $/;"	f	class:HasPtr
HasPtr	c++_primer\source_code\GCC_4_7_0\13\moveHP.cc	/^class HasPtr {$/;"	c	file:
i	c++_primer\source_code\GCC_4_7_0\13\moveHP.cc	/^	HasPtr(HasPtr &&p) noexcept : ps(p.ps), i(p.i) {p.ps = 0;}$/;"	f	class:HasPtr
i	c++_primer\source_code\GCC_4_7_0\13\moveHP.cc	/^    int    i;$/;"	m	class:HasPtr	file:
main	c++_primer\source_code\GCC_4_7_0\13\moveHP.cc	/^int main()$/;"	f
operator =	c++_primer\source_code\GCC_4_7_0\13\moveHP.cc	/^	HasPtr& operator=(HasPtr rhs) $/;"	f	class:HasPtr
ps	c++_primer\source_code\GCC_4_7_0\13\moveHP.cc	/^    std::string *ps;$/;"	m	class:HasPtr	file:
swap	c++_primer\source_code\GCC_4_7_0\13\moveHP.cc	/^void swap(HasPtr &lhs, HasPtr &rhs)$/;"	f
~HasPtr	c++_primer\source_code\GCC_4_7_0\13\moveHP.cc	/^	~HasPtr() { delete ps; }$/;"	f	class:HasPtr
f	c++_primer\source_code\GCC_4_7_0\13\serial.cc	/^void f (numbered s) { cout << s.mysn << endl; }$/;"	f
main	c++_primer\source_code\GCC_4_7_0\13\serial.cc	/^int main()$/;"	f
mysn	c++_primer\source_code\GCC_4_7_0\13\serial.cc	/^	size_t mysn;$/;"	m	struct:numbered	file:
numbered	c++_primer\source_code\GCC_4_7_0\13\serial.cc	/^	numbered() : mysn(sn++) { }$/;"	f	struct:numbered
numbered	c++_primer\source_code\GCC_4_7_0\13\serial.cc	/^	numbered(const numbered &) : mysn(sn++) { }$/;"	f	struct:numbered
numbered	c++_primer\source_code\GCC_4_7_0\13\serial.cc	/^struct numbered {$/;"	s	file:
operator =	c++_primer\source_code\GCC_4_7_0\13\serial.cc	/^	numbered &operator=(const numbered &) { return *this; }$/;"	f	struct:numbered
sn	c++_primer\source_code\GCC_4_7_0\13\serial.cc	/^	static size_t sn;$/;"	m	struct:numbered	file:
sn	c++_primer\source_code\GCC_4_7_0\13\serial.cc	/^size_t numbered::sn = 0;$/;"	m	class:numbered	file:
SMALL_SI_H	c++_primer\source_code\GCC_4_7_0\13\small_SI.h	30;"	d
Sales_data	c++_primer\source_code\GCC_4_7_0\13\small_SI.h	/^	Sales_data(const Sales_data &rhs): bookNo(rhs.bookNo),$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_4_7_0\13\small_SI.h	/^	Sales_data(const std::string &book, unsigned cnt, double price):$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_4_7_0\13\small_SI.h	/^    Sales_data(const std::string & s = ""): bookNo(s),$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_4_7_0\13\small_SI.h	/^class Sales_data {$/;"	c
bookNo	c++_primer\source_code\GCC_4_7_0\13\small_SI.h	/^    std::string bookNo;$/;"	m	class:Sales_data
operator =	c++_primer\source_code\GCC_4_7_0\13\small_SI.h	/^Sales_data::operator=(const Sales_data &rhs)$/;"	f	class:Sales_data
revenue	c++_primer\source_code\GCC_4_7_0\13\small_SI.h	/^    double revenue = 0.0;$/;"	m	class:Sales_data
units_sold	c++_primer\source_code\GCC_4_7_0\13\small_SI.h	/^    int units_sold = 0;$/;"	m	class:Sales_data
~Sales_data	c++_primer\source_code\GCC_4_7_0\13\small_SI.h	/^    ~Sales_data() { } $/;"	f	class:Sales_data
main	c++_primer\source_code\GCC_4_7_0\13\substr.cc	/^int main()$/;"	f
position	c++_primer\source_code\GCC_4_7_0\13\substr.cc	/^position(const string &a, const string &b, const string &c)$/;"	f
getVec	c++_primer\source_code\GCC_4_7_0\13\useStrVec.cc	/^StrVec getVec(istream &is)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\13\useStrVec.cc	/^int main()$/;"	f
print	c++_primer\source_code\GCC_4_7_0\13\useStrVec.cc	/^void print(const StrVec &svec)$/;"	f
Sales_data	c++_primer\source_code\GCC_4_7_0\14\Sales_data.cc	/^Sales_data::Sales_data(istream &is) $/;"	f	class:Sales_data
add	c++_primer\source_code\GCC_4_7_0\14\Sales_data.cc	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
avg_price	c++_primer\source_code\GCC_4_7_0\14\Sales_data.cc	/^double Sales_data::avg_price() const$/;"	f	class:Sales_data
operator +	c++_primer\source_code\GCC_4_7_0\14\Sales_data.cc	/^operator+(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator +=	c++_primer\source_code\GCC_4_7_0\14\Sales_data.cc	/^Sales_data& Sales_data::operator+=(const Sales_data &rhs)$/;"	f	class:Sales_data
operator <<	c++_primer\source_code\GCC_4_7_0\14\Sales_data.cc	/^ostream &operator<<(ostream &os, const Sales_data &item)$/;"	f
operator >>	c++_primer\source_code\GCC_4_7_0\14\Sales_data.cc	/^istream &operator>>(istream &is, Sales_data &item)$/;"	f
print	c++_primer\source_code\GCC_4_7_0\14\Sales_data.cc	/^ostream &print(ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\source_code\GCC_4_7_0\14\Sales_data.cc	/^istream &read(istream &is, Sales_data &item)$/;"	f
SALES_DATA_H	c++_primer\source_code\GCC_4_7_0\14\Sales_data.h	31;"	d
Sales_data	c++_primer\source_code\GCC_4_7_0\14\Sales_data.h	/^	Sales_data(const std::string &s): bookNo(s) { }$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_4_7_0\14\Sales_data.h	/^	Sales_data(const std::string &s, unsigned n, double p):$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_4_7_0\14\Sales_data.h	/^class Sales_data {$/;"	c
bookNo	c++_primer\source_code\GCC_4_7_0\14\Sales_data.h	/^	std::string bookNo;$/;"	m	class:Sales_data
compareIsbn	c++_primer\source_code\GCC_4_7_0\14\Sales_data.h	/^bool compareIsbn(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
isbn	c++_primer\source_code\GCC_4_7_0\14\Sales_data.h	/^	std::string isbn() const { return bookNo; }$/;"	f	class:Sales_data
operator !=	c++_primer\source_code\GCC_4_7_0\14\Sales_data.h	/^bool operator!=(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator ==	c++_primer\source_code\GCC_4_7_0\14\Sales_data.h	/^bool operator==(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
revenue	c++_primer\source_code\GCC_4_7_0\14\Sales_data.h	/^	double revenue = 0.0;$/;"	m	class:Sales_data
units_sold	c++_primer\source_code\GCC_4_7_0\14\Sales_data.h	/^	unsigned units_sold = 0;$/;"	m	class:Sales_data
absInt	c++_primer\source_code\GCC_4_7_0\14\absInt.cc	/^struct absInt {$/;"	s	file:
main	c++_primer\source_code\GCC_4_7_0\14\absInt.cc	/^int main() {$/;"	f
operator ()	c++_primer\source_code\GCC_4_7_0\14\absInt.cc	/^    int operator()(int val) const {$/;"	f	struct:absInt
main	c++_primer\source_code\GCC_4_7_0\14\add.cc	/^int main() $/;"	f
add	c++_primer\source_code\GCC_4_7_0\14\calc.cc	/^int add(int i, int j) { return i + j; }$/;"	f
divide	c++_primer\source_code\GCC_4_7_0\14\calc.cc	/^struct divide {$/;"	s	file:
main	c++_primer\source_code\GCC_4_7_0\14\calc.cc	/^int main()$/;"	f
mod	c++_primer\source_code\GCC_4_7_0\14\calc.cc	/^auto mod = [](int i, int j) { return i % j; };$/;"	v
operator ()	c++_primer\source_code\GCC_4_7_0\14\calc.cc	/^    int operator()(int denominator, int divisor) {$/;"	f	struct:divide
main	c++_primer\source_code\GCC_4_7_0\14\directcall.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\14\fcnobj.cc	/^int main() {$/;"	f
size_compare	c++_primer\source_code\GCC_4_7_0\14\fcnobj.cc	/^bool size_compare(const string &s, string::size_type sz)$/;"	f
GT	c++_primer\source_code\GCC_4_7_0\14\newcount-size.cc	/^bool GT(const string &s, string::size_type m) $/;"	f
PrintString	c++_primer\source_code\GCC_4_7_0\14\newcount-size.cc	/^	PrintString(ostream &o) : os(o) { }$/;"	f	class:PrintString
PrintString	c++_primer\source_code\GCC_4_7_0\14\newcount-size.cc	/^class PrintString {$/;"	c	file:
ShorterString	c++_primer\source_code\GCC_4_7_0\14\newcount-size.cc	/^class ShorterString {$/;"	c	file:
SizeComp	c++_primer\source_code\GCC_4_7_0\14\newcount-size.cc	/^	SizeComp(size_t n): sz(n) { }  $/;"	f	class:SizeComp
SizeComp	c++_primer\source_code\GCC_4_7_0\14\newcount-size.cc	/^class SizeComp {$/;"	c	file:
biggies	c++_primer\source_code\GCC_4_7_0\14\newcount-size.cc	/^void biggies(vector<string> &words, vector<string>::size_type sz)$/;"	f
elimDups	c++_primer\source_code\GCC_4_7_0\14\newcount-size.cc	/^void elimDups(vector<string> &words)$/;"	f
isShorter	c++_primer\source_code\GCC_4_7_0\14\newcount-size.cc	/^bool isShorter(const string &s1, const string &s2)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\14\newcount-size.cc	/^int main()$/;"	f
operator ()	c++_primer\source_code\GCC_4_7_0\14\newcount-size.cc	/^	bool operator()(const string &s) const { return s.size() >= sz; }$/;"	f	class:SizeComp
operator ()	c++_primer\source_code\GCC_4_7_0\14\newcount-size.cc	/^	bool operator()(const string &s1, const string &s2) const$/;"	f	class:ShorterString
operator ()	c++_primer\source_code\GCC_4_7_0\14\newcount-size.cc	/^	void operator()(const string &s) const { os << s << " "; }$/;"	f	class:PrintString
os	c++_primer\source_code\GCC_4_7_0\14\newcount-size.cc	/^	ostream &os;$/;"	m	class:PrintString	file:
sz	c++_primer\source_code\GCC_4_7_0\14\newcount-size.cc	/^	size_t sz;  \/\/ a data member for each variable captured by value$/;"	m	class:SizeComp	file:
PrintString	c++_primer\source_code\GCC_4_7_0\14\readStr.cc	/^    PrintString(ostream &o = cout, char c = ' '): $/;"	f	class:PrintString
PrintString	c++_primer\source_code\GCC_4_7_0\14\readStr.cc	/^class PrintString {$/;"	c	file:
ReadLine	c++_primer\source_code\GCC_4_7_0\14\readStr.cc	/^	ReadLine(istream &i) : is(i) { }$/;"	f	class:ReadLine
ReadLine	c++_primer\source_code\GCC_4_7_0\14\readStr.cc	/^class ReadLine {$/;"	c	file:
is	c++_primer\source_code\GCC_4_7_0\14\readStr.cc	/^	istream &is;$/;"	m	class:ReadLine	file:
main	c++_primer\source_code\GCC_4_7_0\14\readStr.cc	/^int main()$/;"	f
operator ()	c++_primer\source_code\GCC_4_7_0\14\readStr.cc	/^	bool operator()(string &s) const { return getline(is, s); }$/;"	f	class:ReadLine
operator ()	c++_primer\source_code\GCC_4_7_0\14\readStr.cc	/^    void operator()(const string &s) const { os << s << sep; }$/;"	f	class:PrintString
os	c++_primer\source_code\GCC_4_7_0\14\readStr.cc	/^    ostream &os;   \/\/ stream on which to write$/;"	m	class:PrintString	file:
sep	c++_primer\source_code\GCC_4_7_0\14\readStr.cc	/^	char sep;      \/\/ character to print after each output$/;"	m	class:PrintString	file:
display	c++_primer\source_code\GCC_4_7_0\15\Basket.cc	/^void Basket::display(ostream &os) const$/;"	f	class:Basket
total_receipt	c++_primer\source_code\GCC_4_7_0\15\Basket.cc	/^double Basket::total_receipt(ostream &os) const$/;"	f	class:Basket
BASKET_H	c++_primer\source_code\GCC_4_7_0\15\Basket.h	31;"	d
Basket	c++_primer\source_code\GCC_4_7_0\15\Basket.h	/^class Basket {$/;"	c
add_item	c++_primer\source_code\GCC_4_7_0\15\Basket.h	/^	void add_item(Quote&& sale)      \/\/ move the given object$/;"	f	class:Basket
add_item	c++_primer\source_code\GCC_4_7_0\15\Basket.h	/^	void add_item(const Quote& sale) \/\/ copy the given object$/;"	f	class:Basket
add_item	c++_primer\source_code\GCC_4_7_0\15\Basket.h	/^	void add_item(const std::shared_ptr<Quote> &sale)  $/;"	f	class:Basket
compare	c++_primer\source_code\GCC_4_7_0\15\Basket.h	/^	static bool compare(const std::shared_ptr<Quote> &lhs,$/;"	f	class:Basket
main	c++_primer\source_code\GCC_4_7_0\15\Basket_main.cc	/^int main()$/;"	f
eval	c++_primer\source_code\GCC_4_7_0\15\Query.cc	/^AndQuery::eval(const TextQuery& text) const$/;"	f	class:AndQuery
eval	c++_primer\source_code\GCC_4_7_0\15\Query.cc	/^NotQuery::eval(const TextQuery& text) const$/;"	f	class:NotQuery
eval	c++_primer\source_code\GCC_4_7_0\15\Query.cc	/^OrQuery::eval(const TextQuery& text) const$/;"	f	class:OrQuery
AndQuery	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^    AndQuery(const Query &left, const Query &right): $/;"	f	class:AndQuery
AndQuery	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^class AndQuery: public BinaryQuery {$/;"	c
BinaryQuery	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^    BinaryQuery(const Query &l, const Query &r, std::string s): $/;"	f	class:BinaryQuery
BinaryQuery	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^class BinaryQuery: public Query_base {$/;"	c
NotQuery	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^    NotQuery(const Query &q): query(q) { }$/;"	f	class:NotQuery
NotQuery	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^class NotQuery: public Query_base {$/;"	c
OrQuery	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^    OrQuery(const Query &left, const Query &right): $/;"	f	class:OrQuery
OrQuery	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^class OrQuery: public BinaryQuery {$/;"	c
QUERY_H	c++_primer\source_code\GCC_4_7_0\15\Query.h	31;"	d
Query	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^    Query(std::shared_ptr<Query_base> query): q(query) { }$/;"	f	class:Query
Query	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^Query::Query(const std::string &s): q(new WordQuery(s)) { }$/;"	f	class:Query
Query	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^class Query {$/;"	c
Query_base	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^class Query_base {$/;"	c
WordQuery	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^    WordQuery(const std::string &s): query_word(s) { }$/;"	f	class:WordQuery
WordQuery	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^class WordQuery: public Query_base {$/;"	c
eval	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^    QueryResult eval(const TextQuery &t) const $/;"	f	class:Query
eval	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^    QueryResult eval(const TextQuery &t) const$/;"	f	class:WordQuery
lhs	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^    Query lhs, rhs;    \/\/ right- and left-hand operands$/;"	m	class:BinaryQuery
opSym	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^    std::string opSym; \/\/ name of the operator$/;"	m	class:BinaryQuery
operator &	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^inline Query operator&(const Query &lhs, const Query &rhs)$/;"	f
operator <<	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^operator<<(std::ostream &os, const Query &query) $/;"	f
operator |	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^inline Query operator|(const Query &lhs, const Query &rhs)$/;"	f
operator ~	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^inline Query operator~(const Query &operand)$/;"	f
q	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^    std::shared_ptr<Query_base> q;$/;"	m	class:Query
query	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^    Query query;$/;"	m	class:NotQuery
query_word	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^    std::string query_word;   \/\/ word for which to search $/;"	m	class:WordQuery
rep	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^	std::string rep() const { return "(" + lhs.rep() + " " $/;"	f	class:BinaryQuery
rep	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^	std::string rep() const { return q->rep(); }$/;"	f	class:Query
rep	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^	std::string rep() const { return query_word; }$/;"	f	class:WordQuery
rep	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^	std::string rep() const {return "~(" + query.rep() + ")";}$/;"	f	class:NotQuery
rhs	c++_primer\source_code\GCC_4_7_0\15\Query.h	/^    Query lhs, rhs;    \/\/ right- and left-hand operands$/;"	m	class:BinaryQuery
net_price	c++_primer\source_code\GCC_4_7_0\15\Quote.cc	/^double Bulk_quote::net_price(size_t cnt) const$/;"	f	class:Bulk_quote
net_price	c++_primer\source_code\GCC_4_7_0\15\Quote.cc	/^double Lim_quote::net_price(size_t cnt) const$/;"	f	class:Lim_quote
print_total	c++_primer\source_code\GCC_4_7_0\15\Quote.cc	/^double print_total(ostream &os, $/;"	f
Bulk_quote	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    Bulk_quote(const std::string& book, double p, $/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^class Bulk_quote : public Disc_quote { \/\/ Bulk_quote inherits from Quote$/;"	c
Disc_quote	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    Disc_quote(const std::string& book, double price,$/;"	f	class:Disc_quote
Disc_quote	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^class Disc_quote : public Quote {$/;"	c
Lim_quote	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    Lim_quote(const std::string& book = "", $/;"	f	class:Lim_quote
Lim_quote	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^class Lim_quote : public Disc_quote {$/;"	c
QUOTE_H	c++_primer\source_code\GCC_4_7_0\15\Quote.h	31;"	d
Quote	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    Quote(const std::string &book, double sales_price):$/;"	f	class:Quote
Quote	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^class Quote {$/;"	c
bookNo	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    std::string bookNo; \/\/ ISBN number of this item$/;"	m	class:Quote
clone	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    Bulk_quote* clone() && {return new Bulk_quote(std::move(*this));}$/;"	f	class:Bulk_quote
clone	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    Bulk_quote* clone() const & {return new Bulk_quote(*this);}$/;"	f	class:Bulk_quote
clone	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    Bulk_quote* clone() const {return new Bulk_quote(*this);}$/;"	f	class:Bulk_quote
clone	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    Lim_quote* clone() && { return new Lim_quote(std::move(*this)); }$/;"	f	class:Lim_quote
clone	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    Lim_quote* clone() const & { return new Lim_quote(*this); }$/;"	f	class:Lim_quote
clone	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    Lim_quote* clone() const { return new Lim_quote(*this); }$/;"	f	class:Lim_quote
clone	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    virtual Quote* clone() && {return new Quote(std::move(*this));}$/;"	f	class:Quote
clone	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    virtual Quote* clone() const & {return new Quote(*this);}$/;"	f	class:Quote
clone	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    virtual Quote* clone() const {return new Quote(*this);}$/;"	f	class:Quote
discount	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    double discount = 0.0;    \/\/ fractional discount to apply$/;"	m	class:Disc_quote
discount_policy	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Disc_quote
isbn	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    std::string isbn() const { return bookNo; }$/;"	f	class:Quote
net_price	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    virtual double net_price(std::size_t n) const $/;"	f	class:Quote
override	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    double net_price(std::size_t) const override;$/;"	m	class:Bulk_quote
price	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    double price = 0.0; \/\/ normal, undiscounted price$/;"	m	class:Quote
quantity	c++_primer\source_code\GCC_4_7_0\15\Quote.h	/^    std::size_t quantity = 0; \/\/ purchase size for the discount to apply$/;"	m	class:Disc_quote
main	c++_primer\source_code\GCC_4_7_0\15\andQueryTest.cc	/^int main(int argc, char **argv)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\15\and_orQueryTest.cc	/^int main(int argc, char **argv)$/;"	f
get_file	c++_primer\source_code\GCC_4_7_0\15\get_print.cc	/^TextQuery get_file(int argc, char **argv)$/;"	f
get_word	c++_primer\source_code\GCC_4_7_0\15\get_print.cc	/^bool get_word(string &s1)$/;"	f
get_words	c++_primer\source_code\GCC_4_7_0\15\get_print.cc	/^bool get_words(string &s1, string &s2)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\15\sample.cc	/^int main()$/;"	f
Base	c++_primer\source_code\GCC_4_7_0\15\scope.cc	/^    Base(): mem(0) { }$/;"	f	struct:Base
Base	c++_primer\source_code\GCC_4_7_0\15\scope.cc	/^struct Base {$/;"	s	file:
Derived	c++_primer\source_code\GCC_4_7_0\15\scope.cc	/^    Derived(int i): mem(i) { } \/\/ initializes Derived::mem to i$/;"	f	struct:Derived
Derived	c++_primer\source_code\GCC_4_7_0\15\scope.cc	/^struct Derived : Base {$/;"	s	file:
get_base_mem	c++_primer\source_code\GCC_4_7_0\15\scope.cc	/^    int get_base_mem() { return Base::mem; }$/;"	f	struct:Derived
get_mem	c++_primer\source_code\GCC_4_7_0\15\scope.cc	/^    int get_mem() { return mem; }  \/\/ returns Derived::mem$/;"	f	struct:Derived
main	c++_primer\source_code\GCC_4_7_0\15\scope.cc	/^int main()$/;"	f
mem	c++_primer\source_code\GCC_4_7_0\15\scope.cc	/^    int mem;   \/\/ hides mem in the base$/;"	m	struct:Derived	file:
mem	c++_primer\source_code\GCC_4_7_0\15\scope.cc	/^    int mem;$/;"	m	struct:Base	file:
main	c++_primer\source_code\GCC_4_7_0\15\useQuote.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\15\vecBasket.cc	/^int main ()$/;"	f
Base	c++_primer\source_code\GCC_4_7_0\15\virtualsNscope.cc	/^class Base {$/;"	c	file:
D1	c++_primer\source_code\GCC_4_7_0\15\virtualsNscope.cc	/^class D1 : public Base {$/;"	c	file:
f2	c++_primer\source_code\GCC_4_7_0\15\virtualsNscope.cc	/^void D1::f2() { cout << "D1::f2()" << endl; }$/;"	f	class:D1
f2	c++_primer\source_code\GCC_4_7_0\15\virtualsNscope.cc	/^void D2::f2() { cout << "D2::f2()" << endl; }$/;"	f	class:D2
fcn	c++_primer\source_code\GCC_4_7_0\15\virtualsNscope.cc	/^int Base::fcn() { cout << "Base::fcn()" << endl; return 0; }$/;"	f	class:Base
fcn	c++_primer\source_code\GCC_4_7_0\15\virtualsNscope.cc	/^int D1::fcn(int) { cout << "D1::fcn(int)" << endl; return 0; }$/;"	f	class:D1
fcn	c++_primer\source_code\GCC_4_7_0\15\virtualsNscope.cc	/^int D2::fcn() { cout << "D2::fcn()" << endl; return 0; }$/;"	f	class:D2
fcn	c++_primer\source_code\GCC_4_7_0\15\virtualsNscope.cc	/^int D2::fcn(int) { cout << "D2::fcn(int)" << endl; return 0; }$/;"	f	class:D2
final	c++_primer\source_code\GCC_4_7_0\15\virtualsNscope.cc	/^class D2 final : public D1 {$/;"	c	file:
main	c++_primer\source_code\GCC_4_7_0\15\virtualsNscope.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\15\wordQueryTest.cc	/^int main(int argc, char **argv)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\Array.cc	/^int main()$/;"	f
BLOB_H	c++_primer\source_code\GCC_4_7_0\16\Blob.h	31;"	d
Blob	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^    Blob<T>::Blob(It b, It e):$/;"	f	class:Blob
Blob	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^Blob<T>::Blob():$/;"	f	class:Blob
Blob	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^Blob<T>::Blob(T *p, std::size_t n): $/;"	f	class:Blob
Blob	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^Blob<T>::Blob(std::initializer_list<T> il): $/;"	f	class:Blob
Blob	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^template <typename T> class Blob {$/;"	c
BlobPtr	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^    BlobPtr(): curr(0) { }$/;"	f	class:BlobPtr
BlobPtr	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^    BlobPtr(Blob<T> &a, size_t sz = 0): $/;"	f	class:BlobPtr
BlobPtr	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^template <typename T> class BlobPtr : public std::iterator<std::bidirectional_iterator_tag,T> {$/;"	c
at	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^Blob<T>::at(size_type i) const$/;"	f	class:Blob
at	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^T& Blob<T>::at(size_type i) $/;"	f	class:Blob
back	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^T& Blob<T>::back() $/;"	f	class:Blob
back	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^const T& Blob<T>::back() const $/;"	f	class:Blob
begin	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^	BlobPtr<T> begin() { return BlobPtr<T>(*this); }$/;"	f	class:Blob
check	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^BlobPtr<T>::check(std::size_t i, const std::string &msg) const$/;"	f	class:BlobPtr
check	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^void Blob<T>::check(size_type i, const std::string &msg) const$/;"	f	class:Blob
curr	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^    std::size_t curr;      \/\/ current position within the array$/;"	m	class:BlobPtr
data	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^	std::shared_ptr<std::vector<T>> data; $/;"	m	class:Blob
empty	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^	bool empty() const { return data->empty(); }$/;"	f	class:Blob
end	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^	BlobPtr<T> end() $/;"	f	class:Blob
front	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^T& Blob<T>::front()$/;"	f	class:Blob
front	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^const T& Blob<T>::front() const $/;"	f	class:Blob
operator !=	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^bool operator!=(const BlobPtr<T> &lhs, const BlobPtr<T> &rhs)$/;"	f
operator *	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^    T& operator*() const$/;"	f	class:BlobPtr
operator ++	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^BlobPtr<T> BlobPtr<T>::operator++(int)$/;"	f	class:BlobPtr
operator ++	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^BlobPtr<T>& BlobPtr<T>::operator++()$/;"	f	class:BlobPtr
operator --	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^BlobPtr<T> BlobPtr<T>::operator--(int)$/;"	f	class:BlobPtr
operator --	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^BlobPtr<T>& BlobPtr<T>::operator--()$/;"	f	class:BlobPtr
operator ->	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^    T* operator->() const$/;"	f	class:BlobPtr
operator <<	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^operator<<(std::ostream &os, const Blob<T> a)$/;"	f
operator ==	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^bool operator==(const BlobPtr<T> &lhs, const BlobPtr<T> &rhs)$/;"	f
operator ==	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^operator==(const Blob<T> lhs, const Blob<T> rhs)$/;"	f
operator []	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^	T &operator[](std::size_t i)$/;"	f	class:BlobPtr
operator []	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^	const T &operator[](std::size_t i) const$/;"	f	class:BlobPtr
operator []	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^Blob<T>::operator[](size_type i) const$/;"	f	class:Blob
operator []	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^T& Blob<T>::operator[](size_type i)$/;"	f	class:Blob
pop_back	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^template <typename T> void Blob<T>::pop_back() $/;"	f	class:Blob
push_back	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^	void push_back(T &&t) { data->push_back(std::move(t)); }$/;"	f	class:Blob
push_back	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^	void push_back(const T &t) {data->push_back(t);}$/;"	f	class:Blob
size	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^	size_type size() const { return data->size(); }$/;"	f	class:Blob
size_type	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^	typedef typename std::vector<T>::size_type size_type;$/;"	t	class:Blob
swap	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^	void swap(Blob &b) { data.swap(b.data); }$/;"	f	class:Blob
value_type	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^	typedef T value_type;$/;"	t	class:Blob
wptr	c++_primer\source_code\GCC_4_7_0\16\Blob.h	/^    std::weak_ptr<std::vector<T>> wptr;  $/;"	m	class:BlobPtr
DEBUGDELETE_H	c++_primer\source_code\GCC_4_7_0\16\DebugDelete.h	31;"	d
DebugDelete	c++_primer\source_code\GCC_4_7_0\16\DebugDelete.h	/^	DebugDelete(const std::string &s = "unique_ptr",$/;"	f	class:DebugDelete
DebugDelete	c++_primer\source_code\GCC_4_7_0\16\DebugDelete.h	/^class DebugDelete {$/;"	c
operator ()	c++_primer\source_code\GCC_4_7_0\16\DebugDelete.h	/^	template <typename T> void operator()(T *p) const $/;"	f	class:DebugDelete
os	c++_primer\source_code\GCC_4_7_0\16\DebugDelete.h	/^	std::ostream &os;  \/\/ where to print debugging info$/;"	m	class:DebugDelete
type	c++_primer\source_code\GCC_4_7_0\16\DebugDelete.h	/^	std::string type;  \/\/ what type of smart pointer we're deleting$/;"	m	class:DebugDelete
main	c++_primer\source_code\GCC_4_7_0\16\SP.cc	/^int main()$/;"	f
Sales_data	c++_primer\source_code\GCC_4_7_0\16\Sales_data.cc	/^Sales_data::Sales_data(istream &is) $/;"	f	class:Sales_data
add	c++_primer\source_code\GCC_4_7_0\16\Sales_data.cc	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
avg_price	c++_primer\source_code\GCC_4_7_0\16\Sales_data.cc	/^double Sales_data::avg_price() const$/;"	f	class:Sales_data
operator ()	c++_primer\source_code\GCC_4_7_0\16\Sales_data.cc	/^hash<Sales_data>::operator()(const Sales_data& s) const$/;"	f	class:std::hash
operator +	c++_primer\source_code\GCC_4_7_0\16\Sales_data.cc	/^operator+(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator +=	c++_primer\source_code\GCC_4_7_0\16\Sales_data.cc	/^Sales_data& Sales_data::operator+=(const Sales_data &rhs)$/;"	f	class:Sales_data
operator <<	c++_primer\source_code\GCC_4_7_0\16\Sales_data.cc	/^ostream &operator<<(ostream &os, const Sales_data &item)$/;"	f
operator >>	c++_primer\source_code\GCC_4_7_0\16\Sales_data.cc	/^istream &operator>>(istream &is, Sales_data &item)$/;"	f
print	c++_primer\source_code\GCC_4_7_0\16\Sales_data.cc	/^ostream &print(ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\source_code\GCC_4_7_0\16\Sales_data.cc	/^istream &read(istream &is, Sales_data &item)$/;"	f
std	c++_primer\source_code\GCC_4_7_0\16\Sales_data.cc	/^namespace std {$/;"	n	file:
SALES_DATA_H	c++_primer\source_code\GCC_4_7_0\16\Sales_data.h	31;"	d
Sales_data	c++_primer\source_code\GCC_4_7_0\16\Sales_data.h	/^	Sales_data(const std::string &s): bookNo(s) { }$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_4_7_0\16\Sales_data.h	/^	Sales_data(const std::string &s, unsigned n, double p):$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_4_7_0\16\Sales_data.h	/^class Sales_data {$/;"	c
argument_type	c++_primer\source_code\GCC_4_7_0\16\Sales_data.h	/^    typedef Sales_data argument_type; \/\/ by default, this type needs ==$/;"	t	struct:std::hash
bookNo	c++_primer\source_code\GCC_4_7_0\16\Sales_data.h	/^	std::string bookNo;$/;"	m	class:Sales_data
compareIsbn	c++_primer\source_code\GCC_4_7_0\16\Sales_data.h	/^bool compareIsbn(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
hash	c++_primer\source_code\GCC_4_7_0\16\Sales_data.h	/^struct hash<Sales_data>  \/\/ the template parameter of Sales_data$/;"	s	namespace:std
isbn	c++_primer\source_code\GCC_4_7_0\16\Sales_data.h	/^	std::string isbn() const { return bookNo; }$/;"	f	class:Sales_data
operator !=	c++_primer\source_code\GCC_4_7_0\16\Sales_data.h	/^bool operator!=(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator ==	c++_primer\source_code\GCC_4_7_0\16\Sales_data.h	/^bool operator==(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
result_type	c++_primer\source_code\GCC_4_7_0\16\Sales_data.h	/^    typedef size_t result_type;$/;"	t	struct:std::hash
revenue	c++_primer\source_code\GCC_4_7_0\16\Sales_data.h	/^	double revenue = 0.0;$/;"	m	class:Sales_data
std	c++_primer\source_code\GCC_4_7_0\16\Sales_data.h	/^namespace std {$/;"	n
units_sold	c++_primer\source_code\GCC_4_7_0\16\Sales_data.h	/^	unsigned units_sold = 0;$/;"	m	class:Sales_data
VEC_H	c++_primer\source_code\GCC_4_7_0\16\Vec.h	31;"	d
Vec	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^Vec<T>::Vec(const Vec &s)$/;"	f	class:Vec
Vec	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^class Vec {$/;"	c
alloc	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^    static std::allocator<T> alloc; \/\/ allocates the elements$/;"	m	class:Vec
alloc	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^template <typename T> std::allocator<T> Vec<T>::alloc;  $/;"	m	class:Vec
alloc_n_copy	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^Vec<T>::alloc_n_copy(const T *b, const T *e) $/;"	f	class:Vec
begin	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^	T *begin() const { return elements; }$/;"	f	class:Vec
cap	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^	elements(s.elements), first_free(s.first_free), cap(s.cap)$/;"	f
cap	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^    T* cap = nullptr;        \/\/ pointer to one past the end of the array$/;"	m	class:Vec
capacity	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:Vec
chk_n_alloc	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^	void chk_n_alloc() { if (first_free == cap) reallocate(); }$/;"	f	class:Vec
elements	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^    T* elements = nullptr;   \/\/ pointer to first element in the array$/;"	m	class:Vec
emplace_back	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^void Vec<T>::emplace_back(Args&&... args)$/;"	f	class:Vec
end	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^	T *end() const { return first_free; }$/;"	f	class:Vec
first_free	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^    T* first_free = nullptr; \/\/ pointer to first free element in the array$/;"	m	class:Vec
free	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^void Vec<T>::free()$/;"	f	class:Vec
noexcept	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^	Vec &operator=(Vec&&) noexcept;  \/\/ move assignment$/;"	m	class:Vec
noexcept	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^	Vec(Vec&&) noexcept;             \/\/ move constructor$/;"	m	class:Vec
noexcept	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^	~Vec() noexcept;                 \/\/ destructor$/;"	m	class:Vec
operator =	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^Vec<T> &Vec<T>::operator=(const Vec &rhs)$/;"	f	class:Vec
operator =	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^Vec<T> &Vec<T>::operator=(std::initializer_list<T> il)$/;"	f	class:Vec
operator []	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^    T& operator[](size_t n) { return elements[n]; }$/;"	f	class:Vec
operator []	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^    const T& operator[](size_t n) const { return elements[n]; }$/;"	f	class:Vec
push_back	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^void Vec<T>::push_back(T&& s) $/;"	f	class:Vec
push_back	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^void Vec<T>::push_back(const T& s)$/;"	f	class:Vec
reallocate	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^void Vec<T>::reallocate()$/;"	f	class:Vec
size	c++_primer\source_code\GCC_4_7_0\16\Vec.h	/^    size_t size() const { return first_free - elements; }$/;"	f	class:Vec
getVec	c++_primer\source_code\GCC_4_7_0\16\Vecmain.cc	/^Vec<string> getVec(istream &is)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\Vecmain.cc	/^int main()$/;"	f
print	c++_primer\source_code\GCC_4_7_0\16\Vecmain.cc	/^void print(const Vec<string> &svec)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\array-parms4.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\compare.cc	/^int main()$/;"	f
COMPARE_H	c++_primer\source_code\GCC_4_7_0\16\compare.h	31;"	d
compare	c++_primer\source_code\GCC_4_7_0\16\compare.h	/^int compare(const T &v1, const T &v2)$/;"	f
compare	c++_primer\source_code\GCC_4_7_0\16\compare.h	/^int compare(const char* const &v1, const char* const &v2)$/;"	f
compare	c++_primer\source_code\GCC_4_7_0\16\compareDef.cc	/^int compare(const T &v1, const T &v2, F f = F()) $/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\compareDef.cc	/^int main()$/;"	f
compare	c++_primer\source_code\GCC_4_7_0\16\compareSpec.cc	/^int compare(const char (&p1)[N], const char (&p2)[M])$/;"	f
compare	c++_primer\source_code\GCC_4_7_0\16\compareSpec.cc	/^int compare(const char *const& p1, const char *const& p2)$/;"	f
compare	c++_primer\source_code\GCC_4_7_0\16\compareSpec.cc	/^template <typename T> int compare(const T &v1, const T &v2)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\compareSpec.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\debug.cc	/^int main()$/;"	f
DEBUG_REP_H	c++_primer\source_code\GCC_4_7_0\16\debug_rep.h	31;"	d
debug_rep	c++_primer\source_code\GCC_4_7_0\16\debug_rep.h	/^std::string debug_rep(char *p) $/;"	f
debug_rep	c++_primer\source_code\GCC_4_7_0\16\debug_rep.h	/^std::string debug_rep(const char *p) $/;"	f
debug_rep	c++_primer\source_code\GCC_4_7_0\16\debug_rep.h	/^std::string debug_rep(const std::string &s)$/;"	f
debug_rep	c++_primer\source_code\GCC_4_7_0\16\debug_rep.h	/^template <> std::string debug_rep(const char *cp)$/;"	f
debug_rep	c++_primer\source_code\GCC_4_7_0\16\debug_rep.h	/^template <typename T> std::string debug_rep(T *p)$/;"	f
debug_rep	c++_primer\source_code\GCC_4_7_0\16\debug_rep.h	/^template <typename T> std::string debug_rep(T b, T e)$/;"	f
debug_rep	c++_primer\source_code\GCC_4_7_0\16\debug_rep.h	/^template <typename T> std::string debug_rep(const T &t)$/;"	f
debug_rep	c++_primer\source_code\GCC_4_7_0\16\debug_rep.h	/^template <typename T> std::string debug_rep(const std::vector<T> &v)$/;"	f
debug_rep	c++_primer\source_code\GCC_4_7_0\16\debug_rep.h	/^template<> std::string debug_rep(char *p)$/;"	f
accum	c++_primer\source_code\GCC_4_7_0\16\expansion.cc	/^T accum(const T &t)$/;"	f
accum	c++_primer\source_code\GCC_4_7_0\16\expansion.cc	/^T accum(const T &t, Args... args)$/;"	f
f	c++_primer\source_code\GCC_4_7_0\16\expansion.cc	/^void f(int i, int j = 0, int k = 0, int l = 0)$/;"	f
g	c++_primer\source_code\GCC_4_7_0\16\expansion.cc	/^template<typename ... Args> void g(Args ... args) {$/;"	f
h	c++_primer\source_code\GCC_4_7_0\16\expansion.cc	/^int h()$/;"	f
h	c++_primer\source_code\GCC_4_7_0\16\expansion.cc	/^template <typename ...Args> int h(int t, Args ... args)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\expansion.cc	/^int main()$/;"	f
f	c++_primer\source_code\GCC_4_7_0\16\flip.cc	/^void f(int v1, int &v2)  \/\/ note v2 is a reference$/;"	f
flip	c++_primer\source_code\GCC_4_7_0\16\flip.cc	/^void flip(F f, T1 &&t1, T2 &&t2)$/;"	f
flip1	c++_primer\source_code\GCC_4_7_0\16\flip.cc	/^void flip1(F f, T1 t1, T2 t2)$/;"	f
flip2	c++_primer\source_code\GCC_4_7_0\16\flip.cc	/^void flip2(F f, T1 &&t1, T2 &&t2)$/;"	f
g	c++_primer\source_code\GCC_4_7_0\16\flip.cc	/^void g(int &&i, int& j)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\flip.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\multiset.cc	/^int main()$/;"	f
compare	c++_primer\source_code\GCC_4_7_0\16\overSpec.cc	/^int compare(const char (&p1)[N], const char (&p2)[M])$/;"	f
compare	c++_primer\source_code\GCC_4_7_0\16\overSpec.cc	/^int compare(const char* const &p1, const char* const &p2)$/;"	f
compare	c++_primer\source_code\GCC_4_7_0\16\overSpec.cc	/^template <typename T> int compare(const T& v1, const T& v2)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\overSpec.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\qm.cc	/^int main() {$/;"	f
f	c++_primer\source_code\GCC_4_7_0\16\special.cc	/^template <typename T> void f(T) { cout << "f(T)" << endl; }$/;"	f
f	c++_primer\source_code\GCC_4_7_0\16\special.cc	/^template <typename T> void f(const T*) $/;"	f
g	c++_primer\source_code\GCC_4_7_0\16\special.cc	/^template <typename T> void g(T) { cout << "g(T)" << endl; }$/;"	f
g	c++_primer\source_code\GCC_4_7_0\16\special.cc	/^template <typename T> void g(T*) { cout << "g(T*)" << endl; }$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\special.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\trail-ret.cc	/^int main()$/;"	f
StrBlob	c++_primer\source_code\GCC_4_7_0\16\typealias.cc	/^typedef Blob<string> StrBlob; $/;"	t	file:
main	c++_primer\source_code\GCC_4_7_0\16\typealias.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\useBlob.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\useChcking.cc	/^int main()$/;"	f
ErrorCode	c++_primer\source_code\GCC_4_7_0\16\variadic.cc	/^	ErrorCode(size_t n = 0): e(n) { }$/;"	f	struct:ErrorCode
ErrorCode	c++_primer\source_code\GCC_4_7_0\16\variadic.cc	/^struct ErrorCode {$/;"	s	file:
e	c++_primer\source_code\GCC_4_7_0\16\variadic.cc	/^	size_t e;$/;"	m	struct:ErrorCode	file:
errorMsg	c++_primer\source_code\GCC_4_7_0\16\variadic.cc	/^ostream &errorMsg(ostream &os, const Args&... rest)$/;"	f
errors	c++_primer\source_code\GCC_4_7_0\16\variadic.cc	/^	static map<size_t, string> errors;$/;"	m	struct:ErrorCode	file:
errors	c++_primer\source_code\GCC_4_7_0\16\variadic.cc	/^ErrorCode::errors = { {42, "some error"}, { 1024, "another error"} };$/;"	m	class:ErrorCode	file:
lookup	c++_primer\source_code\GCC_4_7_0\16\variadic.cc	/^	string lookup() const { return errors[e]; }$/;"	f	struct:ErrorCode
main	c++_primer\source_code\GCC_4_7_0\16\variadic.cc	/^int main()$/;"	f
num	c++_primer\source_code\GCC_4_7_0\16\variadic.cc	/^	size_t num() const { return e; }$/;"	f	struct:ErrorCode
print	c++_primer\source_code\GCC_4_7_0\16\variadic.cc	/^ostream &print(ostream &os, const T &t)$/;"	f
print	c++_primer\source_code\GCC_4_7_0\16\variadic.cc	/^print(ostream &os, const T &t, const Args&... rest)\/\/expand Args$/;"	f
bigger	c++_primer\source_code\GCC_4_7_0\16\variadic3.cc	/^template <typename T> bool bigger(const T &t, initializer_list<T> il)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\16\variadic3.cc	/^int main()$/;"	f
min_elem	c++_primer\source_code\GCC_4_7_0\16\variadic3.cc	/^T min_elem(T val, Back... back)$/;"	f
min_elem	c++_primer\source_code\GCC_4_7_0\16\variadic3.cc	/^template <typename T> T min_elem(initializer_list<T> il)$/;"	f
min_elem	c++_primer\source_code\GCC_4_7_0\16\variadic3.cc	/^template<typename T> T min_elem(const T &v)$/;"	f
print	c++_primer\source_code\GCC_4_7_0\16\variadic3.cc	/^ostream &print(ostream &os, const T &t)$/;"	f
print	c++_primer\source_code\GCC_4_7_0\16\variadic3.cc	/^ostream &print(ostream &os, const T &t, const Args&... rest)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\REerrs.cc	/^int main() { return 0; }$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\REerrs.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\badgetc.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\bits.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\ccpgms.cc	/^int main() { return 0; }$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\ccpgms.cc	/^int main()$/;"	f
build_store	c++_primer\source_code\GCC_4_7_0\17\findbook.cc	/^vector<Sales_data> build_store(const string &s)$/;"	f
findBook	c++_primer\source_code\GCC_4_7_0\17\findbook.cc	/^findBook(const vector<vector<Sales_data>> &files, $/;"	f
lt	c++_primer\source_code\GCC_4_7_0\17\findbook.cc	/^bool lt(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\findbook.cc	/^int main(int argc, char **argv)$/;"	f
matches	c++_primer\source_code\GCC_4_7_0\17\findbook.cc	/^              vector<Sales_data>::const_iterator> matches;$/;"	t	file:
reportResults	c++_primer\source_code\GCC_4_7_0\17\findbook.cc	/^void reportResults(istream &in, ostream &os,$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\game.cc	/^int main()$/;"	f
play	c++_primer\source_code\GCC_4_7_0\17\game.cc	/^bool play(bool player) { return player; }$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\getc.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\getput.cc	/^int main()$/;"	f
get_status	c++_primer\source_code\GCC_4_7_0\17\manips.cc	/^bool get_status()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\manips.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\manips11.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\no-skipws.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\normalInts.cc	/^int main()$/;"	f
checkPattern	c++_primer\source_code\GCC_4_7_0\17\phones.cc	/^void checkPattern(const regex &r, const string &s)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\phones.cc	/^int main() { return 0; }$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\phones.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\phonesFinal.cc	/^int main() { return 0; }$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\phonesFinal.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\point.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\prec.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\rand1.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\rand2.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\rand4.cc	/^int main()$/;"	f
bad_randVec	c++_primer\source_code\GCC_4_7_0\17\rand6.cc	/^vector<unsigned> bad_randVec()$/;"	f
good_randVec	c++_primer\source_code\GCC_4_7_0\17\rand6.cc	/^vector<unsigned> good_randVec()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\rand6.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\regex1.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\sci_dec.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\seed.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\seek.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\setw.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\skipws.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\subexpr.cc	/^int main() { return 0; }$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\subexpr.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\tuple.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\validatePhones.cc	/^int main() { return 0; }$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\validatePhones.cc	/^int main()$/;"	f
valid	c++_primer\source_code\GCC_4_7_0\17\validatePhones.cc	/^bool valid(const smatch& m)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\zips.cc	/^int main() { return 0; }$/;"	f
main	c++_primer\source_code\GCC_4_7_0\17\zips.cc	/^int main()$/;"	f
highlight	c++_primer\source_code\GCC_4_7_0\18\Animal.cc	/^void highlight(const Endangered&)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\18\Animal.cc	/^int main() {$/;"	f
operator <<	c++_primer\source_code\GCC_4_7_0\18\Animal.cc	/^ostream& operator<<(ostream &os, const ZooAnimal&)$/;"	f
print	c++_primer\source_code\GCC_4_7_0\18\Animal.cc	/^void print(const Bear&) $/;"	f
Astaire	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^constexpr DanceType Astaire = 1;$/;"	v
Bear	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    Bear(std::string name, bool onExhibit=true, $/;"	f	class:Bear
Bear	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^class Bear : public ZooAnimal {$/;"	c
Endangered	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^class Endangered {$/;"	c
Panda	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^Panda::Panda(std::string name, bool onExhibit)$/;"	f	class:Panda
Panda	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^class Panda : public Bear, public Endangered {$/;"	c
PolarBear	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^class PolarBear : public Bear { \/* . . . *\/ };$/;"	c
Rogers	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^constexpr DanceType Rogers = 42;$/;"	v
ZooAnimal	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    ZooAnimal(std::string animal, bool exhibit,$/;"	f	class:ZooAnimal
ZooAnimal	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^class ZooAnimal {$/;"	c
cuddle	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    virtual void cuddle()$/;"	f	class:Panda
dance	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    void dance(DanceType) const $/;"	f	class:Bear
dancetype	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    DanceType   dancetype = Rogers;$/;"	m	class:Bear
exhibit_stat	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    bool        exhibit_stat = false;$/;"	m	class:ZooAnimal
fam_name	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    std::string fam_name;$/;"	m	class:ZooAnimal
family_name	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    std::string family_name() const { return fam_name; }$/;"	f	class:ZooAnimal
highlight	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    virtual void highlight() const$/;"	f	class:Endangered
highlight	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    void highlight()$/;"	f	class:Panda
max_weight	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^	virtual double max_weight() const$/;"	f	class:Endangered
max_weight	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^	virtual double max_weight() const$/;"	f	class:ZooAnimal
max_weight	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^double Panda::max_weight() const$/;"	f	class:Panda
mumble	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    int mumble(int)$/;"	f	class:Bear
name	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    std::string name() const { return nm; }$/;"	f	class:ZooAnimal
nm	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    std::string nm;$/;"	m	class:ZooAnimal
onExhibit	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    bool onExhibit() const { return exhibit_stat; }$/;"	f	class:ZooAnimal
population	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    virtual int population() const$/;"	f	class:ZooAnimal
print	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    virtual std::ostream &print() const$/;"	f	class:Bear
print	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    virtual std::ostream& print() const$/;"	f	class:Endangered
print	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    virtual std::ostream& print() const$/;"	f	class:Panda
print	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    virtual std::ostream& print() const$/;"	f	class:ZooAnimal
toes	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    virtual int toes() const$/;"	f	class:Bear
toes	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    virtual int toes()$/;"	f	class:Panda
~Bear	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    virtual ~Bear()$/;"	f	class:Bear
~Endangered	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    virtual ~Endangered() $/;"	f	class:Endangered
~Panda	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    virtual ~Panda()$/;"	f	class:Panda
~ZooAnimal	c++_primer\source_code\GCC_4_7_0\18\Animal.h	/^    virtual ~ZooAnimal()$/;"	f	class:ZooAnimal
Bear	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    Bear() : dance_flag(two_left_feet) { }$/;"	f	class:Bear
Bear	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^Bear::Bear(std::string name, bool onExhibit):$/;"	f	class:Bear
Bear	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^class Bear : virtual public ZooAnimal {$/;"	c
DanceType	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	g	class:Bear
Endangered	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    Endangered(Status stat = improving): animal_status(stat) { }$/;"	f	class:Endangered
Endangered	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^class Endangered {$/;"	c
Panda	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^Panda::Panda(std::string name, bool onExhibit)$/;"	f	class:Panda
Panda	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^class Panda : public Bear,$/;"	c
Raccoon	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^Raccoon::Raccoon(std::string name, bool onExhibit)$/;"	f	class:Raccoon
Raccoon	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^class Raccoon : public virtual ZooAnimal {$/;"	c
Status	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    enum Status { critical, environment, improving };$/;"	g	class:Endangered
ZooAnimal	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    ZooAnimal(std::string animal, bool exhibit,$/;"	f	class:ZooAnimal
ZooAnimal	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^class ZooAnimal {$/;"	c
animal_status	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    Status animal_status;$/;"	m	class:Endangered
critical	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
dance	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    void dance(DanceType) const$/;"	f	class:Bear
dance_flag	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    DanceType dance_flag;$/;"	m	class:Bear
environment	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
exhibit_stat	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    bool exhibit_stat = false;$/;"	m	class:ZooAnimal
fam_name	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    std::string fam_name;$/;"	m	class:ZooAnimal
family_name	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    std::string family_name() const { return fam_name; }$/;"	f	class:ZooAnimal
fandango	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
highlight	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    virtual void highlight() const$/;"	f	class:Endangered
improving	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
isA	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    virtual std::string isA() const$/;"	f	class:Bear
macarena	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
mumble	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    int mumble(int)$/;"	f	class:Bear
name	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    std::string name() const { return nm; }$/;"	f	class:ZooAnimal
name	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    std::string name;$/;"	m	class:Bear
nm	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    std::string nm;$/;"	m	class:ZooAnimal
onExhibit	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    bool onExhibit() const { return exhibit_stat; }$/;"	f	class:ZooAnimal
pettable	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    bool pettable() const {return pettable_flag;  }$/;"	f	class:Raccoon
pettable	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    void pettable(bool petval) {pettable_flag = petval;}$/;"	f	class:Raccoon
pettable_flag	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    bool pettable_flag = false;$/;"	m	class:Raccoon
population	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    virtual int population() const$/;"	f	class:ZooAnimal
print	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    virtual std::ostream &print(std::ostream&) const$/;"	f	class:Bear
print	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    virtual std::ostream& print(std::ostream&) const$/;"	f	class:Endangered
print	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    virtual std::ostream& print(std::ostream&) const$/;"	f	class:Panda
print	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    virtual std::ostream& print(std::ostream&) const$/;"	f	class:Raccoon
print	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    virtual std::ostream& print(std::ostream&) const$/;"	f	class:ZooAnimal
sleeping	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    bool sleeping() const {return sleeping_flag;}$/;"	f	class:Panda
sleeping	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    void sleeping(bool newval) {sleeping_flag = newval;}$/;"	f	class:Panda
sleeping_flag	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    bool sleeping_flag = false;$/;"	m	class:Panda
two_left_feet	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
~Bear	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^	virtual ~Bear() { std::cout << "Bear::~Bear" << std::endl; }$/;"	f	class:Bear
~Endangered	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    virtual ~Endangered() $/;"	f	class:Endangered
~ZooAnimal	c++_primer\source_code\GCC_4_7_0\18\Animal_virtual_baseVers.h	/^    virtual ~ZooAnimal()$/;"	f	class:ZooAnimal
Sales_data	c++_primer\source_code\GCC_4_7_0\18\Sales_data.cc	/^Sales_data::Sales_data(istream &is) $/;"	f	class:Sales_data
add	c++_primer\source_code\GCC_4_7_0\18\Sales_data.cc	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
avg_price	c++_primer\source_code\GCC_4_7_0\18\Sales_data.cc	/^double Sales_data::avg_price() const$/;"	f	class:Sales_data
operator ()	c++_primer\source_code\GCC_4_7_0\18\Sales_data.cc	/^hash<Sales_data>::operator()(const Sales_data& s) const$/;"	f	class:std::hash
operator +	c++_primer\source_code\GCC_4_7_0\18\Sales_data.cc	/^operator+(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator +=	c++_primer\source_code\GCC_4_7_0\18\Sales_data.cc	/^Sales_data& Sales_data::operator+=(const Sales_data &rhs)$/;"	f	class:Sales_data
operator <<	c++_primer\source_code\GCC_4_7_0\18\Sales_data.cc	/^ostream &operator<<(ostream &os, const Sales_data &item)$/;"	f
operator >>	c++_primer\source_code\GCC_4_7_0\18\Sales_data.cc	/^istream &operator>>(istream &is, Sales_data &item)$/;"	f
print	c++_primer\source_code\GCC_4_7_0\18\Sales_data.cc	/^ostream &print(ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\source_code\GCC_4_7_0\18\Sales_data.cc	/^istream &read(istream &is, Sales_data &item)$/;"	f
std	c++_primer\source_code\GCC_4_7_0\18\Sales_data.cc	/^namespace std {$/;"	n	file:
main	c++_primer\source_code\GCC_4_7_0\18\book.cc	/^int main()$/;"	f
BOOKEXCEPT_H	c++_primer\source_code\GCC_4_7_0\18\bookexcept.h	31;"	d
isbn_mismatch	c++_primer\source_code\GCC_4_7_0\18\bookexcept.h	/^    explicit isbn_mismatch(const std::string &s): $/;"	f	class:isbn_mismatch
isbn_mismatch	c++_primer\source_code\GCC_4_7_0\18\bookexcept.h	/^    isbn_mismatch(const std::string &s,$/;"	f	class:isbn_mismatch
isbn_mismatch	c++_primer\source_code\GCC_4_7_0\18\bookexcept.h	/^class isbn_mismatch: public std::logic_error {$/;"	c
left	c++_primer\source_code\GCC_4_7_0\18\bookexcept.h	/^    const std::string left, right;$/;"	m	class:isbn_mismatch
out_of_stock	c++_primer\source_code\GCC_4_7_0\18\bookexcept.h	/^    explicit out_of_stock(const std::string &s):$/;"	f	class:out_of_stock
out_of_stock	c++_primer\source_code\GCC_4_7_0\18\bookexcept.h	/^class out_of_stock: public std::runtime_error {$/;"	c
right	c++_primer\source_code\GCC_4_7_0\18\bookexcept.h	/^    const std::string left, right;$/;"	m	class:isbn_mismatch
main	c++_primer\source_code\GCC_4_7_0\18\class.cc	/^int main()$/;"	f
compute	c++_primer\source_code\GCC_4_7_0\18\ex-over.cc	/^    void compute() { cout << "primerLib::compute()" << endl; }$/;"	f	namespace:primerLib
compute	c++_primer\source_code\GCC_4_7_0\18\ex-over.cc	/^    void compute(const void *) $/;"	f	namespace:primerLib
compute	c++_primer\source_code\GCC_4_7_0\18\ex-over.cc	/^void compute(char*, char* = 0)$/;"	f
compute	c++_primer\source_code\GCC_4_7_0\18\ex-over.cc	/^void compute(double, double = 3.4)$/;"	f
compute	c++_primer\source_code\GCC_4_7_0\18\ex-over.cc	/^void compute(int) { cout << "compute(int)" << endl; }$/;"	f
main	c++_primer\source_code\GCC_4_7_0\18\ex-over.cc	/^int main()$/;"	f
primerLib	c++_primer\source_code\GCC_4_7_0\18\ex-over.cc	/^namespace primerLib {$/;"	n	file:
Bulk_item	c++_primer\source_code\GCC_4_7_0\18\inherit.cc	/^	Bulk_item() { std::cout << "Bulk_item::Bulk_item" << std::endl; }$/;"	f	class:Bulk_item
Bulk_item	c++_primer\source_code\GCC_4_7_0\18\inherit.cc	/^class Bulk_item : public NS::Quote { $/;"	c	file:
NS	c++_primer\source_code\GCC_4_7_0\18\inherit.cc	/^namespace NS {$/;"	n	file:
Quote	c++_primer\source_code\GCC_4_7_0\18\inherit.cc	/^		Quote() { std::cout << "Quote::Quote" << std::endl; } $/;"	f	class:NS::Quote
Quote	c++_primer\source_code\GCC_4_7_0\18\inherit.cc	/^    class Quote { $/;"	c	namespace:NS	file:
display	c++_primer\source_code\GCC_4_7_0\18\inherit.cc	/^    void display(const Quote&) $/;"	f	namespace:NS
main	c++_primer\source_code\GCC_4_7_0\18\inherit.cc	/^int main() {$/;"	f
Base1	c++_primer\source_code\GCC_4_7_0\18\mi-scope.cc	/^struct Base1 {$/;"	s	file:
Base2	c++_primer\source_code\GCC_4_7_0\18\mi-scope.cc	/^struct Base2 {$/;"	s	file:
Derived	c++_primer\source_code\GCC_4_7_0\18\mi-scope.cc	/^struct Derived : public Base1 {$/;"	s	file:
MI	c++_primer\source_code\GCC_4_7_0\18\mi-scope.cc	/^struct MI : public Derived, public Base2 {$/;"	s	file:
ival	c++_primer\source_code\GCC_4_7_0\18\mi-scope.cc	/^	int ival = 3;$/;"	m	struct:Derived	file:
ival	c++_primer\source_code\GCC_4_7_0\18\mi-scope.cc	/^    int ival = 1;$/;"	m	struct:Base1	file:
ival	c++_primer\source_code\GCC_4_7_0\18\mi-scope.cc	/^    int ival = 2;$/;"	m	struct:Base2	file:
ival	c++_primer\source_code\GCC_4_7_0\18\mi-scope.cc	/^    int ival = 4;$/;"	m	struct:MI	file:
main	c++_primer\source_code\GCC_4_7_0\18\mi-scope.cc	/^int main()$/;"	f
print	c++_primer\source_code\GCC_4_7_0\18\mi-scope.cc	/^    void print(double) const        \/\/ public by default$/;"	f	struct:Base2
print	c++_primer\source_code\GCC_4_7_0\18\mi-scope.cc	/^    void print(int) const     \/\/ public by default$/;"	f	struct:Base1
print	c++_primer\source_code\GCC_4_7_0\18\mi-scope.cc	/^    void print(std::string) const   \/\/ public by default$/;"	f	struct:Derived
print	c++_primer\source_code\GCC_4_7_0\18\mi-scope.cc	/^    void print(std::vector<double>) \/\/ public by default$/;"	f	struct:MI
libs_R_us	c++_primer\source_code\GCC_4_7_0\18\over.cc	/^namespace libs_R_us {$/;"	n	file:
main	c++_primer\source_code\GCC_4_7_0\18\over.cc	/^int main()$/;"	f
print	c++_primer\source_code\GCC_4_7_0\18\over.cc	/^    extern void print(double) $/;"	f	namespace:libs_R_us
print	c++_primer\source_code\GCC_4_7_0\18\over.cc	/^    extern void print(int) $/;"	f	namespace:libs_R_us
print	c++_primer\source_code\GCC_4_7_0\18\over.cc	/^void print(const std::string &)$/;"	f
AW	c++_primer\source_code\GCC_4_7_0\18\over2.cc	/^namespace AW {$/;"	n	file:
Primer	c++_primer\source_code\GCC_4_7_0\18\over2.cc	/^namespace Primer {$/;"	n	file:
main	c++_primer\source_code\GCC_4_7_0\18\over2.cc	/^int main() {$/;"	f
print	c++_primer\source_code\GCC_4_7_0\18\over2.cc	/^    double print(double d) $/;"	f	namespace:Primer
print	c++_primer\source_code\GCC_4_7_0\18\over2.cc	/^    int print(int i) $/;"	f	namespace:AW
g	c++_primer\source_code\GCC_4_7_0\18\spec.cc	/^void g() { }$/;"	f
main	c++_primer\source_code\GCC_4_7_0\18\spec.cc	/^int main()$/;"	f
noexcept	c++_primer\source_code\GCC_4_7_0\18\spec.cc	/^void h() noexcept(noexcept(f())) { f(); }$/;"	f
noexcept	c++_primer\source_code\GCC_4_7_0\18\spec.cc	/^void i() noexcept(noexcept(g())) { g(); }$/;"	f
A	c++_primer\source_code\GCC_4_7_0\18\usingDirective.cc	/^namespace A {$/;"	n	file:
blip	c++_primer\source_code\GCC_4_7_0\18\usingDirective.cc	/^namespace blip {$/;"	n	file:
f	c++_primer\source_code\GCC_4_7_0\18\usingDirective.cc	/^	void f() $/;"	f	namespace:blip
f	c++_primer\source_code\GCC_4_7_0\18\usingDirective.cc	/^void f() $/;"	f
i	c++_primer\source_code\GCC_4_7_0\18\usingDirective.cc	/^    int i = 0, j = 42;$/;"	m	namespace:A	file:
i	c++_primer\source_code\GCC_4_7_0\18\usingDirective.cc	/^    int i = 16, j = 15, k = 23;$/;"	m	namespace:blip	file:
j	c++_primer\source_code\GCC_4_7_0\18\usingDirective.cc	/^    int i = 0, j = 42;$/;"	m	namespace:A	file:
j	c++_primer\source_code\GCC_4_7_0\18\usingDirective.cc	/^    int i = 16, j = 15, k = 23;$/;"	m	namespace:blip	file:
j	c++_primer\source_code\GCC_4_7_0\18\usingDirective.cc	/^int j = 0;  \/\/ ok: j inside blip is hidden inside a namespace$/;"	v
k	c++_primer\source_code\GCC_4_7_0\18\usingDirective.cc	/^    int i = 16, j = 15, k = 23;$/;"	m	namespace:blip	file:
main	c++_primer\source_code\GCC_4_7_0\18\usingDirective.cc	/^int main() $/;"	f
dance	c++_primer\source_code\GCC_4_7_0\18\virt-inherit.cc	/^void dance(const Bear&) $/;"	f
main	c++_primer\source_code\GCC_4_7_0\18\virt-inherit.cc	/^int main ()$/;"	f
operator <<	c++_primer\source_code\GCC_4_7_0\18\virt-inherit.cc	/^ostream& operator<<(ostream&, const ZooAnimal&) $/;"	f
rummage	c++_primer\source_code\GCC_4_7_0\18\virt-inherit.cc	/^void rummage(const Raccoon&) $/;"	f
Menu	c++_primer\source_code\GCC_4_7_0\19\Screen.cc	/^Screen::Action Screen::Menu[] = { &Screen::home,$/;"	m	class:Screen	file:
BACK	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	e	enum:Screen::Directions
DOWN	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	e	enum:Screen::Directions
Directions	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	g	class:Screen
FORWARD	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	e	enum:Screen::Directions
HOME	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	e	enum:Screen::Directions
Menu	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    static Action Menu[];      \/\/ function table$/;"	m	class:Screen
SCREEN_H	c++_primer\source_code\GCC_4_7_0\19\Screen.h	31;"	d
Screen	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    Screen(pos ht = 0, pos wd = 0): contents(ht * wd, ' '), cursor(0), $/;"	f	class:Screen
Screen	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^class Screen {$/;"	c
UP	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	e	enum:Screen::Directions
back	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    Screen& back() { --cursor; return *this; }$/;"	f	class:Screen
contents	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    std::string contents;$/;"	m	class:Screen
cursor	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    pos cursor;$/;"	m	class:Screen
data	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^	static const std::string Screen::*data() $/;"	f	class:Screen::Screen
down	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    Screen& down() {cursor -= height; return *this; }$/;"	f	class:Screen
forward	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    Screen& forward() { ++cursor; return *this; }$/;"	f	class:Screen
get	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen
get	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^char Screen::get(pos r, pos c) const \/\/ declared as inline in the class$/;"	f	class:Screen
get_cursor	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^	char get_cursor() const { return contents[cursor]; }$/;"	f	class:Screen
height	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    pos height, width;$/;"	m	class:Screen
home	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    Screen& home() { cursor = 0; return *this; }$/;"	f	class:Screen
move	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^Screen& Screen::move(Directions cm)$/;"	f	class:Screen
pos	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    typedef std::string::size_type pos;$/;"	t	class:Screen
up	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    Screen& up() { cursor += height; return *this; }$/;"	f	class:Screen
width	c++_primer\source_code\GCC_4_7_0\19\Screen.h	/^    pos height, width;$/;"	m	class:Screen
QueryResult	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^TextQuery::QueryResult::QueryResult(string s, $/;"	f	class:TextQuery::QueryResult
QueryResult	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^class TextQuery::QueryResult {$/;"	c	class:TextQuery
TEXTQUERY_H	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	31;"	d
TextQuery	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^class TextQuery {$/;"	c
begin	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^	line_it begin() const { return lines->cbegin(); }$/;"	f	class:TextQuery::QueryResult
end	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^	line_it end() const   { return lines->cend(); }$/;"	f	class:TextQuery::QueryResult
file	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^	std::shared_ptr<std::vector<std::string>> file;  \/\/input file$/;"	m	class:TextQuery::QueryResult
file	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^    std::shared_ptr<std::vector<std::string>> file; \/\/ input file$/;"	m	class:TextQuery
get_file	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^	std::shared_ptr<std::vector<std::string>> get_file() { return file; }$/;"	f	class:TextQuery::QueryResult
line_it	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^	typedef std::set<line_no>::const_iterator line_it;$/;"	t	class:TextQuery::QueryResult
line_no	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^	typedef std::vector<std::string>::size_type line_no;$/;"	t	class:TextQuery
lines	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^	std::shared_ptr<std::set<line_no>> lines; \/\/ lines it's on$/;"	m	class:TextQuery::QueryResult
size	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^	std::set<line_no>::size_type size() const  { return lines->size(); }$/;"	f	class:TextQuery::QueryResult
sought	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^	std::string sought;  \/\/ word this query represents$/;"	m	class:TextQuery::QueryResult
static_mem	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^	static int static_mem;$/;"	m	class:TextQuery::QueryResult
whitespace_chars	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^    static std::string whitespace_chars;     $/;"	m	class:TextQuery
wm	c++_primer\source_code\GCC_4_7_0\19\TextQuery.h	/^	         std::shared_ptr<std::set<line_no>>> wm;  $/;"	m	class:TextQuery
CHAR	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^    enum {INT, CHAR, DBL, STR} tok; \/\/ discriminant$/;"	e	enum:Token::__anon32
DBL	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^    enum {INT, CHAR, DBL, STR} tok; \/\/ discriminant$/;"	e	enum:Token::__anon32
INT	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^    enum {INT, CHAR, DBL, STR} tok; \/\/ discriminant$/;"	e	enum:Token::__anon32
STR	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^    enum {INT, CHAR, DBL, STR} tok; \/\/ discriminant$/;"	e	enum:Token::__anon32
TOKEN_H	c++_primer\source_code\GCC_4_7_0\19\Token.h	31;"	d
Token	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^	Token(): tok(INT), ival{0} { }$/;"	f	class:Token
Token	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^	Token(const Token &t): tok(t.tok) { copyUnion(t); }$/;"	f	class:Token
Token	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^class Token {$/;"	c
copyUnion	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^void Token::copyUnion(const Token &t)$/;"	f	class:Token
cval	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^        char   cval;$/;"	m	union:Token::__anon33
dval	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^        double dval;$/;"	m	union:Token::__anon33
ival	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^        int    ival;$/;"	m	union:Token::__anon33
operator <<	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^std::ostream &operator<<(std::ostream &os, const Token &t)$/;"	f
operator =	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^Token &Token::operator=(char c)$/;"	f	class:Token
operator =	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^Token &Token::operator=(const Token &t)$/;"	f	class:Token
operator =	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^Token &Token::operator=(const std::string &s)$/;"	f	class:Token
operator =	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^Token &Token::operator=(double d)$/;"	f	class:Token
operator =	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^Token &Token::operator=(int i)$/;"	f	class:Token
sval	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^		std::string sval;$/;"	m	union:Token::__anon33
tok	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^    enum {INT, CHAR, DBL, STR} tok; \/\/ discriminant$/;"	m	class:Token	typeref:enum:Token::__anon32
~Token	c++_primer\source_code\GCC_4_7_0\19\Token.h	/^	~Token() { if (tok == STR) sval.~string(); }$/;"	f	class:Token
Bit	c++_primer\source_code\GCC_4_7_0\19\bitfields.cc	/^typedef unsigned int Bit;$/;"	t	file:
EXECUTE	c++_primer\source_code\GCC_4_7_0\19\bitfields.cc	/^	enum modes { READ = 01, WRITE = 02, EXECUTE = 03 };$/;"	e	enum:File::modes	file:
File	c++_primer\source_code\GCC_4_7_0\19\bitfields.cc	/^class File {$/;"	c	file:
READ	c++_primer\source_code\GCC_4_7_0\19\bitfields.cc	/^	enum modes { READ = 01, WRITE = 02, EXECUTE = 03 };$/;"	e	enum:File::modes	file:
WRITE	c++_primer\source_code\GCC_4_7_0\19\bitfields.cc	/^	enum modes { READ = 01, WRITE = 02, EXECUTE = 03 };$/;"	e	enum:File::modes	file:
close	c++_primer\source_code\GCC_4_7_0\19\bitfields.cc	/^void File::close()$/;"	f	class:File
isRead	c++_primer\source_code\GCC_4_7_0\19\bitfields.cc	/^inline bool File::isRead() const { return mode & READ; }$/;"	f	class:File
main	c++_primer\source_code\GCC_4_7_0\19\bitfields.cc	/^int main()$/;"	f
modes	c++_primer\source_code\GCC_4_7_0\19\bitfields.cc	/^	enum modes { READ = 01, WRITE = 02, EXECUTE = 03 };$/;"	g	class:File	file:
open	c++_primer\source_code\GCC_4_7_0\19\bitfields.cc	/^File &File::open(File::modes m)$/;"	f	class:File
setWrite	c++_primer\source_code\GCC_4_7_0\19\bitfields.cc	/^inline void File::setWrite() { mode |= WRITE; }$/;"	f	class:File
write	c++_primer\source_code\GCC_4_7_0\19\bitfields.cc	/^void File::write()$/;"	f	class:File
Lshift	c++_primer\source_code\GCC_4_7_0\19\calc.cc	/^	unsigned Lshift(unsigned op1, unsigned op2) $/;"	f	struct:ShiftOps
Rshift	c++_primer\source_code\GCC_4_7_0\19\calc.cc	/^	unsigned Rshift(unsigned op1, unsigned op2) $/;"	f	struct:ShiftOps
ShiftOps	c++_primer\source_code\GCC_4_7_0\19\calc.cc	/^	ShiftOps(std::ostream &o) : os(o) { }$/;"	f	struct:ShiftOps
ShiftOps	c++_primer\source_code\GCC_4_7_0\19\calc.cc	/^struct ShiftOps {$/;"	s	file:
add	c++_primer\source_code\GCC_4_7_0\19\calc.cc	/^int add(int i, int j) { return i + j; }$/;"	f
divide	c++_primer\source_code\GCC_4_7_0\19\calc.cc	/^struct divide {$/;"	s	file:
main	c++_primer\source_code\GCC_4_7_0\19\calc.cc	/^int main()$/;"	f
mod	c++_primer\source_code\GCC_4_7_0\19\calc.cc	/^auto mod = [](int i, int j) { return i % j; };$/;"	v
operator ()	c++_primer\source_code\GCC_4_7_0\19\calc.cc	/^    int operator()(int denominator, int divisor) {$/;"	f	struct:divide
os	c++_primer\source_code\GCC_4_7_0\19\calc.cc	/^	std::ostream &os;$/;"	m	struct:ShiftOps	file:
A	c++_primer\source_code\GCC_4_7_0\19\dyn_cast.cc	/^struct A { virtual ~A() { } };$/;"	s	file:
B	c++_primer\source_code\GCC_4_7_0\19\dyn_cast.cc	/^struct B : virtual public A { \/* . . . *\/ };$/;"	s	file:
Base	c++_primer\source_code\GCC_4_7_0\19\dyn_cast.cc	/^struct Base {$/;"	s	file:
C	c++_primer\source_code\GCC_4_7_0\19\dyn_cast.cc	/^struct C : public B { \/* . . . *\/ };$/;"	s	file:
D	c++_primer\source_code\GCC_4_7_0\19\dyn_cast.cc	/^struct D : public B, virtual public A { \/* . . . *\/ };$/;"	s	file:
Derived	c++_primer\source_code\GCC_4_7_0\19\dyn_cast.cc	/^struct Derived: public Base { };$/;"	s	file:
cast_to_ref	c++_primer\source_code\GCC_4_7_0\19\dyn_cast.cc	/^void cast_to_ref(const Base &b)$/;"	f
exercises	c++_primer\source_code\GCC_4_7_0\19\dyn_cast.cc	/^void exercises() {$/;"	f
main	c++_primer\source_code\GCC_4_7_0\19\dyn_cast.cc	/^int main()$/;"	f
~A	c++_primer\source_code\GCC_4_7_0\19\dyn_cast.cc	/^struct A { virtual ~A() { } };$/;"	f	struct:A
~Base	c++_primer\source_code\GCC_4_7_0\19\dyn_cast.cc	/^   virtual ~Base() {};$/;"	f	struct:Base
INLINE	c++_primer\source_code\GCC_4_7_0\19\enum-match.cc	/^enum Tokens {INLINE = 128, VIRTUAL = 129};$/;"	e	enum:Tokens	file:
Tokens	c++_primer\source_code\GCC_4_7_0\19\enum-match.cc	/^enum Tokens {INLINE = 128, VIRTUAL = 129};$/;"	g	file:
VIRTUAL	c++_primer\source_code\GCC_4_7_0\19\enum-match.cc	/^enum Tokens {INLINE = 128, VIRTUAL = 129};$/;"	e	enum:Tokens	file:
ff	c++_primer\source_code\GCC_4_7_0\19\enum-match.cc	/^void ff(Tokens) $/;"	f
ff	c++_primer\source_code\GCC_4_7_0\19\enum-match.cc	/^void ff(int) $/;"	f
main	c++_primer\source_code\GCC_4_7_0\19\enum-match.cc	/^int main() {$/;"	f
newf	c++_primer\source_code\GCC_4_7_0\19\enum-match.cc	/^void newf(int) $/;"	f
newf	c++_primer\source_code\GCC_4_7_0\19\enum-match.cc	/^void newf(unsigned char) $/;"	f
charTyp	c++_primer\source_code\GCC_4_7_0\19\enum.cc	/^	charTyp = 8, shortTyp = 16, intTyp = 16, $/;"	m	class:intTypes	file:
charbits	c++_primer\source_code\GCC_4_7_0\19\enum.cc	/^constexpr intTypes charbits = intTypes::charTyp;$/;"	m	class:intTypes	file:
input	c++_primer\source_code\GCC_4_7_0\19\enum.cc	/^enum class open_modes {input, output, append};$/;"	m	class:open_modes	file:
intTyp	c++_primer\source_code\GCC_4_7_0\19\enum.cc	/^	charTyp = 8, shortTyp = 16, intTyp = 16, $/;"	m	class:intTypes	file:
intTypes	c++_primer\source_code\GCC_4_7_0\19\enum.cc	/^enum class intTypes {$/;"	c	file:
longTyp	c++_primer\source_code\GCC_4_7_0\19\enum.cc	/^	longTyp = 32, long_longTyp = 64$/;"	m	class:intTypes	file:
long_longTyp	c++_primer\source_code\GCC_4_7_0\19\enum.cc	/^	longTyp = 32, long_longTyp = 64$/;"	m	class:intTypes	file:
main	c++_primer\source_code\GCC_4_7_0\19\enum.cc	/^int main() $/;"	f	class:intTypes	file:
om	c++_primer\source_code\GCC_4_7_0\19\enum.cc	/^open_modes om = open_modes::input; $/;"	v
open_modes	c++_primer\source_code\GCC_4_7_0\19\enum.cc	/^enum class open_modes {input, output, append};$/;"	c	file:
output	c++_primer\source_code\GCC_4_7_0\19\enum.cc	/^enum class open_modes {input, output, append};$/;"	m	class:open_modes	file:
shortTyp	c++_primer\source_code\GCC_4_7_0\19\enum.cc	/^	charTyp = 8, shortTyp = 16, intTyp = 16, $/;"	m	class:intTypes	file:
main	c++_primer\source_code\GCC_4_7_0\19\memFN-bind.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\19\tok2.cc	/^int main()$/;"	f
Base	c++_primer\source_code\GCC_4_7_0\19\typeid.cc	/^struct Base {$/;"	s	file:
Derived	c++_primer\source_code\GCC_4_7_0\19\typeid.cc	/^struct Derived : Base { };$/;"	s	file:
main	c++_primer\source_code\GCC_4_7_0\19\typeid.cc	/^int main()$/;"	f
~Base	c++_primer\source_code\GCC_4_7_0\19\typeid.cc	/^	virtual ~Base() { }$/;"	f	struct:Base
X	c++_primer\source_code\GCC_4_7_0\19\useScreen.cc	/^struct X {$/;"	s	file:
foo	c++_primer\source_code\GCC_4_7_0\19\useScreen.cc	/^	int foo(int i) { cout << "foo(" << i << ")" << endl; return i; }$/;"	f	struct:X
main	c++_primer\source_code\GCC_4_7_0\19\useScreen.cc	/^int main ()$/;"	f
xfcn	c++_primer\source_code\GCC_4_7_0\19\useScreen.cc	/^void xfcn()$/;"	f
SALESITEM_H	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	39;"	d
Sales_item	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	/^    Sales_item(const std::string &book): bookNo(book) { }$/;"	f	class:Sales_item
Sales_item	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	/^    Sales_item(std::istream &is) { is >> *this; }$/;"	f	class:Sales_item
Sales_item	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	/^class Sales_item {$/;"	c
avg_price	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	/^double Sales_item::avg_price() const$/;"	f	class:Sales_item
bookNo	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	/^    std::string bookNo;      \/\/ implicitly initialized to the empty string$/;"	m	class:Sales_item
compareIsbn	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	/^bool compareIsbn(const Sales_item &lhs, const Sales_item &rhs) $/;"	f
isbn	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	/^    std::string isbn() const { return bookNo; }$/;"	f	class:Sales_item
operator !=	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	/^operator!=(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator +	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	/^operator+(const Sales_item& lhs, const Sales_item& rhs) $/;"	f
operator +=	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	/^Sales_item& Sales_item::operator+=(const Sales_item& rhs) $/;"	f	class:Sales_item
operator <<	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	/^operator<<(std::ostream& out, const Sales_item& s)$/;"	f
operator ==	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	/^operator==(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator >>	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	/^operator>>(std::istream& in, Sales_item& s)$/;"	f
revenue	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	/^    double revenue = 0.0;$/;"	m	class:Sales_item
units_sold	c++_primer\source_code\GCC_4_7_0\1\Sales_item.h	/^    unsigned units_sold = 0; \/\/ explicitly initialized$/;"	m	class:Sales_item
main	c++_primer\source_code\GCC_4_7_0\1\add.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\1\add_item.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\1\add_item2.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\1\avg_price.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\1\for_ex.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\1\forcount.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\1\item_io.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\1\main_only.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\1\mysum.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\1\occurs.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\1\whilecount.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\2\Sales_data.cc	/^int main()$/;"	f
SALES_DATA_H	c++_primer\source_code\GCC_4_7_0\2\Sales_data.h	31;"	d
Sales_data	c++_primer\source_code\GCC_4_7_0\2\Sales_data.h	/^struct Sales_data {$/;"	s
bookNo	c++_primer\source_code\GCC_4_7_0\2\Sales_data.h	/^	std::string bookNo;$/;"	m	struct:Sales_data
revenue	c++_primer\source_code\GCC_4_7_0\2\Sales_data.h	/^	double revenue = 0.0;$/;"	m	struct:Sales_data
units_sold	c++_primer\source_code\GCC_4_7_0\2\Sales_data.h	/^	unsigned units_sold = 0;$/;"	m	struct:Sales_data
main	c++_primer\source_code\GCC_4_7_0\2\compounddecls.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\2\convs.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\2\dbl_ptr.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\2\decl-ex.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\2\escape.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_4_7_0\2\inits.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_4_7_0\2\literals.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\2\ref-ex.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\2\scope_levels.cc	/^int main()$/;"	f
reused	c++_primer\source_code\GCC_4_7_0\2\scope_levels.cc	/^int reused = 42;  \/\/ reused has global scope$/;"	v
main	c++_primer\source_code\GCC_4_7_0\2\unsigned.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\add_using.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\arrayScores.cc	/^int main ()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\cctype.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\char_repl.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\cstring_hdr.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\getline.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\hexify.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\multidim.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\ptr_traversal2.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\square.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\strcompare.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\string_add.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\string_io.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\string_io2.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\string_size.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\string_size2.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\string_size3.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\vecScores.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\vecStrings2.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\vecSubs.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\vec_decls.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\3\word_echo.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\4\arith-ex.cc	/^int main()$/;"	f
ia	c++_primer\source_code\GCC_4_7_0\4\arraysizeof.cc	/^int ia[] = {0,1,2,3,4,5,6,7,8,9};$/;"	v
main	c++_primer\source_code\GCC_4_7_0\4\arraysizeof.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\4\cond.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\4\incr.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\4\int-div.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\4\oofe.cc	/^int main()$/;"	f
tolower	c++_primer\source_code\GCC_4_7_0\4\oofe.cc	/^string &tolower(string &s)$/;"	f
toupper	c++_primer\source_code\GCC_4_7_0\4\oofe.cc	/^string &toupper(string &s)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\4\overflow.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\4\prec.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\4\shift-prec.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\4\sizeof_pgm.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\4\unaryOps.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\4\vec_init.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\4\warn_dbltoint.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\5\add_item2.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\5\doWhile.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\5\guess.cc	/^int main()$/;"	f
badVers	c++_primer\source_code\GCC_4_7_0\5\ifgrades.cc	/^string badVers(string lettergrade, unsigned grade)$/;"	f
goodVers	c++_primer\source_code\GCC_4_7_0\5\ifgrades.cc	/^string goodVers(string lettergrade, unsigned grade)$/;"	f
grades	c++_primer\source_code\GCC_4_7_0\5\ifgrades.cc	/^vector<unsigned> grades;$/;"	v
main	c++_primer\source_code\GCC_4_7_0\5\ifgrades.cc	/^int main()$/;"	f
rightVers	c++_primer\source_code\GCC_4_7_0\5\ifgrades.cc	/^string rightVers(string lettergrade, unsigned grade)$/;"	f
scores	c++_primer\source_code\GCC_4_7_0\5\ifgrades.cc	/^const vector<string> scores = {"F", "D", "C", "B", "A", "A++"};$/;"	v
main	c++_primer\source_code\GCC_4_7_0\5\othercnt.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\5\rangefor.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\5\vowels.cc	/^int main()$/;"	f
fact	c++_primer\source_code\GCC_4_7_0\6\LocalMath.cc	/^int fact(int val)$/;"	f
factorial	c++_primer\source_code\GCC_4_7_0\6\LocalMath.cc	/^int factorial(int val)$/;"	f
gcd	c++_primer\source_code\GCC_4_7_0\6\LocalMath.cc	/^int gcd(int v1, int v2)$/;"	f
LOCALMATH_H	c++_primer\source_code\GCC_4_7_0\6\LocalMath.h	32;"	d
arr	c++_primer\source_code\GCC_4_7_0\6\arrRet.cc	/^int arr[10];          \/\/ arr is an array of ten ints$/;"	v
arrPtr	c++_primer\source_code\GCC_4_7_0\6\arrRet.cc	/^decltype(odd) *arrPtr(int i)$/;"	f
arrRef	c++_primer\source_code\GCC_4_7_0\6\arrRet.cc	/^int (&arrRef(int i))[5]$/;"	f
elemPtr	c++_primer\source_code\GCC_4_7_0\6\arrRet.cc	/^int *elemPtr(int i)$/;"	f
even	c++_primer\source_code\GCC_4_7_0\6\arrRet.cc	/^int even[] = {0,2,4,6,8};$/;"	v
main	c++_primer\source_code\GCC_4_7_0\6\arrRet.cc	/^int main()$/;"	f
odd	c++_primer\source_code\GCC_4_7_0\6\arrRet.cc	/^int odd[] = {1,3,5,7,9};$/;"	v
p1	c++_primer\source_code\GCC_4_7_0\6\arrRet.cc	/^int *p1[10];          \/\/ p1 is an array of ten pointers$/;"	v
p2	c++_primer\source_code\GCC_4_7_0\6\arrRet.cc	/^int (*p2)[10] = &arr; \/\/ p2 points to an array of ten ints$/;"	v
count_calls	c++_primer\source_code\GCC_4_7_0\6\count-calls.cc	/^size_t count_calls()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\6\count-calls.cc	/^int main() $/;"	f
ErrCode	c++_primer\source_code\GCC_4_7_0\6\errMsg_initList.cc	/^	ErrCode(int i) : num(i) { }  \/\/ initializes objects of type ErrCode$/;"	f	struct:ErrCode
ErrCode	c++_primer\source_code\GCC_4_7_0\6\errMsg_initList.cc	/^struct ErrCode { $/;"	s	file:
error_msg	c++_primer\source_code\GCC_4_7_0\6\errMsg_initList.cc	/^void error_msg(ErrCode e, initializer_list<string> il)$/;"	f
error_msg	c++_primer\source_code\GCC_4_7_0\6\errMsg_initList.cc	/^void error_msg(initializer_list<string> il)$/;"	f
functionX	c++_primer\source_code\GCC_4_7_0\6\errMsg_initList.cc	/^vector<string> functionX()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\6\errMsg_initList.cc	/^int main()$/;"	f
msg	c++_primer\source_code\GCC_4_7_0\6\errMsg_initList.cc	/^	string msg()                 \/\/ member function of ErrCode$/;"	f	struct:ErrCode
num	c++_primer\source_code\GCC_4_7_0\6\errMsg_initList.cc	/^	int num;  \/\/ data member, note uninitialized$/;"	m	struct:ErrCode	file:
main	c++_primer\source_code\GCC_4_7_0\6\fact.cc	/^int main()$/;"	f
getFcn	c++_primer\source_code\GCC_4_7_0\6\fcnptrRet.cc	/^getFcn(const string &fetch)$/;"	f
largerLength	c++_primer\source_code\GCC_4_7_0\6\fcnptrRet.cc	/^string::size_type largerLength(const string &s1, const string &s2)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\6\fcnptrRet.cc	/^int main()$/;"	f
sumLength	c++_primer\source_code\GCC_4_7_0\6\fcnptrRet.cc	/^string::size_type sumLength(const string &s1, const string &s2)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\6\good_printmain.cc	/^int main() $/;"	f
print	c++_primer\source_code\GCC_4_7_0\6\good_printmain.cc	/^void print(const int ia[], size_t size) $/;"	f
main	c++_primer\source_code\GCC_4_7_0\6\inline_shorter.cc	/^int main()$/;"	f
shorterString	c++_primer\source_code\GCC_4_7_0\6\inline_shorter.cc	/^shorterString(const string &s1, const string &s2)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\6\mainmath.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\6\mainret.cc	/^int main()$/;"	f
MAKE_PLURAL_H	c++_primer\source_code\GCC_4_7_0\6\make_plural.h	40;"	d
make_plural	c++_primer\source_code\GCC_4_7_0\6\make_plural.h	/^string make_plural(size_t ctr, const string &word, $/;"	f
main	c++_primer\source_code\GCC_4_7_0\6\mk_plural.cc	/^int main()$/;"	f
PRINTFCNS_H	c++_primer\source_code\GCC_4_7_0\6\printFcns.h	31;"	d
foo	c++_primer\source_code\GCC_4_7_0\6\printFcns.h	/^inline foo() {$/;"	f
get_val	c++_primer\source_code\GCC_4_7_0\6\ref-fcn.cc	/^char &get_val(string &str, string::size_type ix) $/;"	f
main	c++_primer\source_code\GCC_4_7_0\6\ref-fcn.cc	/^int main() $/;"	f
find_char	c++_primer\source_code\GCC_4_7_0\6\refparms.cc	/^string::size_type find_char(const string &s, char c, $/;"	f
find_val	c++_primer\source_code\GCC_4_7_0\6\refparms.cc	/^vector<int>::const_iterator find_val($/;"	f
main	c++_primer\source_code\GCC_4_7_0\6\refparms.cc	/^int main() $/;"	f
get	c++_primer\source_code\GCC_4_7_0\6\refret-ex.cc	/^int &get(int *arry, int index) { return arry[index]; }$/;"	f
main	c++_primer\source_code\GCC_4_7_0\6\refret-ex.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_4_7_0\6\reset.cc	/^int main() $/;"	f
reset	c++_primer\source_code\GCC_4_7_0\6\reset.cc	/^void reset(int &i)  $/;"	f
reset	c++_primer\source_code\GCC_4_7_0\6\reset.cc	/^void reset(int *ip)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\6\stl-arr-fcns.cc	/^int main() $/;"	f
print	c++_primer\source_code\GCC_4_7_0\6\stl-arr-fcns.cc	/^void print(const char *cp)$/;"	f
print	c++_primer\source_code\GCC_4_7_0\6\stl-arr-fcns.cc	/^void print(const int *beg, const int *end) $/;"	f
main	c++_primer\source_code\GCC_4_7_0\6\use_mk_plural.cc	/^int main()$/;"	f
make_plural	c++_primer\source_code\GCC_4_7_0\6\use_mk_plural.cc	/^string make_plural(size_t ctr, const string &word, $/;"	f
main	c++_primer\source_code\GCC_4_7_0\6\usefcnptr.cc	/^int main() $/;"	f
min_element	c++_primer\source_code\GCC_4_7_0\6\usefcnptr.cc	/^int min_element(vector<int>::iterator beg, $/;"	f
pf	c++_primer\source_code\GCC_4_7_0\6\usefcnptr.cc	/^int (*pf)(vector<int>::iterator, vector<int>::iterator) $/;"	v
main	c++_primer\source_code\GCC_4_7_0\6\wdebug.cc	/^int main()$/;"	f
print	c++_primer\source_code\GCC_4_7_0\6\wdebug.cc	/^void print(const int ia[], size_t size)$/;"	f
interestRate	c++_primer\source_code\GCC_4_7_0\7\Account.cc	/^double Account::interestRate = initRate();$/;"	m	class:Account	file:
rate	c++_primer\source_code\GCC_4_7_0\7\Account.cc	/^void Account::rate(double newRate) $/;"	f	class:Account
ACCOUNT_H	c++_primer\source_code\GCC_4_7_0\7\Account.h	30;"	d
Account	c++_primer\source_code\GCC_4_7_0\7\Account.h	/^	Account(const std::string &s, double amt):$/;"	f	class:Account
Account	c++_primer\source_code\GCC_4_7_0\7\Account.h	/^class Account {$/;"	c
accountType	c++_primer\source_code\GCC_4_7_0\7\Account.h	/^    static const std::string accountType;$/;"	m	class:Account
amount	c++_primer\source_code\GCC_4_7_0\7\Account.h	/^    double amount = 0.0;$/;"	m	class:Account
balance	c++_primer\source_code\GCC_4_7_0\7\Account.h	/^    double balance() { return amount; }$/;"	f	class:Account
calculate	c++_primer\source_code\GCC_4_7_0\7\Account.h	/^    void calculate() { amount += amount * interestRate; }$/;"	f	class:Account
daily_tbl	c++_primer\source_code\GCC_4_7_0\7\Account.h	/^    double daily_tbl[period];$/;"	m	class:Account
initRate	c++_primer\source_code\GCC_4_7_0\7\Account.h	/^    static double initRate() { return .0225; }$/;"	f	class:Account
interestRate	c++_primer\source_code\GCC_4_7_0\7\Account.h	/^    static double interestRate; $/;"	m	class:Account
owner	c++_primer\source_code\GCC_4_7_0\7\Account.h	/^    std::string owner; $/;"	m	class:Account
period	c++_primer\source_code\GCC_4_7_0\7\Account.h	/^    static constexpr int period = 30;\/\/ period is a constant expression$/;"	m	class:Account
rate	c++_primer\source_code\GCC_4_7_0\7\Account.h	/^    static double rate() { return interestRate; }$/;"	f	class:Account
enable	c++_primer\source_code\GCC_4_7_0\7\Debug.cc	/^constexpr Debug HW_Subsystem::enable;$/;"	m	class:HW_Subsystem	file:
enable	c++_primer\source_code\GCC_4_7_0\7\Debug.cc	/^constexpr Debug IO_Subsystem::enable;$/;"	m	class:IO_Subsystem	file:
DEBUG_H	c++_primer\source_code\GCC_4_7_0\7\Debug.h	31;"	d
Debug	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	constexpr Debug(bool b = true): hw(b), io(b), other(b) { }$/;"	f	class:Debug
Debug	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	constexpr Debug(bool h, bool i, bool o): $/;"	f	class:Debug
Debug	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^class Debug {$/;"	c
HW_Subsystem	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	HW_Subsystem(): debug(false) { }          \/\/ by default no debugging$/;"	f	class:HW_Subsystem
HW_Subsystem	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^class HW_Subsystem {$/;"	c
IO_Subsystem	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	IO_Subsystem(): debug(false) { }          \/\/ by default no debugging$/;"	f	class:IO_Subsystem
IO_Subsystem	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^class IO_Subsystem {$/;"	c
any	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	constexpr bool any() { return hw || io || other; }$/;"	f	class:Debug
app	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	constexpr bool app() { return other; }$/;"	f	class:Debug
debug	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	Debug debug;$/;"	m	class:HW_Subsystem
debug	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	Debug debug;$/;"	m	class:IO_Subsystem
default_debug	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	bool default_debug()   { return enable.any() && debug.any(); }$/;"	f	class:IO_Subsystem
default_debug	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	bool default_debug() { return enable.any() && debug.any(); }$/;"	f	class:HW_Subsystem
field_debug	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	bool field_debug()     { return debug.any(); }$/;"	f	class:IO_Subsystem
field_debug	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	bool field_debug()   { return debug.any(); }$/;"	f	class:HW_Subsystem
hardware	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	constexpr bool hardware() { return hw || io; }$/;"	f	class:Debug
hw	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	bool hw;    \/\/ hardware errors other than IO errors$/;"	m	class:Debug
io	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	bool io;    \/\/ IO errors$/;"	m	class:Debug
other	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	bool other; \/\/ other errors$/;"	m	class:Debug
set_debug	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	void set_debug(bool b) { debug.set_hw(b); }  \/\/ turn on hardware debugging$/;"	f	class:HW_Subsystem
set_debug	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	void set_debug(bool b) { debug.set_io(b); }  \/\/ turn on IO debugging$/;"	f	class:IO_Subsystem
set_hw	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	void set_hw(bool b) { hw = b; }$/;"	f	class:Debug
set_io	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	void set_io(bool b) { io = b; }$/;"	f	class:Debug
set_other	c++_primer\source_code\GCC_4_7_0\7\Debug.h	/^	void set_other(bool b) { hw = b; }$/;"	f	class:Debug
Sales_data	c++_primer\source_code\GCC_4_7_0\7\Sales_data.cc	/^Sales_data::Sales_data(std::istream &is) $/;"	f	class:Sales_data
add	c++_primer\source_code\GCC_4_7_0\7\Sales_data.cc	/^add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
avg_price	c++_primer\source_code\GCC_4_7_0\7\Sales_data.cc	/^Sales_data::avg_price() const {$/;"	f	class:Sales_data
combine	c++_primer\source_code\GCC_4_7_0\7\Sales_data.cc	/^Sales_data::combine(const Sales_data &rhs)$/;"	f	class:Sales_data
print	c++_primer\source_code\GCC_4_7_0\7\Sales_data.cc	/^print(ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\source_code\GCC_4_7_0\7\Sales_data.cc	/^read(istream &is, Sales_data &item)$/;"	f
SALES_DATA_H	c++_primer\source_code\GCC_4_7_0\7\Sales_data.h	31;"	d
Sales_data	c++_primer\source_code\GCC_4_7_0\7\Sales_data.h	/^	Sales_data(const std::string &s): bookNo(s) { }$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_4_7_0\7\Sales_data.h	/^	Sales_data(const std::string &s, unsigned n, double p):$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_4_7_0\7\Sales_data.h	/^class Sales_data {$/;"	c
bookNo	c++_primer\source_code\GCC_4_7_0\7\Sales_data.h	/^	std::string bookNo;$/;"	m	class:Sales_data
compareIsbn	c++_primer\source_code\GCC_4_7_0\7\Sales_data.h	/^bool compareIsbn(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
isbn	c++_primer\source_code\GCC_4_7_0\7\Sales_data.h	/^	std::string isbn() const { return bookNo; }$/;"	f	class:Sales_data
revenue	c++_primer\source_code\GCC_4_7_0\7\Sales_data.h	/^	double revenue = 0.0;$/;"	m	class:Sales_data
units_sold	c++_primer\source_code\GCC_4_7_0\7\Sales_data.h	/^	unsigned units_sold = 0;$/;"	m	class:Sales_data
Screen	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^    Screen(pos ht = 0, pos wd = 0): $/;"	f	class:Screen
Screen	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^    Screen(pos ht, pos wd, char c): height(ht), width(wd), $/;"	f	class:Screen
Screen	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^class Screen {$/;"	c
bkground	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^	static const char bkground = ' ';$/;"	m	class:Screen
clear	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^Screen &Screen::clear(char c) $/;"	f	class:Screen
contents	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^    std::string contents;$/;"	m	class:Screen
cursor	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^    pos cursor = 0;$/;"	m	class:Screen
display	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^    Screen &display(std::ostream &os) $/;"	f	class:Screen
display	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^    const Screen &display(std::ostream &os) const$/;"	f	class:Screen
do_display	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^     void do_display(std::ostream &os) const {os << contents;}$/;"	f	class:Screen
get	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^    char get() const              \/\/ get the character at the cursor$/;"	f	class:Screen
get	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^char Screen::get(pos r, pos c) const \/\/ declared as inline in the class$/;"	f	class:Screen
height	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^    pos height = 0, width = 0;$/;"	m	class:Screen
move	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^Screen &Screen::move(pos r, pos c)$/;"	f	class:Screen
pos	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^    typedef std::string::size_type pos;$/;"	t	class:Screen
set	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^inline Screen &Screen::set(char c) $/;"	f	class:Screen
set	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^inline Screen &Screen::set(pos r, pos col, char ch)$/;"	f	class:Screen
width	c++_primer\source_code\GCC_4_7_0\7\Screen.h	/^    pos height = 0, width = 0;$/;"	m	class:Screen
WINDOW_MGR	c++_primer\source_code\GCC_4_7_0\7\WindowMgr.h	31;"	d
Window_mgr	c++_primer\source_code\GCC_4_7_0\7\WindowMgr.h	/^class Window_mgr {$/;"	c
addScreen	c++_primer\source_code\GCC_4_7_0\7\WindowMgr.h	/^Window_mgr::addScreen(const Screen &s)$/;"	f	class:Window_mgr
clear	c++_primer\source_code\GCC_4_7_0\7\WindowMgr.h	/^void Window_mgr::clear(ScreenIndex i)$/;"	f	class:Window_mgr
resize	c++_primer\source_code\GCC_4_7_0\7\WindowMgr.h	/^Window_mgr::resize(Screen::pos r, Screen::pos c, ScreenIndex i)$/;"	f	class:Window_mgr
main	c++_primer\source_code\GCC_4_7_0\7\add_item.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\7\avg_price.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\7\useAccount.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\7\useDebug.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\7\useScreen.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\8\add_item.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\8\add_itemV2.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\8\buf.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\8\clearIO.cc	/^int main()$/;"	f
off	c++_primer\source_code\GCC_4_7_0\8\clearIO.cc	/^void off()$/;"	f
read	c++_primer\source_code\GCC_4_7_0\8\clearIO.cc	/^void read()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\8\fileIO.cc	/^int main(int argc, char* argv[])$/;"	f
process	c++_primer\source_code\GCC_4_7_0\8\fileIO.cc	/^void process(ifstream &is)$/;"	f
PersonInfo	c++_primer\source_code\GCC_4_7_0\8\sstream.cc	/^struct PersonInfo { $/;"	s	file:
format	c++_primer\source_code\GCC_4_7_0\8\sstream.cc	/^string format(const string &s) { return s; }$/;"	f
getData	c++_primer\source_code\GCC_4_7_0\8\sstream.cc	/^getData(istream &is)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\8\sstream.cc	/^int main()$/;"	f
name	c++_primer\source_code\GCC_4_7_0\8\sstream.cc	/^	string name;$/;"	m	struct:PersonInfo	file:
phones	c++_primer\source_code\GCC_4_7_0\8\sstream.cc	/^	vector<string> phones;$/;"	m	struct:PersonInfo	file:
process	c++_primer\source_code\GCC_4_7_0\8\sstream.cc	/^ostream& process(ostream &os, vector<PersonInfo> people)$/;"	f
valid	c++_primer\source_code\GCC_4_7_0\8\sstream.cc	/^bool valid(const string &s)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\9\capacity.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\9\erase1.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\9\erase2.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\9\find-str.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\9\find_ops.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\9\refreshIter.cc	/^int main()$/;"	f
printVec	c++_primer\source_code\GCC_4_7_0\9\refreshIter.cc	/^void printVec(const vector<int> &vi)$/;"	f
main	c++_primer\source_code\GCC_4_7_0\9\stack.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\9\str_assignOps.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_4_7_0\9\substr.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_4_7_0\9\useConvs.cc	/^int main()$/;"	f
VERSION_TEST_H	c++_primer\source_code\GCC_4_7_0\Version_test.h	31;"	d
defaultfloat	c++_primer\source_code\GCC_4_7_0\Version_test.h	/^std::ostream &defaultfloat(std::ostream &os) $/;"	f
stod	c++_primer\source_code\GCC_4_7_0\Version_test.h	/^double stod(const std::string &s, std::size_t * = 0)$/;"	f
to_string	c++_primer\source_code\GCC_4_7_0\Version_test.h	/^std::string to_string(int i)$/;"	f
absInt	c++_primer\source_code\GCC_pre_C11\10\absInt.cc	/^unsigned absInt(int i) { return i < 0 ? -i : i; }$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\absInt.cc	/^int main() {$/;"	f
print	c++_primer\source_code\GCC_pre_C11\10\absInt.cc	/^void print(int i) { cout << i << " "; }$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\accum.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\accum4.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\avg_price.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\bind2.cc	/^int main()$/;"	f
print	c++_primer\source_code\GCC_pre_C11\10\bind2.cc	/^ostream &print(ostream &os, const string &s, char c)$/;"	f
LT	c++_primer\source_code\GCC_pre_C11\10\elimDups.cc	/^bool LT(const string &s1, const string &s2)$/;"	f
isShorter	c++_primer\source_code\GCC_pre_C11\10\elimDups.cc	/^bool isShorter(const string &s1, const string &s2)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\elimDups.cc	/^int main()$/;"	f
print	c++_primer\source_code\GCC_pre_C11\10\elimDups.cc	/^void print(const vector<string> &words)$/;"	f
printStr	c++_primer\source_code\GCC_pre_C11\10\elimDups.cc	/^void printStr(const string &s) {$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\equal.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\equiv-istream-iter.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\inserters.cc	/^int main() $/;"	f
print	c++_primer\source_code\GCC_pre_C11\10\inserters.cc	/^void print(const string &label, const list<int> &lst)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\iostream_iter.cc	/^int main()$/;"	f
fcn1	c++_primer\source_code\GCC_pre_C11\10\lambda.cc	/^void fcn1()$/;"	f
fcn2	c++_primer\source_code\GCC_pre_C11\10\lambda.cc	/^void fcn2()$/;"	f
fcn3	c++_primer\source_code\GCC_pre_C11\10\lambda.cc	/^void fcn3()$/;"	f
fcn4	c++_primer\source_code\GCC_pre_C11\10\lambda.cc	/^void fcn4()$/;"	f
fcn5	c++_primer\source_code\GCC_pre_C11\10\lambda.cc	/^void fcn5()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\lambda.cc	/^int main()$/;"	f
GT	c++_primer\source_code\GCC_pre_C11\10\newcount-size.cc	/^bool GT(const string &s, string::size_type m) $/;"	f
Shorter	c++_primer\source_code\GCC_pre_C11\10\newcount-size.cc	/^	Shorter(size_t i): sz(i) { }$/;"	f	class:Shorter
Shorter	c++_primer\source_code\GCC_pre_C11\10\newcount-size.cc	/^class Shorter {$/;"	c	file:
biggies	c++_primer\source_code\GCC_pre_C11\10\newcount-size.cc	/^biggies(vector<string> &words, vector<string>::size_type sz)$/;"	f
check_size	c++_primer\source_code\GCC_pre_C11\10\newcount-size.cc	/^bool check_size(const string &s, string::size_type sz)$/;"	f
elimDups	c++_primer\source_code\GCC_pre_C11\10\newcount-size.cc	/^void elimDups(vector<string> &words)$/;"	f
isShorter	c++_primer\source_code\GCC_pre_C11\10\newcount-size.cc	/^bool isShorter(const string &s1, const string &s2)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\newcount-size.cc	/^int main()$/;"	f
operator ()	c++_primer\source_code\GCC_pre_C11\10\newcount-size.cc	/^	bool operator()(const string &s1) $/;"	f	class:Shorter
print	c++_primer\source_code\GCC_pre_C11\10\newcount-size.cc	/^void print(const string &s)$/;"	f
sz	c++_primer\source_code\GCC_pre_C11\10\newcount-size.cc	/^	size_t sz;$/;"	m	class:Shorter	file:
main	c++_primer\source_code\GCC_pre_C11\10\ostreamIter2.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\rcomma.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\rev-iters.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\reverse-iter.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\reverse.cc	/^int main()$/;"	f
odd	c++_primer\source_code\GCC_pre_C11\10\reverse.cc	/^bool odd(int i) { return i % 2; }$/;"	f
print	c++_primer\source_code\GCC_pre_C11\10\reverse.cc	/^void print(int i)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\sortSI.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\use-istream-iter.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_pre_C11\10\use_find.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\11\erasemap.cc	/^int main() $/;"	f
SDComp	c++_primer\source_code\GCC_pre_C11\11\map1.cc	/^typedef bool(*SDComp)(const Sales_data&, const Sales_data&);$/;"	t	file:
main	c++_primer\source_code\GCC_pre_C11\11\map1.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\11\multimap.cc	/^int main()$/;"	f
Author	c++_primer\source_code\GCC_pre_C11\11\pair.cc	/^typedef pair<string, string> Author;$/;"	t	file:
austen	c++_primer\source_code\GCC_pre_C11\11\pair.cc	/^Author austen = make_pair("Jane", "Austen"); \/\/ use make_pair$/;"	v
isShorter	c++_primer\source_code\GCC_pre_C11\11\pair.cc	/^bool isShorter(const string &a, const string &b) $/;"	f
line	c++_primer\source_code\GCC_pre_C11\11\pair.cc	/^pair<string, vector<int> > line;  \/\/ holds string and vector<int>$/;"	v
main	c++_primer\source_code\GCC_pre_C11\11\pair.cc	/^int main()$/;"	f
preliminaries	c++_primer\source_code\GCC_pre_C11\11\pair.cc	/^void preliminaries(vector<string> &v)$/;"	f
process2	c++_primer\source_code\GCC_pre_C11\11\pair.cc	/^process2(vector<string> &v)$/;"	f
process3	c++_primer\source_code\GCC_pre_C11\11\pair.cc	/^process3(vector<string> &v)$/;"	f
word_count	c++_primer\source_code\GCC_pre_C11\11\pair.cc	/^pair<string, size_t> word_count; \/\/ holds a string and an size_t $/;"	v
main	c++_primer\source_code\GCC_pre_C11\11\restricted_count.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\11\setOps.cc	/^int main() $/;"	f
Foo	c++_primer\source_code\GCC_pre_C11\11\unorderedWordCount.cc	/^struct Foo { string s; };$/;"	s	file:
FooHash	c++_primer\source_code\GCC_pre_C11\11\unorderedWordCount.cc	/^size_t FooHash(const Foo& f) { return hash<string>()(f.s); }$/;"	f
SD_multiset	c++_primer\source_code\GCC_pre_C11\11\unorderedWordCount.cc	/^         bool(*)(const Sales_data&, const Sales_data&)> SD_multiset;$/;"	t	file:
eqOp	c++_primer\source_code\GCC_pre_C11\11\unorderedWordCount.cc	/^bool eqOp(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
hasher	c++_primer\source_code\GCC_pre_C11\11\unorderedWordCount.cc	/^size_t hasher(const Sales_data &sd) $/;"	f
main	c++_primer\source_code\GCC_pre_C11\11\unorderedWordCount.cc	/^int main() $/;"	f
operator ==	c++_primer\source_code\GCC_pre_C11\11\unorderedWordCount.cc	/^bool operator==(const Foo& l, const Foo&r) { return l.s == r.s; }$/;"	f
s	c++_primer\source_code\GCC_pre_C11\11\unorderedWordCount.cc	/^struct Foo { string s; };$/;"	m	struct:Foo	file:
main	c++_primer\source_code\GCC_pre_C11\11\wcEx.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\11\word_count.cc	/^int main() $/;"	f
buildMap	c++_primer\source_code\GCC_pre_C11\11\word_transform.cc	/^map<string, string> buildMap(ifstream &map_file)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\11\word_transform.cc	/^int main(int argc, char **argv)$/;"	f
transform	c++_primer\source_code\GCC_pre_C11\11\word_transform.cc	/^transform(const string &s, const map<string, string> &m)$/;"	f
word_transform	c++_primer\source_code\GCC_pre_C11\11\word_transform.cc	/^void word_transform(ifstream &map_file, ifstream &input)$/;"	f
FOO_H	c++_primer\source_code\GCC_pre_C11\12\Foo.h	31;"	d
Foo	c++_primer\source_code\GCC_pre_C11\12\Foo.h	/^	Foo(T t): val(t) { }$/;"	f	struct:Foo
Foo	c++_primer\source_code\GCC_pre_C11\12\Foo.h	/^struct Foo {  \/\/ members are public by default$/;"	s
T	c++_primer\source_code\GCC_pre_C11\12\Foo.h	/^typedef int T;$/;"	t
print	c++_primer\source_code\GCC_pre_C11\12\Foo.h	/^print(std::ostream &os, const Foo &f) $/;"	f
val	c++_primer\source_code\GCC_pre_C11\12\Foo.h	/^	T val;$/;"	m	struct:Foo
QUERYRESULT_H	c++_primer\source_code\GCC_pre_C11\12\QueryResult.h	31;"	d
QueryResult	c++_primer\source_code\GCC_pre_C11\12\QueryResult.h	/^	QueryResult(std::string s, $/;"	f	class:QueryResult
QueryResult	c++_primer\source_code\GCC_pre_C11\12\QueryResult.h	/^class QueryResult {$/;"	c
begin	c++_primer\source_code\GCC_pre_C11\12\QueryResult.h	/^	line_it begin() const { return lines->begin(); }$/;"	f	class:QueryResult
end	c++_primer\source_code\GCC_pre_C11\12\QueryResult.h	/^	line_it end() const   { return lines->end(); }$/;"	f	class:QueryResult
file	c++_primer\source_code\GCC_pre_C11\12\QueryResult.h	/^	std::tr1::shared_ptr<std::vector<std::string> > file;  \/\/input file$/;"	m	class:QueryResult
get_file	c++_primer\source_code\GCC_pre_C11\12\QueryResult.h	/^	std::tr1::shared_ptr<std::vector<std::string> > get_file() { return file; }$/;"	f	class:QueryResult
line_it	c++_primer\source_code\GCC_pre_C11\12\QueryResult.h	/^	typedef std::set<line_no>::const_iterator line_it;$/;"	t	class:QueryResult
line_no	c++_primer\source_code\GCC_pre_C11\12\QueryResult.h	/^	typedef std::vector<std::string>::size_type line_no;$/;"	t	class:QueryResult
lines	c++_primer\source_code\GCC_pre_C11\12\QueryResult.h	/^	std::tr1::shared_ptr<std::set<line_no> > lines; \/\/ lines it's on$/;"	m	class:QueryResult
size	c++_primer\source_code\GCC_pre_C11\12\QueryResult.h	/^	std::set<line_no>::size_type size() const  { return lines->size(); }$/;"	f	class:QueryResult
sought	c++_primer\source_code\GCC_pre_C11\12\QueryResult.h	/^	std::string sought;  \/\/ word this query represents$/;"	m	class:QueryResult
STRBLOB_H	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	31;"	d
StrBlob	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^    StrBlob() : data(new std::vector<std::string>()) { }$/;"	f	class:StrBlob
StrBlob	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^StrBlob::StrBlob(const std::string *beg, const std::string *end): $/;"	f	class:StrBlob
StrBlob	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^class StrBlob {$/;"	c
StrBlobPtr	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^    StrBlobPtr(): curr(0) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^    StrBlobPtr(StrBlob &a, size_t sz = 0): wptr(a.data), curr(sz) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^class StrBlobPtr {$/;"	c
begin	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^StrBlob::begin() $/;"	f	class:StrBlob
check	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^StrBlobPtr::check(std::size_t i, const std::string &msg) const$/;"	f	class:StrBlobPtr
curr	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^    std::size_t curr;      \/\/ current position within the array$/;"	m	class:StrBlobPtr
data	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^    std::tr1::shared_ptr<std::vector<std::string> > data; $/;"	m	class:StrBlob
decr	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^StrBlobPtr& StrBlobPtr::decr()$/;"	f	class:StrBlobPtr
deref	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^std::string& StrBlobPtr::deref() const$/;"	f	class:StrBlobPtr
empty	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^    bool empty() const { return data->empty(); }$/;"	f	class:StrBlob
end	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^StrBlob::end() $/;"	f	class:StrBlob
eq	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^bool eq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
incr	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^StrBlobPtr& StrBlobPtr::incr()$/;"	f	class:StrBlobPtr
neq	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^bool neq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
push_back	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^    void push_back(const std::string &t) { data->push_back(t); }$/;"	f	class:StrBlob
size	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^    size_type size() const { return data->size(); }$/;"	f	class:StrBlob
size_type	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^    typedef std::vector<std::string>::size_type size_type;$/;"	t	class:StrBlob
wptr	c++_primer\source_code\GCC_pre_C11\12\StrBlob.h	/^    std::tr1::weak_ptr<std::vector<std::string> > wptr;  $/;"	m	class:StrBlobPtr
TextQuery	c++_primer\source_code\GCC_pre_C11\12\TextQuery.cc	/^TextQuery::TextQuery(ifstream &is): file(new vector<string>)$/;"	f	class:TextQuery
cleanup_str	c++_primer\source_code\GCC_pre_C11\12\TextQuery.cc	/^string TextQuery::cleanup_str(const string &word)$/;"	f	class:TextQuery
display_map	c++_primer\source_code\GCC_pre_C11\12\TextQuery.cc	/^void TextQuery::display_map()$/;"	f	class:TextQuery
lineIter	c++_primer\source_code\GCC_pre_C11\12\TextQuery.cc	/^typedef set<TextQuery::line_no>::const_iterator lineIter;$/;"	t	file:
lineType	c++_primer\source_code\GCC_pre_C11\12\TextQuery.cc	/^typedef shared_ptr<set<TextQuery::line_no> > lineType;$/;"	t	file:
print	c++_primer\source_code\GCC_pre_C11\12\TextQuery.cc	/^ostream &print(ostream & os, const QueryResult &qr)$/;"	f
query	c++_primer\source_code\GCC_pre_C11\12\TextQuery.cc	/^TextQuery::query(const string &sought) const$/;"	f	class:TextQuery
wmIter	c++_primer\source_code\GCC_pre_C11\12\TextQuery.cc	/^typedef wmType::const_iterator wmIter;$/;"	t	file:
wmType	c++_primer\source_code\GCC_pre_C11\12\TextQuery.cc	/^typedef map<string, shared_ptr<set<TextQuery::line_no> > > wmType;$/;"	t	file:
TEXTQUERY_H	c++_primer\source_code\GCC_pre_C11\12\TextQuery.h	31;"	d
TextQuery	c++_primer\source_code\GCC_pre_C11\12\TextQuery.h	/^class TextQuery {$/;"	c
file	c++_primer\source_code\GCC_pre_C11\12\TextQuery.h	/^    std::tr1::shared_ptr<std::vector<std::string> > file; \/\/ input file$/;"	m	class:TextQuery
line_no	c++_primer\source_code\GCC_pre_C11\12\TextQuery.h	/^	typedef std::vector<std::string>::size_type line_no;$/;"	t	class:TextQuery
wm	c++_primer\source_code\GCC_pre_C11\12\TextQuery.h	/^	         std::tr1::shared_ptr<std::set<line_no> > > wm;  $/;"	m	class:TextQuery
deleter	c++_primer\source_code\GCC_pre_C11\12\UP.cc	/^void deleter(int *p) { delete[] p; }$/;"	f
main	c++_primer\source_code\GCC_pre_C11\12\UP.cc	/^int main()$/;"	f
factory	c++_primer\source_code\GCC_pre_C11\12\allocPtr.cc	/^Foo* factory(T arg)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\12\allocPtr.cc	/^int main()$/;"	f
use_factory	c++_primer\source_code\GCC_pre_C11\12\allocPtr.cc	/^Foo* use_factory(T arg)$/;"	f
factory	c++_primer\source_code\GCC_pre_C11\12\allocSP.cc	/^shared_ptr<Foo> factory(T arg)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\12\allocSP.cc	/^int main()$/;"	f
use_factory	c++_primer\source_code\GCC_pre_C11\12\allocSP.cc	/^shared_ptr<Foo> use_factory(T arg)$/;"	f
get_size	c++_primer\source_code\GCC_pre_C11\12\oknew.cc	/^size_t get_size() { return 42; }$/;"	f
main	c++_primer\source_code\GCC_pre_C11\12\oknew.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\12\querymain.cc	/^int main(int argc, char **argv)$/;"	f
runQueries	c++_primer\source_code\GCC_pre_C11\12\querymain.cc	/^void runQueries(ifstream &infile)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\12\release.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\12\unique.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_pre_C11\12\useBlob.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\12\usealloc.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\12\usealloc2.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\12\weak.cc	/^int main()$/;"	f
Folder	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^Folder::Folder(const Folder &f) : msgs(f.msgs)$/;"	f	class:Folder
Message	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^Message::Message(const Message &m): $/;"	f	class:Message
add_to_Folders	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^void Message::add_to_Folders(const Message &m)$/;"	f	class:Message
add_to_Messages	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^void Folder::add_to_Messages(const Folder &f)$/;"	f	class:Folder
debug_print	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^void Folder::debug_print()$/;"	f	class:Folder
debug_print	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^void Message::debug_print()$/;"	f	class:Message
operator =	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^Folder& Folder::operator=(const Folder &f)$/;"	f	class:Folder
operator =	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^Message& Message::operator=(const Message &rhs)$/;"	f	class:Message
remove	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^void Folder::remove(Message &m)$/;"	f	class:Folder
remove	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^void Message::remove(Folder &f)$/;"	f	class:Message
remove_from_Folders	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^void Message::remove_from_Folders()$/;"	f	class:Message
remove_from_Msgs	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^void Folder::remove_from_Msgs()$/;"	f	class:Folder
save	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^void Folder::save(Message &m)$/;"	f	class:Folder
save	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^void Message::save(Folder &f)$/;"	f	class:Message
swap	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^void swap(Message &lhs, Message &rhs)$/;"	f
~Folder	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^Folder::~Folder()$/;"	f	class:Folder
~Message	c++_primer\source_code\GCC_pre_C11\13\Folder.cc	/^Message::~Message()$/;"	f	class:Message
FOLDER_H	c++_primer\source_code\GCC_pre_C11\13\Folder.h	31;"	d
Folder	c++_primer\source_code\GCC_pre_C11\13\Folder.h	/^    Folder() { }        \/\/ defaults ok$/;"	f	class:Folder
Folder	c++_primer\source_code\GCC_pre_C11\13\Folder.h	/^class Folder {$/;"	c
Message	c++_primer\source_code\GCC_pre_C11\13\Folder.h	/^    explicit Message(const std::string &str = ""): $/;"	f	class:Message
Message	c++_primer\source_code\GCC_pre_C11\13\Folder.h	/^class Message {$/;"	c
addFldr	c++_primer\source_code\GCC_pre_C11\13\Folder.h	/^    void addFldr(Folder *f) { folders.insert(f); }$/;"	f	class:Message
addMsg	c++_primer\source_code\GCC_pre_C11\13\Folder.h	/^    void addMsg(Message *m) { msgs.insert(m); }$/;"	f	class:Folder
contents	c++_primer\source_code\GCC_pre_C11\13\Folder.h	/^    std::string contents;      \/\/ actual message text$/;"	m	class:Message
folders	c++_primer\source_code\GCC_pre_C11\13\Folder.h	/^    std::set<Folder*> folders; \/\/ Folders that have this Message$/;"	m	class:Message
msgs	c++_primer\source_code\GCC_pre_C11\13\Folder.h	/^    std::set<Message*> msgs;  \/\/ messages in this folder$/;"	m	class:Folder
remFldr	c++_primer\source_code\GCC_pre_C11\13\Folder.h	/^    void remFldr(Folder *f) { folders.erase(f); }$/;"	f	class:Message
remMsg	c++_primer\source_code\GCC_pre_C11\13\Folder.h	/^    void remMsg(Message *m) { msgs.erase(m); }$/;"	f	class:Folder
main	c++_primer\source_code\GCC_pre_C11\13\FolderMain.cc	/^int main()$/;"	f
HasPtr	c++_primer\source_code\GCC_pre_C11\13\HasPtrUseCount.cc	/^    HasPtr(const HasPtr &p): $/;"	f	class:HasPtr
HasPtr	c++_primer\source_code\GCC_pre_C11\13\HasPtrUseCount.cc	/^    HasPtr(const std::string &s = std::string()): $/;"	f	class:HasPtr
HasPtr	c++_primer\source_code\GCC_pre_C11\13\HasPtrUseCount.cc	/^class HasPtr {$/;"	c	file:
f	c++_primer\source_code\GCC_pre_C11\13\HasPtrUseCount.cc	/^HasPtr f(HasPtr hp) \/\/ HasPtr passed by value, so it is copied$/;"	f
i	c++_primer\source_code\GCC_pre_C11\13\HasPtrUseCount.cc	/^    int    i;$/;"	m	class:HasPtr	file:
main	c++_primer\source_code\GCC_pre_C11\13\HasPtrUseCount.cc	/^int main()$/;"	f
operator =	c++_primer\source_code\GCC_pre_C11\13\HasPtrUseCount.cc	/^HasPtr& HasPtr::operator=(const HasPtr &rhs) $/;"	f	class:HasPtr
ps	c++_primer\source_code\GCC_pre_C11\13\HasPtrUseCount.cc	/^    std::string *ps;$/;"	m	class:HasPtr	file:
use	c++_primer\source_code\GCC_pre_C11\13\HasPtrUseCount.cc	/^	std::size_t *use;  \/\/ member to track how many objects share *ps$/;"	m	class:HasPtr	file:
~HasPtr	c++_primer\source_code\GCC_pre_C11\13\HasPtrUseCount.cc	/^HasPtr::~HasPtr()$/;"	f	class:HasPtr
HasPtr	c++_primer\source_code\GCC_pre_C11\13\HasPtrValueLike.cc	/^    HasPtr(const HasPtr &p): $/;"	f	class:HasPtr
HasPtr	c++_primer\source_code\GCC_pre_C11\13\HasPtrValueLike.cc	/^    HasPtr(const std::string &s = std::string()): $/;"	f	class:HasPtr
HasPtr	c++_primer\source_code\GCC_pre_C11\13\HasPtrValueLike.cc	/^class HasPtr {$/;"	c	file:
f	c++_primer\source_code\GCC_pre_C11\13\HasPtrValueLike.cc	/^HasPtr f(HasPtr hp)  \/\/ HasPtr passed by value, so it is copied$/;"	f
i	c++_primer\source_code\GCC_pre_C11\13\HasPtrValueLike.cc	/^    int    i;$/;"	m	class:HasPtr	file:
main	c++_primer\source_code\GCC_pre_C11\13\HasPtrValueLike.cc	/^int main()$/;"	f
operator =	c++_primer\source_code\GCC_pre_C11\13\HasPtrValueLike.cc	/^HasPtr& HasPtr::operator=(const HasPtr &rhs) $/;"	f	class:HasPtr
ps	c++_primer\source_code\GCC_pre_C11\13\HasPtrValueLike.cc	/^    std::string *ps;$/;"	m	class:HasPtr	file:
swap	c++_primer\source_code\GCC_pre_C11\13\HasPtrValueLike.cc	/^void swap(HasPtr &lhs, HasPtr &rhs)$/;"	f
~HasPtr	c++_primer\source_code\GCC_pre_C11\13\HasPtrValueLike.cc	/^	~HasPtr() { delete ps; }$/;"	f	class:HasPtr
Folder	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^Folder::Folder(const Folder &f) : msgs(f.msgs)$/;"	f	class:Folder
Message	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^Message::Message(const Message &m): $/;"	f	class:Message
add_to_Folders	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^void Message::add_to_Folders(const Message &m)$/;"	f	class:Message
add_to_Messages	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^void Folder::add_to_Messages(const Folder &f)$/;"	f	class:Folder
debug_print	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^void Folder::debug_print()$/;"	f	class:Folder
debug_print	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^void Message::debug_print()$/;"	f	class:Message
operator =	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^Folder& Folder::operator=(const Folder &f)$/;"	f	class:Folder
operator =	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^Message& Message::operator=(const Message &rhs)$/;"	f	class:Message
remove	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^void Folder::remove(Message &m)$/;"	f	class:Folder
remove	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^void Message::remove(Folder &f)$/;"	f	class:Message
remove_from_Folders	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^void Message::remove_from_Folders()$/;"	f	class:Message
remove_from_Msgs	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^void Folder::remove_from_Msgs()$/;"	f	class:Folder
save	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^void Folder::save(Message &m)$/;"	f	class:Folder
save	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^void Message::save(Folder &f)$/;"	f	class:Message
swap	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^void swap(Message &lhs, Message &rhs)$/;"	f
~Folder	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^Folder::~Folder()$/;"	f	class:Folder
~Message	c++_primer\source_code\GCC_pre_C11\13\StrFolder.cc	/^Message::~Message()$/;"	f	class:Message
Folder	c++_primer\source_code\GCC_pre_C11\13\StrFolder.h	/^    Folder() { }            \/\/ defaults ok$/;"	f	class:Folder
Folder	c++_primer\source_code\GCC_pre_C11\13\StrFolder.h	/^class Folder {$/;"	c
Message	c++_primer\source_code\GCC_pre_C11\13\StrFolder.h	/^    explicit Message(const String &str = ""): $/;"	f	class:Message
Message	c++_primer\source_code\GCC_pre_C11\13\StrFolder.h	/^class Message {$/;"	c
STRFOLDER_H	c++_primer\source_code\GCC_pre_C11\13\StrFolder.h	31;"	d
addFldr	c++_primer\source_code\GCC_pre_C11\13\StrFolder.h	/^    void addFldr(Folder *f) { folders.insert(f); }$/;"	f	class:Message
addMsg	c++_primer\source_code\GCC_pre_C11\13\StrFolder.h	/^    void addMsg(Message *m) { msgs.insert(m); }$/;"	f	class:Folder
contents	c++_primer\source_code\GCC_pre_C11\13\StrFolder.h	/^    String contents;      \/\/ actual message text$/;"	m	class:Message
folders	c++_primer\source_code\GCC_pre_C11\13\StrFolder.h	/^    std::set<Folder*> folders; \/\/ Folders that have this Message$/;"	m	class:Message
msgs	c++_primer\source_code\GCC_pre_C11\13\StrFolder.h	/^    std::set<Message*> msgs;  \/\/ messages in this folder$/;"	m	class:Folder
remFldr	c++_primer\source_code\GCC_pre_C11\13\StrFolder.h	/^    void remFldr(Folder *f) { folders.erase(f); }$/;"	f	class:Message
remMsg	c++_primer\source_code\GCC_pre_C11\13\StrFolder.h	/^    void remMsg(Message *m) { msgs.erase(m); }$/;"	f	class:Folder
main	c++_primer\source_code\GCC_pre_C11\13\StrFolderMain.cc	/^int main()$/;"	f
alloc	c++_primer\source_code\GCC_pre_C11\13\StrVec.cc	/^std::allocator<std::string> StrVec::alloc;  $/;"	m	class:StrVec	file:
STRVEC_H	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	31;"	d
StrVec	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^    StrVec(): $/;"	f	class:StrVec
StrVec	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^StrVec::StrVec(const StrVec &s)$/;"	f	class:StrVec
StrVec	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^StrVec::StrVec(const std::string *b, const std::string *e)$/;"	f	class:StrVec
StrVec	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^class StrVec {$/;"	c
alloc	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^    static std::allocator<std::string> alloc; \/\/ allocates the elements$/;"	m	class:StrVec
alloc_n_copy	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^StrVec::alloc_n_copy(const std::string *b, const std::string *e)$/;"	f	class:StrVec
begin	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^	std::string *begin() const { return elements; }$/;"	f	class:StrVec
cap	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^    std::string *cap;        \/\/ pointer to one past the end of the array$/;"	m	class:StrVec
capacity	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:StrVec
chk_n_alloc	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^	void chk_n_alloc() $/;"	f	class:StrVec
elements	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^    std::string *elements;   \/\/ pointer to the first element in the array$/;"	m	class:StrVec
end	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^	std::string *end() const { return first_free; }$/;"	f	class:StrVec
first_free	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^    std::string *first_free; \/\/ pointer to the first free element in the array$/;"	m	class:StrVec
free	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^void StrVec::free()$/;"	f	class:StrVec
operator =	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^StrVec &StrVec::operator=(const StrVec &rhs)$/;"	f	class:StrVec
operator []	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^	const std::string& operator[](std::size_t n) const $/;"	f	class:StrVec
operator []	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^	std::string& operator[](std::size_t n) $/;"	f	class:StrVec
push_back	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^void StrVec::push_back(const std::string& s)$/;"	f	class:StrVec
reallocate	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^void StrVec::reallocate()$/;"	f	class:StrVec
size	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^    size_t size() const { return first_free - elements; }$/;"	f	class:StrVec
~StrVec	c++_primer\source_code\GCC_pre_C11\13\StrVec.h	/^StrVec::~StrVec() { free(); }$/;"	f	class:StrVec
add	c++_primer\source_code\GCC_pre_C11\13\String.cc	/^String add(const String &lhs, const String &rhs) $/;"	f
make_plural	c++_primer\source_code\GCC_pre_C11\13\String.cc	/^String make_plural(size_t ctr, const String &word,$/;"	f
operator +	c++_primer\source_code\GCC_pre_C11\13\String.cc	/^String operator+(const String &lhs, const String &rhs) $/;"	f
operator <<	c++_primer\source_code\GCC_pre_C11\13\String.cc	/^ostream &operator<<(ostream &os, const String &s)$/;"	f
operator =	c++_primer\source_code\GCC_pre_C11\13\String.cc	/^String & String::operator=(const String &rhs)$/;"	f	class:String
operator =	c++_primer\source_code\GCC_pre_C11\13\String.cc	/^String& String::operator=(char c)$/;"	f	class:String
operator =	c++_primer\source_code\GCC_pre_C11\13\String.cc	/^String& String::operator=(const char *cp)$/;"	f	class:String
print	c++_primer\source_code\GCC_pre_C11\13\String.cc	/^ostream &print(ostream &os, const String &s)$/;"	f
STRING_H	c++_primer\source_code\GCC_pre_C11\13\String.h	31;"	d
String	c++_primer\source_code\GCC_pre_C11\13\String.h	/^	String(): sz(0), p(0) { }$/;"	f	class:String
String	c++_primer\source_code\GCC_pre_C11\13\String.h	/^	String(const String &s):sz(s.sz), p(a.allocate(s.sz))$/;"	f	class:String
String	c++_primer\source_code\GCC_pre_C11\13\String.h	/^	String(const char *cp) : $/;"	f	class:String
String	c++_primer\source_code\GCC_pre_C11\13\String.h	/^	String(size_t n, char c) : sz(n), p(a.allocate(n))$/;"	f	class:String
String	c++_primer\source_code\GCC_pre_C11\13\String.h	/^class String {$/;"	c
a	c++_primer\source_code\GCC_pre_C11\13\String.h	/^	static std::allocator<char> a;$/;"	m	class:String
begin	c++_primer\source_code\GCC_pre_C11\13\String.h	/^	const char *begin()                         { return p; }$/;"	f	class:String
begin	c++_primer\source_code\GCC_pre_C11\13\String.h	/^	const char *begin() const                   { return p; }$/;"	f	class:String
end	c++_primer\source_code\GCC_pre_C11\13\String.h	/^	const char *end()                      { return p + sz; }$/;"	f	class:String
end	c++_primer\source_code\GCC_pre_C11\13\String.h	/^	const char *end() const                { return p + sz; }$/;"	f	class:String
p	c++_primer\source_code\GCC_pre_C11\13\String.h	/^	char *p ;$/;"	m	class:String
size	c++_primer\source_code\GCC_pre_C11\13\String.h	/^	size_t size() const                        { return sz; }$/;"	f	class:String
swap	c++_primer\source_code\GCC_pre_C11\13\String.h	/^	void swap(String &s)$/;"	f	class:String
swap	c++_primer\source_code\GCC_pre_C11\13\String.h	/^void swap(String &s1, String &s2)$/;"	f
sz	c++_primer\source_code\GCC_pre_C11\13\String.h	/^	std::size_t sz;$/;"	m	class:String
~String	c++_primer\source_code\GCC_pre_C11\13\String.h	/^	~String() { if (p) a.deallocate(p, sz); }$/;"	f	class:String
Foo	c++_primer\source_code\GCC_pre_C11\13\copyNoMove.cc	/^Foo::Foo(const Foo&) { std::cout << "Foo copy ctor" << std::endl; }$/;"	f	class:Foo
Foo	c++_primer\source_code\GCC_pre_C11\13\copyNoMove.cc	/^class Foo {$/;"	c	file:
main	c++_primer\source_code\GCC_pre_C11\13\copyNoMove.cc	/^int main()$/;"	f
HasPtr	c++_primer\source_code\GCC_pre_C11\13\moveHP.cc	/^    HasPtr(const HasPtr &p): $/;"	f	class:HasPtr
HasPtr	c++_primer\source_code\GCC_pre_C11\13\moveHP.cc	/^    HasPtr(const std::string &s = std::string()): $/;"	f	class:HasPtr
HasPtr	c++_primer\source_code\GCC_pre_C11\13\moveHP.cc	/^class HasPtr {$/;"	c	file:
i	c++_primer\source_code\GCC_pre_C11\13\moveHP.cc	/^    int    i;$/;"	m	class:HasPtr	file:
main	c++_primer\source_code\GCC_pre_C11\13\moveHP.cc	/^int main()$/;"	f
operator =	c++_primer\source_code\GCC_pre_C11\13\moveHP.cc	/^	HasPtr& operator=(HasPtr rhs) $/;"	f	class:HasPtr
ps	c++_primer\source_code\GCC_pre_C11\13\moveHP.cc	/^    std::string *ps;$/;"	m	class:HasPtr	file:
swap	c++_primer\source_code\GCC_pre_C11\13\moveHP.cc	/^void swap(HasPtr &lhs, HasPtr &rhs)$/;"	f
~HasPtr	c++_primer\source_code\GCC_pre_C11\13\moveHP.cc	/^	~HasPtr() { delete ps; }$/;"	f	class:HasPtr
f	c++_primer\source_code\GCC_pre_C11\13\serial.cc	/^void f (numbered s) { cout << s.mysn << endl; }$/;"	f
main	c++_primer\source_code\GCC_pre_C11\13\serial.cc	/^int main()$/;"	f
mysn	c++_primer\source_code\GCC_pre_C11\13\serial.cc	/^	size_t mysn;$/;"	m	struct:numbered	file:
numbered	c++_primer\source_code\GCC_pre_C11\13\serial.cc	/^	numbered() : mysn(sn++) { }$/;"	f	struct:numbered
numbered	c++_primer\source_code\GCC_pre_C11\13\serial.cc	/^	numbered(const numbered &) : mysn(sn++) { }$/;"	f	struct:numbered
numbered	c++_primer\source_code\GCC_pre_C11\13\serial.cc	/^struct numbered {$/;"	s	file:
operator =	c++_primer\source_code\GCC_pre_C11\13\serial.cc	/^	numbered &operator=(const numbered &) { return *this; }$/;"	f	struct:numbered
sn	c++_primer\source_code\GCC_pre_C11\13\serial.cc	/^	static size_t sn;$/;"	m	struct:numbered	file:
sn	c++_primer\source_code\GCC_pre_C11\13\serial.cc	/^size_t numbered::sn = 0;$/;"	m	class:numbered	file:
Sales_data	c++_primer\source_code\GCC_pre_C11\13\small2_SI.h	/^	Sales_data(): bookNo(10, '9'), units_sold(0), revenue(0.0) {}$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\13\small2_SI.h	/^	Sales_data(const Sales_data &rhs): bookNo(rhs.bookNo), $/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\13\small2_SI.h	/^	Sales_data(const std::string &book, unsigned cnt, double price): $/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\13\small2_SI.h	/^Sales_data::Sales_data(const Sales_data &orig):$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\13\small2_SI.h	/^class Sales_data {$/;"	c
bookNo	c++_primer\source_code\GCC_pre_C11\13\small2_SI.h	/^    std::string bookNo;$/;"	m	class:Sales_data
revenue	c++_primer\source_code\GCC_pre_C11\13\small2_SI.h	/^    double revenue;$/;"	m	class:Sales_data
units_sold	c++_primer\source_code\GCC_pre_C11\13\small2_SI.h	/^    int units_sold;$/;"	m	class:Sales_data
SMALL_SI_H	c++_primer\source_code\GCC_pre_C11\13\small_SI.h	30;"	d
Sales_data	c++_primer\source_code\GCC_pre_C11\13\small_SI.h	/^	Sales_data(const Sales_data &rhs): bookNo(rhs.bookNo),$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\13\small_SI.h	/^	Sales_data(const std::string &book, unsigned cnt, double price):$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\13\small_SI.h	/^    Sales_data(const std::string & s = ""): bookNo(s), $/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\13\small_SI.h	/^class Sales_data {$/;"	c
bookNo	c++_primer\source_code\GCC_pre_C11\13\small_SI.h	/^    std::string bookNo;$/;"	m	class:Sales_data
operator =	c++_primer\source_code\GCC_pre_C11\13\small_SI.h	/^Sales_data::operator=(const Sales_data &rhs)$/;"	f	class:Sales_data
revenue	c++_primer\source_code\GCC_pre_C11\13\small_SI.h	/^    double revenue;$/;"	m	class:Sales_data
units_sold	c++_primer\source_code\GCC_pre_C11\13\small_SI.h	/^    int units_sold;$/;"	m	class:Sales_data
~Sales_data	c++_primer\source_code\GCC_pre_C11\13\small_SI.h	/^    ~Sales_data() { } $/;"	f	class:Sales_data
main	c++_primer\source_code\GCC_pre_C11\13\substr.cc	/^int main()$/;"	f
position	c++_primer\source_code\GCC_pre_C11\13\substr.cc	/^position(const string &a, const string &b, const string &c)$/;"	f
getVec	c++_primer\source_code\GCC_pre_C11\13\useStrVec.cc	/^StrVec getVec(istream &is)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\13\useStrVec.cc	/^int main()$/;"	f
print	c++_primer\source_code\GCC_pre_C11\13\useStrVec.cc	/^void print(const StrVec &svec)$/;"	f
Sales_data	c++_primer\source_code\GCC_pre_C11\14\Sales_data.cc	/^Sales_data::Sales_data(istream &is): units_sold(0), revenue(0.0)$/;"	f	class:Sales_data
add	c++_primer\source_code\GCC_pre_C11\14\Sales_data.cc	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
avg_price	c++_primer\source_code\GCC_pre_C11\14\Sales_data.cc	/^double Sales_data::avg_price() const$/;"	f	class:Sales_data
operator +	c++_primer\source_code\GCC_pre_C11\14\Sales_data.cc	/^operator+(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator +=	c++_primer\source_code\GCC_pre_C11\14\Sales_data.cc	/^Sales_data& Sales_data::operator+=(const Sales_data &rhs)$/;"	f	class:Sales_data
operator <<	c++_primer\source_code\GCC_pre_C11\14\Sales_data.cc	/^ostream &operator<<(ostream &os, const Sales_data &item)$/;"	f
operator >>	c++_primer\source_code\GCC_pre_C11\14\Sales_data.cc	/^istream &operator>>(istream &is, Sales_data &item)$/;"	f
print	c++_primer\source_code\GCC_pre_C11\14\Sales_data.cc	/^ostream &print(ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\source_code\GCC_pre_C11\14\Sales_data.cc	/^istream &read(istream &is, Sales_data &item)$/;"	f
SALES_DATA_H	c++_primer\source_code\GCC_pre_C11\14\Sales_data.h	31;"	d
Sales_data	c++_primer\source_code\GCC_pre_C11\14\Sales_data.h	/^	Sales_data(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\14\Sales_data.h	/^	Sales_data(const std::string &s): $/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\14\Sales_data.h	/^	Sales_data(const std::string &s, unsigned n, double p):$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\14\Sales_data.h	/^class Sales_data {$/;"	c
bookNo	c++_primer\source_code\GCC_pre_C11\14\Sales_data.h	/^	std::string bookNo;$/;"	m	class:Sales_data
compareIsbn	c++_primer\source_code\GCC_pre_C11\14\Sales_data.h	/^bool compareIsbn(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
isbn	c++_primer\source_code\GCC_pre_C11\14\Sales_data.h	/^	std::string isbn() const { return bookNo; }$/;"	f	class:Sales_data
operator !=	c++_primer\source_code\GCC_pre_C11\14\Sales_data.h	/^bool operator!=(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator ==	c++_primer\source_code\GCC_pre_C11\14\Sales_data.h	/^bool operator==(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
revenue	c++_primer\source_code\GCC_pre_C11\14\Sales_data.h	/^	double revenue;$/;"	m	class:Sales_data
units_sold	c++_primer\source_code\GCC_pre_C11\14\Sales_data.h	/^	unsigned units_sold;$/;"	m	class:Sales_data
absInt	c++_primer\source_code\GCC_pre_C11\14\absInt.cc	/^struct absInt {$/;"	s	file:
main	c++_primer\source_code\GCC_pre_C11\14\absInt.cc	/^int main() {$/;"	f
operator ()	c++_primer\source_code\GCC_pre_C11\14\absInt.cc	/^    int operator()(int val) const {$/;"	f	struct:absInt
print	c++_primer\source_code\GCC_pre_C11\14\absInt.cc	/^void print(unsigned u) { cout << u << " "; }$/;"	f
main	c++_primer\source_code\GCC_pre_C11\14\add.cc	/^int main() $/;"	f
add	c++_primer\source_code\GCC_pre_C11\14\calc.cc	/^int add(int i, int j) { return i + j; }$/;"	f
divide	c++_primer\source_code\GCC_pre_C11\14\calc.cc	/^struct divide {$/;"	s	file:
main	c++_primer\source_code\GCC_pre_C11\14\calc.cc	/^int main()$/;"	f
mod	c++_primer\source_code\GCC_pre_C11\14\calc.cc	/^int mod(int i, int j) { return i % j; };$/;"	f
mult	c++_primer\source_code\GCC_pre_C11\14\calc.cc	/^int mult(int i, int j) { return i * j; };$/;"	f
operator ()	c++_primer\source_code\GCC_pre_C11\14\calc.cc	/^    int operator()(int denominator, int divisor) {$/;"	f	struct:divide
main	c++_primer\source_code\GCC_pre_C11\14\directcall.cc	/^int main()$/;"	f
LessVal	c++_primer\source_code\GCC_pre_C11\14\fcnobj.cc	/^	LessVal(int i): sz(i) { }$/;"	f	struct:LessVal
LessVal	c++_primer\source_code\GCC_pre_C11\14\fcnobj.cc	/^struct LessVal {$/;"	s	file:
Size_compare	c++_primer\source_code\GCC_pre_C11\14\fcnobj.cc	/^	Size_compare(string::size_type i): sz(i) { }$/;"	f	struct:Size_compare
Size_compare	c++_primer\source_code\GCC_pre_C11\14\fcnobj.cc	/^struct Size_compare {$/;"	s	file:
main	c++_primer\source_code\GCC_pre_C11\14\fcnobj.cc	/^int main() {$/;"	f
operator ()	c++_primer\source_code\GCC_pre_C11\14\fcnobj.cc	/^	bool operator()(const string &s) { return s.size() >= sz; }$/;"	f	struct:Size_compare
operator ()	c++_primer\source_code\GCC_pre_C11\14\fcnobj.cc	/^	bool operator()(int i) { return less_equal<int>()(i, sz); }$/;"	f	struct:LessVal
sz	c++_primer\source_code\GCC_pre_C11\14\fcnobj.cc	/^	int sz;$/;"	m	struct:LessVal	file:
sz	c++_primer\source_code\GCC_pre_C11\14\fcnobj.cc	/^	size_t sz;$/;"	m	struct:Size_compare	file:
GT	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^bool GT(const string &s, string::size_type m) $/;"	f
PrintString	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^	PrintString(ostream &o) : os(o) { }$/;"	f	class:PrintString
PrintString	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^class PrintString {$/;"	c	file:
ShorterString	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^class ShorterString {$/;"	c	file:
SizeComp	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^	SizeComp(size_t n): sz(n) { }  $/;"	f	class:SizeComp
SizeComp	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^class SizeComp {$/;"	c	file:
biggies	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^void biggies(vector<string> &words, vector<string>::size_type sz)$/;"	f
elimDups	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^void elimDups(vector<string> &words)$/;"	f
isShorter	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^bool isShorter(const string &s1, const string &s2)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^int main()$/;"	f
operator ()	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^	bool operator()(const string &s) const { return s.size() >= sz; }$/;"	f	class:SizeComp
operator ()	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^	bool operator()(const string &s1, const string &s2) const$/;"	f	class:ShorterString
operator ()	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^	void operator()(const string &s) const { os << s << " "; }$/;"	f	class:PrintString
os	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^	ostream &os;$/;"	m	class:PrintString	file:
sz	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^	size_t sz;  \/\/ a data member for each variable captured by value$/;"	m	class:SizeComp	file:
~SizeComp	c++_primer\source_code\GCC_pre_C11\14\newcount-size.cc	/^	~SizeComp() { }$/;"	f	class:SizeComp
PrintString	c++_primer\source_code\GCC_pre_C11\14\readStr.cc	/^    PrintString(ostream &o = cout, char c = ' '): $/;"	f	class:PrintString
PrintString	c++_primer\source_code\GCC_pre_C11\14\readStr.cc	/^class PrintString {$/;"	c	file:
ReadLine	c++_primer\source_code\GCC_pre_C11\14\readStr.cc	/^	ReadLine(istream &i) : is(i) { }$/;"	f	class:ReadLine
ReadLine	c++_primer\source_code\GCC_pre_C11\14\readStr.cc	/^class ReadLine {$/;"	c	file:
is	c++_primer\source_code\GCC_pre_C11\14\readStr.cc	/^	istream &is;$/;"	m	class:ReadLine	file:
main	c++_primer\source_code\GCC_pre_C11\14\readStr.cc	/^int main()$/;"	f
operator ()	c++_primer\source_code\GCC_pre_C11\14\readStr.cc	/^	bool operator()(string &s) const { return getline(is, s); }$/;"	f	class:ReadLine
operator ()	c++_primer\source_code\GCC_pre_C11\14\readStr.cc	/^    void operator()(const string &s) const { os << s << sep; }$/;"	f	class:PrintString
os	c++_primer\source_code\GCC_pre_C11\14\readStr.cc	/^    ostream &os;   \/\/ stream on which to write$/;"	m	class:PrintString	file:
sep	c++_primer\source_code\GCC_pre_C11\14\readStr.cc	/^	char sep;      \/\/ character to print after each output$/;"	m	class:PrintString	file:
display	c++_primer\source_code\GCC_pre_C11\15\Basket.cc	/^void Basket::display(ostream &os) const$/;"	f	class:Basket
total_receipt	c++_primer\source_code\GCC_pre_C11\15\Basket.cc	/^double Basket::total_receipt(ostream &os) const$/;"	f	class:Basket
BASKET_H	c++_primer\source_code\GCC_pre_C11\15\Basket.h	31;"	d
Basket	c++_primer\source_code\GCC_pre_C11\15\Basket.h	/^	Basket(): items(compare) { }$/;"	f	class:Basket
Basket	c++_primer\source_code\GCC_pre_C11\15\Basket.h	/^class Basket {$/;"	c
Comp	c++_primer\source_code\GCC_pre_C11\15\Basket.h	/^	typedef bool(*Comp)(const std::tr1::shared_ptr<Quote> &,$/;"	t	class:Basket
add_item	c++_primer\source_code\GCC_pre_C11\15\Basket.h	/^	void add_item(const Quote& sale) \/\/ copy the given object$/;"	f	class:Basket
add_item	c++_primer\source_code\GCC_pre_C11\15\Basket.h	/^	void add_item(const std::tr1::shared_ptr<Quote> &sale)  $/;"	f	class:Basket
compare	c++_primer\source_code\GCC_pre_C11\15\Basket.h	/^	static bool compare(const std::tr1::shared_ptr<Quote> &lhs,$/;"	f	class:Basket
items	c++_primer\source_code\GCC_pre_C11\15\Basket.h	/^    std::multiset<std::tr1::shared_ptr<Quote>, Comp> items; $/;"	m	class:Basket
main	c++_primer\source_code\GCC_pre_C11\15\Basket_main.cc	/^int main()$/;"	f
eval	c++_primer\source_code\GCC_pre_C11\15\Query.cc	/^AndQuery::eval(const TextQuery& text) const$/;"	f	class:AndQuery
eval	c++_primer\source_code\GCC_pre_C11\15\Query.cc	/^NotQuery::eval(const TextQuery& text) const$/;"	f	class:NotQuery
eval	c++_primer\source_code\GCC_pre_C11\15\Query.cc	/^OrQuery::eval(const TextQuery& text) const$/;"	f	class:OrQuery
AndQuery	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    AndQuery(const Query &left, const Query &right): $/;"	f	class:AndQuery
AndQuery	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^class AndQuery: public BinaryQuery {$/;"	c
BinaryQuery	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    BinaryQuery(const Query &l, const Query &r, std::string s): $/;"	f	class:BinaryQuery
BinaryQuery	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^class BinaryQuery: public Query_base {$/;"	c
NotQuery	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    NotQuery(const Query &q): query(q) { }$/;"	f	class:NotQuery
NotQuery	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^class NotQuery: public Query_base {$/;"	c
OrQuery	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    OrQuery(const Query &left, const Query &right): $/;"	f	class:OrQuery
OrQuery	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^class OrQuery: public BinaryQuery {$/;"	c
QUERY_H	c++_primer\source_code\GCC_pre_C11\15\Query.h	31;"	d
Query	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    Query(std::tr1::shared_ptr<Query_base> query): q(query) { }$/;"	f	class:Query
Query	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^Query::Query(const std::string &s): q(new WordQuery(s)) { }$/;"	f	class:Query
Query	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^class Query {$/;"	c
Query_base	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^class Query_base {$/;"	c
WordQuery	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    WordQuery(const std::string &s): query_word(s) { }$/;"	f	class:WordQuery
WordQuery	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^class WordQuery: public Query_base {$/;"	c
eval	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    QueryResult eval(const TextQuery &t) const $/;"	f	class:Query
eval	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    QueryResult eval(const TextQuery &t) const$/;"	f	class:WordQuery
lhs	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    Query lhs, rhs;    \/\/ right- and left-hand operands$/;"	m	class:BinaryQuery
line_no	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    typedef TextQuery::line_no line_no; \/\/ used in the eval functions$/;"	t	class:Query_base
opSym	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    std::string opSym; \/\/ name of the operator$/;"	m	class:BinaryQuery
operator &	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^inline Query operator&(const Query &lhs, const Query &rhs)$/;"	f
operator <<	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^operator<<(std::ostream &os, const Query &query) $/;"	f
operator |	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^inline Query operator|(const Query &lhs, const Query &rhs)$/;"	f
operator ~	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^inline Query operator~(const Query &operand)$/;"	f
q	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    std::tr1::shared_ptr<Query_base> q;$/;"	m	class:Query
query	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    Query query;$/;"	m	class:NotQuery
query_word	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    std::string query_word;   \/\/ word for which to search $/;"	m	class:WordQuery
rep	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^	std::string rep() const { return "(" + lhs.rep() + " " $/;"	f	class:BinaryQuery
rep	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^	std::string rep() const { return q->rep(); }$/;"	f	class:Query
rep	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^	std::string rep() const { return query_word; }$/;"	f	class:WordQuery
rep	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^	std::string rep() const {return "~(" + query.rep() + ")";}$/;"	f	class:NotQuery
rhs	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    Query lhs, rhs;    \/\/ right- and left-hand operands$/;"	m	class:BinaryQuery
~Query_base	c++_primer\source_code\GCC_pre_C11\15\Query.h	/^    virtual ~Query_base() { }$/;"	f	class:Query_base
net_price	c++_primer\source_code\GCC_pre_C11\15\Quote.cc	/^double Bulk_quote::net_price(size_t cnt) const$/;"	f	class:Bulk_quote
net_price	c++_primer\source_code\GCC_pre_C11\15\Quote.cc	/^double Lim_quote::net_price(size_t cnt) const$/;"	f	class:Lim_quote
print_total	c++_primer\source_code\GCC_pre_C11\15\Quote.cc	/^double print_total(ostream &os, $/;"	f
Bulk_quote	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    Bulk_quote() { }$/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    Bulk_quote(const std::string& book, double p, $/;"	f	class:Bulk_quote
Bulk_quote	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^class Bulk_quote : public Disc_quote { \/\/ Bulk_quote inherits from Quote$/;"	c
Disc_quote	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    Disc_quote(): quantity(0), discount(0.0) { }$/;"	f	class:Disc_quote
Disc_quote	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    Disc_quote(const std::string& book, double price,$/;"	f	class:Disc_quote
Disc_quote	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^class Disc_quote : public Quote {$/;"	c
Lim_quote	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    Lim_quote(const std::string& book = "", $/;"	f	class:Lim_quote
Lim_quote	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^class Lim_quote : public Disc_quote {$/;"	c
QUOTE_H	c++_primer\source_code\GCC_pre_C11\15\Quote.h	31;"	d
Quote	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^	Quote(): price(0.0) { }$/;"	f	class:Quote
Quote	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    Quote(const std::string &book, double sales_price):$/;"	f	class:Quote
Quote	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^class Quote {$/;"	c
bookNo	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    std::string bookNo; \/\/ ISBN number of this item$/;"	m	class:Quote
clone	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    Bulk_quote* clone() const {return new Bulk_quote(*this);}$/;"	f	class:Bulk_quote
clone	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    Lim_quote* clone() const { return new Lim_quote(*this); }$/;"	f	class:Lim_quote
clone	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    virtual Quote* clone() const {return new Quote(*this);}$/;"	f	class:Quote
discount	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    double discount;      \/\/ fractional discount to apply$/;"	m	class:Disc_quote
discount_policy	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Disc_quote
isbn	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    std::string isbn() const { return bookNo; }$/;"	f	class:Quote
net_price	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    virtual double net_price(std::size_t n) const $/;"	f	class:Quote
price	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    double price;       \/\/ normal, undiscounted price$/;"	m	class:Quote
quantity	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    std::size_t quantity; \/\/ purchase size for the discount to apply$/;"	m	class:Disc_quote
~Quote	c++_primer\source_code\GCC_pre_C11\15\Quote.h	/^    virtual ~Quote() { } \/\/ dynamic binding for the destructor$/;"	f	class:Quote
main	c++_primer\source_code\GCC_pre_C11\15\andQueryTest.cc	/^int main(int argc, char **argv)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\15\and_orQueryTest.cc	/^int main(int argc, char **argv)$/;"	f
get_file	c++_primer\source_code\GCC_pre_C11\15\get_print.cc	/^TextQuery get_file(int argc, char **argv)$/;"	f
get_word	c++_primer\source_code\GCC_pre_C11\15\get_print.cc	/^bool get_word(string &s1)$/;"	f
get_words	c++_primer\source_code\GCC_pre_C11\15\get_print.cc	/^bool get_words(string &s1, string &s2)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\15\sample.cc	/^int main()$/;"	f
Base	c++_primer\source_code\GCC_pre_C11\15\scope.cc	/^    Base(): mem(0) { }$/;"	f	struct:Base
Base	c++_primer\source_code\GCC_pre_C11\15\scope.cc	/^struct Base {$/;"	s	file:
Derived	c++_primer\source_code\GCC_pre_C11\15\scope.cc	/^    Derived(int i): mem(i) { } \/\/ initializes Derived::mem to i$/;"	f	struct:Derived
Derived	c++_primer\source_code\GCC_pre_C11\15\scope.cc	/^struct Derived : Base {$/;"	s	file:
get_base_mem	c++_primer\source_code\GCC_pre_C11\15\scope.cc	/^    int get_base_mem() { return Base::mem; }$/;"	f	struct:Derived
get_mem	c++_primer\source_code\GCC_pre_C11\15\scope.cc	/^    int get_mem() { return mem; }  \/\/ returns Derived::mem$/;"	f	struct:Derived
main	c++_primer\source_code\GCC_pre_C11\15\scope.cc	/^int main()$/;"	f
mem	c++_primer\source_code\GCC_pre_C11\15\scope.cc	/^    int mem;   \/\/ hides mem in the base$/;"	m	struct:Derived	file:
mem	c++_primer\source_code\GCC_pre_C11\15\scope.cc	/^    int mem;$/;"	m	struct:Base	file:
main	c++_primer\source_code\GCC_pre_C11\15\useQuote.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\15\vecBasket.cc	/^int main ()$/;"	f
Base	c++_primer\source_code\GCC_pre_C11\15\virtualsNscope.cc	/^class Base {$/;"	c	file:
D1	c++_primer\source_code\GCC_pre_C11\15\virtualsNscope.cc	/^class D1 : public Base {$/;"	c	file:
D2	c++_primer\source_code\GCC_pre_C11\15\virtualsNscope.cc	/^class D2 : public D1 {$/;"	c	file:
f2	c++_primer\source_code\GCC_pre_C11\15\virtualsNscope.cc	/^void D1::f2() { cout << "D1::f2()" << endl; }$/;"	f	class:D1
f2	c++_primer\source_code\GCC_pre_C11\15\virtualsNscope.cc	/^void D2::f2() { cout << "D2::f2()" << endl; }$/;"	f	class:D2
fcn	c++_primer\source_code\GCC_pre_C11\15\virtualsNscope.cc	/^int Base::fcn() { cout << "Base::fcn()" << endl; return 0; }$/;"	f	class:Base
fcn	c++_primer\source_code\GCC_pre_C11\15\virtualsNscope.cc	/^int D1::fcn(int) { cout << "D1::fcn(int)" << endl; return 0; }$/;"	f	class:D1
fcn	c++_primer\source_code\GCC_pre_C11\15\virtualsNscope.cc	/^int D2::fcn() { cout << "D2::fcn()" << endl; return 0; }$/;"	f	class:D2
fcn	c++_primer\source_code\GCC_pre_C11\15\virtualsNscope.cc	/^int D2::fcn(int) { cout << "D2::fcn(int)" << endl; return 0; }$/;"	f	class:D2
main	c++_primer\source_code\GCC_pre_C11\15\virtualsNscope.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\15\wordQueryTest.cc	/^int main(int argc, char **argv)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\16\Array.cc	/^int main()$/;"	f
BLOB_H	c++_primer\source_code\GCC_pre_C11\16\Blob.h	31;"	d
Blob	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^    Blob<T>::Blob(It b, It e):$/;"	f	class:Blob
Blob	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^Blob<T>::Blob():$/;"	f	class:Blob
Blob	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^Blob<T>::Blob(T *p, std::size_t n): $/;"	f	class:Blob
Blob	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^template <typename T> class Blob {$/;"	c
BlobPtr	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^    BlobPtr(): curr(0) { }$/;"	f	class:BlobPtr
BlobPtr	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^    BlobPtr(Blob<T> &a, size_t sz = 0): $/;"	f	class:BlobPtr
BlobPtr	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^template <typename T> class BlobPtr : public std::iterator<std::bidirectional_iterator_tag,T> {$/;"	c
at	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^Blob<T>::at(size_type i) const$/;"	f	class:Blob
at	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^T& Blob<T>::at(size_type i) $/;"	f	class:Blob
back	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^T& Blob<T>::back() $/;"	f	class:Blob
back	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^const T& Blob<T>::back() const $/;"	f	class:Blob
begin	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^	BlobPtr<T> begin() { return BlobPtr<T>(*this); }$/;"	f	class:Blob
check	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^BlobPtr<T>::check(std::size_t i, const std::string &msg) const$/;"	f	class:BlobPtr
check	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^void Blob<T>::check(size_type i, const std::string &msg) const$/;"	f	class:Blob
curr	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^    std::size_t curr;      \/\/ current position within the array$/;"	m	class:BlobPtr
data	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^	std::tr1::shared_ptr<std::vector<T> > data; $/;"	m	class:Blob
empty	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^	bool empty() const { return data->empty(); }$/;"	f	class:Blob
end	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^	BlobPtr<T> end() $/;"	f	class:Blob
front	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^T& Blob<T>::front()$/;"	f	class:Blob
front	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^const T& Blob<T>::front() const $/;"	f	class:Blob
operator !=	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^bool operator!=(const BlobPtr<T> &lhs, const BlobPtr<T> &rhs)$/;"	f
operator *	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^    T& operator*() const$/;"	f	class:BlobPtr
operator ++	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^BlobPtr<T> BlobPtr<T>::operator++(int)$/;"	f	class:BlobPtr
operator ++	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^BlobPtr<T>& BlobPtr<T>::operator++()$/;"	f	class:BlobPtr
operator --	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^BlobPtr<T> BlobPtr<T>::operator--(int)$/;"	f	class:BlobPtr
operator --	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^BlobPtr<T>& BlobPtr<T>::operator--()$/;"	f	class:BlobPtr
operator ->	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^    T* operator->() const$/;"	f	class:BlobPtr
operator <<	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^operator<<(std::ostream &os, const Blob<T> a)$/;"	f
operator ==	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^bool operator==(const BlobPtr<T> &lhs, const BlobPtr<T> &rhs)$/;"	f
operator ==	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^operator==(const Blob<T> lhs, const Blob<T> rhs)$/;"	f
operator []	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^	T &operator[](std::size_t i)$/;"	f	class:BlobPtr
operator []	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^	const T &operator[](std::size_t i) const$/;"	f	class:BlobPtr
operator []	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^Blob<T>::operator[](size_type i) const$/;"	f	class:Blob
operator []	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^T& Blob<T>::operator[](size_type i)$/;"	f	class:Blob
pop_back	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^template <typename T> void Blob<T>::pop_back() $/;"	f	class:Blob
push_back	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^	void push_back(const T &t) {data->push_back(t);}$/;"	f	class:Blob
size	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^	size_type size() const { return data->size(); }$/;"	f	class:Blob
size_type	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^	typedef typename std::vector<T>::size_type size_type;$/;"	t	class:Blob
swap	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^	void swap(Blob &b) { data.swap(b.data); }$/;"	f	class:Blob
value_type	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^	typedef T value_type;$/;"	t	class:Blob
wptr	c++_primer\source_code\GCC_pre_C11\16\Blob.h	/^    std::tr1::weak_ptr<std::vector<T> > wptr;  $/;"	m	class:BlobPtr
DEBUGDELETE_H	c++_primer\source_code\GCC_pre_C11\16\DebugDelete.h	31;"	d
DebugDelete	c++_primer\source_code\GCC_pre_C11\16\DebugDelete.h	/^	DebugDelete(const std::string &s,$/;"	f	class:DebugDelete
DebugDelete	c++_primer\source_code\GCC_pre_C11\16\DebugDelete.h	/^class DebugDelete {$/;"	c
operator ()	c++_primer\source_code\GCC_pre_C11\16\DebugDelete.h	/^	template <typename T> void operator()(T *p) const $/;"	f	class:DebugDelete
os	c++_primer\source_code\GCC_pre_C11\16\DebugDelete.h	/^	std::ostream &os;  \/\/ where to print debugging info$/;"	m	class:DebugDelete
type	c++_primer\source_code\GCC_pre_C11\16\DebugDelete.h	/^	std::string type;  \/\/ what type of smart pointer we're deleting$/;"	m	class:DebugDelete
main	c++_primer\source_code\GCC_pre_C11\16\SP.cc	/^int main()$/;"	f
Sales_data	c++_primer\source_code\GCC_pre_C11\16\Sales_data.cc	/^Sales_data::Sales_data(istream &is) $/;"	f	class:Sales_data
add	c++_primer\source_code\GCC_pre_C11\16\Sales_data.cc	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
avg_price	c++_primer\source_code\GCC_pre_C11\16\Sales_data.cc	/^double Sales_data::avg_price() const$/;"	f	class:Sales_data
operator ()	c++_primer\source_code\GCC_pre_C11\16\Sales_data.cc	/^	hash<Sales_data>::operator()(const Sales_data& s) const$/;"	f	class:std::tr1::hash
operator +	c++_primer\source_code\GCC_pre_C11\16\Sales_data.cc	/^operator+(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator +=	c++_primer\source_code\GCC_pre_C11\16\Sales_data.cc	/^Sales_data& Sales_data::operator+=(const Sales_data &rhs)$/;"	f	class:Sales_data
operator <<	c++_primer\source_code\GCC_pre_C11\16\Sales_data.cc	/^ostream &operator<<(ostream &os, const Sales_data &item)$/;"	f
operator >>	c++_primer\source_code\GCC_pre_C11\16\Sales_data.cc	/^istream &operator>>(istream &is, Sales_data &item)$/;"	f
print	c++_primer\source_code\GCC_pre_C11\16\Sales_data.cc	/^ostream &print(ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\source_code\GCC_pre_C11\16\Sales_data.cc	/^istream &read(istream &is, Sales_data &item)$/;"	f
std	c++_primer\source_code\GCC_pre_C11\16\Sales_data.cc	/^namespace std {$/;"	n	file:
tr1	c++_primer\source_code\GCC_pre_C11\16\Sales_data.cc	/^	namespace tr1 {$/;"	n	namespace:std	file:
SALES_DATA_H	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	31;"	d
Sales_data	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^	Sales_data(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^	Sales_data(const std::string &s): $/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^	Sales_data(const std::string &s, unsigned n, double p):$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^class Sales_data {$/;"	c
argument_type	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^    typedef Sales_data argument_type; \/\/ by default, this type needs ==$/;"	t	struct:std::tr1::hash
bookNo	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^	std::string bookNo;$/;"	m	class:Sales_data
compareIsbn	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^bool compareIsbn(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
hash	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^struct hash<Sales_data>  \/\/ the template parameter of Sales_data$/;"	s	namespace:std::tr1
isbn	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^	std::string isbn() const { return bookNo; }$/;"	f	class:Sales_data
operator !=	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^bool operator!=(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator ==	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^bool operator==(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
result_type	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^    typedef size_t result_type;$/;"	t	struct:std::tr1::hash
revenue	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^	double revenue;$/;"	m	class:Sales_data
std	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^namespace std {$/;"	n
tr1	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^namespace tr1 {$/;"	n	namespace:std
units_sold	c++_primer\source_code\GCC_pre_C11\16\Sales_data.h	/^	unsigned units_sold;$/;"	m	class:Sales_data
VEC_H	c++_primer\source_code\GCC_pre_C11\16\Vec.h	31;"	d
Vec	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^    Vec(): elements(0), first_free(0), cap(0) { }$/;"	f	class:Vec
Vec	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^Vec<T>::Vec(const Vec &s)$/;"	f	class:Vec
Vec	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^class Vec {$/;"	c
alloc	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^    static std::allocator<T> alloc; \/\/ allocates the elements$/;"	m	class:Vec
alloc	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^template <typename T> std::allocator<T> Vec<T>::alloc;  $/;"	m	class:Vec
alloc_n_copy	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^Vec<T>::alloc_n_copy(const T *b, const T *e) $/;"	f	class:Vec
begin	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^	T *begin() const { return elements; }$/;"	f	class:Vec
cap	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^    T* cap;        \/\/ pointer to one past the end of the array$/;"	m	class:Vec
capacity	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:Vec
chk_n_alloc	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^	void chk_n_alloc() { if (first_free == cap) reallocate(); }$/;"	f	class:Vec
elements	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^    T* elements;   \/\/ pointer to first element in the array$/;"	m	class:Vec
end	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^	T *end() const { return first_free; }$/;"	f	class:Vec
first_free	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^    T* first_free; \/\/ pointer to first free element in the array$/;"	m	class:Vec
free	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^void Vec<T>::free()$/;"	f	class:Vec
operator =	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^Vec<T> &Vec<T>::operator=(const Vec &rhs)$/;"	f	class:Vec
operator []	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^    T& operator[](size_t n) { return elements[n]; }$/;"	f	class:Vec
operator []	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^    const T& operator[](size_t n) const { return elements[n]; }$/;"	f	class:Vec
push_back	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^void Vec<T>::push_back(const T& s)$/;"	f	class:Vec
reallocate	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^void Vec<T>::reallocate()$/;"	f	class:Vec
size	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^    size_t size() const { return first_free - elements; }$/;"	f	class:Vec
~Vec	c++_primer\source_code\GCC_pre_C11\16\Vec.h	/^Vec<T>::~Vec() { free(); }$/;"	f	class:Vec
getVec	c++_primer\source_code\GCC_pre_C11\16\Vecmain.cc	/^Vec<string> getVec(istream &is)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\16\Vecmain.cc	/^int main()$/;"	f
print	c++_primer\source_code\GCC_pre_C11\16\Vecmain.cc	/^void print(const Vec<string> &svec)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\16\array-parms4.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\16\compare.cc	/^int main()$/;"	f
COMPARE_H	c++_primer\source_code\GCC_pre_C11\16\compare.h	31;"	d
compare	c++_primer\source_code\GCC_pre_C11\16\compare.h	/^int compare(const T &v1, const T &v2)$/;"	f
compare	c++_primer\source_code\GCC_pre_C11\16\compare.h	/^int compare(const char* const &v1, const char* const &v2)$/;"	f
compare	c++_primer\source_code\GCC_pre_C11\16\compareDef.cc	/^int compare(const T &v1, const T &v2)$/;"	f
compare	c++_primer\source_code\GCC_pre_C11\16\compareDef.cc	/^int compare(const T &v1, const T &v2, F f) $/;"	f
main	c++_primer\source_code\GCC_pre_C11\16\compareDef.cc	/^int main()$/;"	f
compare	c++_primer\source_code\GCC_pre_C11\16\compareSpec.cc	/^int compare(const char (&p1)[N], const char (&p2)[M])$/;"	f
compare	c++_primer\source_code\GCC_pre_C11\16\compareSpec.cc	/^int compare(const char *const& p1, const char *const& p2)$/;"	f
compare	c++_primer\source_code\GCC_pre_C11\16\compareSpec.cc	/^template <typename T> int compare(const T &v1, const T &v2)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\16\compareSpec.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\16\debug.cc	/^int main()$/;"	f
DEBUG_REP_H	c++_primer\source_code\GCC_pre_C11\16\debug_rep.h	31;"	d
debug_rep	c++_primer\source_code\GCC_pre_C11\16\debug_rep.h	/^std::string debug_rep(char *p) $/;"	f
debug_rep	c++_primer\source_code\GCC_pre_C11\16\debug_rep.h	/^std::string debug_rep(const char *p) $/;"	f
debug_rep	c++_primer\source_code\GCC_pre_C11\16\debug_rep.h	/^std::string debug_rep(const std::string &s)$/;"	f
debug_rep	c++_primer\source_code\GCC_pre_C11\16\debug_rep.h	/^template <> std::string debug_rep(const char *cp)$/;"	f
debug_rep	c++_primer\source_code\GCC_pre_C11\16\debug_rep.h	/^template <typename T> std::string debug_rep(T *p)$/;"	f
debug_rep	c++_primer\source_code\GCC_pre_C11\16\debug_rep.h	/^template <typename T> std::string debug_rep(T b, T e)$/;"	f
debug_rep	c++_primer\source_code\GCC_pre_C11\16\debug_rep.h	/^template <typename T> std::string debug_rep(const T &t)$/;"	f
debug_rep	c++_primer\source_code\GCC_pre_C11\16\debug_rep.h	/^template <typename T> std::string debug_rep(const std::vector<T> &v)$/;"	f
debug_rep	c++_primer\source_code\GCC_pre_C11\16\debug_rep.h	/^template<> std::string debug_rep(char *p)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\16\multiset.cc	/^int main()$/;"	f
compare	c++_primer\source_code\GCC_pre_C11\16\overSpec.cc	/^int compare(const char (&p1)[N], const char (&p2)[M])$/;"	f
compare	c++_primer\source_code\GCC_pre_C11\16\overSpec.cc	/^int compare(const char* const &p1, const char* const &p2)$/;"	f
compare	c++_primer\source_code\GCC_pre_C11\16\overSpec.cc	/^template <typename T> int compare(const T& v1, const T& v2)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\16\overSpec.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\16\qm.cc	/^int main() {$/;"	f
f	c++_primer\source_code\GCC_pre_C11\16\special.cc	/^template <typename T> void f(T) { cout << "f(T)" << endl; }$/;"	f
f	c++_primer\source_code\GCC_pre_C11\16\special.cc	/^template <typename T> void f(const T*) $/;"	f
g	c++_primer\source_code\GCC_pre_C11\16\special.cc	/^template <typename T> void g(T) { cout << "g(T)" << endl; }$/;"	f
g	c++_primer\source_code\GCC_pre_C11\16\special.cc	/^template <typename T> void g(T*) { cout << "g(T*)" << endl; }$/;"	f
main	c++_primer\source_code\GCC_pre_C11\16\special.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\16\useBlob.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\16\useChcking.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\badgetc.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\bits.cc	/^int main() $/;"	f
Stores	c++_primer\source_code\GCC_pre_C11\17\findbook.cc	/^typedef vector<vector<Sales_data> > Stores;$/;"	t	file:
build_store	c++_primer\source_code\GCC_pre_C11\17\findbook.cc	/^vector<Sales_data> build_store(const string &s)$/;"	f
findBook	c++_primer\source_code\GCC_pre_C11\17\findbook.cc	/^findBook(const Stores &files, const string &book)$/;"	f
lt	c++_primer\source_code\GCC_pre_C11\17\findbook.cc	/^bool lt(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\findbook.cc	/^int main(int argc, char **argv)$/;"	f
matches	c++_primer\source_code\GCC_pre_C11\17\findbook.cc	/^              vector<Sales_data>::const_iterator> matches;$/;"	t	file:
reportResults	c++_primer\source_code\GCC_pre_C11\17\findbook.cc	/^void reportResults(istream &in, ostream &os, const Stores &files)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\game.cc	/^int main()$/;"	f
play	c++_primer\source_code\GCC_pre_C11\17\game.cc	/^bool play(bool player) { return player; }$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\getc.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\getput.cc	/^int main()$/;"	f
get_status	c++_primer\source_code\GCC_pre_C11\17\manips.cc	/^bool get_status()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\manips.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\no-skipws.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\normalInts.cc	/^int main()$/;"	f
OURRANDOM_H	c++_primer\source_code\GCC_pre_C11\17\ourRandom.h	41;"	d
default_random_engine	c++_primer\source_code\GCC_pre_C11\17\ourRandom.h	/^typedef std::tr1::mt19937 default_random_engine;$/;"	t
lround	c++_primer\source_code\GCC_pre_C11\17\ourRandom.h	/^inline long lround(double d)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\point.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\prec.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\rand1.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\rand2.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\rand4.cc	/^int main()$/;"	f
bad_randVec	c++_primer\source_code\GCC_pre_C11\17\rand6.cc	/^vector<unsigned> bad_randVec()$/;"	f
good_randVec	c++_primer\source_code\GCC_pre_C11\17\rand6.cc	/^vector<unsigned> good_randVec()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\rand6.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\seed.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\seek.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\setw.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\skipws.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\17\tuple.cc	/^int main()$/;"	f
highlight	c++_primer\source_code\GCC_pre_C11\18\Animal.cc	/^void highlight(const Endangered&)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\18\Animal.cc	/^int main() {$/;"	f
operator <<	c++_primer\source_code\GCC_pre_C11\18\Animal.cc	/^ostream& operator<<(ostream &os, const ZooAnimal&)$/;"	f
print	c++_primer\source_code\GCC_pre_C11\18\Animal.cc	/^void print(const Bear&) $/;"	f
Astaire	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^const DanceType Astaire = 1;$/;"	v
Bear	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^	Bear(): dancetype(Rogers) { }$/;"	f	class:Bear
Bear	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    Bear(std::string name, bool onExhibit=true, $/;"	f	class:Bear
Bear	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^class Bear : public ZooAnimal {$/;"	c
DanceType	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^typedef unsigned DanceType;$/;"	t
Endangered	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^class Endangered {$/;"	c
Panda	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    Panda() { }$/;"	f	class:Panda
Panda	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^Panda::Panda(std::string name, bool onExhibit)$/;"	f	class:Panda
Panda	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^class Panda : public Bear, public Endangered {$/;"	c
PolarBear	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^class PolarBear : public Bear { \/* . . . *\/ };$/;"	c
Rogers	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^const DanceType Rogers = 42;$/;"	v
ZooAnimal	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    ZooAnimal(): exhibit_stat(false) { }$/;"	f	class:ZooAnimal
ZooAnimal	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    ZooAnimal(std::string animal, bool exhibit,$/;"	f	class:ZooAnimal
ZooAnimal	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^class ZooAnimal {$/;"	c
cuddle	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    virtual void cuddle()$/;"	f	class:Panda
dance	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    void dance(DanceType) const $/;"	f	class:Bear
dancetype	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    DanceType   dancetype;$/;"	m	class:Bear
exhibit_stat	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    bool        exhibit_stat;$/;"	m	class:ZooAnimal
fam_name	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    std::string fam_name;$/;"	m	class:ZooAnimal
family_name	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    std::string family_name() const { return fam_name; }$/;"	f	class:ZooAnimal
highlight	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    virtual void highlight() const$/;"	f	class:Endangered
highlight	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    void highlight()$/;"	f	class:Panda
max_weight	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^	virtual double max_weight() const$/;"	f	class:Endangered
max_weight	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^	virtual double max_weight() const$/;"	f	class:ZooAnimal
max_weight	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^double Panda::max_weight() const$/;"	f	class:Panda
mumble	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    int mumble(int)$/;"	f	class:Bear
name	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    std::string name() const { return nm; }$/;"	f	class:ZooAnimal
nm	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    std::string nm;$/;"	m	class:ZooAnimal
onExhibit	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    bool onExhibit() const { return exhibit_stat; }$/;"	f	class:ZooAnimal
population	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    virtual int population() const$/;"	f	class:ZooAnimal
print	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    virtual std::ostream &print() const$/;"	f	class:Bear
print	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    virtual std::ostream& print() const$/;"	f	class:Endangered
print	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    virtual std::ostream& print() const$/;"	f	class:Panda
print	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    virtual std::ostream& print() const$/;"	f	class:ZooAnimal
toes	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    virtual int toes() const$/;"	f	class:Bear
toes	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    virtual int toes()$/;"	f	class:Panda
two_left_feet	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^const DanceType two_left_feet = 0;$/;"	v
~Bear	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    virtual ~Bear()$/;"	f	class:Bear
~Endangered	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    virtual ~Endangered() $/;"	f	class:Endangered
~Panda	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    virtual ~Panda()$/;"	f	class:Panda
~ZooAnimal	c++_primer\source_code\GCC_pre_C11\18\Animal.h	/^    virtual ~ZooAnimal()$/;"	f	class:ZooAnimal
Bear	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    Bear() : dance_flag(two_left_feet) { }$/;"	f	class:Bear
Bear	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^Bear::Bear(std::string name, bool onExhibit):$/;"	f	class:Bear
Bear	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^class Bear : virtual public ZooAnimal {$/;"	c
DanceType	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	g	class:Bear
Endangered	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    Endangered(Status stat = improving): animal_status(stat) { }$/;"	f	class:Endangered
Endangered	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^class Endangered {$/;"	c
Panda	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^	Panda(): sleeping_flag(false) { }$/;"	f	class:Panda
Panda	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^Panda::Panda(std::string name, bool onExhibit)$/;"	f	class:Panda
Panda	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^class Panda : public Bear,$/;"	c
Raccoon	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^	Raccoon(): pettable_flag(false) { }$/;"	f	class:Raccoon
Raccoon	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^Raccoon::Raccoon(std::string name, bool onExhibit)$/;"	f	class:Raccoon
Raccoon	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^class Raccoon : public virtual ZooAnimal {$/;"	c
Status	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    enum Status { critical, environment, improving };$/;"	g	class:Endangered
ZooAnimal	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^	ZooAnimal(): exhibit_stat(false) { }$/;"	f	class:ZooAnimal
ZooAnimal	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    ZooAnimal(std::string animal, bool exhibit,$/;"	f	class:ZooAnimal
ZooAnimal	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^class ZooAnimal {$/;"	c
animal_status	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    Status animal_status;$/;"	m	class:Endangered
critical	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
dance	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    void dance(DanceType) const$/;"	f	class:Bear
dance_flag	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    DanceType dance_flag;$/;"	m	class:Bear
environment	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
exhibit_stat	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    bool exhibit_stat;$/;"	m	class:ZooAnimal
fam_name	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    std::string fam_name;$/;"	m	class:ZooAnimal
family_name	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    std::string family_name() const { return fam_name; }$/;"	f	class:ZooAnimal
fandango	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
highlight	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    virtual void highlight() const$/;"	f	class:Endangered
improving	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
isA	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    virtual std::string isA() const$/;"	f	class:Bear
macarena	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
mumble	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    int mumble(int)$/;"	f	class:Bear
name	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    std::string name() const { return nm; }$/;"	f	class:ZooAnimal
name	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    std::string name;$/;"	m	class:Bear
nm	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    std::string nm;$/;"	m	class:ZooAnimal
onExhibit	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    bool onExhibit() const { return exhibit_stat; }$/;"	f	class:ZooAnimal
pettable	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    bool pettable() const {return pettable_flag;  }$/;"	f	class:Raccoon
pettable	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    void pettable(bool petval) {pettable_flag = petval;}$/;"	f	class:Raccoon
pettable_flag	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    bool pettable_flag;$/;"	m	class:Raccoon
population	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    virtual int population() const$/;"	f	class:ZooAnimal
print	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    virtual std::ostream &print(std::ostream&) const$/;"	f	class:Bear
print	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    virtual std::ostream& print(std::ostream&) const$/;"	f	class:Endangered
print	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    virtual std::ostream& print(std::ostream&) const$/;"	f	class:Panda
print	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    virtual std::ostream& print(std::ostream&) const$/;"	f	class:Raccoon
print	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    virtual std::ostream& print(std::ostream&) const$/;"	f	class:ZooAnimal
sleeping	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    bool sleeping() const {return sleeping_flag;}$/;"	f	class:Panda
sleeping	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    void sleeping(bool newval) {sleeping_flag = newval;}$/;"	f	class:Panda
sleeping_flag	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    bool sleeping_flag;$/;"	m	class:Panda
two_left_feet	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
~Bear	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^	virtual ~Bear() { std::cout << "Bear::~Bear" << std::endl; }$/;"	f	class:Bear
~Endangered	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    virtual ~Endangered() $/;"	f	class:Endangered
~ZooAnimal	c++_primer\source_code\GCC_pre_C11\18\Animal_virtual_baseVers.h	/^    virtual ~ZooAnimal()$/;"	f	class:ZooAnimal
Sales_data	c++_primer\source_code\GCC_pre_C11\18\Sales_data.cc	/^Sales_data::Sales_data(istream &is) $/;"	f	class:Sales_data
add	c++_primer\source_code\GCC_pre_C11\18\Sales_data.cc	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
avg_price	c++_primer\source_code\GCC_pre_C11\18\Sales_data.cc	/^double Sales_data::avg_price() const$/;"	f	class:Sales_data
operator ()	c++_primer\source_code\GCC_pre_C11\18\Sales_data.cc	/^hash<Sales_data>::operator()(const Sales_data& s) const$/;"	f	class:std::hash
operator +	c++_primer\source_code\GCC_pre_C11\18\Sales_data.cc	/^operator+(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator +=	c++_primer\source_code\GCC_pre_C11\18\Sales_data.cc	/^Sales_data& Sales_data::operator+=(const Sales_data &rhs)$/;"	f	class:Sales_data
operator <<	c++_primer\source_code\GCC_pre_C11\18\Sales_data.cc	/^ostream &operator<<(ostream &os, const Sales_data &item)$/;"	f
operator >>	c++_primer\source_code\GCC_pre_C11\18\Sales_data.cc	/^istream &operator>>(istream &is, Sales_data &item)$/;"	f
print	c++_primer\source_code\GCC_pre_C11\18\Sales_data.cc	/^ostream &print(ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\source_code\GCC_pre_C11\18\Sales_data.cc	/^istream &read(istream &is, Sales_data &item)$/;"	f
std	c++_primer\source_code\GCC_pre_C11\18\Sales_data.cc	/^namespace std {$/;"	n	file:
main	c++_primer\source_code\GCC_pre_C11\18\book.cc	/^int main()$/;"	f
BOOKEXCEPT_H	c++_primer\source_code\GCC_pre_C11\18\bookexcept.h	31;"	d
isbn_mismatch	c++_primer\source_code\GCC_pre_C11\18\bookexcept.h	/^    explicit isbn_mismatch(const std::string &s): $/;"	f	class:isbn_mismatch
isbn_mismatch	c++_primer\source_code\GCC_pre_C11\18\bookexcept.h	/^    isbn_mismatch(const std::string &s,$/;"	f	class:isbn_mismatch
isbn_mismatch	c++_primer\source_code\GCC_pre_C11\18\bookexcept.h	/^class isbn_mismatch: public std::logic_error {$/;"	c
left	c++_primer\source_code\GCC_pre_C11\18\bookexcept.h	/^    const std::string left, right;$/;"	m	class:isbn_mismatch
out_of_stock	c++_primer\source_code\GCC_pre_C11\18\bookexcept.h	/^    explicit out_of_stock(const std::string &s):$/;"	f	class:out_of_stock
out_of_stock	c++_primer\source_code\GCC_pre_C11\18\bookexcept.h	/^class out_of_stock: public std::runtime_error {$/;"	c
right	c++_primer\source_code\GCC_pre_C11\18\bookexcept.h	/^    const std::string left, right;$/;"	m	class:isbn_mismatch
~isbn_mismatch	c++_primer\source_code\GCC_pre_C11\18\bookexcept.h	/^	~isbn_mismatch() throw() { }$/;"	f	class:isbn_mismatch
main	c++_primer\source_code\GCC_pre_C11\18\class.cc	/^int main()$/;"	f
compute	c++_primer\source_code\GCC_pre_C11\18\ex-over.cc	/^    void compute() { cout << "primerLib::compute()" << endl; }$/;"	f	namespace:primerLib
compute	c++_primer\source_code\GCC_pre_C11\18\ex-over.cc	/^    void compute(const void *) $/;"	f	namespace:primerLib
compute	c++_primer\source_code\GCC_pre_C11\18\ex-over.cc	/^void compute(char*, char* = 0)$/;"	f
compute	c++_primer\source_code\GCC_pre_C11\18\ex-over.cc	/^void compute(double, double = 3.4)$/;"	f
compute	c++_primer\source_code\GCC_pre_C11\18\ex-over.cc	/^void compute(int) { cout << "compute(int)" << endl; }$/;"	f
main	c++_primer\source_code\GCC_pre_C11\18\ex-over.cc	/^int main()$/;"	f
primerLib	c++_primer\source_code\GCC_pre_C11\18\ex-over.cc	/^namespace primerLib {$/;"	n	file:
Bulk_item	c++_primer\source_code\GCC_pre_C11\18\inherit.cc	/^	Bulk_item() { std::cout << "Bulk_item::Bulk_item" << std::endl; }$/;"	f	class:Bulk_item
Bulk_item	c++_primer\source_code\GCC_pre_C11\18\inherit.cc	/^class Bulk_item : public NS::Quote { $/;"	c	file:
NS	c++_primer\source_code\GCC_pre_C11\18\inherit.cc	/^namespace NS {$/;"	n	file:
Quote	c++_primer\source_code\GCC_pre_C11\18\inherit.cc	/^		Quote() { std::cout << "Quote::Quote" << std::endl; } $/;"	f	class:NS::Quote
Quote	c++_primer\source_code\GCC_pre_C11\18\inherit.cc	/^    class Quote { $/;"	c	namespace:NS	file:
display	c++_primer\source_code\GCC_pre_C11\18\inherit.cc	/^    void display(const Quote&) $/;"	f	namespace:NS
main	c++_primer\source_code\GCC_pre_C11\18\inherit.cc	/^int main() {$/;"	f
Base1	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^	Base1(): ival(1) { }$/;"	f	struct:Base1
Base1	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^struct Base1 {$/;"	s	file:
Base2	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^	Base2(): ival(2) { }$/;"	f	struct:Base2
Base2	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^struct Base2 {$/;"	s	file:
Derived	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^	Derived(): ival(3) { }$/;"	f	struct:Derived
Derived	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^struct Derived : public Base1 {$/;"	s	file:
MI	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^	MI(): ival(4) { }$/;"	f	struct:MI
MI	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^struct MI : public Derived, public Base2 {$/;"	s	file:
ival	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^	int ival;$/;"	m	struct:Derived	file:
ival	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^    int ival;$/;"	m	struct:Base1	file:
ival	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^    int ival;$/;"	m	struct:Base2	file:
ival	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^    int ival;$/;"	m	struct:MI	file:
main	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^int main()$/;"	f
print	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^    void print(double) const        \/\/ public by default$/;"	f	struct:Base2
print	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^    void print(int) const     \/\/ public by default$/;"	f	struct:Base1
print	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^    void print(std::string) const   \/\/ public by default$/;"	f	struct:Derived
print	c++_primer\source_code\GCC_pre_C11\18\mi-scope.cc	/^    void print(std::vector<double>) \/\/ public by default$/;"	f	struct:MI
libs_R_us	c++_primer\source_code\GCC_pre_C11\18\over.cc	/^namespace libs_R_us {$/;"	n	file:
main	c++_primer\source_code\GCC_pre_C11\18\over.cc	/^int main()$/;"	f
print	c++_primer\source_code\GCC_pre_C11\18\over.cc	/^    extern void print(double) $/;"	f	namespace:libs_R_us
print	c++_primer\source_code\GCC_pre_C11\18\over.cc	/^    extern void print(int) $/;"	f	namespace:libs_R_us
print	c++_primer\source_code\GCC_pre_C11\18\over.cc	/^void print(const std::string &)$/;"	f
AW	c++_primer\source_code\GCC_pre_C11\18\over2.cc	/^namespace AW {$/;"	n	file:
Primer	c++_primer\source_code\GCC_pre_C11\18\over2.cc	/^namespace Primer {$/;"	n	file:
main	c++_primer\source_code\GCC_pre_C11\18\over2.cc	/^int main() {$/;"	f
print	c++_primer\source_code\GCC_pre_C11\18\over2.cc	/^    double print(double d) $/;"	f	namespace:Primer
print	c++_primer\source_code\GCC_pre_C11\18\over2.cc	/^    int print(int i) $/;"	f	namespace:AW
A	c++_primer\source_code\GCC_pre_C11\18\usingDirective.cc	/^namespace A {$/;"	n	file:
blip	c++_primer\source_code\GCC_pre_C11\18\usingDirective.cc	/^namespace blip {$/;"	n	file:
f	c++_primer\source_code\GCC_pre_C11\18\usingDirective.cc	/^	void f() $/;"	f	namespace:blip
f	c++_primer\source_code\GCC_pre_C11\18\usingDirective.cc	/^void f() $/;"	f
i	c++_primer\source_code\GCC_pre_C11\18\usingDirective.cc	/^    int i = 0, j = 42;$/;"	m	namespace:A	file:
i	c++_primer\source_code\GCC_pre_C11\18\usingDirective.cc	/^    int i = 16, j = 15, k = 23;$/;"	m	namespace:blip	file:
j	c++_primer\source_code\GCC_pre_C11\18\usingDirective.cc	/^    int i = 0, j = 42;$/;"	m	namespace:A	file:
j	c++_primer\source_code\GCC_pre_C11\18\usingDirective.cc	/^    int i = 16, j = 15, k = 23;$/;"	m	namespace:blip	file:
j	c++_primer\source_code\GCC_pre_C11\18\usingDirective.cc	/^int j = 0;  \/\/ ok: j inside blip is hidden inside a namespace$/;"	v
k	c++_primer\source_code\GCC_pre_C11\18\usingDirective.cc	/^    int i = 16, j = 15, k = 23;$/;"	m	namespace:blip	file:
main	c++_primer\source_code\GCC_pre_C11\18\usingDirective.cc	/^int main() $/;"	f
dance	c++_primer\source_code\GCC_pre_C11\18\virt-inherit.cc	/^void dance(const Bear&) $/;"	f
main	c++_primer\source_code\GCC_pre_C11\18\virt-inherit.cc	/^int main ()$/;"	f
operator <<	c++_primer\source_code\GCC_pre_C11\18\virt-inherit.cc	/^ostream& operator<<(ostream&, const ZooAnimal&) $/;"	f
rummage	c++_primer\source_code\GCC_pre_C11\18\virt-inherit.cc	/^void rummage(const Raccoon&) $/;"	f
Menu	c++_primer\source_code\GCC_pre_C11\19\Screen.cc	/^Screen::Action Screen::Menu[] = { &Screen::home,$/;"	m	class:Screen	file:
Action	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^	typedef Screen&(Screen::*Action)();$/;"	t	class:Screen
BACK	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	e	enum:Screen::Directions
DOWN	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	e	enum:Screen::Directions
Directions	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	g	class:Screen
FORWARD	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	e	enum:Screen::Directions
HOME	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	e	enum:Screen::Directions
Menu	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    static Action Menu[];      \/\/ function table$/;"	m	class:Screen
SCREEN_H	c++_primer\source_code\GCC_pre_C11\19\Screen.h	31;"	d
Screen	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    Screen(pos ht = 0, pos wd = 0): contents(ht * wd, ' '), cursor(0), $/;"	f	class:Screen
Screen	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^class Screen {$/;"	c
UP	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	e	enum:Screen::Directions
back	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    Screen& back() { --cursor; return *this; }$/;"	f	class:Screen
contents	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    std::string contents;$/;"	m	class:Screen
cursor	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    pos cursor;$/;"	m	class:Screen
data	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^	static const std::string Screen::*data() $/;"	f	class:Screen::Screen
down	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    Screen& down() {cursor -= height; return *this; }$/;"	f	class:Screen
forward	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    Screen& forward() { ++cursor; return *this; }$/;"	f	class:Screen
get	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen
get	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^char Screen::get(pos r, pos c) const \/\/ declared as inline in the class$/;"	f	class:Screen
get_cursor	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^	char get_cursor() const { return contents[cursor]; }$/;"	f	class:Screen
height	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    pos height, width;$/;"	m	class:Screen
home	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    Screen& home() { cursor = 0; return *this; }$/;"	f	class:Screen
move	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^Screen& Screen::move(Directions cm)$/;"	f	class:Screen
pos	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    typedef std::string::size_type pos;$/;"	t	class:Screen
up	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    Screen& up() { cursor += height; return *this; }$/;"	f	class:Screen
width	c++_primer\source_code\GCC_pre_C11\19\Screen.h	/^    pos height, width;$/;"	m	class:Screen
QueryResult	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^TextQuery::QueryResult::QueryResult(string s, $/;"	f	class:TextQuery::QueryResult
QueryResult	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^class TextQuery::QueryResult {$/;"	c	class:TextQuery
TEXTQUERY_H	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	31;"	d
TextQuery	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^class TextQuery {$/;"	c
begin	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^	line_it begin() const { return lines->cbegin(); }$/;"	f	class:TextQuery::QueryResult
end	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^	line_it end() const   { return lines->cend(); }$/;"	f	class:TextQuery::QueryResult
file	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^	std::shared_ptr<std::vector<std::string>> file;  \/\/input file$/;"	m	class:TextQuery::QueryResult
file	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^    std::shared_ptr<std::vector<std::string>> file; \/\/ input file$/;"	m	class:TextQuery
get_file	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^	std::shared_ptr<std::vector<std::string>> get_file() { return file; }$/;"	f	class:TextQuery::QueryResult
line_it	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^	typedef std::set<line_no>::const_iterator line_it;$/;"	t	class:TextQuery::QueryResult
line_no	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^	typedef std::vector<std::string>::size_type line_no;$/;"	t	class:TextQuery
lines	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^	std::shared_ptr<std::set<line_no>> lines; \/\/ lines it's on$/;"	m	class:TextQuery::QueryResult
size	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^	std::set<line_no>::size_type size() const  { return lines->size(); }$/;"	f	class:TextQuery::QueryResult
sought	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^	std::string sought;  \/\/ word this query represents$/;"	m	class:TextQuery::QueryResult
static_mem	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^	static int static_mem;$/;"	m	class:TextQuery::QueryResult
whitespace_chars	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^    static std::string whitespace_chars;     $/;"	m	class:TextQuery
wm	c++_primer\source_code\GCC_pre_C11\19\TextQuery.h	/^	         std::shared_ptr<std::set<line_no>>> wm;  $/;"	m	class:TextQuery
CHAR	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^    enum {INT, CHAR, DBL, STR} tok; \/\/ discriminant$/;"	e	enum:Token::__anon34
DBL	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^    enum {INT, CHAR, DBL, STR} tok; \/\/ discriminant$/;"	e	enum:Token::__anon34
INT	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^    enum {INT, CHAR, DBL, STR} tok; \/\/ discriminant$/;"	e	enum:Token::__anon34
STR	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^    enum {INT, CHAR, DBL, STR} tok; \/\/ discriminant$/;"	e	enum:Token::__anon34
TOKEN_H	c++_primer\source_code\GCC_pre_C11\19\Token.h	35;"	d
Token	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^	Token(): tok(INT), ival{0} { }$/;"	f	class:Token
Token	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^	Token(const Token &t): tok(t.tok) { copyUnion(t); }$/;"	f	class:Token
Token	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^class Token {$/;"	c
copyUnion	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^void Token::copyUnion(const Token &t)$/;"	f	class:Token
cval	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^        char   cval;$/;"	m	union:Token::__anon35
dval	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^        double dval;$/;"	m	union:Token::__anon35
ival	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^        int    ival;$/;"	m	union:Token::__anon35
operator <<	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^std::ostream &operator<<(std::ostream &os, const Token &t)$/;"	f
operator =	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^Token &Token::operator=(char c)$/;"	f	class:Token
operator =	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^Token &Token::operator=(const Token &t)$/;"	f	class:Token
operator =	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^Token &Token::operator=(const std::string &s)$/;"	f	class:Token
operator =	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^Token &Token::operator=(double d)$/;"	f	class:Token
operator =	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^Token &Token::operator=(int i)$/;"	f	class:Token
sval	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^		std::string sval;$/;"	m	union:Token::__anon35
tok	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^    enum {INT, CHAR, DBL, STR} tok; \/\/ discriminant$/;"	m	class:Token	typeref:enum:Token::__anon34
~Token	c++_primer\source_code\GCC_pre_C11\19\Token.h	/^	~Token() { if (tok == STR) sval.~string(); }$/;"	f	class:Token
Bit	c++_primer\source_code\GCC_pre_C11\19\bitfields.cc	/^typedef unsigned int Bit;$/;"	t	file:
EXECUTE	c++_primer\source_code\GCC_pre_C11\19\bitfields.cc	/^	enum modes { READ = 01, WRITE = 02, EXECUTE = 03 };$/;"	e	enum:File::modes	file:
File	c++_primer\source_code\GCC_pre_C11\19\bitfields.cc	/^class File {$/;"	c	file:
READ	c++_primer\source_code\GCC_pre_C11\19\bitfields.cc	/^	enum modes { READ = 01, WRITE = 02, EXECUTE = 03 };$/;"	e	enum:File::modes	file:
WRITE	c++_primer\source_code\GCC_pre_C11\19\bitfields.cc	/^	enum modes { READ = 01, WRITE = 02, EXECUTE = 03 };$/;"	e	enum:File::modes	file:
close	c++_primer\source_code\GCC_pre_C11\19\bitfields.cc	/^void File::close()$/;"	f	class:File
isRead	c++_primer\source_code\GCC_pre_C11\19\bitfields.cc	/^inline bool File::isRead() const { return mode & READ; }$/;"	f	class:File
main	c++_primer\source_code\GCC_pre_C11\19\bitfields.cc	/^int main()$/;"	f
modes	c++_primer\source_code\GCC_pre_C11\19\bitfields.cc	/^	enum modes { READ = 01, WRITE = 02, EXECUTE = 03 };$/;"	g	class:File	file:
open	c++_primer\source_code\GCC_pre_C11\19\bitfields.cc	/^File &File::open(File::modes m)$/;"	f	class:File
setWrite	c++_primer\source_code\GCC_pre_C11\19\bitfields.cc	/^inline void File::setWrite() { mode |= WRITE; }$/;"	f	class:File
write	c++_primer\source_code\GCC_pre_C11\19\bitfields.cc	/^void File::write()$/;"	f	class:File
Lshift	c++_primer\source_code\GCC_pre_C11\19\calc.cc	/^	unsigned Lshift(unsigned op1, unsigned op2) $/;"	f	struct:ShiftOps
Rshift	c++_primer\source_code\GCC_pre_C11\19\calc.cc	/^	unsigned Rshift(unsigned op1, unsigned op2) $/;"	f	struct:ShiftOps
ShiftOps	c++_primer\source_code\GCC_pre_C11\19\calc.cc	/^	ShiftOps(std::ostream &o) : os(o) { }$/;"	f	struct:ShiftOps
ShiftOps	c++_primer\source_code\GCC_pre_C11\19\calc.cc	/^struct ShiftOps {$/;"	s	file:
add	c++_primer\source_code\GCC_pre_C11\19\calc.cc	/^int add(int i, int j) { return i + j; }$/;"	f
divide	c++_primer\source_code\GCC_pre_C11\19\calc.cc	/^struct divide {$/;"	s	file:
main	c++_primer\source_code\GCC_pre_C11\19\calc.cc	/^int main()$/;"	f
mod	c++_primer\source_code\GCC_pre_C11\19\calc.cc	/^int mod(int i, int j) { return i % j; };$/;"	f
mult	c++_primer\source_code\GCC_pre_C11\19\calc.cc	/^int mult(int i, int j) { return i * j; };$/;"	f
operator ()	c++_primer\source_code\GCC_pre_C11\19\calc.cc	/^    int operator()(int denominator, int divisor) {$/;"	f	struct:divide
os	c++_primer\source_code\GCC_pre_C11\19\calc.cc	/^	std::ostream &os;$/;"	m	struct:ShiftOps	file:
A	c++_primer\source_code\GCC_pre_C11\19\dyn_cast.cc	/^struct A { virtual ~A() { } };$/;"	s	file:
B	c++_primer\source_code\GCC_pre_C11\19\dyn_cast.cc	/^struct B : virtual public A { \/* . . . *\/ };$/;"	s	file:
Base	c++_primer\source_code\GCC_pre_C11\19\dyn_cast.cc	/^struct Base {$/;"	s	file:
C	c++_primer\source_code\GCC_pre_C11\19\dyn_cast.cc	/^struct C : public B { \/* . . . *\/ };$/;"	s	file:
D	c++_primer\source_code\GCC_pre_C11\19\dyn_cast.cc	/^struct D : public B, virtual public A { \/* . . . *\/ };$/;"	s	file:
Derived	c++_primer\source_code\GCC_pre_C11\19\dyn_cast.cc	/^struct Derived: public Base { };$/;"	s	file:
cast_to_ref	c++_primer\source_code\GCC_pre_C11\19\dyn_cast.cc	/^void cast_to_ref(const Base &b)$/;"	f
exercises	c++_primer\source_code\GCC_pre_C11\19\dyn_cast.cc	/^void exercises() {$/;"	f
main	c++_primer\source_code\GCC_pre_C11\19\dyn_cast.cc	/^int main()$/;"	f
~A	c++_primer\source_code\GCC_pre_C11\19\dyn_cast.cc	/^struct A { virtual ~A() { } };$/;"	f	struct:A
~Base	c++_primer\source_code\GCC_pre_C11\19\dyn_cast.cc	/^   virtual ~Base() {};$/;"	f	struct:Base
INLINE	c++_primer\source_code\GCC_pre_C11\19\enum-match.cc	/^enum Tokens {INLINE = 128, VIRTUAL = 129};$/;"	e	enum:Tokens	file:
Tokens	c++_primer\source_code\GCC_pre_C11\19\enum-match.cc	/^enum Tokens {INLINE = 128, VIRTUAL = 129};$/;"	g	file:
VIRTUAL	c++_primer\source_code\GCC_pre_C11\19\enum-match.cc	/^enum Tokens {INLINE = 128, VIRTUAL = 129};$/;"	e	enum:Tokens	file:
ff	c++_primer\source_code\GCC_pre_C11\19\enum-match.cc	/^void ff(Tokens) $/;"	f
ff	c++_primer\source_code\GCC_pre_C11\19\enum-match.cc	/^void ff(int) $/;"	f
main	c++_primer\source_code\GCC_pre_C11\19\enum-match.cc	/^int main() {$/;"	f
newf	c++_primer\source_code\GCC_pre_C11\19\enum-match.cc	/^void newf(int) $/;"	f
newf	c++_primer\source_code\GCC_pre_C11\19\enum-match.cc	/^void newf(unsigned char) $/;"	f
append	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^enum open_modes {input, output, append};$/;"	e	enum:open_modes	file:
charTyp	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^	charTyp = 8, shortTyp = 16, intTyp = 16, $/;"	e	enum:intTypes	file:
charVal	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^	charVal = 255, shortVal = 65535, intVal = 65535, $/;"	e	enum:intValues	file:
charbits	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^const intTypes charbits = charTyp;$/;"	v
input	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^enum open_modes {input, output, append};$/;"	e	enum:open_modes	file:
intTyp	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^	charTyp = 8, shortTyp = 16, intTyp = 16, $/;"	e	enum:intTypes	file:
intTypes	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^enum intTypes {$/;"	g	file:
intVal	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^	charVal = 255, shortVal = 65535, intVal = 65535, $/;"	e	enum:intValues	file:
intValues	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^enum intValues {$/;"	g	file:
longTyp	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^	longTyp = 32, long_longTyp = 64$/;"	e	enum:intTypes	file:
longVal	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^	longVal = 4294967295UL, $/;"	e	enum:intValues	file:
long_longTyp	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^	longTyp = 32, long_longTyp = 64$/;"	e	enum:intTypes	file:
long_longVal	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^	long_longVal = 18446744073709551615ULL$/;"	e	enum:intValues	file:
main	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^int main() $/;"	f
om	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^open_modes om = input; $/;"	v
open_modes	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^enum open_modes {input, output, append};$/;"	g	file:
output	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^enum open_modes {input, output, append};$/;"	e	enum:open_modes	file:
shortTyp	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^	charTyp = 8, shortTyp = 16, intTyp = 16, $/;"	e	enum:intTypes	file:
shortVal	c++_primer\source_code\GCC_pre_C11\19\enum.cc	/^	charVal = 255, shortVal = 65535, intVal = 65535, $/;"	e	enum:intValues	file:
main	c++_primer\source_code\GCC_pre_C11\19\memFN-bind.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\19\tok2.cc	/^int main()$/;"	f
Base	c++_primer\source_code\GCC_pre_C11\19\typeid.cc	/^struct Base {$/;"	s	file:
Derived	c++_primer\source_code\GCC_pre_C11\19\typeid.cc	/^struct Derived : Base { };$/;"	s	file:
main	c++_primer\source_code\GCC_pre_C11\19\typeid.cc	/^int main()$/;"	f
~Base	c++_primer\source_code\GCC_pre_C11\19\typeid.cc	/^    virtual ~Base() { }$/;"	f	struct:Base
main	c++_primer\source_code\GCC_pre_C11\19\useScreen.cc	/^int main ()$/;"	f
SALESITEM_H	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	39;"	d
Sales_item	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^    Sales_item(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_item
Sales_item	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^    Sales_item(const std::string &book):$/;"	f	class:Sales_item
Sales_item	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^    Sales_item(std::istream &is) { is >> *this; }$/;"	f	class:Sales_item
Sales_item	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^class Sales_item {$/;"	c
avg_price	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^double Sales_item::avg_price() const$/;"	f	class:Sales_item
bookNo	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^    std::string bookNo;      \/\/ implicitly initialized to the empty string$/;"	m	class:Sales_item
compareIsbn	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^bool compareIsbn(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
isbn	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^    std::string isbn() const { return bookNo; }$/;"	f	class:Sales_item
operator !=	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^operator!=(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator +	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^operator+(const Sales_item& lhs, const Sales_item& rhs)$/;"	f
operator +=	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^Sales_item& Sales_item::operator+=(const Sales_item& rhs)$/;"	f	class:Sales_item
operator <<	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^operator<<(std::ostream& out, const Sales_item& s)$/;"	f
operator ==	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^operator==(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator >>	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^operator>>(std::istream& in, Sales_item& s)$/;"	f
revenue	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^    double revenue;$/;"	m	class:Sales_item
units_sold	c++_primer\source_code\GCC_pre_C11\1\Sales_item.h	/^    unsigned units_sold;$/;"	m	class:Sales_item
main	c++_primer\source_code\GCC_pre_C11\1\add.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\1\add_item.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\1\add_item2.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\1\avg_price.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\1\for_ex.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\1\forcount.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\1\item_io.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\1\main_only.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\1\mysum.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\1\occurs.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\1\whilecount.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\2\Sales_data.cc	/^int main()$/;"	f
SALES_DATA_H	c++_primer\source_code\GCC_pre_C11\2\Sales_data.h	31;"	d
Sales_data	c++_primer\source_code\GCC_pre_C11\2\Sales_data.h	/^struct Sales_data {$/;"	s
bookNo	c++_primer\source_code\GCC_pre_C11\2\Sales_data.h	/^	std::string bookNo;$/;"	m	struct:Sales_data
revenue	c++_primer\source_code\GCC_pre_C11\2\Sales_data.h	/^	double revenue;$/;"	m	struct:Sales_data
units_sold	c++_primer\source_code\GCC_pre_C11\2\Sales_data.h	/^	unsigned units_sold;$/;"	m	struct:Sales_data
main	c++_primer\source_code\GCC_pre_C11\2\compounddecls.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\2\convs.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\2\dbl_ptr.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\2\decl-ex.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\2\escape.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_pre_C11\2\inits.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_pre_C11\2\literals.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\2\ref-ex.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\2\scope_levels.cc	/^int main()$/;"	f
reused	c++_primer\source_code\GCC_pre_C11\2\scope_levels.cc	/^int reused = 42;  \/\/ reused has global scope$/;"	v
main	c++_primer\source_code\GCC_pre_C11\2\unsigned.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\add_using.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\arrayScores.cc	/^int main ()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\cctype.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\char_repl.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\cstring_hdr.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\getline.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\hexify.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\multidim.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\ptr_traversal2.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\square.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\strcompare.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\string_add.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\string_io.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\string_io2.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\string_size.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\string_size2.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\string_size3.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\vecScores.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\vecStrings2.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\vecSubs.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\vec_decls.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\3\word_echo.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\4\arith-ex.cc	/^int main()$/;"	f
ia	c++_primer\source_code\GCC_pre_C11\4\arraysizeof.cc	/^int ia[] = {0,1,2,3,4,5,6,7,8,9};$/;"	v
main	c++_primer\source_code\GCC_pre_C11\4\arraysizeof.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\4\cond.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\4\incr.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\4\int-div.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\4\oofe.cc	/^int main()$/;"	f
tolower	c++_primer\source_code\GCC_pre_C11\4\oofe.cc	/^string &tolower(string &s)$/;"	f
toupper	c++_primer\source_code\GCC_pre_C11\4\oofe.cc	/^string &toupper(string &s)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\4\overflow.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\4\prec.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\4\shift-prec.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\4\sizeof_pgm.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\4\unaryOps.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\4\vec_init.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\4\warn_dbltoint.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\5\add_item2.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\5\doWhile.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\5\guess.cc	/^int main()$/;"	f
badVers	c++_primer\source_code\GCC_pre_C11\5\ifgrades.cc	/^string badVers(string lettergrade, unsigned grade)$/;"	f
goodVers	c++_primer\source_code\GCC_pre_C11\5\ifgrades.cc	/^string goodVers(string lettergrade, unsigned grade)$/;"	f
grades	c++_primer\source_code\GCC_pre_C11\5\ifgrades.cc	/^vector<unsigned> grades;$/;"	v
main	c++_primer\source_code\GCC_pre_C11\5\ifgrades.cc	/^int main()$/;"	f
rightVers	c++_primer\source_code\GCC_pre_C11\5\ifgrades.cc	/^string rightVers(string lettergrade, unsigned grade)$/;"	f
scores	c++_primer\source_code\GCC_pre_C11\5\ifgrades.cc	/^const string scores[] = {"F", "D", "C", "B", "A", "A++"};$/;"	v
main	c++_primer\source_code\GCC_pre_C11\5\othercnt.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\5\rangefor.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\5\vowels.cc	/^int main()$/;"	f
fact	c++_primer\source_code\GCC_pre_C11\6\LocalMath.cc	/^int fact(int val)$/;"	f
factorial	c++_primer\source_code\GCC_pre_C11\6\LocalMath.cc	/^int factorial(int val)$/;"	f
gcd	c++_primer\source_code\GCC_pre_C11\6\LocalMath.cc	/^int gcd(int v1, int v2)$/;"	f
LOCALMATH_H	c++_primer\source_code\GCC_pre_C11\6\LocalMath.h	32;"	d
arr	c++_primer\source_code\GCC_pre_C11\6\arrRet.cc	/^int arr[10];          \/\/ arr is an array of ten ints$/;"	v
arrPtr	c++_primer\source_code\GCC_pre_C11\6\arrRet.cc	/^int(*arrPtr(int i))[5]$/;"	f
arrRef	c++_primer\source_code\GCC_pre_C11\6\arrRet.cc	/^int (&arrRef(int i))[5]$/;"	f
arrT	c++_primer\source_code\GCC_pre_C11\6\arrRet.cc	/^typedef int arrT[10]; \/\/ arrT is a synonym for the type array of ten ints$/;"	t	file:
elemPtr	c++_primer\source_code\GCC_pre_C11\6\arrRet.cc	/^int *elemPtr(int i)$/;"	f
even	c++_primer\source_code\GCC_pre_C11\6\arrRet.cc	/^int even[] = {0,2,4,6,8};$/;"	v
main	c++_primer\source_code\GCC_pre_C11\6\arrRet.cc	/^int main()$/;"	f
odd	c++_primer\source_code\GCC_pre_C11\6\arrRet.cc	/^int odd[] = {1,3,5,7,9};$/;"	v
p1	c++_primer\source_code\GCC_pre_C11\6\arrRet.cc	/^int *p1[10];          \/\/ p1 is an array of ten pointers$/;"	v
p2	c++_primer\source_code\GCC_pre_C11\6\arrRet.cc	/^int (*p2)[10] = &arr; \/\/ p2 points to an array of ten ints$/;"	v
count_calls	c++_primer\source_code\GCC_pre_C11\6\count-calls.cc	/^size_t count_calls()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\6\count-calls.cc	/^int main() $/;"	f
ErrCode	c++_primer\source_code\GCC_pre_C11\6\errMsg_initList.cc	/^	ErrCode(int i) : num(i) { }  \/\/ initializes objects of type ErrCode$/;"	f	struct:ErrCode
ErrCode	c++_primer\source_code\GCC_pre_C11\6\errMsg_initList.cc	/^struct ErrCode { $/;"	s	file:
error_msg	c++_primer\source_code\GCC_pre_C11\6\errMsg_initList.cc	/^void error_msg(ErrCode e, const string *beg, const string *end)$/;"	f
error_msg	c++_primer\source_code\GCC_pre_C11\6\errMsg_initList.cc	/^void error_msg(const string *beg, const string *end)$/;"	f
functionX	c++_primer\source_code\GCC_pre_C11\6\errMsg_initList.cc	/^vector<string> functionX()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\6\errMsg_initList.cc	/^int main()$/;"	f
msg	c++_primer\source_code\GCC_pre_C11\6\errMsg_initList.cc	/^	string msg()                 \/\/ member function of ErrCode$/;"	f	struct:ErrCode
num	c++_primer\source_code\GCC_pre_C11\6\errMsg_initList.cc	/^	int num;  \/\/ data member, note uninitialized$/;"	m	struct:ErrCode	file:
main	c++_primer\source_code\GCC_pre_C11\6\fact.cc	/^int main()$/;"	f
getFcn	c++_primer\source_code\GCC_pre_C11\6\fcnptrRet.cc	/^(*getFcn(const string &fetch))(const string&, const string&)$/;"	f	class:string
largerLength	c++_primer\source_code\GCC_pre_C11\6\fcnptrRet.cc	/^string::size_type largerLength(const string &s1, const string &s2)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\6\fcnptrRet.cc	/^int main()$/;"	f
sumLength	c++_primer\source_code\GCC_pre_C11\6\fcnptrRet.cc	/^string::size_type sumLength(const string &s1, const string &s2)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\6\good_printmain.cc	/^int main() $/;"	f
print	c++_primer\source_code\GCC_pre_C11\6\good_printmain.cc	/^void print(const int ia[], size_t size) $/;"	f
main	c++_primer\source_code\GCC_pre_C11\6\inline_shorter.cc	/^int main()$/;"	f
shorterString	c++_primer\source_code\GCC_pre_C11\6\inline_shorter.cc	/^shorterString(const string &s1, const string &s2)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\6\mainmath.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\6\mainret.cc	/^int main()$/;"	f
MAKE_PLURAL_H	c++_primer\source_code\GCC_pre_C11\6\make_plural.h	40;"	d
make_plural	c++_primer\source_code\GCC_pre_C11\6\make_plural.h	/^string make_plural(size_t ctr, const string &word, $/;"	f
main	c++_primer\source_code\GCC_pre_C11\6\mk_plural.cc	/^int main()$/;"	f
PRINTFCNS_H	c++_primer\source_code\GCC_pre_C11\6\printFcns.h	31;"	d
foo	c++_primer\source_code\GCC_pre_C11\6\printFcns.h	/^inline foo() {$/;"	f
get_val	c++_primer\source_code\GCC_pre_C11\6\ref-fcn.cc	/^char &get_val(string &str, string::size_type ix) $/;"	f
main	c++_primer\source_code\GCC_pre_C11\6\ref-fcn.cc	/^int main() $/;"	f
find_char	c++_primer\source_code\GCC_pre_C11\6\refparms.cc	/^string::size_type find_char(const string &s, char c, $/;"	f
find_val	c++_primer\source_code\GCC_pre_C11\6\refparms.cc	/^vector<int>::const_iterator find_val($/;"	f
main	c++_primer\source_code\GCC_pre_C11\6\refparms.cc	/^int main() $/;"	f
get	c++_primer\source_code\GCC_pre_C11\6\refret-ex.cc	/^int &get(int *arry, int index) { return arry[index]; }$/;"	f
main	c++_primer\source_code\GCC_pre_C11\6\refret-ex.cc	/^int main() {$/;"	f
main	c++_primer\source_code\GCC_pre_C11\6\reset.cc	/^int main() $/;"	f
reset	c++_primer\source_code\GCC_pre_C11\6\reset.cc	/^void reset(int &i)  $/;"	f
reset	c++_primer\source_code\GCC_pre_C11\6\reset.cc	/^void reset(int *ip)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\6\stl-arr-fcns.cc	/^int main() $/;"	f
print	c++_primer\source_code\GCC_pre_C11\6\stl-arr-fcns.cc	/^void print(const char *cp)$/;"	f
print	c++_primer\source_code\GCC_pre_C11\6\stl-arr-fcns.cc	/^void print(const int *beg, const int *end) $/;"	f
main	c++_primer\source_code\GCC_pre_C11\6\use_mk_plural.cc	/^int main()$/;"	f
make_plural	c++_primer\source_code\GCC_pre_C11\6\use_mk_plural.cc	/^string make_plural(size_t ctr, const string &word, $/;"	f
main	c++_primer\source_code\GCC_pre_C11\6\usefcnptr.cc	/^int main() $/;"	f
min_element	c++_primer\source_code\GCC_pre_C11\6\usefcnptr.cc	/^int min_element(vector<int>::iterator beg, $/;"	f
pf	c++_primer\source_code\GCC_pre_C11\6\usefcnptr.cc	/^int (*pf)(vector<int>::iterator, vector<int>::iterator) $/;"	v
main	c++_primer\source_code\GCC_pre_C11\6\wdebug.cc	/^int main()$/;"	f
print	c++_primer\source_code\GCC_pre_C11\6\wdebug.cc	/^void print(const int ia[], size_t size)$/;"	f
interestRate	c++_primer\source_code\GCC_pre_C11\7\Account.cc	/^double Account::interestRate = initRate();$/;"	m	class:Account	file:
rate	c++_primer\source_code\GCC_pre_C11\7\Account.cc	/^void Account::rate(double newRate) $/;"	f	class:Account
ACCOUNT_H	c++_primer\source_code\GCC_pre_C11\7\Account.h	30;"	d
Account	c++_primer\source_code\GCC_pre_C11\7\Account.h	/^	Account(): amount(0.0) { }$/;"	f	class:Account
Account	c++_primer\source_code\GCC_pre_C11\7\Account.h	/^	Account(const std::string &s, double amt):$/;"	f	class:Account
Account	c++_primer\source_code\GCC_pre_C11\7\Account.h	/^class Account {$/;"	c
accountType	c++_primer\source_code\GCC_pre_C11\7\Account.h	/^    static const std::string accountType;$/;"	m	class:Account
amount	c++_primer\source_code\GCC_pre_C11\7\Account.h	/^    double amount;$/;"	m	class:Account
balance	c++_primer\source_code\GCC_pre_C11\7\Account.h	/^    double balance() { return amount; }$/;"	f	class:Account
calculate	c++_primer\source_code\GCC_pre_C11\7\Account.h	/^    void calculate() { amount += amount * interestRate; }$/;"	f	class:Account
daily_tbl	c++_primer\source_code\GCC_pre_C11\7\Account.h	/^    double daily_tbl[period];$/;"	m	class:Account
initRate	c++_primer\source_code\GCC_pre_C11\7\Account.h	/^    static double initRate() { return .0225; }$/;"	f	class:Account
interestRate	c++_primer\source_code\GCC_pre_C11\7\Account.h	/^    static double interestRate; $/;"	m	class:Account
owner	c++_primer\source_code\GCC_pre_C11\7\Account.h	/^    std::string owner; $/;"	m	class:Account
period	c++_primer\source_code\GCC_pre_C11\7\Account.h	/^    static const int period = 30;\/\/ period is a constant expression$/;"	m	class:Account
rate	c++_primer\source_code\GCC_pre_C11\7\Account.h	/^    static double rate() { return interestRate; }$/;"	f	class:Account
enable	c++_primer\source_code\GCC_pre_C11\7\Debug.cc	/^constexpr Debug HW_Subsystem::enable;$/;"	m	class:HW_Subsystem	file:
enable	c++_primer\source_code\GCC_pre_C11\7\Debug.cc	/^constexpr Debug IO_Subsystem::enable;$/;"	m	class:IO_Subsystem	file:
DEBUG_H	c++_primer\source_code\GCC_pre_C11\7\Debug.h	33;"	d
Debug	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	constexpr Debug(bool b = true): hw(b), io(b), other(b) { }$/;"	f	class:Debug
Debug	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	constexpr Debug(bool h, bool i, bool o): $/;"	f	class:Debug
Debug	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^class Debug {$/;"	c
HW_Subsystem	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	HW_Subsystem(): debug(false) { }          \/\/ by default no debugging$/;"	f	class:HW_Subsystem
HW_Subsystem	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^class HW_Subsystem {$/;"	c
IO_Subsystem	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	IO_Subsystem(): debug(false) { }          \/\/ by default no debugging$/;"	f	class:IO_Subsystem
IO_Subsystem	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^class IO_Subsystem {$/;"	c
any	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	constexpr bool any() { return hw || io || other; }$/;"	f	class:Debug
app	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	constexpr bool app() { return other; }$/;"	f	class:Debug
debug	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	Debug debug;$/;"	m	class:HW_Subsystem
debug	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	Debug debug;$/;"	m	class:IO_Subsystem
default_debug	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	bool default_debug()   { return enable.any() && debug.any(); }$/;"	f	class:IO_Subsystem
default_debug	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	bool default_debug() { return enable.any() && debug.any(); }$/;"	f	class:HW_Subsystem
field_debug	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	bool field_debug()     { return debug.any(); }$/;"	f	class:IO_Subsystem
field_debug	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	bool field_debug()   { return debug.any(); }$/;"	f	class:HW_Subsystem
hardware	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	constexpr bool hardware() { return hw || io; }$/;"	f	class:Debug
hw	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	bool hw;    \/\/ hardware errors other than IO errors$/;"	m	class:Debug
io	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	bool io;    \/\/ IO errors$/;"	m	class:Debug
other	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	bool other; \/\/ other errors$/;"	m	class:Debug
set_debug	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	void set_debug(bool b) { debug.set_hw(b); }  \/\/ turn on hardware debugging$/;"	f	class:HW_Subsystem
set_debug	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	void set_debug(bool b) { debug.set_io(b); }  \/\/ turn on IO debugging$/;"	f	class:IO_Subsystem
set_hw	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	void set_hw(bool b) { hw = b; }$/;"	f	class:Debug
set_io	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	void set_io(bool b) { io = b; }$/;"	f	class:Debug
set_other	c++_primer\source_code\GCC_pre_C11\7\Debug.h	/^	void set_other(bool b) { hw = b; }$/;"	f	class:Debug
Sales_data	c++_primer\source_code\GCC_pre_C11\7\Sales_data.cc	/^Sales_data::Sales_data(std::istream &is) $/;"	f	class:Sales_data
add	c++_primer\source_code\GCC_pre_C11\7\Sales_data.cc	/^add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
avg_price	c++_primer\source_code\GCC_pre_C11\7\Sales_data.cc	/^Sales_data::avg_price() const {$/;"	f	class:Sales_data
combine	c++_primer\source_code\GCC_pre_C11\7\Sales_data.cc	/^Sales_data::combine(const Sales_data &rhs)$/;"	f	class:Sales_data
print	c++_primer\source_code\GCC_pre_C11\7\Sales_data.cc	/^print(ostream &os, const Sales_data &item)$/;"	f
read	c++_primer\source_code\GCC_pre_C11\7\Sales_data.cc	/^read(istream &is, Sales_data &item)$/;"	f
SALES_DATA_H	c++_primer\source_code\GCC_pre_C11\7\Sales_data.h	31;"	d
Sales_data	c++_primer\source_code\GCC_pre_C11\7\Sales_data.h	/^	Sales_data(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\7\Sales_data.h	/^	Sales_data(const std::string &s): $/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\7\Sales_data.h	/^	Sales_data(const std::string &s, unsigned n, double p):$/;"	f	class:Sales_data
Sales_data	c++_primer\source_code\GCC_pre_C11\7\Sales_data.h	/^class Sales_data {$/;"	c
bookNo	c++_primer\source_code\GCC_pre_C11\7\Sales_data.h	/^	std::string bookNo;$/;"	m	class:Sales_data
compareIsbn	c++_primer\source_code\GCC_pre_C11\7\Sales_data.h	/^bool compareIsbn(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
isbn	c++_primer\source_code\GCC_pre_C11\7\Sales_data.h	/^	std::string isbn() const { return bookNo; }$/;"	f	class:Sales_data
revenue	c++_primer\source_code\GCC_pre_C11\7\Sales_data.h	/^	double revenue;$/;"	m	class:Sales_data
units_sold	c++_primer\source_code\GCC_pre_C11\7\Sales_data.h	/^	unsigned units_sold;$/;"	m	class:Sales_data
Screen	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^	Screen(): cursor(0), height(0), width(0) { }$/;"	f	class:Screen
Screen	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^    Screen(pos ht = 0, pos wd = 0): $/;"	f	class:Screen
Screen	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^    Screen(pos ht, pos wd, char c): cursor(0),$/;"	f	class:Screen
Screen	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^class Screen {$/;"	c
bkground	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^	static const char bkground = ' ';$/;"	m	class:Screen
clear	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^Screen &Screen::clear(char c) $/;"	f	class:Screen
contents	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^    std::string contents;$/;"	m	class:Screen
cursor	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^    pos cursor;$/;"	m	class:Screen
display	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^    Screen &display(std::ostream &os) $/;"	f	class:Screen
display	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^    const Screen &display(std::ostream &os) const$/;"	f	class:Screen
do_display	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^    void do_display(std::ostream &os) const {os << contents;}$/;"	f	class:Screen
get	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^    char get() const              \/\/ get the character at the cursor$/;"	f	class:Screen
get	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^char Screen::get(pos r, pos c) const \/\/ declared as inline in the class$/;"	f	class:Screen
height	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^    pos height, width;$/;"	m	class:Screen
move	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^Screen &Screen::move(pos r, pos c)$/;"	f	class:Screen
pos	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^    typedef std::string::size_type pos;$/;"	t	class:Screen
set	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^inline Screen &Screen::set(char c) $/;"	f	class:Screen
set	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^inline Screen &Screen::set(pos r, pos col, char ch)$/;"	f	class:Screen
width	c++_primer\source_code\GCC_pre_C11\7\Screen.h	/^    pos height, width;$/;"	m	class:Screen
ScreenIndex	c++_primer\source_code\GCC_pre_C11\7\WindowMgr.h	/^	typedef std::vector<Screen>::size_type ScreenIndex;$/;"	t	class:Window_mgr
WINDOW_MGR	c++_primer\source_code\GCC_pre_C11\7\WindowMgr.h	31;"	d
Window_mgr	c++_primer\source_code\GCC_pre_C11\7\WindowMgr.h	/^class Window_mgr {$/;"	c
addScreen	c++_primer\source_code\GCC_pre_C11\7\WindowMgr.h	/^Window_mgr::addScreen(const Screen &s)$/;"	f	class:Window_mgr
clear	c++_primer\source_code\GCC_pre_C11\7\WindowMgr.h	/^void Window_mgr::clear(ScreenIndex i)$/;"	f	class:Window_mgr
resize	c++_primer\source_code\GCC_pre_C11\7\WindowMgr.h	/^Window_mgr::resize(Screen::pos r, Screen::pos c, ScreenIndex i)$/;"	f	class:Window_mgr
main	c++_primer\source_code\GCC_pre_C11\7\add_item.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\7\avg_price.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\7\useAccount.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\7\useDebug.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\7\useScreen.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\8\add_item.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\8\add_itemV2.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\8\buf.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\8\clearIO.cc	/^int main()$/;"	f
off	c++_primer\source_code\GCC_pre_C11\8\clearIO.cc	/^void off()$/;"	f
read	c++_primer\source_code\GCC_pre_C11\8\clearIO.cc	/^void read()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\8\fileIO.cc	/^int main(int argc, char* argv[])$/;"	f
process	c++_primer\source_code\GCC_pre_C11\8\fileIO.cc	/^void process(ifstream &is)$/;"	f
PersonInfo	c++_primer\source_code\GCC_pre_C11\8\sstream.cc	/^struct PersonInfo { $/;"	s	file:
format	c++_primer\source_code\GCC_pre_C11\8\sstream.cc	/^string format(const string &s) { return s; }$/;"	f
getData	c++_primer\source_code\GCC_pre_C11\8\sstream.cc	/^getData(istream &is)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\8\sstream.cc	/^int main()$/;"	f
name	c++_primer\source_code\GCC_pre_C11\8\sstream.cc	/^	string name;$/;"	m	struct:PersonInfo	file:
phones	c++_primer\source_code\GCC_pre_C11\8\sstream.cc	/^	vector<string> phones;$/;"	m	struct:PersonInfo	file:
process	c++_primer\source_code\GCC_pre_C11\8\sstream.cc	/^ostream& process(ostream &os, vector<PersonInfo> people)$/;"	f
valid	c++_primer\source_code\GCC_pre_C11\8\sstream.cc	/^bool valid(const string &)$/;"	f
STRCONVS_H	c++_primer\source_code\GCC_pre_C11\9\StrConvs.h	2;"	d
stod	c++_primer\source_code\GCC_pre_C11\9\StrConvs.h	/^double stod(const std::string &s, std::size_t * = 0)$/;"	f
to_string	c++_primer\source_code\GCC_pre_C11\9\StrConvs.h	/^std::string to_string(int i)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\9\capacity.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\9\erase1.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\9\erase2.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\9\find-str.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\9\find_ops.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\9\refreshIter.cc	/^int main()$/;"	f
printVec	c++_primer\source_code\GCC_pre_C11\9\refreshIter.cc	/^void printVec(const vector<int> &vi)$/;"	f
main	c++_primer\source_code\GCC_pre_C11\9\stack.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\9\str_assignOps.cc	/^int main() $/;"	f
main	c++_primer\source_code\GCC_pre_C11\9\substr.cc	/^int main()$/;"	f
main	c++_primer\source_code\GCC_pre_C11\9\useConvs.cc	/^int main()$/;"	f
main	c\1.c	/^int main() {$/;"	f
N	c\1003.c	4;"	d	file:
main	c\1003.c	/^int main(int argc, char *argv[])$/;"	f
MAXLENS	c\C language\1.c	2;"	d	file:
main	c\C language\1.c	/^int main(){$/;"	f
MAXLENS	c\C language\vertical histogram.c	5;"	d	file:
main	c\C language\vertical histogram.c	/^int main(){$/;"	f
main	c\MOOC-c\1.c	/^int main(){$/;"	f
main	c\MOOC-c\10.c	/^int main(){$/;"	f
main	c\MOOC-c\11.c	/^int main(){$/;"	f
main	c\MOOC-c\12.c	/^int main(){$/;"	f
main	c\MOOC-c\13.c	/^int main(){$/;"	f
prime	c\MOOC-c\13.c	/^int prime(int n){$/;"	f
main	c\MOOC-c\14.c	/^int main(){$/;"	f
main	c\MOOC-c\15.c	/^int main(){$/;"	f
main	c\MOOC-c\16.c	/^int main(){$/;"	f
main	c\MOOC-c\17.c	/^int main(void) {$/;"	f
main	c\MOOC-c\18.c	/^int main(){$/;"	f
main	c\MOOC-c\19.c	/^int main(){$/;"	f
main	c\MOOC-c\2.c	/^int main(){$/;"	f
main	c\MOOC-c\20.c	/^int main(){$/;"	f
main	c\MOOC-c\21.c	/^int main(){$/;"	f
main	c\MOOC-c\22.c	/^int main(){$/;"	f
main	c\MOOC-c\23.c	/^int main(){$/;"	f
ping	c\MOOC-c\23.c	/^void ping(int n){$/;"	f
yin	c\MOOC-c\23.c	/^char *yin ( int digit){$/;"	f
main	c\MOOC-c\24.c	/^int main(){$/;"	f
ToF	c\MOOC-c\25.c	/^char *ToF(int n){$/;"	f
main	c\MOOC-c\25.c	/^int main(){$/;"	f
MAXNUM	c\MOOC-c\26.c	3;"	d	file:
assign	c\MOOC-c\26.c	/^void assign( int *p, int n){$/;"	f
main	c\MOOC-c\26.c	/^int main(){$/;"	f
prime	c\MOOC-c\26.c	/^int prime( int n ){$/;"	f
isPrime	c\MOOC-c\27.c	/^int isPrime(int n) {$/;"	f
main	c\MOOC-c\27.c	/^int main(void) {$/;"	f
MAX	c\MOOC-c\28.c	2;"	d	file:
main	c\MOOC-c\28.c	/^int main(){$/;"	f
main	c\MOOC-c\29.c	/^int main(){$/;"	f
main	c\MOOC-c\3.c	/^int main(){$/;"	f
COLUM	c\MOOC-c\30.c	3;"	d	file:
ROW	c\MOOC-c\30.c	2;"	d	file:
main	c\MOOC-c\30.c	/^int main(){$/;"	f
main	c\MOOC-c\31.c	/^int main(){$/;"	f
main	c\MOOC-c\4.c	/^int main(){$/;"	f
main	c\MOOC-c\5.c	/^int main(){$/;"	f
main	c\MOOC-c\6.c	/^int main(){$/;"	f
main	c\MOOC-c\7.c	/^int main(){$/;"	f
main	c\MOOC-c\8.c	/^int main(){$/;"	f
main	c\MOOC-c\9.c	/^int main(){$/;"	f
main	c\PAT-BASIC\1001.c	/^int main(){$/;"	f
main	c\PAT-BASIC\1002.c	/^int main(){$/;"	f
yin	c\PAT-BASIC\1002.c	/^void yin( int digit){$/;"	f
main	c\PAT-BASIC\1003.c	/^int main(){$/;"	f
main	c\PAT-BASIC\1004.c	/^int main(){$/;"	f
main	c\PAT-BASIC\1005.c	/^int main(){$/;"	f
main	c\PAT-BASIC\1006.c	/^int main(){$/;"	f
main	c\PAT-BASIC\1007.c	/^int main(){$/;"	f
prime	c\PAT-BASIC\1007.c	/^int prime( int n){$/;"	f
main	c\PAT-BASIC\1008.c	/^int main(){$/;"	f
main	c\PAT-BASIC\1009.c	/^int main(){$/;"	f
main	c\PAT-BASIC\1010.c	/^int main(){$/;"	f
main	c\PAT-BASIC\1011.c	/^int main(){$/;"	f
main	c\PAT-BASIC\1012.c	/^int main(){$/;"	f
main	c\PAT-BASIC\1013.c	/^int main(){$/;"	f
prime	c\PAT-BASIC\1013.c	/^int prime( int n ){$/;"	f
MAX_CHAR	c\PAT-BASIC\1014.c	2;"	d	file:
main	c\PAT-BASIC\1014.c	/^int main(){$/;"	f
C	c\PAT-BASIC\1015.c	/^  int C;$/;"	m	struct:candidate	file:
D	c\PAT-BASIC\1015.c	/^  int D;$/;"	m	struct:candidate	file:
MAX	c\PAT-BASIC\1015.c	2;"	d	file:
candidate	c\PAT-BASIC\1015.c	/^struct candidate$/;"	s	file:
main	c\PAT-BASIC\1015.c	/^int main() {$/;"	f
number	c\PAT-BASIC\1015.c	/^  long long number;$/;"	m	struct:candidate	file:
sp	c\PAT-BASIC\1015.c	/^void sp( struct candidate lv[], int count) {$/;"	f
sum	c\PAT-BASIC\1015.c	/^  int sum;$/;"	m	struct:candidate	file:
main	c\PAT-BASIC\test.c	/^int main(){$/;"	f
main	c\The former\1-i.c	/^int main(void)$/;"	f
main	c\The former\1.c	/^int main(void)$/;"	f
main	c\The former\2-1.c	/^int main(void)$/;"	f
main	c\The former\A-E.c	/^int main(void)$/;"	f
Ack	c\The former\ACK m n.c	/^int Ack(int m, int n){$/;"	f
main	c\The former\ACK m n.c	/^int main(void)$/;"	f
btos	c\The former\ADcho.c	/^void btos(int *p){$/;"	f
main	c\The former\ADcho.c	/^int main(){$/;"	f
stob	c\The former\ADcho.c	/^void stob(int *p){$/;"	f
main	c\The former\ASCLL.c	/^int main(void){$/;"	f
Ack	c\The former\Ackmn.c	/^int Ack(int m, int n){$/;"	f
main	c\The former\Ackmn.c	/^int main(void)$/;"	f
main	c\The former\B.c	/^int main(void)$/;"	f
main	c\The former\a+b.c	/^int main(void){$/;"	f
main	c\The former\add.c	/^int main(void){$/;"	f
dectobin	c\The former\binary.c	/^  void dectobin(int n){$/;"	f
main	c\The former\binary.c	/^int main(void)$/;"	f
f	c\The former\calc.c	/^     int f(int operand1,int operand2,char operator){$/;"	f
main	c\The former\calc.c	/^int main(void)$/;"	f
fact	c\The former\cos x.c	/^double fact(int n){$/;"	f
funcos	c\The former\cos x.c	/^double funcos(double e, double x){$/;"	f
main	c\The former\cos x.c	/^int main(void)$/;"	f
main	c\The former\cound of word.c	/^int main(void)$/;"	f
countdigit	c\The former\count digit in num.c	/^int countdigit(int number, int digit){$/;"	f
main	c\The former\count digit in num.c	/^int main(void)$/;"	f
_XOPEN_SOURCE	c\The former\crypt.c	1;"	d	file:
main	c\The former\crypt.c	/^       int main(){$/;"	f
main	c\The former\decimal--octal.c	/^int main(void)$/;"	f
dectobin	c\The former\dectobin.c	/^void dectobin(int n){$/;"	f
main	c\The former\dectobin.c	/^int main(void)$/;"	f
delchar	c\The former\delchar.c	/^void delchar(char *s, char c){$/;"	f
main	c\The former\delchar.c	/^int main(){$/;"	f
fi	c\The former\diamond.c	/^double fi(int n) {$/;"	f
main	c\The former\diamond.c	/^int main(void)$/;"	f
main	c\The former\digit.c	/^int main(){$/;"	f
dist	c\The former\distance.c	/^double dist(double x1, double y1, double x2, double y2){$/;"	f
main	c\The former\distance.c	/^int main(void)$/;"	f
main	c\The former\e.c	/^int main(void)$/;"	f
main	c\The former\electric.c	/^int main(void)$/;"	f
main	c\The former\encrypted.c	/^int main(void)$/;"	f
main	c\The former\englishwords.c	/^void main()$/;"	f
main	c\The former\f(x).c	/^int main(void)$/;"	f
fib	c\The former\fabonacci.c	/^long fib(int n){$/;"	f
main	c\The former\fabonacci.c	/^int main(void)$/;"	f
fact	c\The former\fact and fx.c	/^    double fact(int n){$/;"	f
fx	c\The former\fact and fx.c	/^    double fx(double x,int n){$/;"	f
main	c\The former\fact and fx.c	/^int main(void)$/;"	f
main	c\The former\factor.c	/^int main(void)$/;"	f
factorsum	c\The former\factorsum.c	/^    int factorsum(int number){$/;"	f
main	c\The former\factorsum.c	/^int main(void)$/;"	f
exits	c\The former\fator.c	/^void exits( char c){$/;"	f
facto	c\The former\fator.c	/^int facto(int n){$/;"	f
main	c\The former\fator.c	/^int main(){$/;"	f
main	c\The former\fflush.c	/^int main()$/;"	f
fib	c\The former\fibcosndf.c	/^long fib (int n){$/;"	f
main	c\The former\fibcosndf.c	/^int main(void)$/;"	f
fib	c\The former\fibonacci 1.c	/^   long fib(int n){$/;"	f
main	c\The former\fibonacci 1.c	/^int main(void)$/;"	f
fn	c\The former\fn a x.c	/^    long fn(int a, int n){$/;"	f
main	c\The former\fn a x.c	/^int main(void)$/;"	f
func	c\The former\funcs.c	/^float func(float x, int n){$/;"	f
main	c\The former\funcs.c	/^int main(){$/;"	f
fun	c\The former\funnx.c	/^double fun(int n, double x){$/;"	f
main	c\The former\funnx.c	/^int main(void)$/;"	f
main	c\The former\gcd and lcm.c	/^int main(void)$/;"	f
f	c\The former\gede.c	/^int f(int n){$/;"	f
main	c\The former\gede.c	/^int main(void)$/;"	f
main	c\The former\grade.c	/^int main(void)$/;"	f
hanio	c\The former\hanio.c	/^void hanio( int n, char a, char b, char c){$/;"	f
i	c\The former\hanio.c	/^int i=0;$/;"	v
main	c\The former\hanio.c	/^int main(){$/;"	f
main	c\The former\height.c	/^int main(void)$/;"	f
main	c\The former\hello.c	/^int main(){$/;"	f
MAX	c\The former\inventory.c	4;"	d	file:
cost	c\The former\inventory.c	/^float cost;$/;"	m	struct:inv	file:
del	c\The former\inventory.c	/^void del(void)$/;"	f
enter	c\The former\inventory.c	/^void enter(void)$/;"	f
find_free	c\The former\inventory.c	/^int find_free(void)$/;"	f
init_list	c\The former\inventory.c	/^void init_list(void)$/;"	f
inv	c\The former\inventory.c	/^struct inv {$/;"	s	file:
inv_info	c\The former\inventory.c	/^} inv_info[MAX];$/;"	v	typeref:struct:inv
item	c\The former\inventory.c	/^char item[30];$/;"	m	struct:inv	file:
list	c\The former\inventory.c	/^void list(void)$/;"	f
main	c\The former\inventory.c	/^int main(void)$/;"	f
menu_select	c\The former\inventory.c	/^int menu_select(void)$/;"	f
on_hand	c\The former\inventory.c	/^int on_hand;$/;"	m	struct:inv	file:
main	c\The former\letter and digit.c	/^int main(void)$/;"	f
main	c\The former\mcopy.c	/^int main(){$/;"	f
mcopy	c\The former\mcopy.c	/^void mcopy(char *s, char *t, int m){$/;"	f
main	c\The former\mnab.c	/^int main(){$/;"	f
main	c\The former\money.c	/^int main(void)$/;"	f
main	c\The former\name.c	/^int main(int argc, char *argv[])$/;"	f
is	c\The former\narcissus.c	/^    int is(int number){$/;"	f
main	c\The former\narcissus.c	/^int main(void)$/;"	f
main	c\The former\odd.c	/^int main(void)$/;"	f
main	c\The former\p-n-x.c	/^int main(void)$/;"	f
p	c\The former\p-n-x.c	/^double p(int n, double x){$/;"	f
main	c\The former\pointer.c	/^int main(void)$/;"	f
main	c\The former\prime factor.c	/^int main(void)$/;"	f
main	c\The former\prime1.c	/^int main(void)$/;"	f
prime	c\The former\prime1.c	/^    int prime(int m){$/;"	f
main	c\The former\pyramid.c	/^int main(void)$/;"	f
pyramid	c\The former\pyramid.c	/^    void pyramid(int n){$/;"	f
main	c\The former\reverse.c	/^int main(void)$/;"	f
reverse	c\The former\reverse.c	/^void reverse(int n){$/;"	f
main	c\The former\ride.c	/^main () {$/;"	f
main	c\The former\shabi.c	/^int main(){$/;"	f
main	c\The former\sum rec.c	/^int main(){$/;"	f
sum	c\The former\sum rec.c	/^int sum( int n){$/;"	f
main	c\The former\sum2.c	/^int main(){$/;"	f
sum	c\The former\sum2.c	/^int sum( int n){$/;"	f
main	c\The former\tax.c	/^int main(void)$/;"	f
main	c\The former\taxi.c	/^int main(void)$/;"	f
dgf	c\The former\test.c	/^void dgf(long int x)$/;"	f
main	c\The former\test.c	/^int main(void)$/;"	f
SPACE	c\The former\tic-tac.c	4;"	d	file:
check	c\The former\tic-tac.c	/^char check(void)$/;"	f
disp_matrix	c\The former\tic-tac.c	/^void disp_matrix(void)$/;"	f
get_computer_move	c\The former\tic-tac.c	/^void get_computer_move(void)$/;"	f
get_player_move	c\The former\tic-tac.c	/^void get_player_move(void)$/;"	f
main	c\The former\tic-tac.c	/^int main(void)$/;"	f
matrix	c\The former\tic-tac.c	/^char matrix[3][3] = { \/* the tic-tac-toe matrix *\/$/;"	v
main	c\The former\time.c	/^int main(void)$/;"	f
DELAY	c\The former\timer.c	6;"	d	file:
display	c\The former\timer.c	/^void display(struct my_time *t)$/;"	f
hours	c\The former\timer.c	/^int hours;$/;"	m	struct:my_time	file:
main	c\The former\timer.c	/^int main(void)$/;"	f
minutes	c\The former\timer.c	/^int minutes;$/;"	m	struct:my_time	file:
my_time	c\The former\timer.c	/^struct my_time {$/;"	s	file:
mydelay	c\The former\timer.c	/^void mydelay(void)$/;"	f
seconds	c\The former\timer.c	/^int seconds;$/;"	m	struct:my_time	file:
update	c\The former\timer.c	/^void update(struct my_time *t)$/;"	f
main	c\The former\tsx2.c	/^int main(void)$/;"	f
main	c\The former\wild input.c	/^int main(void)$/;"	f
main	c\The former\x-3.c	/^int main(void)$/;"	f
main	c\The former\x^2.c	/^int main(void)$/;"	f
fun	c\The former\x^n.c	/^double fun(int n, double x){$/;"	f
main	c\The former\x^n.c	/^int main(void)$/;"	f
main	c\The former\year.c	/^int main(void)$/;"	f
func	c\The former\zhengxu.c	/^void func(long long int n){$/;"	f
main	c\The former\zhengxu.c	/^int main(){$/;"	f
main	c\The former\ǰ���С.c	/^int main(void)$/;"	f
main	c\The former\ȥ������.c	/^int main(void)$/;"	f
MAXLEN	c\The former\ʮ��.c	3;"	d	file:
main	c\The former\ʮ��.c	/^int main(void)$/;"	f
MAXLEN	c\The former\ͳ�Ƹ���.c	2;"	d	file:
main	c\The former\ͳ�Ƹ���.c	/^int main(void)$/;"	f
main	c\The former\�ƶ�����.c	/^int main(){$/;"	f
mov	c\The former\�ƶ�����.c	/^void mov(int *a, int n, int m){$/;"	f
main	c\The former\�ж�λ���͸�λ֮��.c	/^int main(void)$/;"	f
MAXLEN	c\The former\�ַ������ַ�.c	2;"	d	file:
main	c\The former\�ַ������ַ�.c	/^int main(void)$/;"	f
main	c\The former\�弶����.c	/^int main(){$/;"	f
main	c\The former\�弶����2.c	/^int main(void)$/;"	f
main	c\The former\�鵥��.c	/^int main()$/;"	f
main	c\The former\��i��֮һ�ĺ�.c	/^int main()$/;"	f
main	c\The former\��n��.c	/^int main()$/;"	f
main	c\The former\��ȫƽ����.c	/^int main(void)$/;"	f
search	c\The former\��ȫƽ����.c	/^int search(int n){$/;"	f
f	c\The former\��˰��.c	/^double f(double rate,double deduction,double salary){$/;"	f
main	c\The former\��˰��.c	/^int main()$/;"	f
tax	c\The former\��˰��.c	/^double tax;$/;"	v
MAXLEN	c\The former\��дӳ��.c	3;"	d	file:
main	c\The former\��дӳ��.c	/^int main(void)$/;"	f
day_of_year	c\The former\��ڼ���.c	/^int day_of_year(int year, int month, int day){$/;"	f
main	c\The former\��ڼ���.c	/^int main(void)$/;"	f
fact	c\The former\���.c	/^long int fact(int n){$/;"	f
main	c\The former\���.c	/^int main()$/;"	f
main	c\The former\���.c	/^int main(void)$/;"	f
main	c\The former\���2.c	/^int main()$/;"	f
main	c\The former\���4.c	/^int main()$/;"	f
main	c\The former\���5.c	/^int main()$/;"	f
main	c\The former\���ɱ�.c	/^int main(void)$/;"	f
main	c\The former\���ֵ���±�.c	/^int main( )$/;"	f
main	c\The former\���ֵ�������.c	/^int main(void)$/;"	f
main	c\The former\����.c	/^int main(void)$/;"	f
main	c\The former\����.c	/^void main() $/;"	f
main	c\The former\����.c	/^int main(void)$/;"	f
main	c\The former\����.c	/^int main(){$/;"	f
main	c\The former\����.c	/^int main(void){$/;"	f
main	c\The former\����.c	/^int main(){$/;"	f
main	c\The former\����.c	/^int main(void){$/;"	f
main	c\The former\����.c	/^int main(void)$/;"	f
reverse	c\The former\����.c	/^void reverse(int n){$/;"	f
search	c\The former\����.c	/^void search (int *a, int n, int x){$/;"	f
main	c\The former\����2.c	/^void main() $/;"	f
main	c\The former\�����Խ���.c	/^int main(void)$/;"	f
dectobin	c\The former\������.c	/^  void dectobin(int n){$/;"	f
main	c\The former\������.c	/^int main(void)$/;"	f
main	c\The former\������.c	/^int main(void){$/;"	f
main	c\The former\������.c	/^int main(void)$/;"	f
main	c\The former\������ĸ.c	/^int main(void)$/;"	f
MAXLEN	c\The former\������ĸ���ֵĴ���.c	2;"	d	file:
main	c\The former\������ĸ���ֵĴ���.c	/^int main(void)$/;"	f
main	c\The former\�������.c	/^int main(void)   $/;"	f
main	c\The former\�������¶�.c	/^int main()$/;"	f
main	c\The former\�������к�.c	/^int main(void)$/;"	f
main	c\The former\�������ֽ�2.c	/^int main(void){$/;"	f
main	c\The former\��������.c	/^int main(void)$/;"	f
main	c\The former\�����������.c	/^int main(void)$/;"	f
main	c\The former\������������.c	/^int main(void)$/;"	f
main	c\The former\�������������С������.c	/^int main(void)$/;"	f
DeCipherHuffmanCode	c\homework\1234\main.c	/^void DeCipherHuffmanCode(HuffmanCode &HC,HuffmanTree &HT, int *w, int n){$/;"	f
ERROR	c\homework\1234\main.c	11;"	d	file:
FALSE	c\homework\1234\main.c	7;"	d	file:
HTNode	c\homework\1234\main.c	/^} HTNode, *HuffmanTree;  \/\/�ṹ�ͽṹָ�룬���ڶ�̬����ṹ����洢�շ�����$/;"	t	typeref:struct:__anon1	file:
HuffmanCode	c\homework\1234\main.c	/^typedef char **HuffmanCode; \/\/�ַ�ָ���ָ�룬���ڶ�̬����ָ������洢�շ��������$/;"	t	file:
HuffmanCoding	c\homework\1234\main.c	/^void HuffmanCoding(HuffmanTree &HT, HuffmanCode &HC, int *w, int n)$/;"	f
HuffmanTree	c\homework\1234\main.c	/^} HTNode, *HuffmanTree;  \/\/�ṹ�ͽṹָ�룬���ڶ�̬����ṹ����洢�շ�����$/;"	t	typeref:struct:__anon1	file:
NULL	c\homework\1234\main.c	8;"	d	file:
OK	c\homework\1234\main.c	10;"	d	file:
OVERFLOW	c\homework\1234\main.c	9;"	d	file:
Status	c\homework\1234\main.c	/^typedef int Status;$/;"	t	file:
TRUE	c\homework\1234\main.c	6;"	d	file:
lchild	c\homework\1234\main.c	/^	unsigned int parent,lchild,rchild;$/;"	m	struct:__anon1	file:
main	c\homework\1234\main.c	/^int main()$/;"	f
parent	c\homework\1234\main.c	/^	unsigned int parent,lchild,rchild;$/;"	m	struct:__anon1	file:
rchild	c\homework\1234\main.c	/^	unsigned int parent,lchild,rchild;$/;"	m	struct:__anon1	file:
weight	c\homework\1234\main.c	/^	unsigned int weight;$/;"	m	struct:__anon1	file:
DeQueue	c\homework\123\main.c	/^struct TNode* DeQueue(struct Queue *Q){$/;"	f
EnQueue	c\homework\123\main.c	/^void EnQueue(struct Queue *Q, struct TNode *node){$/;"	f
InitQueue	c\homework\123\main.c	/^void InitQueue(struct Queue *Q){$/;"	f
QNode	c\homework\123\main.c	/^struct QNode{$/;"	s	file:
Queue	c\homework\123\main.c	/^struct Queue{$/;"	s	file:
TNode	c\homework\123\main.c	/^struct TNode{$/;"	s	file:
createLR	c\homework\123\main.c	/^void createLR(struct TNode *node){$/;"	f
front	c\homework\123\main.c	/^    struct QNode *front;$/;"	m	struct:Queue	typeref:struct:Queue::QNode	file:
left	c\homework\123\main.c	/^    struct TNode *left;$/;"	m	struct:TNode	typeref:struct:TNode::TNode	file:
main	c\homework\123\main.c	/^int main(int argc, char **argv){$/;"	f
next	c\homework\123\main.c	/^    struct QNode *next;$/;"	m	struct:QNode	typeref:struct:QNode::QNode	file:
p	c\homework\123\main.c	/^    struct TNode *p;$/;"	m	struct:QNode	typeref:struct:QNode::TNode	file:
rear	c\homework\123\main.c	/^    struct QNode *rear;$/;"	m	struct:Queue	typeref:struct:Queue::QNode	file:
right	c\homework\123\main.c	/^    struct TNode *right;$/;"	m	struct:TNode	typeref:struct:TNode::TNode	file:
value	c\homework\123\main.c	/^    int value;$/;"	m	struct:TNode	file:
DeCipherHuffmanCode	c\homework\2312\main.cpp	/^void DeCipherHuffmanCode(HuffmanCode &HC,HuffmanTree &HT, int *w, int n){$/;"	f
ERROR	c\homework\2312\main.cpp	11;"	d	file:
FALSE	c\homework\2312\main.cpp	7;"	d	file:
HTNode	c\homework\2312\main.cpp	/^} HTNode, *HuffmanTree;  \/\/�ṹ�ͽṹָ�룬���ڶ�̬����ṹ����洢�շ�����$/;"	t	typeref:struct:__anon2	file:
HuffmanCode	c\homework\2312\main.cpp	/^typedef char **HuffmanCode; \/\/�ַ�ָ���ָ�룬���ڶ�̬����ָ������洢�շ��������$/;"	t	file:
HuffmanCoding	c\homework\2312\main.cpp	/^void HuffmanCoding(HuffmanTree &HT, HuffmanCode &HC, int *w, int n)$/;"	f
HuffmanTree	c\homework\2312\main.cpp	/^} HTNode, *HuffmanTree;  \/\/�ṹ�ͽṹָ�룬���ڶ�̬����ṹ����洢�շ�����$/;"	t	typeref:struct:__anon2	file:
NULL	c\homework\2312\main.cpp	8;"	d	file:
OK	c\homework\2312\main.cpp	10;"	d	file:
OVERFLOW	c\homework\2312\main.cpp	9;"	d	file:
Status	c\homework\2312\main.cpp	/^typedef int Status;$/;"	t	file:
TRUE	c\homework\2312\main.cpp	6;"	d	file:
lchild	c\homework\2312\main.cpp	/^	unsigned int parent,lchild,rchild;$/;"	m	struct:__anon2	file:
main	c\homework\2312\main.cpp	/^int main()$/;"	f
parent	c\homework\2312\main.cpp	/^	unsigned int parent,lchild,rchild;$/;"	m	struct:__anon2	file:
rchild	c\homework\2312\main.cpp	/^	unsigned int parent,lchild,rchild;$/;"	m	struct:__anon2	file:
weight	c\homework\2312\main.cpp	/^	unsigned int weight;$/;"	m	struct:__anon2	file:
INCREMENT	c\homework\= =\main.cpp	4;"	d	file:
MAXSIZE	c\homework\= =\main.cpp	3;"	d	file:
MakeNext	c\homework\= =\main.cpp	/^void MakeNext(int *s, int *next){$/;"	f
OVERFLOW	c\homework\= =\main.cpp	5;"	d	file:
input	c\homework\= =\main.cpp	/^void input(int * &d, int &lenth){$/;"	f
main	c\homework\= =\main.cpp	/^int main(){$/;"	f
replace	c\homework\= =\main.cpp	/^void replace(int *s,int *t,int *v,int *next){$/;"	f
INCREMENT	c\homework\QAQQ\main.cpp	4;"	d	file:
MAXSIZE	c\homework\QAQQ\main.cpp	3;"	d	file:
MakeNext	c\homework\QAQQ\main.cpp	/^void MakeNext(int *s, int *next){$/;"	f
OVERFLOW	c\homework\QAQQ\main.cpp	5;"	d	file:
input	c\homework\QAQQ\main.cpp	/^void input(int * &d, int &lenth){$/;"	f
main	c\homework\QAQQ\main.cpp	/^int main(){$/;"	f
replace	c\homework\QAQQ\main.cpp	/^void replace(int *s,int *t,int *v,int *next){$/;"	f
DeQueue	c\homework\homework\main.cpp	/^Status DeQueue(LinkQueue &Q, Info &e) {\/\/ȡ��ͷԪ�ظ�e����ͷ���ƣ����ӣ�$/;"	f
DestroyQueue	c\homework\homework\main.cpp	/^Status DestroyQueue(QNode a[]){\/\/���ٶ���$/;"	f
ERROR	c\homework\homework\main.cpp	10;"	d	file:
EnQueue	c\homework\homework\main.cpp	/^Status EnQueue(LinkQueue &Q, Info e) {\/\/��e��ֵ�Ŷ�β�����ӣ�$/;"	f
FALQE	c\homework\homework\main.cpp	6;"	d	file:
Info	c\homework\homework\main.cpp	/^typedef char Info;$/;"	t	file:
InitQueue	c\homework\homework\main.cpp	/^Status InitQueue(LinkQueue &Q,QNode a[]) {\/\/����һ���ն���$/;"	f
LENTH	c\homework\homework\main.cpp	11;"	d	file:
LinkQueue	c\homework\homework\main.cpp	/^} LinkQueue;$/;"	t	typeref:struct:__anon3	file:
NULL	c\homework\homework\main.cpp	7;"	d	file:
OK	c\homework\homework\main.cpp	9;"	d	file:
OVERFLOW	c\homework\homework\main.cpp	8;"	d	file:
PrintQueue	c\homework\homework\main.cpp	/^void PrintQueue(LinkQueue &Q){\/\/��ӡ���е�����$/;"	f
QNode	c\homework\homework\main.cpp	/^struct QNode{$/;"	s	file:
QueuePrt	c\homework\homework\main.cpp	/^typedef QNode  *QueuePrt;$/;"	t	file:
Status	c\homework\homework\main.cpp	/^typedef int Status;$/;"	t	file:
TRUE	c\homework\homework\main.cpp	5;"	d	file:
data	c\homework\homework\main.cpp	/^	Info  data;    \/\/��Ϣ$/;"	m	struct:QNode	file:
front	c\homework\homework\main.cpp	/^	QueuePrt front;  \/\/��ͷָ��$/;"	m	struct:__anon3	file:
main	c\homework\homework\main.cpp	/^int main(){$/;"	f
next	c\homework\homework\main.cpp	/^    struct QNode  *next;   \/\/��һ���ָ��$/;"	m	struct:QNode	typeref:struct:QNode::QNode	file:
rear	c\homework\homework\main.cpp	/^	QueuePrt rear;   \/\/��βָ��$/;"	m	struct:__anon3	file:
DeQueue	c\homework\oqoe\main.cpp	/^TNode* DeQueue(Queue &Q) {\/\/ȡ��ͷԪ�ظ�e����ͷ���ƣ����ӣ�$/;"	f
DestroyQueue	c\homework\oqoe\main.cpp	/^int DestroyQueue(Queue &Q){\/\/���ٶ���$/;"	f
ERROR	c\homework\oqoe\main.cpp	10;"	d	file:
EnQueue	c\homework\oqoe\main.cpp	/^int EnQueue(Queue &Q, TNode e) {\/\/��e��ֵ�Ŷ�β�����ӣ�$/;"	f
FALQE	c\homework\oqoe\main.cpp	6;"	d	file:
FR	c\homework\oqoe\main.cpp	/^	int FR;  \/\/��ͷָ��$/;"	m	struct:__anon4	file:
InitQueue	c\homework\oqoe\main.cpp	/^int InitQueue(Queue &Q) {\/\/����һ���ն���$/;"	f
LENTH	c\homework\oqoe\main.cpp	11;"	d	file:
NULL	c\homework\oqoe\main.cpp	7;"	d	file:
OK	c\homework\oqoe\main.cpp	9;"	d	file:
OVERFLOW	c\homework\oqoe\main.cpp	8;"	d	file:
PreOrder_Creat_BinTree	c\homework\oqoe\main.cpp	/^int PreOrder_Creat_BinTree(TNode *Root){$/;"	f
PrintQueue	c\homework\oqoe\main.cpp	/^void PrintQueue(Queue &Q){\/\/��ӡ���е�����$/;"	f
Queue	c\homework\oqoe\main.cpp	/^} Queue;$/;"	t	typeref:struct:__anon4	file:
QueueLenth	c\homework\oqoe\main.cpp	/^int QueueLenth(Queue Q){$/;"	f
TNode	c\homework\oqoe\main.cpp	/^typedef struct TNode{$/;"	s	file:
TNode	c\homework\oqoe\main.cpp	/^}TNode;$/;"	t	typeref:struct:TNode	file:
TRUE	c\homework\oqoe\main.cpp	5;"	d	file:
base	c\homework\oqoe\main.cpp	/^	TNode *base;$/;"	m	struct:__anon4	file:
data	c\homework\oqoe\main.cpp	/^	char data;$/;"	m	struct:TNode	file:
left	c\homework\oqoe\main.cpp	/^	struct TNode *left;$/;"	m	struct:TNode	typeref:struct:TNode::TNode	file:
main	c\homework\oqoe\main.cpp	/^int main(){$/;"	f
rear	c\homework\oqoe\main.cpp	/^	int rear;   \/\/��βָ��$/;"	m	struct:__anon4	file:
right	c\homework\oqoe\main.cpp	/^	struct TNode *right;$/;"	m	struct:TNode	typeref:struct:TNode::TNode	file:
DeQueue	c\homework\tat\main.c	/^TNode * DeQueue(Queue *Q){$/;"	f
ERROR	c\homework\tat\main.c	3;"	d	file:
EnQueue	c\homework\tat\main.c	/^void EnQueue(Queue *Q, TNode *node){$/;"	f
InitQueue	c\homework\tat\main.c	/^void InitQueue(Queue *Q){$/;"	f
PreOrder_Creat_BinTree	c\homework\tat\main.c	/^int PreOrder_Creat_BinTree(TNode *Root){$/;"	f
QNode	c\homework\tat\main.c	/^}QNode;$/;"	t	typeref:struct:QNode_type	file:
QNode_type	c\homework\tat\main.c	/^typedef struct QNode_type{$/;"	s	file:
Queue	c\homework\tat\main.c	/^}Queue;$/;"	t	typeref:struct:__anon5	file:
TNode	c\homework\tat\main.c	/^}TNode;$/;"	t	typeref:struct:TNode_type	file:
TNode_type	c\homework\tat\main.c	/^typedef struct TNode_type{$/;"	s	file:
data	c\homework\tat\main.c	/^	char data;$/;"	m	struct:TNode_type	file:
front	c\homework\tat\main.c	/^	QNode *front;$/;"	m	struct:__anon5	file:
left	c\homework\tat\main.c	/^	struct TNode_type *left;$/;"	m	struct:TNode_type	typeref:struct:TNode_type::TNode_type	file:
main	c\homework\tat\main.c	/^int main(){$/;"	f
nd	c\homework\tat\main.c	/^	TNode *nd;$/;"	m	struct:QNode_type	file:
next	c\homework\tat\main.c	/^	struct QNode_type *next;$/;"	m	struct:QNode_type	typeref:struct:QNode_type::QNode_type	file:
rear	c\homework\tat\main.c	/^	QNode *rear;$/;"	m	struct:__anon5	file:
right	c\homework\tat\main.c	/^	struct TNode_type *right;$/;"	m	struct:TNode_type	typeref:struct:TNode_type::TNode_type	file:
MAXLINE	c\line.c	2;"	d	file:
copy	c\line.c	/^void copy(char to[], char from[])$/;"	f
getline	c\line.c	/^int getline(char s[], int lim)$/;"	f
main	c\line.c	/^main()$/;"	f
main	c\test.c	/^int main() {$/;"	f
main	c\test2.c	/^int main() {$/;"	f
main	c\the 10th\10.1.c	/^int main(void)$/;"	f
day_of_year	c\the 10th\10.2.c	/^int day_of_year(int year, int month, int day){$/;"	f
main	c\the 10th\10.2.c	/^int main(void)$/;"	f
MAXLEN	c\the 10th\10.3.c	2;"	d	file:
main	c\the 10th\10.3.c	/^int main(void)$/;"	f
MAXLEN	c\the 10th\10.4.c	3;"	d	file:
main	c\the 10th\10.4.c	/^int main(void)$/;"	f
MAXLEN	c\the 10th\10.5.c	3;"	d	file:
main	c\the 10th\10.5.c	/^int main(void)$/;"	f
main	c\the 10th\10.6.c	/^int main(void)$/;"	f
main	c\the 11th\11.1.c	/^int main(void)$/;"	f
main	c\the 11th\11.2.c	/^int main(void)$/;"	f
pyramid	c\the 11th\11.2.c	/^void pyramid(int n) {$/;"	f
main	c\the 11th\11.3.c	/^int main(void)$/;"	f
search	c\the 11th\11.3.c	/^int search(int list[],int n,int x){$/;"	f
main	c\the 11th\11.4.c	/^int main(void)$/;"	f
PDN	c\the 12th\(����)circulr.c	/^void PDN(int *a, int k, int n) {$/;"	f
main	c\the 12th\(����)circulr.c	/^int main() {$/;"	f
output	c\the 12th\(����)circulr.c	/^int output( int *a, int m, int k, int n) {$/;"	f
main	c\the 12th\sequence.c	/^int main(){$/;"	f
delchar	c\the 12th\ɾ���ַ������ַ�.c	/^void delchar(char *str, char c){$/;"	f
main	c\the 12th\ɾ���ַ������ַ�.c	/^void main()$/;"	f
main	c\the 12th\ѭ���ƶ�����.c	/^int main(void)$/;"	f
mov	c\the 12th\ѭ���ƶ�����.c	/^void mov(int *x, int n, int m){$/;"	f
main	c\the 12th\ԲȦ����.c	/^int main(void)$/;"	f
main	c\the 12th\����.c	/^void main()$/;"	f
mirror	c\the 12th\����.c	/^int mirror(char *p){$/;"	f
main	c\the 12th\��������.c	/^void main()$/;"	f
strmcpy	c\the 12th\��������.c	/^    void strmcpy(char *s,char *t, int m){$/;"	f
main	c\the 13th\calca.c	/^int main(void)$/;"	f
fact	c\the 13th\Բ����.c	/^double fact(int n){$/;"	f
main	c\the 13th\Բ����.c	/^int main(void)$/;"	f
multi	c\the 13th\Բ����.c	/^double multi(int n){$/;"	f
countdigit	c\the 13th\���в���.c	/^int countdigit(int number, int digit){$/;"	f
main	c\the 13th\���в���.c	/^int main(void)$/;"	f
fact	c\the 13th\���Һ���.c	/^double fact(int n){$/;"	f
funcos	c\the 13th\���Һ���.c	/^double funcos(double e,double x){$/;"	f
main	c\the 13th\���Һ���.c	/^int main(void)$/;"	f
main	c\the 13th\����.c	/^void main()$/;"	f
fib	c\the 13th\����X.c	/^long fib(int n){$/;"	f
main	c\the 13th\����X.c	/^int main(void)$/;"	f
main	c\the 3rd\1.c	/^int main(void)$/;"	f
fact	c\the 3rd\2.c	/^double fact(int n)$/;"	f
main	c\the 3rd\2.c	/^int main(void)$/;"	f
main	c\the 3rd\3.c	/^int main(void)$/;"	f
main	c\the 3rd\4.c	/^int main(void)$/;"	f
fact	c\the 3rd\5.c	/^double fact(int n)$/;"	f
main	c\the 3rd\5.c	/^int main(void)$/;"	f
main	c\the 4th\1.c	/^int main(void)$/;"	f
main	c\the 4th\2.c	/^int main(void)$/;"	f
main	c\the 4th\3.c	/^int main(void)$/;"	f
main	c\the 4th\4.c	/^int main(void)$/;"	f
main	c\the 4th\5.c	/^int main(void)$/;"	f
main	c\the 4th\6.c	/^int main(void)$/;"	f
main	c\the 5th\1.c	/^int main(void)$/;"	f
search	c\the 5th\1.c	/^int search(int n){$/;"	f
fact	c\the 5th\2.c	/^	double fact(int n){$/;"	f
main	c\the 5th\2.c	/^	int main(void)$/;"	f
main	c\the 5th\3.c	/^int main(void)$/;"	f
main	c\the 5th\4.c	/^int main(void)$/;"	f
main	c\the 5th\5.c	/^int main(void)$/;"	f
main	c\the 5th\6.c	/^int main(void)$/;"	f
main	c\the 5th\7.c	/^int main(void)$/;"	f
main	c\the 8th\1.c	/^int main(void)   $/;"	f
main	c\the 8th\2.c	/^int main(void)$/;"	f
main	c\the 8th\3.c	/^int main(void)$/;"	f
main	c\the 8th\4.c	/^int main(void)$/;"	f
main	c\the 8th\5.c	/^int main(void)$/;"	f
main	c\�༭1.c	/^int main(){$/;"	f
$	test.cpp	/^struct \$$/;"	s	file:
main	test.cpp	/^int main() {$/;"	f
test	test.cpp	/^namespace test$/;"	n	file:
main	tests.c	/^int main() {$/;"	f
main	testss.cpp	/^int main() {$/;"	f
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
